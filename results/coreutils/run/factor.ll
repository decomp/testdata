; ModuleID = 'coreutils-8.27/src/factor.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.primes_dtab = type { i64, i64 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.tokenbuffer = type { i64, i8* }
%struct.factors = type { [2 x i64], [26 x i64], [26 x i8], i8 }
%struct.__mpz_struct = type { i32, i32, i64* }
%struct.mp_factors = type { [1 x %struct.__mpz_struct]*, i64*, i64 }
%struct.mbuiter_multi = type { i8, %struct.__mbstate_t, i8, %struct.mbchar }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.mbchar = type { i8*, i64, i8, i32, [24 x i8] }
%struct.mbiter_multi = type { i8*, i8, %struct.__mbstate_t, i8, %struct.mbchar }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%union.anon.32 = type { i32, [4092 x i8] }

@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"Usage: %s [NUMBER]...\0A  or:  %s OPTION\0A\00", align 1
@.str.2 = private unnamed_addr constant [135 x i8] c"Print the prime factors of each specified integer NUMBER.  If none\0Aare specified on the command line, read them from standard input.\0A\0A\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"factor\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.24 = private unnamed_addr constant [39 x i8] c"http://www.gnu.org/software/coreutils/\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.26 = private unnamed_addr constant [69 x i8] c"Report %s translation bugs to <http://translationproject.org/team/>\0A\00", align 1
@.str.27 = private unnamed_addr constant [31 x i8] c"Full documentation at: <%s%s>\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@lbuf.0 = internal unnamed_addr global i8* null, align 8
@lbuf.1 = internal unnamed_addr global i8* null, align 8
@long_options = internal constant [4 x %struct.option] [%struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16
@dev_debug = internal unnamed_addr global i1 false, align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"Torbjorn Granlund\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"Torbj\C3\B6rn Granlund\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"Niels Moller\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"Niels M\C3\B6ller\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"Paul Rubin\00", align 1
@optind = external local_unnamed_addr global i32, align 4
@stdin = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.35 = private unnamed_addr constant [4 x i8] c"\0A\09 \00", align 1
@.str.36 = private unnamed_addr constant [37 x i8] c"[using single-precision arithmetic] \00", align 1
@lbuf_putc.line_buffered = internal unnamed_addr global i32 -1, align 4
@.str.31 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.37 = private unnamed_addr constant [35 x i8] c"%s is not a valid positive integer\00", align 1
@.str.38 = private unnamed_addr constant [40 x i8] c"[using arbitrary-precision arithmetic] \00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"%Zd:\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c" %Zd\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"[trial division] \00", align 1
@primes_diff = internal unnamed_addr constant [675 x i8] calign 16
@.str.53 = private unnamed_addr constant [20 x i8] c"[is number prime?] \00", align 1
@.str.55 = private unnamed_addr constant [21 x i8] c"[pollard-rho (%lu)] \00", align 1
@.str.56 = private unnamed_addr constant [44 x i8] c"[composite factor--restarting pollard-rho] \00", align 1
@.str.43 = private unnamed_addr constant [50 x i8] c"Lucas prime test failure.  This should not happen\00", align 1
@primes_dtab = internal unnamed_addr constant [675 x %struct.primes_dtab] [%struct.primes_dtab { i64 -6148914691236517205, i64 6148914691236517205 }, %struct.primes_dtab { i64 -3689348814741910323, i64 3689348814741910323 }, %struct.primes_dtab { i64 7905747460161236407, i64 2635249153387078802 }, %struct.primes_dtab { i64 3353953467947191203, i64 1676976733973595601 }, %struct.primes_dtab { i64 5675921253449092805, i64 1418980313362273201 }, %struct.primes_dtab { i64 -1085102592571150095, i64 1085102592571150095 }, %struct.primes_dtab { i64 -8737931403336103397, i64 970881267037344821 }, %struct.primes_dtab { i64 -3208129404123400281, i64 802032351030850070 }, %struct.primes_dtab { i64 3816567739388183093, i64 636094623231363848 }, %struct.primes_dtab { i64 -1190112520884487201, i64 595056260442243600 }, %struct.primes_dtab { i64 1495681951922396077, i64 498560650640798692 }, %struct.primes_dtab { i64 -8098570568945656807, i64 449920587163647600 }, %struct.primes_dtab { i64 -9008875012741874045, i64 428994048225803525 }, %struct.primes_dtab { i64 5887258746928580303, i64 392483916461905353 }, %struct.primes_dtab { i64 2436362424829563421, i64 348051774975651917 }, %struct.primes_dtab { i64 -3751880150584993549, i64 312656679215416129 }, %struct.primes_dtab { i64 5745707170499696405, i64 302405640552615600 }, %struct.primes_dtab { i64 -1101298153654301589, i64 275324538413575397 }, %struct.primes_dtab { i64 1818693077689674103, i64 259813296812810586 }, %struct.primes_dtab { i64 9097024474706080249, i64 252695124297391118 }, %struct.primes_dtab { i64 -7238595775759444305, i64 233503089540627235 }, %struct.primes_dtab { i64 -6667497857967307813, i64 222249928598910260 }, %struct.primes_dtab { i64 -829067149380204567, i64 207266787345051141 }, %struct.primes_dtab { i64 -6656041676080766047, i64 190172619316593315 }, %struct.primes_dtab { i64 4200743699953660269, i64 182641030432767837 }, %struct.primes_dtab { i64 -2686419039860614313, i64 179094602657374287 }, %struct.primes_dtab { i64 8619973866219416643, i64 172399477324388332 }, %struct.primes_dtab { i64 -6430974998173972123, i64 169236184162472950 }, %struct.primes_dtab { i64 -7999030616033345391, i64 163245522776190722 }, %struct.primes_dtab { i64 9150747060186627967, i64 145249953336295682 }, %struct.primes_dtab { i64 281629680514649643, i64 140814840257324821 }, %struct.primes_dtab { i64 -2154364271382137415, i64 134647766961383588 }, %struct.primes_dtab { i64 4246732448623781667, i64 132710389019493177 }, %struct.primes_dtab { i64 -2352269378526721347, i64 123803651501406386 }, %struct.primes_dtab { i64 8062815290495565607, i64 122163868037811600 }, %struct.primes_dtab { i64 6579730370240349621, i64 117495185182863386 }, %struct.primes_dtab { i64 2263404180823257867, i64 113170209041162893 }, %struct.primes_dtab { i64 -8284465901366565097, i64 110459545351554201 }, %struct.primes_dtab { i64 -8636914855320657115, i64 106628578460748853 }, %struct.primes_dtab { i64 -1339707670157676933, i64 103054436165975148 }, %struct.primes_dtab { i64 3770881385233444253, i64 101915713114417412 }, %struct.primes_dtab { i64 2124755861893246783, i64 96579811904238490 }, %struct.primes_dtab { i64 8124213711219232577, i64 95578984837873324 }, %struct.primes_dtab { i64 -3932808381196960243, i64 93638294790403815 }, %struct.primes_dtab { i64 2780916192016515319, i64 92697206400550510 }, %struct.primes_dtab { i64 -4546117022904723621, i64 87425327363552377 }, %struct.primes_dtab { i64 7527595115280579359, i64 82720825442643729 }, %struct.primes_dtab { i64 1950316554048586955, i64 81263189752024456 }, %struct.primes_dtab { i64 2094390156840385773, i64 80553467570784068 }, %struct.primes_dtab { i64 7204522363551799129, i64 79170575423646144 }, %struct.primes_dtab { i64 7255204782128442895, i64 77183029597111094 }, %struct.primes_dtab { i64 -1148137597948727279, i64 76542506529915151 }, %struct.primes_dtab { i64 2939720171109091891, i64 73493004277727297 }, %struct.primes_dtab { i64 -71777214294589695, i64 71777214294589695 }, %struct.primes_dtab { i64 -3016007586195858249, i64 70139711306880424 }, %struct.primes_dtab { i64 -8091880299991550523, i64 68575256779589411 }, %struct.primes_dtab { i64 -3063112484564316689, i64 68069166323651481 }, %struct.primes_dtab { i64 -1265300135019788739, i64 66594743948409933 }, %struct.primes_dtab { i64 -4201393668033492183, i64 65646776063023315 }, %struct.primes_dtab { i64 5149444458738708755, i64 65182841249857072 }, %struct.primes_dtab { i64 2707201348701401773, i64 62958170900032599 }, %struct.primes_dtab { i64 -1141655170685607429, i64 60087114246610917 }, %struct.primes_dtab { i64 9134400602415662215, i64 59314289626075728 }, %struct.primes_dtab { i64 6365010734698503433, i64 58935284580541698 }, %struct.primes_dtab { i64 -1396598920407032299, i64 58191621683626345 }, %struct.primes_dtab { i64 3455281367280943203, i64 55730344633563600 }, %struct.primes_dtab { i64 9196002980365592497, i64 54738112978366622 }, %struct.primes_dtab { i64 -8505703319289706797, i64 53160645745560667 }, %struct.primes_dtab { i64 -2695656010771309835, i64 52856000211202153 }, %struct.primes_dtab { i64 8779186981255537313, i64 52257065364616293 }, %struct.primes_dtab { i64 5600822016808749655, i64 51383688227603207 }, %struct.primes_dtab { i64 -8695604154636927601, i64 50263607830271257 }, %struct.primes_dtab { i64 3511310534137743069, i64 49455077945602015 }, %struct.primes_dtab { i64 -1265475846745246285, i64 48672147951740241 }, %struct.primes_dtab { i64 -3612286698507092353, i64 48163822646761231 }, %struct.primes_dtab { i64 -5785354182500167859, i64 47420935922132523 }, %struct.primes_dtab { i64 185861401246443845, i64 46465350311610961 }, %struct.primes_dtab { i64 3220129888178724721, i64 46001855545410353 }, %struct.primes_dtab { i64 2074694932495450793, i64 45102063749901104 }, %struct.primes_dtab { i64 1849076971589024267, i64 44025642180691053 }, %struct.primes_dtab { i64 -3549136033184022995, i64 43816494236839790 }, %struct.primes_dtab { i64 8046375605237577039, i64 42799870240625409 }, %struct.primes_dtab { i64 7540585914657253201, i64 42602180308798040 }, %struct.primes_dtab { i64 -3067454025924367353, i64 42019918163347497 }, %struct.primes_dtab { i64 -2831554395061511309, i64 41640505809728107 }, %struct.primes_dtab { i64 205420312624827969, i64 41084062524965593 }, %struct.primes_dtab { i64 686202733595322489, i64 40364866682077793 }, %struct.primes_dtab { i64 3041111821262312197, i64 40014629227135686 }, %struct.primes_dtab { i64 8127723090792113455, i64 39841779856824085 }, %struct.primes_dtab { i64 -3199542333983883685, i64 39500522641776341 }, %struct.primes_dtab { i64 8010277176057592351, i64 38510947961815347 }, %struct.primes_dtab { i64 2386334448960373207, i64 37878324586672590 }, %struct.primes_dtab { i64 1051952818867347139, i64 37569743530976683 }, %struct.primes_dtab { i64 -5951755101938352325, i64 36967422993405915 }, %struct.primes_dtab { i64 -476754817014362169, i64 36673447462643243 }, %struct.primes_dtab { i64 5436172123882971989, i64 36241147492553146 }, %struct.primes_dtab { i64 1805727346946616377, i64 35406418567580713 }, %struct.primes_dtab { i64 7195288319381928355, i64 35271021173440825 }, %struct.primes_dtab { i64 -4534966657677209547, i64 34097493666745936 }, %struct.primes_dtab { i64 -5227139545566691957, i64 33723480939139948 }, %struct.primes_dtab { i64 5133295029488295333, i64 33118032448311582 }, %struct.primes_dtab { i64 -294885784482035461, i64 32765087164670606 }, %struct.primes_dtab { i64 6386658317259721737, i64 32419585366800617 }, %struct.primes_dtab { i64 1873749835858413299, i64 32306031652731263 }, %struct.primes_dtab { i64 8184343991108570561, i64 31970093715267853 }, %struct.primes_dtab { i64 8107768264083584867, i64 31425458387920871 }, %struct.primes_dtab { i64 -5039414063981361487, i64 31107494222107169 }, %struct.primes_dtab { i64 -1447407297937143449, i64 30795899956109435 }, %struct.primes_dtab { i64 -7519887351179434519, i64 30693417759916059 }, %struct.primes_dtab { i64 7810235958720518559, i64 30390023185682951 }, %struct.primes_dtab { i64 -8335641286162391187, i64 30092567820080834 }, %struct.primes_dtab { i64 5112468778937331161, i64 29897478239399597 }, %struct.primes_dtab { i64 -8046237318096250301, i64 29800878955912038 }, %struct.primes_dtab { i64 -3537331272454604985, i64 29234142747558718 }, %struct.primes_dtab { i64 -28778071877862015, i64 28778071877862015 }, %struct.primes_dtab { i64 -5995909037955359701, i64 28688559990217032 }, %struct.primes_dtab { i64 -1796205373483310281, i64 28511196404496988 }, %struct.primes_dtab { i64 -423738378415992763, i64 28249225227732850 }, %struct.primes_dtab { i64 -4702660097698337893, i64 27992024391061535 }, %struct.primes_dtab { i64 3544230707051608253, i64 27907328401981167 }, %struct.primes_dtab { i64 7016889276180750689, i64 27409723735081057 }, %struct.primes_dtab { i64 7711120491668837677, i64 27247775588935822 }, %struct.primes_dtab { i64 -108033640255985661, i64 27008410063996415 }, %struct.primes_dtab { i64 -1842004835146105733, i64 26695722248494285 }, %struct.primes_dtab { i64 4578792394900801685, i64 26314898821268975 }, %struct.primes_dtab { i64 -650449367902311411, i64 26017974716092456 }, %struct.primes_dtab { i64 7799457855921701935, i64 25656111368163493 }, %struct.primes_dtab { i64 3501582781529460967, i64 25373788271952615 }, %struct.primes_dtab { i64 8027982755134170485, i64 25166090141486427 }, %struct.primes_dtab { i64 -5691282339385355573, i64 24961764646426998 }, %struct.primes_dtab { i64 8416482154761154775, i64 24827380987496031 }, %struct.primes_dtab { i64 73688724661955599, i64 24562908220651866 }, %struct.primes_dtab { i64 -7212993719706773155, i64 24368222026036395 }, %struct.primes_dtab { i64 8193166224591101769, i64 24240136759145271 }, %struct.primes_dtab { i64 8635666926574042369, i64 23987963684927895 }, %struct.primes_dtab { i64 -6490962985833115187, i64 23863834506739394 }, %struct.primes_dtab { i64 1757948926973591323, i64 23439319026314550 }, %struct.primes_dtab { i64 3332912354597459765, i64 23145224684704581 }, %struct.primes_dtab { i64 -6384534413644838631, i64 22801908620160137 }, %struct.primes_dtab { i64 2229076349227541379, i64 22745677032934095 }, %struct.primes_dtab { i64 4044353146489304861, i64 22468628591607249 }, %struct.primes_dtab { i64 5536264624794968711, i64 22414026821032261 }, %struct.primes_dtab { i64 -8944551842270290445, i64 22305615566758829 }, %struct.primes_dtab { i64 -8633699276959355883, i64 22251802260204525 }, %struct.primes_dtab { i64 -505691434678569353, i64 21986584116459537 }, %struct.primes_dtab { i64 -5428057165886397955, i64 21625725760503577 }, %struct.primes_dtab { i64 -6199139198632848151, i64 21524788884141833 }, %struct.primes_dtab { i64 858986918449804499, i64 21474672961245112 }, %struct.primes_dtab { i64 -4809406044709906273, i64 21375137976488472 }, %struct.primes_dtab { i64 4964004106494246501, i64 21033915705484095 }, %struct.primes_dtab { i64 -3999237364447814255, i64 20938415520669184 }, %struct.primes_dtab { i64 -1399696322693703237, i64 20890989890950794 }, %struct.primes_dtab { i64 -2682784651080645049, i64 20796780240935232 }, %struct.primes_dtab { i64 -6467546433781298141, i64 20338196332645591 }, %struct.primes_dtab { i64 -1984391788390270097, i64 20248895799900715 }, %struct.primes_dtab { i64 -2348497341266613209, i64 20072626848432591 }, %struct.primes_dtab { i64 -5182562113281154975, i64 19856559821000593 }, %struct.primes_dtab { i64 -6654215044731940711, i64 19687026759561954 }, %struct.primes_dtab { i64 1725094026021722149, i64 19603341204792297 }, %struct.primes_dtab { i64 -175312245684673669, i64 19479138409408185 }, %struct.primes_dtab { i64 -309703992842972535, i64 19356499552685783 }, %struct.primes_dtab { i64 -8832308692996403721, i64 19076260676018150 }, %struct.primes_dtab { i64 -7618068355877991965, i64 18997676697950104 }, %struct.primes_dtab { i64 -6381780447199414991, i64 18881007240234955 }, %struct.primes_dtab { i64 -9120160345699737625, i64 18765762028188760 }, %struct.primes_dtab { i64 -5286453397511112673, i64 18614272526447579 }, %struct.primes_dtab { i64 -6660810297427721747, i64 18502250826188115 }, %struct.primes_dtab { i64 6965519813759503633, i64 18282204235589248 }, %struct.primes_dtab { i64 7775675932353384541, i64 18210013893099261 }, %struct.primes_dtab { i64 -8073844805568655565, i64 18102791043875909 }, %struct.primes_dtab { i64 7497942008412795221, i64 18067330140753723 }, %struct.primes_dtab { i64 -4902432469637649993, i64 17892089305246897 }, %struct.primes_dtab { i64 -2982193862835910087, i64 17857448280454551 }, %struct.primes_dtab { i64 1881958490676816623, i64 17754325383743553 }, %struct.primes_dtab { i64 8370495880920635433, i64 17585075380085368 }, %struct.primes_dtab { i64 -2755603063341959661, i64 17551611868420125 }, %struct.primes_dtab { i64 -7980259688814970963, i64 17386186685871396 }, %struct.primes_dtab { i64 5917535022704569239, i64 17353475139896097 }, %struct.primes_dtab { i64 -4935237422900778075, i64 17256074905247475 }, %struct.primes_dtab { i64 4836542834413267903, i64 16970325734783396 }, %struct.primes_dtab { i64 -5833296705251874709, i64 16908106392034419 }, %struct.primes_dtab { i64 -6210797638723801459, i64 16877167496532069 }, %struct.primes_dtab { i64 -4439325829953802759, i64 16815628143764404 }, %struct.primes_dtab { i64 -4900177709516680529, i64 16724156005176384 }, %struct.primes_dtab { i64 -3759210244056229635, i64 16633673646266502 }, %struct.primes_dtab { i64 -1403736120201711627, i64 16514542590608372 }, %struct.primes_dtab { i64 -7523249141370413749, i64 16426308168931034 }, %struct.primes_dtab { i64 8610659102608444377, i64 16339011579902171 }, %struct.primes_dtab { i64 2852754513571068799, i64 16026710750399262 }, %struct.primes_dtab { i64 -1551894340979901567, i64 15998910731751562 }, %struct.primes_dtab { i64 -3568802593795914973, i64 15861344861315177 }, %struct.primes_dtab { i64 -7892244902586238565, i64 15752983837497482 }, %struct.primes_dtab { i64 -8528299969725161035, i64 15619597014148646 }, %struct.primes_dtab { i64 6884505159775342347, i64 15540643701524474 }, %struct.primes_dtab { i64 -943211557834268775, i64 15462484554660143 }, %struct.primes_dtab { i64 -8171247166705646511, i64 15359487155461741 }, %struct.primes_dtab { i64 -6006977666212096363, i64 15207538395473661 }, %struct.primes_dtab { i64 6745111842892974913, i64 15157554703130280 }, %struct.primes_dtab { i64 5399782811437464823, i64 15083192210719175 }, %struct.primes_dtab { i64 -6874376554726586363, i64 15009555796346258 }, %struct.primes_dtab { i64 1168843247562424879, i64 14985169840543908 }, %struct.primes_dtab { i64 -5457969548082211715, i64 14912485104049758 }, %struct.primes_dtab { i64 2171073962238033697, i64 14769210627469616 }, %struct.primes_dtab { i64 2754557494723904451, i64 14651901567680342 }, %struct.primes_dtab { i64 8710561218830743637, i64 14445375155606540 }, %struct.primes_dtab { i64 -7644076903100908801, i64 14422786609624356 }, %struct.primes_dtab { i64 -690135397925220949, i64 14377820790108769 }, %struct.primes_dtab { i64 715544766241642809, i64 14310895324832856 }, %struct.primes_dtab { i64 -8273171819270201693, i64 14288725076459761 }, %struct.primes_dtab { i64 -9045589229667906575, i64 14222624574949538 }, %struct.primes_dtab { i64 4069343235322552893, i64 14178896290322483 }, %struct.primes_dtab { i64 -990999297896906073, i64 14157132827098658 }, %struct.primes_dtab { i64 -6901650996208087789, i64 14113805718216948 }, %struct.primes_dtab { i64 7286393982109686423, i64 13985401117293064 }, %struct.primes_dtab { i64 -8071323296445208807, i64 13964227156479600 }, %struct.primes_dtab { i64 -597746793646956081, i64 13901088224347815 }, %struct.primes_dtab { i64 8864195903163884465, i64 13553816365694012 }, %struct.primes_dtab { i64 -6531253936851077529, i64 13494326315808011 }, %struct.primes_dtab { i64 7241656996161287925, i64 13435356208091443 }, %struct.primes_dtab { i64 -8081303522515770259, i64 13357526483497140 }, %struct.primes_dtab { i64 -6935659315776428985, i64 13185664098434275 }, %struct.primes_dtab { i64 -7383934462435902847, i64 13092082380205501 }, %struct.primes_dtab { i64 -6455712261916624529, i64 12963277634370731 }, %struct.primes_dtab { i64 -7536406303414624101, i64 12926940486131430 }, %struct.primes_dtab { i64 4001742941112638909, i64 12908848197137544 }, %struct.primes_dtab { i64 6539390083352723113, i64 12872815124710084 }, %struct.primes_dtab { i64 3589359513994909279, i64 12819141121410390 }, %struct.primes_dtab { i64 -2473164029232655849, i64 12748268191920906 }, %struct.primes_dtab { i64 6496406768894266627, i64 12713124792356686 }, %struct.primes_dtab { i64 -2145560735345433051, i64 12695625652931556 }, %struct.primes_dtab { i64 -5525172830850633349, i64 12643416088903051 }, %struct.primes_dtab { i64 -2834102080665097665, i64 12540274693208396 }, %struct.primes_dtab { i64 7535638193514030201, i64 12455600319857901 }, %struct.primes_dtab { i64 -7600108313578244125, i64 12438802477214802 }, %struct.primes_dtab { i64 7517637463798243631, i64 12405342349502052 }, %struct.primes_dtab { i64 9155234298503263025, i64 12388679700275051 }, %struct.primes_dtab { i64 -1235548832800371843, i64 12355488328003718 }, %struct.primes_dtab { i64 -7026745074108174765, i64 12306033404742862 }, %struct.primes_dtab { i64 5310611298519956951, i64 12208301835678061 }, %struct.primes_dtab { i64 3355054568888736571, i64 12112110356999048 }, %struct.primes_dtab { i64 -5120748681467380429, i64 12048820426982071 }, %struct.primes_dtab { i64 7651274275550300087, i64 11955116055547343 }, %struct.primes_dtab { i64 -2619937828415817531, i64 11908808310980988 }, %struct.primes_dtab { i64 -4418666320296170767, i64 11878135269613362 }, %struct.primes_dtab { i64 -8673164468267544153, i64 11832420829832938 }, %struct.primes_dtab { i64 5579934072072959455, i64 11772012810280505 }, %struct.primes_dtab { i64 4004035473669609867, i64 11742039512227594 }, %struct.primes_dtab { i64 -572444876258244477, i64 11682548495066213 }, %struct.primes_dtab { i64 -7283142796000296753, i64 11653028473600474 }, %struct.primes_dtab { i64 8663154699613126933, i64 11550872932817502 }, %struct.primes_dtab { i64 -4528151418468365887, i64 11522013787451312 }, %struct.primes_dtab { i64 1503748272343466871, i64 11478994445369976 }, %struct.primes_dtab { i64 4574425659049167865, i64 11464725962529242 }, %struct.primes_dtab { i64 2904818967589724805, i64 11436295147991042 }, %struct.primes_dtab { i64 3999263230310100443, i64 11393912337065813 }, %struct.primes_dtab { i64 -8739728222460786947, i64 11379854456329149 }, %struct.primes_dtab { i64 -8401375143588677165, i64 11337888182980670 }, %struct.primes_dtab { i64 -5318792426872882323, i64 11268628023035767 }, %struct.primes_dtab { i64 2237655738573095881, i64 11132615614791521 }, %struct.primes_dtab { i64 5291098570751326591, i64 11092449833860223 }, %struct.primes_dtab { i64 -5698904137948661717, i64 11065833277570216 }, %struct.primes_dtab { i64 -6134177927446855091, i64 11052572842246585 }, %struct.primes_dtab { i64 -3813561976254189643, i64 10895891360726256 }, %struct.primes_dtab { i64 3782832609104846177, i64 10870208646853006 }, %struct.primes_dtab { i64 -3365797918098858741, i64 10857412639028576 }, %struct.primes_dtab { i64 5137887758388383013, i64 10793881845353745 }, %struct.primes_dtab { i64 4062356771607158665, i64 10718619450150814 }, %struct.primes_dtab { i64 2141235527998787187, i64 10706177639993935 }, %struct.primes_dtab { i64 -74510795450644467, i64 10644399350092066 }, %struct.primes_dtab { i64 3401151549489239557, i64 10595487693112895 }, %struct.primes_dtab { i64 8806287668845887835, i64 10559097924275644 }, %struct.primes_dtab { i64 5387754116223211881, i64 10522957258248460 }, %struct.primes_dtab { i64 4184338195230307615, i64 10487063145940620 }, %struct.primes_dtab { i64 7816768873102584337, i64 10380835156842741 }, %struct.primes_dtab { i64 6114428349726497479, i64 10345902453005917 }, %struct.primes_dtab { i64 -1445184202752846797, i64 10322744305377477 }, %struct.primes_dtab { i64 -360892142302869931, i64 10311204065796283 }, %struct.primes_dtab { i64 -2529897715828017351, i64 10242500873797641 }, %struct.primes_dtab { i64 -4695720054102762725, i64 10185943718227251 }, %struct.primes_dtab { i64 -1983303257513478945, i64 10118894170987137 }, %struct.primes_dtab { i64 -7072427274573514601, i64 10074682727312698 }, %struct.primes_dtab { i64 -8139738180873462137, i64 9987408810887683 }, %struct.primes_dtab { i64 -7919907853247679603, i64 9912275160510237 }, %struct.primes_dtab { i64 -5542915600080909725, i64 9880419964493600 }, %struct.primes_dtab { i64 5176130752911552431, i64 9859296672212480 }, %struct.primes_dtab { i64 -7879015087542787663, i64 9848768859428484 }, %struct.primes_dtab { i64 8451891264459357693, i64 9827780540069020 }, %struct.primes_dtab { i64 -4908659945106320281, i64 9817319890212640 }, %struct.primes_dtab { i64 -4550652587797062495, i64 9765348900852065 }, %struct.primes_dtab { i64 -9063260896814687643, i64 9703705456975040 }, %struct.primes_dtab { i64 2843913349591299515, i64 9673174658473807 }, %struct.primes_dtab { i64 -6393199854087523639, i64 9642835375697622 }, %struct.primes_dtab { i64 -7785653247060219869, i64 9552948769399042 }, %struct.primes_dtab { i64 6680145293117788997, i64 9543064704453984 }, %struct.primes_dtab { i64 -4656643450110363979, i64 9464722459573910 }, %struct.primes_dtab { i64 7043989920509285471, i64 9455020027529242 }, %struct.primes_dtab { i64 -1318292404659425635, i64 9349591522407274 }, %struct.primes_dtab { i64 736378363730699635, i64 9321245110515185 }, %struct.primes_dtab { i64 -6582154780201344789, i64 9283716192103448 }, %struct.primes_dtab { i64 -6719687003268005255, i64 9255767222132238 }, %struct.primes_dtab { i64 -4452343837520282363, i64 9237227878672784 }, %struct.primes_dtab { i64 2768395808960913199, i64 9227986029869710 }, %struct.primes_dtab { i64 -2127407828770297765, i64 9209557700304319 }, %struct.primes_dtab { i64 -3403153680430752685, i64 9172920971511462 }, %struct.primes_dtab { i64 493864243916864545, i64 9145634146608602 }, %struct.primes_dtab { i64 -7061999704587376445, i64 9100515083231155 }, %struct.primes_dtab { i64 5309462069515218405, i64 9091544639580853 }, %struct.primes_dtab { i64 -8748406826521400889, i64 9046956387302379 }, %struct.primes_dtab { i64 -6649094308107680563, i64 8985262578523892 }, %struct.primes_dtab { i64 3818109413220542191, i64 8941708227682768 }, %struct.primes_dtab { i64 3798121302755084093, i64 8915777705997849 }, %struct.primes_dtab { i64 -2747953225780855839, i64 8864365244454373 }, %struct.primes_dtab { i64 -5100971957012338805, i64 8855854092035310 }, %struct.primes_dtab { i64 -5453589407512598633, i64 8838880725304049 }, %struct.primes_dtab { i64 7205621428505023513, i64 8830418417285568 }, %struct.primes_dtab { i64 -8533486658204847365, i64 8788348772610553 }, %struct.primes_dtab { i64 6859637185154901951, i64 8738391318668664 }, %struct.primes_dtab { i64 34920480972474305, i64 8730120243118576 }, %struct.primes_dtab { i64 5588609641870672049, i64 8664511072667708 }, %struct.primes_dtab { i64 -2129469283027944485, i64 8656379199300587 }, %struct.primes_dtab { i64 -5118820419143548951, i64 8632074905806996 }, %struct.primes_dtab { i64 -2696791637118678027, i64 8615947722423891 }, %struct.primes_dtab { i64 -7135954660338412641, i64 8607906707283971 }, %struct.primes_dtab { i64 -2973070224606230567, i64 8567925719326312 }, %struct.primes_dtab { i64 6700922766248032401, i64 8536207345538894 }, %struct.primes_dtab { i64 4893170295825663531, i64 8465692553331597 }, %struct.primes_dtab { i64 -8013406299836605037, i64 8373465308084226 }, %struct.primes_dtab { i64 -8082465572848725153, i64 8358289113597440 }, %struct.primes_dtab { i64 8552354007964753709, i64 8335627688074808 }, %struct.primes_dtab { i64 -1387035686766994651, i64 8305602914772423 }, %struct.primes_dtab { i64 -2053303207131729259, i64 8246197619002928 }, %struct.primes_dtab { i64 -3336726819942996161, i64 8238831654180237 }, %struct.primes_dtab { i64 -4342345461845137429, i64 8224139132282457 }, %struct.primes_dtab { i64 6883725020842302691, i64 8194910739097979 }, %struct.primes_dtab { i64 -4581171995367656621, i64 8137072815928342 }, %struct.primes_dtab { i64 4089339915855400821, i64 8129900429135985 }, %struct.primes_dtab { i64 -3424780465950475487, i64 8115593521209657 }, %struct.primes_dtab { i64 -2409964811032637607, i64 8087130238364555 }, %struct.primes_dtab { i64 -3863572545389976049, i64 8065913455928968 }, %struct.primes_dtab { i64 -5373931548730039459, i64 8044807707679699 }, %struct.primes_dtab { i64 4946971854333950281, i64 8030798464827841 }, %struct.primes_dtab { i64 -8676121292355380275, i64 7989061963494825 }, %struct.primes_dtab { i64 191571552474698935, i64 7982148019779122 }, %struct.primes_dtab { i64 -5084121920015105739, i64 7906877014020382 }, %struct.primes_dtab { i64 -8462315686656840053, i64 7886594302569282 }, %struct.primes_dtab { i64 -5539539121665021267, i64 7879856503079688 }, %struct.primes_dtab { i64 -7914729988165964413, i64 7859712004137005 }, %struct.primes_dtab { i64 -1231875295437005361, i64 7846339461382199 }, %struct.primes_dtab { i64 1017427547552923933, i64 7826365750407107 }, %struct.primes_dtab { i64 -147822917503366293, i64 7780153552808752 }, %struct.primes_dtab { i64 -388025748290062087, i64 7760514965801241 }, %struct.primes_dtab { i64 -1169869111772424315, i64 7747477561406783 }, %struct.primes_dtab { i64 -8205433788557333073, i64 7740975272223899 }, %struct.primes_dtab { i64 -4895452382893200387, i64 7721533726960883 }, %struct.primes_dtab { i64 2227793162265800425, i64 7708626859051212 }, %struct.primes_dtab { i64 3252593890445660831, i64 7689347258736786 }, %struct.primes_dtab { i64 -9089478208032744637, i64 7651075932687495 }, %struct.primes_dtab { i64 5975920814941902737, i64 7632082777703579 }, %struct.primes_dtab { i64 2047946411815051335, i64 7613183687044800 }, %struct.primes_dtab { i64 499583548980234061, i64 7569447711821728 }, %struct.primes_dtab { i64 -2856562580853015367, i64 7557043864690516 }, %struct.primes_dtab { i64 5435268687022716271, i64 7538514129019023 }, %struct.primes_dtab { i64 7749282890663670931, i64 7501725934814783 }, %struct.primes_dtab { i64 -3723744851523046901, i64 7477399300247082 }, %struct.primes_dtab { i64 -5922650543681918311, i64 7459257611690073 }, %struct.primes_dtab { i64 -7104640228630969819, i64 7447211979697033 }, %struct.primes_dtab { i64 -1849833305034397705, i64 7369853804917919 }, %struct.primes_dtab { i64 -219516986200430999, i64 7317232873347699 }, %struct.primes_dtab { i64 6646950057377760203, i64 7288322431335263 }, %struct.primes_dtab { i64 3465575786986788547, i64 7265358043997460 }, %struct.primes_dtab { i64 3358569605240866063, i64 7253930032917637 }, %struct.primes_dtab { i64 -7497382055850567075, i64 7236855266265026 }, %struct.primes_dtab { i64 -1677634114112354361, i64 7231181526346355 }, %struct.primes_dtab { i64 -5345732248188806315, i64 7214213560308780 }, %struct.primes_dtab { i64 -5135619327228948453, i64 7152673157700485 }, %struct.primes_dtab { i64 -790269622609710625, i64 7119546149637032 }, %struct.primes_dtab { i64 8330558160552983009, i64 7114054791249345 }, %struct.primes_dtab { i64 -4291749196144767279, i64 7070427011770621 }, %struct.primes_dtab { i64 2283815468048106505, i64 7048813172987983 }, %struct.primes_dtab { i64 -2822260348553044715, i64 7038055732052480 }, %struct.primes_dtab { i64 -6536578891291686919, i64 7005979519069332 }, %struct.primes_dtab { i64 -4843402769636621977, i64 6968924848398017 }, %struct.primes_dtab { i64 5963776123190253985, i64 6942696301734870 }, %struct.primes_dtab { i64 7978095406079723339, i64 6937474266156281 }, %struct.primes_dtab { i64 4419460277516595543, i64 6927053726515040 }, %struct.primes_dtab { i64 3549841427887199375, i64 6906306279936185 }, %struct.primes_dtab { i64 -2590950979348072995, i64 6890827072734236 }, %struct.primes_dtab { i64 3417082297664423091, i64 6875417097916344 }, %struct.primes_dtab { i64 -3597355375743879809, i64 6865182014778396 }, %struct.primes_dtab { i64 8472193726675826049, i64 6860075892045203 }, %struct.primes_dtab { i64 575390457553509965, i64 6849886399446547 }, %struct.primes_dtab { i64 -5741113383444247261, i64 6834658789814580 }, %struct.primes_dtab { i64 -1751316301050371173, i64 6814460315371094 }, %struct.primes_dtab { i64 -8056416445323537113, i64 6804405781523257 }, %struct.primes_dtab { i64 8540033378761222569, i64 6799389632771674 }, %struct.primes_dtab { i64 7639218031260373343, i64 6784385462931059 }, %struct.primes_dtab { i64 2142769465506019737, i64 6759525127779242 }, %struct.primes_dtab { i64 13509149815971843, i64 6754574907985921 }, %struct.primes_dtab { i64 5155128041029374877, i64 6729932168445659 }, %struct.primes_dtab { i64 7414933503619154069, i64 6710347062098781 }, %struct.primes_dtab { i64 8831387101034939713, i64 6700597193501471 }, %struct.primes_dtab { i64 -2346676513894384593, i64 6666694641745410 }, %struct.primes_dtab { i64 -6934966083166284439, i64 6642687819124793 }, %struct.primes_dtab { i64 -3604688246744964371, i64 6614106874761402 }, %struct.primes_dtab { i64 -7514850595416610601, i64 6609367278290774 }, %struct.primes_dtab { i64 5111271597112943333, i64 6595189157565088 }, %struct.primes_dtab { i64 3839504389493990929, i64 6585770822459675 }, %struct.primes_dtab { i64 -4429061277776142789, i64 6581071735180004 }, %struct.primes_dtab { i64 -9128488110260668501, i64 6543719075455676 }, %struct.primes_dtab { i64 8647114765226362353, i64 6511381600321055 }, %struct.primes_dtab { i64 -5845478647255864259, i64 6502200942442563 }, %struct.primes_dtab { i64 -7623962112771270893, i64 6488478393847890 }, %struct.primes_dtab { i64 1067594799074737291, i64 6470271509543862 }, %struct.primes_dtab { i64 -632754959476211431, i64 6456683259961341 }, %struct.primes_dtab { i64 1972982763563482277, i64 6447656090076739 }, %struct.primes_dtab { i64 -6317641422951586625, i64 6407344242344408 }, %struct.primes_dtab { i64 9181839706934750839, i64 6389589218465379 }, %struct.primes_dtab { i64 7144372402727689649, i64 6367533335764429 }, %struct.primes_dtab { i64 2923011461903683687, i64 6354372743268877 }, %struct.primes_dtab { i64 -1553610277778906891, i64 6341266439913905 }, %struct.primes_dtab { i64 9106380344923467373, i64 6323875239530185 }, %struct.primes_dtab { i64 5123745449923425167, i64 6302269926105074 }, %struct.primes_dtab { i64 -6100794569460933709, i64 6276537622902195 }, %struct.primes_dtab { i64 -5959429003155744071, i64 6246780925739773 }, %struct.primes_dtab { i64 386776507463642949, i64 6238330765542628 }, %struct.primes_dtab { i64 273930725360519835, i64 6225698303648178 }, %struct.primes_dtab { i64 -3274312605875693399, i64 6213116899194864 }, %struct.primes_dtab { i64 -5296221034962722157, i64 6208934390343167 }, %struct.primes_dtab { i64 8051613201895899655, i64 6150965012907486 }, %struct.primes_dtab { i64 -5685850805791847799, i64 6146865735991186 }, %struct.primes_dtab { i64 3394053874737659115, i64 6126451037432597 }, %struct.primes_dtab { i64 6091886002480431587, i64 6110216652437744 }, %struct.primes_dtab { i64 -3508725716964271313, i64 6102131681676993 }, %struct.primes_dtab { i64 -2599672855959067531, i64 6074001999904363 }, %struct.primes_dtab { i64 -2019982169202657247, i64 6066012520128099 }, %struct.primes_dtab { i64 3817610859465636953, i64 6050096449232388 }, %struct.primes_dtab { i64 -1151038261378152355, i64 6026378331822787 }, %struct.primes_dtab { i64 4559058365788014387, i64 6014588873071259 }, %struct.primes_dtab { i64 -1228185298834185801, i64 5991147799191150 }, %struct.primes_dtab { i64 1352242672934920099, i64 5983374659004071 }, %struct.primes_dtab { i64 -4866978446122785551, i64 5971752694629184 }, %struct.primes_dtab { i64 5684136642847780781, i64 5933336787941316 }, %struct.primes_dtab { i64 3761503440487103183, i64 5914313585671545 }, %struct.primes_dtab { i64 4604297863960186065, i64 5910523573761471 }, %struct.primes_dtab { i64 -5627521223634058303, i64 5880377454163070 }, %struct.primes_dtab { i64 -1172240138733993005, i64 5832040491213895 }, %struct.primes_dtab { i64 -3861759179308314721, i64 5824674478594743 }, %struct.primes_dtab { i64 -8335669773919873119, i64 5820998445474771 }, %struct.primes_dtab { i64 3635997653007195493, i64 5799039318990742 }, %struct.primes_dtab { i64 -7032567947774428997, i64 5788121767715579 }, %struct.primes_dtab { i64 -6665338739262649017, i64 5780866209247744 }, %struct.primes_dtab { i64 8730959730172863019, i64 5759208265285529 }, %struct.primes_dtab { i64 1965966492118624697, i64 5748440035434575 }, %struct.primes_dtab { i64 -1123892396160109455, i64 5734144878367905 }, %struct.primes_dtab { i64 -7783025518836162883, i64 5727023928503431 }, %struct.primes_dtab { i64 5541449907555981749, i64 5712834956243280 }, %struct.primes_dtab { i64 -2967593709797014917, i64 5674175353340372 }, %struct.primes_dtab { i64 -8834929992880258659, i64 5670686773350615 }, %struct.primes_dtab { i64 -8167087796834256503, i64 5663722466597958 }, %struct.primes_dtab { i64 3792365305119791219, i64 5660246724059389 }, %struct.primes_dtab { i64 2227595203031266551, i64 5639481526661434 }, %struct.primes_dtab { i64 7162861218072729803, i64 5591616875934995 }, %struct.primes_dtab { i64 -4392348028456742675, i64 5588229043838095 }, %struct.primes_dtab { i64 9131333549640924099, i64 5578090134172830 }, %struct.primes_dtab { i64 -6520113887809805295, i64 5567987948599321 }, %struct.primes_dtab { i64 -1039331467846847289, i64 5557922287951055 }, %struct.primes_dtab { i64 -9165084100419641805, i64 5551232041441333 }, %struct.primes_dtab { i64 4327698144057422593, i64 5541226816974932 }, %struct.primes_dtab { i64 1030049353860695467, i64 5537899751939222 }, %struct.primes_dtab { i64 7432774234904805871, i64 5518020961325022 }, %struct.primes_dtab { i64 -2303776224323451621, i64 5511426373979549 }, %struct.primes_dtab { i64 -2965537898125381921, i64 5491736848380336 }, %struct.primes_dtab { i64 -307354260079659295, i64 5488468929993915 }, %struct.primes_dtab { i64 2670427501622741379, i64 5472187503325289 }, %struct.primes_dtab { i64 306260796954561189, i64 5468942802760021 }, %struct.primes_dtab { i64 6221489665461793301, i64 5443123066895707 }, %struct.primes_dtab { i64 -8676660807303667009, i64 5439912731851828 }, %struct.primes_dtab { i64 3021216082515388847, i64 5414365739274890 }, %struct.primes_dtab { i64 -5761567296388626435, i64 5404847369970568 }, %struct.primes_dtab { i64 445988860506231513, i64 5373359765135319 }, %struct.primes_dtab { i64 8824913807370472649, i64 5348432610527559 }, %struct.primes_dtab { i64 1371366279127380609, i64 5336055560806928 }, %struct.primes_dtab { i64 4130663581948830541, i64 5329888492837200 }, %struct.primes_dtab { i64 3861937468506908727, i64 5326810301388839 }, %struct.primes_dtab { i64 -7624512332744674781, i64 5320664572745760 }, %struct.primes_dtab { i64 -4791154917962613435, i64 5317597023265941 }, %struct.primes_dtab { i64 1976248147684724235, i64 5284085956376268 }, %struct.primes_dtab { i64 -4460115886355610365, i64 5272004593800957 }, %struct.primes_dtab { i64 2553437089097932807, i64 5253985780036898 }, %struct.primes_dtab { i64 -4311408481259383403, i64 5245022483283921 }, %struct.primes_dtab { i64 8849416210013201399, i64 5230151424357684 }, %struct.primes_dtab { i64 -501809983302951815, i64 5227187326072414 }, %struct.primes_dtab { i64 -5310030773552961787, i64 5221269197200552 }, %struct.primes_dtab { i64 -7490243355162652069, i64 5212417087795860 }, %struct.primes_dtab { i64 -2167140789229927555, i64 5209473051033479 }, %struct.primes_dtab { i64 -7993415743245441453, i64 5200660860927417 }, %struct.primes_dtab { i64 -8551779864365209619, i64 5186039942004372 }, %struct.primes_dtab { i64 -4307177388382308905, i64 5183125617788578 }, %struct.primes_dtab { i64 -1704683714456497349, i64 5165708225625749 }, %struct.primes_dtab { i64 -5326426521143724203, i64 5151282902460081 }, %struct.primes_dtab { i64 -7815282585512447489, i64 5148407500337580 }, %struct.primes_dtab { i64 -1529955394924978119, i64 5134078506459658 }, %struct.primes_dtab { i64 1493332206687881639, i64 5114151392766717 }, %struct.primes_dtab { i64 8536660971835696181, i64 5105658475978287 }, %struct.primes_dtab { i64 -1178102814771055135, i64 5100012185156082 }, %struct.primes_dtab { i64 -5570173341605920361, i64 5091566125782376 }, %struct.primes_dtab { i64 2667182770227902671, i64 5080348133767433 }, %struct.primes_dtab { i64 -3266346764770126819, i64 5071967026040569 }, %struct.primes_dtab { i64 4501552424245893875, i64 5063613525585932 }, %struct.primes_dtab { i64 720930418841340771, i64 5041471460428956 }, %struct.primes_dtab { i64 -4708417106256020121, i64 5024991575513361 }, %struct.primes_dtab { i64 8708590858647525865, i64 5022255397143901 }, %struct.primes_dtab { i64 -7620507002438076939, i64 5016791970005317 }, %struct.primes_dtab { i64 -7051843914387476925, i64 4997763227772839 }, %struct.primes_dtab { i64 419130782307709585, i64 4989652170329876 }, %struct.primes_dtab { i64 3982423268007006685, i64 4984259409270346 }, %struct.primes_dtab { i64 -8280892122600809771, i64 4973508782342828 }, %struct.primes_dtab { i64 3625859079828363063, i64 4960135540120879 }, %struct.primes_dtab { i64 -6454133155920916369, i64 4949488616503770 }, %struct.primes_dtab { i64 1319389410040302781, i64 4941533370937463 }, %struct.primes_dtab { i64 -1430745060544469101, i64 4933603657049893 }, %struct.primes_dtab { i64 -5444266397718054319, i64 4904744502448697 }, %struct.primes_dtab { i64 783509172230827783, i64 4896932326442673 }, %struct.primes_dtab { i64 -8521035137258776695, i64 4894333795094070 }, %struct.primes_dtab { i64 -8142145836186168853, i64 4881382395795065 }, %struct.primes_dtab { i64 -8992362191481402831, i64 4863365165755220 }, %struct.primes_dtab { i64 -7923792358235522435, i64 4858241789230853 }, %struct.primes_dtab { i64 6330002896710745427, i64 4850576932345398 }, %struct.primes_dtab { i64 -1578666661110448411, i64 4827726792386692 }, %struct.primes_dtab { i64 -3826384527975849969, i64 4825201170209142 }, %struct.primes_dtab { i64 3157073861819323209, i64 4812612594236773 }, %struct.primes_dtab { i64 -2450295352655466825, i64 4795098537486236 }, %struct.primes_dtab { i64 -2596243907543645021, i64 4790117910597131 }, %struct.primes_dtab { i64 -2724162309353941051, i64 4787631475138736 }, %struct.primes_dtab { i64 -2067678018098947929, i64 4775237917087639 }, %struct.primes_dtab { i64 7550937024755496109, i64 4757994344521421 }, %struct.primes_dtab { i64 4515435936620477721, i64 4753090459600502 }, %struct.primes_dtab { i64 6147333586918894033, i64 4743312952869517 }, %struct.primes_dtab { i64 8753586770580370795, i64 4721459962556834 }, %struct.primes_dtab { i64 -8390886654852797833, i64 4716631059501291 }, %struct.primes_dtab { i64 -329658433791082107, i64 4709406197015458 }, %struct.primes_dtab { i64 5671938404904314799, i64 4707002825646734 }, %struct.primes_dtab { i64 -3319755624786883365, i64 4702203434542327 }, %struct.primes_dtab { i64 -7793737633585608471, i64 4695022670834703 }, %struct.primes_dtab { i64 4368842211300837587, i64 4692633954136238 }, %struct.primes_dtab { i64 -9038577111439729577, i64 4678352542153069 }, %struct.primes_dtab { i64 -2892965437452802749, i64 4673611369067532 }, %struct.primes_dtab { i64 9128046033953075327, i64 4650048922034169 }, %struct.primes_dtab { i64 3838254595432170429, i64 4624403127026711 }, %struct.primes_dtab { i64 -8511044628859743135, i64 4610533385081117 }, %struct.primes_dtab { i64 -1608272216268956661, i64 4608229846042855 }, %struct.primes_dtab { i64 -7766323247404046313, i64 4603629666510993 }, %struct.primes_dtab { i64 -4012959774818948059, i64 4596746592003376 }, %struct.primes_dtab { i64 8147044222651021179, i64 4589884069099166 }, %struct.primes_dtab { i64 -4601363915924068707, i64 4587601112586309 }, %struct.primes_dtab { i64 1575783452037766515, i64 4580765848946995 }, %struct.primes_dtab { i64 715272615355001137, i64 4555876530923574 }, %struct.primes_dtab { i64 -9120915423263448997, i64 4553627270725636 }, %struct.primes_dtab { i64 2259805719653351529, i64 4546892796083202 }, %struct.primes_dtab { i64 -982799770192725927, i64 4529031199044819 }, %struct.primes_dtab { i64 -7584013192353743089, i64 4522369226209745 }, %struct.primes_dtab { i64 1848732600885093171, i64 4509103904597788 }, %struct.primes_dtab { i64 7918624318961075541, i64 4506900579943696 }, %struct.primes_dtab { i64 5944900932268923563, i64 4500303506638095 }, %struct.primes_dtab { i64 -6250623812862419217, i64 4487167130554500 }, %struct.primes_dtab { i64 250307164557241311, i64 4469770795665023 }, %struct.primes_dtab { i64 -3256884579737046047, i64 4467605733521325 }, %struct.primes_dtab { i64 -4423112358346519635, i64 4463281895405166 }, %struct.primes_dtab { i64 -4514750361601298813, i64 4456811808096050 }, %struct.primes_dtab { i64 1159306574341004809, i64 4441787641153275 }, %struct.primes_dtab { i64 4406451013998937877, i64 4437513609263784 }, %struct.primes_dtab { i64 7069995204013711295, i64 4435379676294674 }, %struct.primes_dtab { i64 -5264189355006412623, i64 4416266237421487 }, %struct.primes_dtab { i64 -8241975393085653031, i64 4391036437445739 }, %struct.primes_dtab { i64 6965168149417759931, i64 4380608899004880 }, %struct.primes_dtab { i64 -5673565820156814903, i64 4374376114230389 }, %struct.primes_dtab { i64 7913867450441879219, i64 4372302458807668 }, %struct.primes_dtab { i64 -3668411389451343795, i64 4361963602201360 }, %struct.primes_dtab { i64 248514396644160823, i64 4359901695511593 }, %struct.primes_dtab { i64 -4897673621079216015, i64 4349621333107651 }, %struct.primes_dtab { i64 -6112684932273304165, i64 4347571075585564 }, %struct.primes_dtab { i64 -876144439898737227, i64 4337348712369986 }, %struct.primes_dtab { i64 -2611736716705062133, i64 4331238336160965 }, %struct.primes_dtab { i64 -3368121776424790227, i64 4329205368155257 }, %struct.primes_dtab { i64 -3044943706852080049, i64 4319069087733446 }, %struct.primes_dtab { i64 -4140048576336873391, i64 4317047524855968 }, %struct.primes_dtab { i64 -7050506665576123277, i64 4306968030284742 }, %struct.primes_dtab { i64 6829897316169449281, i64 4300942894313255 }, %struct.primes_dtab { i64 -7619960607594706567, i64 4292935553574482 }, %struct.primes_dtab { i64 3465958616114135767, i64 4263171729537682 }, %struct.primes_dtab { i64 4249088616471257105, i64 4253341958429686 }, %struct.primes_dtab { i64 3804986389944698939, i64 4251381441278993 }, %struct.primes_dtab { i64 8788607431760448597, i64 4241605903359289 }, %struct.primes_dtab { i64 1752800561513829325, i64 4233817781434370 }, %struct.primes_dtab { i64 4879106729557832355, i64 4227995432892402 }, %struct.primes_dtab { i64 -4403933412520643011, i64 4218327023487205 }, %struct.primes_dtab { i64 -483119008990343529, i64 4201034860785595 }, %struct.primes_dtab { i64 -2840219635638245723, i64 4195302268298738 }, %struct.primes_dtab { i64 3782231037113502985, i64 4183883890612282 }, %struct.primes_dtab { i64 1969432979595319693, i64 4172527499142626 }, %struct.primes_dtab { i64 1259533508989438071, i64 4170640758243172 }, %struct.primes_dtab { i64 1013511721230608105, i64 4153736562420525 }, %struct.primes_dtab { i64 -7864858728075851105, i64 4148132240546334 }, %struct.primes_dtab { i64 -3518599352635230133, i64 4144404420065053 }, %struct.primes_dtab { i64 -3286227236824183079, i64 4138825235294940 }, %struct.primes_dtab { i64 8303721452852899215, i64 4133261051693827 }, %struct.primes_dtab { i64 -3894358378426519935, i64 4116657905313446 }, %struct.primes_dtab { i64 8295479824358343979, i64 4114821341447591 }, %struct.primes_dtab { i64 -2668680981061920443, i64 4105663047787569 }, %struct.primes_dtab { i64 8402743639522012307, i64 4092909712382860 }, %struct.primes_dtab { i64 662169851526910561, i64 4087468219301917 }, %struct.primes_dtab { i64 3695882972483317293, i64 4083848588379356 }, %struct.primes_dtab { i64 2249204687898641943, i64 4082041175859604 }, %struct.primes_dtab { i64 3597176270840553731, i64 4078431146077725 }, %struct.primes_dtab { i64 4819602366300186347, i64 4056904348737530 }, %struct.primes_dtab { i64 1184095245003998477, i64 4055120702068487 }, %struct.primes_dtab { i64 -5642010081741904079, i64 4044451671499572 }, %struct.primes_dtab { i64 8667990536934683111, i64 4039138181237037 }, %struct.primes_dtab { i64 4512066355362951639, i64 4025036891492374 }, %struct.primes_dtab { i64 -9024479893171782385, i64 4018023104706937 }, %struct.primes_dtab { i64 -4450171672339328419, i64 4012778784796508 }, %struct.primes_dtab { i64 5570491910157783347, i64 4007548136804160 }, %struct.primes_dtab { i64 -3963994127936287547, i64 3991937691778738 }, %struct.primes_dtab { i64 -1579330903011147723, i64 3978163483655283 }, %struct.primes_dtab { i64 -5340370185598604833, i64 3976448388383175 }, %struct.primes_dtab { i64 1326989558608440715, i64 3973022630564193 }, %struct.primes_dtab { i64 5773287293449644569, i64 3967895047044429 }, %struct.primes_dtab { i64 -2435239918567547773, i64 3966188792455289 }, %struct.primes_dtab { i64 2150865800305837777, i64 3961078821926036 }, %struct.primes_dtab { i64 636913102266188679, i64 3955982001653345 }, %struct.primes_dtab { i64 5542313006524333505, i64 3947516386413342 }, %struct.primes_dtab { i64 -4533822544297068681, i64 3942454386345277 }, %struct.primes_dtab { i64 2355489170784911835, i64 3932369233363792 }, %struct.primes_dtab { i64 -121592401931744865, i64 3922335546185318 }, %struct.primes_dtab { i64 2961794536723541649, i64 3907380655308102 }, %struct.primes_dtab { i64 -4538453655229832517, i64 3905726037202953 }, %struct.primes_dtab { i64 3237639581556127689, i64 3900770580188105 }, %struct.primes_dtab { i64 -202668643953707307, i64 3897473922186678 }, %struct.primes_dtab { i64 1615206384900689007, i64 3882707656011271 }, %struct.primes_dtab { i64 -1310149085293933273, i64 3876180725721696 }, %struct.primes_dtab { i64 3089241480878392399, i64 3856730937426207 }, %struct.primes_dtab { i64 -7329372723667342213, i64 3853508266912377 }, %struct.primes_dtab { i64 7965727029532543901, i64 3851898950450939 }, %struct.primes_dtab { i64 -1574111897798290551, i64 3848684346695086 }, %struct.primes_dtab { i64 7976035414241991999, i64 3843872488791321 }, %struct.primes_dtab { i64 -2555110353888117439, i64 3842271208854311 }, %struct.primes_dtab { i64 -4886681631826236923, i64 3832691475942146 }, %struct.primes_dtab { i64 4702636853335131697, i64 3829508838220791 }, %struct.primes_dtab { i64 8923626764698659103, i64 3818411110269002 }, %struct.primes_dtab { i64 4770120818895886933, i64 3794845520203569 }, %struct.primes_dtab { i64 -6600836567537620297, i64 3787054829338852 }, %struct.primes_dtab { i64 9005884281218462661, i64 3782395750196750 }, %struct.primes_dtab { i64 -3614641199143741143, i64 3773111898897433 }, %struct.primes_dtab { i64 -1256620950564754281, i64 3762338175343575 }, %struct.primes_dtab { i64 5264593287281947813, i64 3757739676860776 }, %struct.primes_dtab { i64 7211443149775049351, i64 3750100441900701 }, %struct.primes_dtab { i64 -5241104937592188565, i64 3740974259523332 }, %struct.primes_dtab { i64 8869993298771347341, i64 3739457545856385 }, %struct.primes_dtab { i64 -2880785837721301255, i64 3736427805085993 }, %struct.primes_dtab { i64 8564693030379004847, i64 3731892387964707 }, %struct.primes_dtab { i64 3968043312159295591, i64 3725862264938305 }, %struct.primes_dtab { i64 -8808441239150798603, i64 3721352445775580 }, %struct.primes_dtab { i64 -1905210330141534121, i64 3713860292673555 }, %struct.primes_dtab { i64 -8089244382494085927, i64 3712365480722389 }, %struct.primes_dtab { i64 5515847262740016741, i64 3709379463846682 }, %struct.primes_dtab { i64 7294361201795716019, i64 3698966126671255 }, %struct.primes_dtab { i64 964270018673781889, i64 3694521144343991 }, %struct.primes_dtab { i64 -5321105211900214729, i64 3690086832108331 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }, %struct.primes_dtab { i64 1, i64 0 }], align 16
@primes_diff8 = internal unnamed_addr constant [675 x i8] c"\1A\1A\1E\1E\1E\1E\22$ $\22 $$$&($$$\22,*(&.,02(*****($,200*.,4.(**,***20,.68@8.0680.*00240422.00**$.002.0:8><B@B>8@44,,,.*,0,...,6.*068<B<><<842.6:B<@>:84800*666066<B<<@B<<:668><426204*0,08:604066*<<BDHFFH>@<:228:@><<<<4,\1E(&&FFHN\5CZfdDBBB4,$,420**.442<>@BD<846462.0*,(88:8JLHH@<BH68<D>@8<@FHFNPRHB8:6..<<HHTNPPBB6<,0*.8@BFB<<<:2<266662BJLLP^VRH@><<266:,@B<<:<>B0,0.06..8::BD><PTZ\5CTRNPLF>FJHRZNDF><>6*$(,($$**02.8@F>B<6BB<6<<<LD@BBBFNJFBB>RJHBBJHN>BD@BHNHL`XV\5CNHRH66<FBB8>RPN>BBF<,.4042<<@BJXVXJL>NB><BBBF20.*,426BB<@<8<B@<<DB@B<8<>FFDFJFFR>BNH<BJ<BJ@BB<426(8HRPNRLJ<<26BBHHH>LH<<>@<BJRTPLJRB40,4,406JNNNTPT^FHRJTTNBBH>FBBB><BBD<FJNPJXNLB<<<4*4<HHHFNP\5CTDFFD>:0JRTZf`fdHBB>6:2*688\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00\00\00\00\00", align 16
@.str.49 = private unnamed_addr constant [24 x i8] c"factors->plarge[1] == 0\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"src/factor.c\00", align 1
@__PRETTY_FUNCTION__.factor_insert_large = private unnamed_addr constant [65 x i8] c"void factor_insert_large(struct factors *, uintmax_t, uintmax_t)\00", align 1
@binvert_table = internal unnamed_addr constant [128 x i8] c"\01\AB\CD\B79\A3\C5\EF\F1\1B=\A7)\135\DF\E1\8B\AD\97\19\83\A5\CF\D1\FB\1D\87\09\F3\15\BF\C1k\8Dw\F9c\85\AF\B1\DB\FDg\E9\D3\F5\9F\A1KmW\D9Ce\8F\91\BB\DDG\C9\B3\D5\7F\81+M7\B9#Eoq\9B\BD'\A9\93\B5_a\0B-\17\99\03%OQ{\9D\07\89s\95?A\EB\0D\F7y\E3\05/1[}\E7iSu\1F!\CB\ED\D7Y\C3\E5\0F\11;]\C7I3U\FF", align 16
@.str.44 = private unnamed_addr constant [10 x i8] c"(1) < (n)\00", align 1
@__PRETTY_FUNCTION__.prime_p = private unnamed_addr constant [25 x i8] c"_Bool prime_p(uintmax_t)\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"(s1) < (n)\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"b0 & 1\00", align 1
@__PRETTY_FUNCTION__.gcd2_odd = private unnamed_addr constant [76 x i8] c"uintmax_t gcd2_odd(uintmax_t *, uintmax_t, uintmax_t, uintmax_t, uintmax_t)\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"(a1 >> (W_TYPE_SIZE - 1)) == 0\00", align 1
@__PRETTY_FUNCTION__.mulredc2 = private unnamed_addr constant [109 x i8] c"uintmax_t mulredc2(uintmax_t *, uintmax_t, uintmax_t, uintmax_t, uintmax_t, uintmax_t, uintmax_t, uintmax_t)\00", align 1
@.str.47 = private unnamed_addr constant [31 x i8] c"(b1 >> (W_TYPE_SIZE - 1)) == 0\00", align 1
@.str.48 = private unnamed_addr constant [31 x i8] c"(m1 >> (W_TYPE_SIZE - 1)) == 0\00", align 1
@__PRETTY_FUNCTION__.factor_using_pollard_rho = private unnamed_addr constant [74 x i8] c"void factor_using_pollard_rho(uintmax_t, unsigned long, struct factors *)\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"a < n\00", align 1
@.str.32 = private unnamed_addr constant [7 x i8] c"-debug\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = local_unnamed_addr global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), align 8
@.str.15 = private unnamed_addr constant [5 x i8] c"8.27\00", align 1
@file_name = internal unnamed_addr global i8* null, align 8
@ignore_EPIPE = internal unnamed_addr global i8 0, align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.1.19 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.20 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = global i32 1, align 4
@program_name = local_unnamed_addr global i8* null, align 8
@.str.41 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.42 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.43 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external local_unnamed_addr global i8*, align 8
@program_invocation_name = external local_unnamed_addr global i8*, align 8
@.str.52 = private unnamed_addr constant [8 x i8] c"%s (%s)\00", align 1
@.str.1.55 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.2.56 = private unnamed_addr constant [11 x i8] c"//TRANSLIT\00", align 1
@quoting_style_args = local_unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.58, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.59, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.60, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.61, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.62, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.63, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.65, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.66, i32 0, i32 0), i8* null], align 16
@.str.57 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.58 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.59 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.60 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.61 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.62 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.63 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.64 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.65 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.66 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = local_unnamed_addr constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@quote_quoting_options = global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@.str.11.67 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.68 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.10.69 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.14.70 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.71 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.72 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal unnamed_addr global %struct.tokenbuffer* @slotvec0, align 8
@nslots = internal unnamed_addr global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@slotvec0 = internal global %struct.tokenbuffer { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8
@.str.85 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.86 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.87 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.88 = private unnamed_addr constant [203 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00", align 1
@.str.4.89 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.5.90 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.6.91 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.8.93 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.9.94 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.10.95 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.11.96 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.12.97 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.13.98 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.14.101 = private unnamed_addr constant [21 x i8] c"\0AReport bugs to: %s\0A\00", align 1
@.str.15.102 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.17.103 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.18.104 = private unnamed_addr constant [39 x i8] c"http://www.gnu.org/software/coreutils/\00", align 1
@.str.19 = private unnamed_addr constant [64 x i8] c"General help using GNU software: <http://www.gnu.org/gethelp/>\0A\00", align 1
@version_etc_copyright = constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16
@.str.1.115 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.116 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1.129 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.132 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@charset_aliases = internal global i8* null, align 8
@.str.3.133 = private unnamed_addr constant [16 x i8] c"CHARSETALIASDIR\00", align 1
@.str.4.134 = private unnamed_addr constant [15 x i8] c"/usr/local/lib\00", align 1
@.str.2.135 = private unnamed_addr constant [14 x i8] c"charset.alias\00", align 1
@.str.5.136 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6.137 = private unnamed_addr constant [10 x i8] c"%50s %50s\00", align 1
@.str.1.138 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.141 = private unnamed_addr constant [23 x i8] c"mbsinit (&iter->state)\00", align 1
@.str.1.142 = private unnamed_addr constant [15 x i8] c"./lib/mbiter.h\00", align 1
@__PRETTY_FUNCTION__.mbiter_multi_next = private unnamed_addr constant [46 x i8] c"void mbiter_multi_next(struct mbiter_multi *)\00", align 1
@.str.2.143 = private unnamed_addr constant [23 x i8] c"*iter->cur.ptr == '\5C0'\00", align 1
@.str.3.144 = private unnamed_addr constant [18 x i8] c"iter->cur.wc == 0\00", align 1
@.str.149 = private unnamed_addr constant [23 x i8] c"mbsinit (&iter->state)\00", align 1
@.str.1.150 = private unnamed_addr constant [16 x i8] c"./lib/mbuiter.h\00", align 1
@__PRETTY_FUNCTION__.mbuiter_multi_next = private unnamed_addr constant [48 x i8] c"void mbuiter_multi_next(struct mbuiter_multi *)\00", align 1
@.str.2.151 = private unnamed_addr constant [23 x i8] c"*iter->cur.ptr == '\5C0'\00", align 1
@.str.3.152 = private unnamed_addr constant [18 x i8] c"iter->cur.wc == 0\00", align 1
@mmalloca_results = internal unnamed_addr global [257 x i8*] zeroinitializer, align 16
@is_basic_table = local_unnamed_addr constant [8 x i32] [i32 6656, i32 -17, i32 -2, i32 2147483646, i32 0, i32 0, i32 0, i32 0], align 16

; Function Attrs: noreturn nounwind sspstrong uwtable
define void @usage(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %8, label %3

; <label>:3:                                      ; preds = %1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i32 5) #11
  %6 = load i8*, i8** @program_name, align 8
  %7 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %4, i32 1, i8* %5, i8* %6) #11
  br label %36

; <label>:8:                                      ; preds = %1
  %9 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 5) #11
  %10 = load i8*, i8** @program_name, align 8
  %11 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %9, i8* %10, i8* %10) #11
  %12 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.2, i64 0, i64 0), i32 5) #11
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %14 = tail call i32 @fputs_unlocked(i8* %12, %struct._IO_FILE* %13) #11
  %15 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 5) #11
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %17 = tail call i32 @fputs_unlocked(i8* %15, %struct._IO_FILE* %16) #11
  %18 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i32 5) #11
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %20 = tail call i32 @fputs_unlocked(i8* %18, %struct._IO_FILE* %19) #11
  %21 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0), i32 5) #11
  %22 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %21, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.24, i64 0, i64 0)) #11
  %23 = tail call i8* @setlocale(i32 5, i8* null) #11
  %24 = icmp eq i8* %23, null
  br i1 %24, label %31, label %25

; <label>:25:                                     ; preds = %8
  %26 = tail call i32 @strncmp(i8* nonnull %23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %31, label %28

; <label>:28:                                     ; preds = %25
  %29 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.26, i64 0, i64 0), i32 5) #11
  %30 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0)) #11
  br label %31

; <label>:31:                                     ; preds = %8, %25, %28
  %32 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i64 0, i64 0), i32 5) #11
  %33 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %32, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0)) #11
  %34 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0), i32 5) #11
  %35 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0)) #11
  br label %36

; <label>:36:                                     ; preds = %31, %3
  tail call void @exit(i32 %0) #16
  unreachable
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @dcgettext(i8*, i8*, i32) local_unnamed_addr #2

declare i32 @__fprintf_chk(%struct._IO_FILE*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @__printf_chk(i32, i8*, ...) local_unnamed_addr #3

declare i32 @fputs_unlocked(i8*, %struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @setlocale(i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define i32 @main(i32, i8**) local_unnamed_addr #6 {
  %3 = alloca %struct.tokenbuffer, align 8
  %4 = load i8*, i8** %1, align 8
  tail call void @set_program_name(i8* %4) #11
  %5 = tail call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0)) #11
  %6 = tail call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0)) #11
  %7 = tail call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0)) #11
  %8 = load i8*, i8** @lbuf.0, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %2
  %11 = tail call noalias i8* @xmalloc(i64 1024) #11
  store i8* %11, i8** @lbuf.0, align 8
  store i8* %11, i8** @lbuf.1, align 8
  br label %12

; <label>:12:                                     ; preds = %2, %10
  %13 = tail call i32 @atexit(void ()* nonnull @close_stdout) #11
  %14 = tail call i32 @atexit(void ()* nonnull @lbuf_flush) #11
  br label %15

; <label>:15:                                     ; preds = %17, %12
  %16 = tail call i32 @getopt_long(i32 %0, i8** %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %struct.option* getelementptr inbounds ([4 x %struct.option], [4 x %struct.option]* @long_options, i64 0, i64 0), i32* null) #11
  switch i32 %16, label %24 [
    i32 -1, label %25
    i32 128, label %17
    i32 -130, label %18
    i32 -131, label %19
  ]

; <label>:17:                                     ; preds = %15
  store i1 true, i1* @dev_debug, align 1
  br label %15

; <label>:18:                                     ; preds = %15
  tail call void @usage(i32 0) #17
  unreachable

; <label>:19:                                     ; preds = %15
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %21 = load i8*, i8** @Version, align 8
  %22 = tail call i8* @proper_name_utf8(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0)) #11
  %23 = tail call i8* @proper_name_utf8(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0)) #11
  tail call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i8* %21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i8* %22, i8* %23, i8* null) #11
  tail call void @exit(i32 0) #16
  unreachable

; <label>:24:                                     ; preds = %15
  tail call void @usage(i32 1) #17
  unreachable

; <label>:25:                                     ; preds = %15
  %26 = load i32, i32* @optind, align 4
  %27 = icmp slt i32 %26, %0
  br i1 %27, label %28, label %30

; <label>:28:                                     ; preds = %25
  %29 = sext i32 %26 to i64
  br label %54

; <label>:30:                                     ; preds = %25
  %31 = bitcast %struct.tokenbuffer* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %31) #11
  call void @init_tokenbuffer(%struct.tokenbuffer* nonnull %3) #11
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %33 = call i64 @readtoken(%struct._IO_FILE* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3, %struct.tokenbuffer* nonnull %3) #11
  %34 = icmp eq i64 %33, -1
  %35 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %3, i64 0, i32 1
  %36 = load i8*, i8** %35, align 8
  br i1 %34, label %50, label %37

; <label>:37:                                     ; preds = %30
  br label %38

; <label>:38:                                     ; preds = %37, %38
  %39 = phi i8* [ %47, %38 ], [ %36, %37 ]
  %40 = phi i8 [ %43, %38 ], [ 1, %37 ]
  %41 = call fastcc zeroext i1 @print_factors(i8* %39) #11
  %42 = zext i1 %41 to i8
  %43 = and i8 %42, %40
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %45 = call i64 @readtoken(%struct._IO_FILE* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3, %struct.tokenbuffer* nonnull %3) #11
  %46 = icmp eq i64 %45, -1
  %47 = load i8*, i8** %35, align 8
  br i1 %46, label %48, label %38

; <label>:48:                                     ; preds = %38
  %49 = icmp ne i8 %43, 0
  br label %50

; <label>:50:                                     ; preds = %30, %48
  %51 = phi i1 [ true, %30 ], [ %49, %48 ]
  %52 = phi i8* [ %36, %30 ], [ %47, %48 ]
  call void @free(i8* %52) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %31) #11
  %53 = zext i1 %51 to i8
  br label %65

; <label>:54:                                     ; preds = %54, %28
  %55 = phi i64 [ %29, %28 ], [ %61, %54 ]
  %56 = phi i8 [ 1, %28 ], [ %60, %54 ]
  %57 = getelementptr inbounds i8*, i8** %1, i64 %55
  %58 = load i8*, i8** %57, align 8
  %59 = tail call fastcc zeroext i1 @print_factors(i8* %58)
  %60 = select i1 %59, i8 %56, i8 0
  %61 = add nsw i64 %55, 1
  %62 = trunc i64 %61 to i32
  %63 = icmp eq i32 %62, %0
  br i1 %63, label %64, label %54

; <label>:64:                                     ; preds = %54
  br label %65

; <label>:65:                                     ; preds = %64, %50
  %66 = phi i8 [ %53, %50 ], [ %60, %64 ]
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  %69 = zext i8 %68 to i32
  ret i32 %69
}

; Function Attrs: nounwind
declare i8* @bindtextdomain(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @textdomain(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @atexit(void ()*) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal void @lbuf_flush() #6 {
  %1 = load i64, i64* bitcast (i8** @lbuf.1 to i64*), align 8
  %2 = load i8*, i8** @lbuf.0, align 8
  %3 = ptrtoint i8* %2 to i64
  %4 = sub i64 %1, %3
  %5 = tail call i64 @full_write(i32 1, i8* %2, i64 %4) #11
  %6 = icmp eq i64 %5, %4
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %0
  %8 = tail call i32* @__errno_location() #1
  %9 = load i32, i32* %8, align 4
  %10 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i32 5) #11
  tail call void (i32, i32, i8*, ...) @error(i32 1, i32 %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0), i8* %10) #11
  unreachable

; <label>:11:                                     ; preds = %0
  %12 = load i64, i64* bitcast (i8** @lbuf.0 to i64*), align 8
  store i64 %12, i64* bitcast (i8** @lbuf.1 to i64*), align 8
  ret void
}

; Function Attrs: nounwind
declare i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #7

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @print_factors(i8*) unnamed_addr #6 {
  %2 = alloca [21 x i8], align 16
  %3 = alloca %struct.factors, align 8
  %4 = alloca [1 x %struct.__mpz_struct], align 16
  %5 = alloca %struct.mp_factors, align 8
  br label %6

; <label>:6:                                      ; preds = %14, %1
  %7 = phi i8* [ %0, %1 ], [ %15, %14 ]
  %8 = load i8, i8* %7, align 1
  switch i8 %8, label %11 [
    i8 32, label %14
    i8 43, label %9
  ]

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds i8, i8* %7, i64 1
  br label %12

; <label>:11:                                     ; preds = %6
  br label %12

; <label>:12:                                     ; preds = %11, %9
  %13 = phi i8* [ %10, %9 ], [ %7, %11 ]
  br label %16

; <label>:14:                                     ; preds = %6
  %15 = getelementptr inbounds i8, i8* %7, i64 1
  br label %6

; <label>:16:                                     ; preds = %21, %12
  %17 = phi i3 [ 0, %21 ], [ -4, %12 ]
  %18 = phi i8* [ %22, %21 ], [ %13, %12 ]
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %16
  %22 = getelementptr inbounds i8, i8* %18, i64 1
  %23 = sext i8 %19 to i32
  %24 = add nsw i32 %23, -48
  %25 = icmp ugt i32 %24, 9
  br i1 %25, label %170, label %16

; <label>:26:                                     ; preds = %16
  %27 = icmp eq i3 %17, 0
  br i1 %27, label %28, label %171

; <label>:28:                                     ; preds = %26
  br label %29

; <label>:29:                                     ; preds = %28, %38
  %30 = phi i64 [ %51, %38 ], [ 0, %28 ]
  %31 = phi i64 [ %55, %38 ], [ 0, %28 ]
  %32 = phi i8* [ %33, %38 ], [ %13, %28 ]
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  %34 = load i8, i8* %32, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %57, label %36

; <label>:36:                                     ; preds = %29
  %37 = icmp ugt i64 %31, 1844674407370955161
  br i1 %37, label %174, label %38

; <label>:38:                                     ; preds = %36
  %39 = sext i8 %34 to i64
  %40 = add nsw i64 %39, 4294967248
  %41 = mul i64 %31, 10
  %42 = lshr i64 %30, 61
  %43 = lshr i64 %30, 63
  %44 = add nuw nsw i64 %42, %43
  %45 = mul i64 %30, 10
  %46 = shl i64 %30, 1
  %47 = icmp ult i64 %45, %46
  %48 = zext i1 %47 to i64
  %49 = add nuw nsw i64 %44, %48
  %50 = and i64 %40, 4294967295
  %51 = add i64 %50, %45
  %52 = icmp ult i64 %51, %50
  %53 = zext i1 %52 to i64
  %54 = add nuw nsw i64 %49, %53
  %55 = add i64 %54, %41
  %56 = icmp ult i64 %55, %54
  br i1 %56, label %174, label %29

; <label>:57:                                     ; preds = %29
  %58 = and i64 %31, 9223372036854775807
  %59 = icmp eq i64 %58, %31
  br i1 %59, label %60, label %175

; <label>:60:                                     ; preds = %57
  %61 = load i1, i1* @dev_debug, align 1
  br i1 %61, label %62, label %65

; <label>:62:                                     ; preds = %60
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %64 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %63, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.36, i64 0, i64 0)) #11
  br label %65

; <label>:65:                                     ; preds = %62, %60
  %66 = bitcast %struct.factors* %3 to i8*
  call void @llvm.lifetime.start(i64 256, i8* nonnull %66) #11
  tail call fastcc void @print_uintmaxes(i64 %31, i64 %30) #11
  %67 = load i8*, i8** @lbuf.1, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %68, i8** @lbuf.1, align 8
  store i8 58, i8* %67, align 1
  call fastcc void @factor(i64 %31, i64 %30, %struct.factors* nonnull %3) #11
  %69 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 3
  %70 = load i8, i8* %69, align 2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %86, label %72

; <label>:72:                                     ; preds = %65
  %73 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i64 0, i64 0
  %74 = ptrtoint [21 x i8]* %2 to i64
  br label %75

; <label>:75:                                     ; preds = %92, %72
  %76 = phi i8 [ %70, %72 ], [ %93, %92 ]
  %77 = phi i32 [ 0, %72 ], [ %94, %92 ]
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %92, label %82

; <label>:82:                                     ; preds = %75
  %83 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %78
  %84 = load i8*, i8** @lbuf.1, align 8
  br label %97

; <label>:85:                                     ; preds = %92
  br label %86

; <label>:86:                                     ; preds = %85, %65
  %87 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 1
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %118, label %112

; <label>:90:                                     ; preds = %97
  %91 = load i8, i8* %69, align 2
  br label %92

; <label>:92:                                     ; preds = %90, %75
  %93 = phi i8 [ %91, %90 ], [ %76, %75 ]
  %94 = add i32 %77, 1
  %95 = zext i8 %93 to i32
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %75, label %85

; <label>:97:                                     ; preds = %97, %82
  %98 = phi i8* [ %84, %82 ], [ %107, %97 ]
  %99 = phi i32 [ 0, %82 ], [ %108, %97 ]
  %100 = getelementptr inbounds i8, i8* %98, i64 1
  store i8* %100, i8** @lbuf.1, align 8
  store i8 32, i8* %98, align 1
  %101 = load i64, i64* %83, align 8
  call void @llvm.lifetime.start(i64 21, i8* nonnull %73) #11
  %102 = call i8* @umaxtostr(i64 %101, i8* nonnull %73) #11
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %74, %103
  %105 = add i64 %104, 20
  %106 = load i8*, i8** @lbuf.1, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %102, i64 %105, i32 1, i1 false) #11
  %107 = getelementptr inbounds i8, i8* %106, i64 %105
  store i8* %107, i8** @lbuf.1, align 8
  call void @llvm.lifetime.end(i64 21, i8* nonnull %73) #11
  %108 = add i32 %99, 1
  %109 = load i8, i8* %79, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp ult i32 %108, %110
  br i1 %111, label %97, label %90

; <label>:112:                                    ; preds = %86
  %113 = load i8*, i8** @lbuf.1, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** @lbuf.1, align 8
  store i8 32, i8* %113, align 1
  %115 = load i64, i64* %87, align 8
  %116 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 0
  %117 = load i64, i64* %116, align 8
  call fastcc void @print_uintmaxes(i64 %115, i64 %117) #11
  br label %118

; <label>:118:                                    ; preds = %112, %86
  %119 = load i8*, i8** @lbuf.1, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** @lbuf.1, align 8
  store i8 10, i8* %119, align 1
  %121 = ptrtoint i8* %120 to i64
  %122 = load i64, i64* bitcast (i8** @lbuf.0 to i64*), align 8
  %123 = sub i64 %121, %122
  %124 = load i32, i32* @lbuf_putc.line_buffered, align 4
  %125 = icmp eq i32 %124, -1
  br i1 %125, label %126, label %128

; <label>:126:                                    ; preds = %118
  %127 = call i32 @isatty(i32 0) #11
  store i32 %127, i32* @lbuf_putc.line_buffered, align 4
  br label %128

; <label>:128:                                    ; preds = %126, %118
  %129 = phi i32 [ %127, %126 ], [ %124, %118 ]
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %144, label %131

; <label>:131:                                    ; preds = %128
  %132 = load i64, i64* bitcast (i8** @lbuf.1 to i64*), align 8
  %133 = load i8*, i8** @lbuf.0, align 8
  %134 = ptrtoint i8* %133 to i64
  %135 = sub i64 %132, %134
  %136 = call i64 @full_write(i32 1, i8* %133, i64 %135) #11
  %137 = icmp eq i64 %136, %135
  br i1 %137, label %142, label %138

; <label>:138:                                    ; preds = %131
  %139 = tail call i32* @__errno_location() #1
  %140 = load i32, i32* %139, align 4
  %141 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i32 5) #11
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0), i8* %141) #11
  unreachable

; <label>:142:                                    ; preds = %131
  %143 = load i64, i64* bitcast (i8** @lbuf.0 to i64*), align 8
  store i64 %143, i64* bitcast (i8** @lbuf.1 to i64*), align 8
  br label %169

; <label>:144:                                    ; preds = %128
  %145 = icmp ugt i64 %123, 511
  br i1 %145, label %146, label %169

; <label>:146:                                    ; preds = %144
  %147 = load i64, i64* bitcast (i8** @lbuf.1 to i64*), align 8
  %148 = load i8*, i8** @lbuf.0, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 512
  br label %150

; <label>:150:                                    ; preds = %150, %146
  %151 = phi i8* [ %149, %146 ], [ %152, %150 ]
  %152 = getelementptr inbounds i8, i8* %151, i64 -1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 10
  br i1 %154, label %155, label %150

; <label>:155:                                    ; preds = %150
  store i8* %151, i8** @lbuf.1, align 8
  %156 = ptrtoint i8* %151 to i64
  %157 = ptrtoint i8* %148 to i64
  %158 = sub i64 %156, %157
  %159 = call i64 @full_write(i32 1, i8* %148, i64 %158) #11
  %160 = icmp eq i64 %159, %158
  br i1 %160, label %165, label %161

; <label>:161:                                    ; preds = %155
  %162 = tail call i32* @__errno_location() #1
  %163 = load i32, i32* %162, align 4
  %164 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i32 5) #11
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %163, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0), i8* %164) #11
  unreachable

; <label>:165:                                    ; preds = %155
  %166 = load i8*, i8** @lbuf.0, align 8
  %167 = sub i64 %147, %156
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %166, i8* %151, i64 %167, i32 1, i1 false) #11
  %168 = getelementptr inbounds i8, i8* %166, i64 %167
  store i8* %168, i8** @lbuf.1, align 8
  br label %169

; <label>:169:                                    ; preds = %142, %144, %165
  call void @llvm.lifetime.end(i64 256, i8* nonnull %66) #11
  br label %254

; <label>:170:                                    ; preds = %21
  br label %171

; <label>:171:                                    ; preds = %170, %26
  %172 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.37, i64 0, i64 0), i32 5) #11
  %173 = tail call i8* @quote(i8* %0) #11
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %172, i8* %173) #11
  br label %254

; <label>:174:                                    ; preds = %36, %38
  br label %175

; <label>:175:                                    ; preds = %174, %57
  %176 = load i1, i1* @dev_debug, align 1
  br i1 %176, label %177, label %180

; <label>:177:                                    ; preds = %175
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %179 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %178, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.38, i64 0, i64 0)) #11
  br label %180

; <label>:180:                                    ; preds = %177, %175
  %181 = bitcast [1 x %struct.__mpz_struct]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %181) #11
  %182 = bitcast %struct.mp_factors* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %182) #11
  %183 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %4, i64 0, i64 0
  %184 = call i32 @__gmpz_init_set_str(%struct.__mpz_struct* nonnull %183, i8* %0, i32 10) #11
  %185 = call i32 (i8*, ...) @__gmp_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0), %struct.__mpz_struct* nonnull %183) #11
  call fastcc void @mp_factor(%struct.__mpz_struct* nonnull %183, %struct.mp_factors* nonnull %5)
  %186 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %5, i64 0, i32 2
  %187 = load i64, i64* %186, align 8
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %216, label %189

; <label>:189:                                    ; preds = %180
  %190 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %5, i64 0, i32 1
  %191 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %5, i64 0, i32 0
  %192 = load i64*, i64** %190, align 8
  br label %193

; <label>:193:                                    ; preds = %189, %237
  %194 = phi i64 [ %187, %189 ], [ %238, %237 ]
  %195 = phi i64* [ %192, %189 ], [ %239, %237 ]
  %196 = phi i64 [ 0, %189 ], [ %241, %237 ]
  %197 = phi i32 [ 0, %189 ], [ %240, %237 ]
  %198 = getelementptr inbounds i64, i64* %195, i64 %196
  %199 = load i64, i64* %198, align 8
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %237, label %201

; <label>:201:                                    ; preds = %193
  br label %243

; <label>:202:                                    ; preds = %237
  %203 = icmp eq i64 %238, 0
  br i1 %203, label %216, label %204

; <label>:204:                                    ; preds = %202
  %205 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %5, i64 0, i32 0
  br label %206

; <label>:206:                                    ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %212, %206 ]
  %208 = phi i32 [ 0, %204 ], [ %211, %206 ]
  %209 = load [1 x %struct.__mpz_struct]*, [1 x %struct.__mpz_struct]** %205, align 8
  %210 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %209, i64 %207, i64 0
  call void @__gmpz_clear(%struct.__mpz_struct* %210) #11
  %211 = add i32 %208, 1
  %212 = zext i32 %211 to i64
  %213 = load i64, i64* %186, align 8
  %214 = icmp ult i64 %212, %213
  br i1 %214, label %206, label %215

; <label>:215:                                    ; preds = %206
  br label %216

; <label>:216:                                    ; preds = %215, %180, %202
  %217 = bitcast %struct.mp_factors* %5 to i8**
  %218 = load i8*, i8** %217, align 8
  call void @free(i8* %218) #11
  %219 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %5, i64 0, i32 1
  %220 = bitcast i64** %219 to i8**
  %221 = load i8*, i8** %220, align 8
  call void @free(i8* %221) #11
  call void @__gmpz_clear(%struct.__mpz_struct* nonnull %183) #11
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %223 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %222, i64 0, i32 5
  %224 = load i8*, i8** %223, align 8
  %225 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %222, i64 0, i32 6
  %226 = load i8*, i8** %225, align 8
  %227 = icmp ult i8* %224, %226
  br i1 %227, label %230, label %228

; <label>:228:                                    ; preds = %216
  %229 = call i32 @__overflow(%struct._IO_FILE* %222, i32 10) #11
  br label %232

; <label>:230:                                    ; preds = %216
  %231 = getelementptr inbounds i8, i8* %224, i64 1
  store i8* %231, i8** %223, align 8
  store i8 10, i8* %224, align 1
  br label %232

; <label>:232:                                    ; preds = %228, %230
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %234 = call i32 @fflush_unlocked(%struct._IO_FILE* %233) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %182) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %181) #11
  br label %254

; <label>:235:                                    ; preds = %243
  %236 = load i64, i64* %186, align 8
  br label %237

; <label>:237:                                    ; preds = %235, %193
  %238 = phi i64 [ %236, %235 ], [ %194, %193 ]
  %239 = phi i64* [ %250, %235 ], [ %195, %193 ]
  %240 = add i32 %197, 1
  %241 = zext i32 %240 to i64
  %242 = icmp ult i64 %241, %238
  br i1 %242, label %193, label %202

; <label>:243:                                    ; preds = %201, %243
  %244 = phi i32 [ %248, %243 ], [ 0, %201 ]
  %245 = load [1 x %struct.__mpz_struct]*, [1 x %struct.__mpz_struct]** %191, align 8
  %246 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %245, i64 %196, i64 0
  %247 = call i32 (i8*, ...) @__gmp_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0), %struct.__mpz_struct* %246) #11
  %248 = add i32 %244, 1
  %249 = zext i32 %248 to i64
  %250 = load i64*, i64** %190, align 8
  %251 = getelementptr inbounds i64, i64* %250, i64 %196
  %252 = load i64, i64* %251, align 8
  %253 = icmp ult i64 %249, %252
  br i1 %253, label %243, label %235

; <label>:254:                                    ; preds = %232, %171, %169
  %255 = phi i1 [ false, %171 ], [ true, %232 ], [ true, %169 ]
  ret i1 %255
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #7

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_uintmaxes(i64, i64) unnamed_addr #6 {
  %3 = alloca [21 x i8], align 16
  %4 = icmp eq i64 %0, 0
  br i1 %4, label %5, label %14

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %6) #11
  %7 = call i8* @umaxtostr(i64 %1, i8* nonnull %6) #11
  %8 = ptrtoint i8* %7 to i64
  %9 = ptrtoint [21 x i8]* %3 to i64
  %10 = sub i64 %9, %8
  %11 = add i64 %10, 20
  %12 = load i8*, i8** @lbuf.1, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %7, i64 %11, i32 1, i1 false) #11
  %13 = getelementptr inbounds i8, i8* %12, i64 %11
  store i8* %13, i8** @lbuf.1, align 8
  call void @llvm.lifetime.end(i64 21, i8* nonnull %6) #11
  br label %61

; <label>:14:                                     ; preds = %2
  %15 = urem i64 %0, 1000000000
  br label %33

; <label>:16:                                     ; preds = %55
  %17 = udiv i64 %0, 1000000000
  tail call fastcc void @print_uintmaxes(i64 %17, i64 %56)
  %18 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %18) #11
  %19 = call i8* @umaxtostr(i64 %58, i8* nonnull %18) #11
  %20 = ptrtoint i8* %19 to i64
  %21 = ptrtoint [21 x i8]* %3 to i64
  %22 = sub i64 %21, %20
  %23 = add i64 %22, 20
  %24 = icmp ult i64 %23, 9
  %25 = load i8*, i8** @lbuf.1, align 8
  br i1 %24, label %26, label %30

; <label>:26:                                     ; preds = %16
  %27 = sub i64 -11, %21
  %28 = add i64 %27, %20
  call void @llvm.memset.p0i8.i64(i8* %25, i8 48, i64 %28, i32 1, i1 false) #11
  %29 = getelementptr i8, i8* %25, i64 %28
  store i8* %29, i8** @lbuf.1, align 8
  br label %30

; <label>:30:                                     ; preds = %16, %26
  %31 = phi i8* [ %29, %26 ], [ %25, %16 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %19, i64 %23, i32 1, i1 false) #11
  %32 = getelementptr inbounds i8, i8* %31, i64 %23
  store i8* %32, i8** @lbuf.1, align 8
  call void @llvm.lifetime.end(i64 21, i8* nonnull %18) #11
  br label %61

; <label>:33:                                     ; preds = %14, %55
  %34 = phi i32 [ 64, %14 ], [ %59, %55 ]
  %35 = phi i64 [ %1, %14 ], [ %58, %55 ]
  %36 = phi i64 [ %15, %14 ], [ %57, %55 ]
  %37 = phi i64 [ 0, %14 ], [ %56, %55 ]
  %38 = phi i64 [ 0, %14 ], [ %42, %55 ]
  %39 = phi i64 [ 1000000000, %14 ], [ %43, %55 ]
  %40 = shl i64 %39, 63
  %41 = lshr i64 %38, 1
  %42 = or i64 %41, %40
  %43 = lshr i64 %39, 1
  %44 = shl i64 %37, 1
  %45 = icmp ugt i64 %36, %43
  br i1 %45, label %50, label %46

; <label>:46:                                     ; preds = %33
  %47 = icmp ne i64 %36, %43
  %48 = icmp ult i64 %35, %42
  %49 = or i1 %47, %48
  br i1 %49, label %55, label %50

; <label>:50:                                     ; preds = %46, %33
  %51 = or i64 %44, 1
  %52 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %36, i64 %43, i64 %35, i64 %42) #15
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = extractvalue { i64, i64 } %52, 1
  br label %55

; <label>:55:                                     ; preds = %46, %50
  %56 = phi i64 [ %51, %50 ], [ %44, %46 ]
  %57 = phi i64 [ %53, %50 ], [ %36, %46 ]
  %58 = phi i64 [ %54, %50 ], [ %35, %46 ]
  %59 = add nsw i32 %34, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %16, label %33

; <label>:61:                                     ; preds = %30, %5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @factor(i64, i64, %struct.factors*) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 3
  store i8 0, i8* %4, align 2
  %5 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 0, i64 1
  store i64 0, i64* %5, align 8
  %6 = icmp eq i64 %0, 0
  %7 = icmp ult i64 %1, 2
  %8 = and i1 %6, %7
  br i1 %8, label %542, label %9

; <label>:9:                                      ; preds = %3
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %35

; <label>:12:                                     ; preds = %9
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %12
  %15 = tail call i32 asm "bsfq $1,${0:q}", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %0) #15
  %16 = zext i32 %15 to i64
  %17 = lshr i64 %0, %16
  %18 = add i32 %15, 64
  br label %28

; <label>:19:                                     ; preds = %12
  %20 = tail call i32 asm "bsfq $1,${0:q}", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %1) #15
  %21 = sub i32 64, %20
  %22 = zext i32 %21 to i64
  %23 = shl i64 %0, %22
  %24 = zext i32 %20 to i64
  %25 = lshr i64 %1, %24
  %26 = or i64 %23, %25
  %27 = lshr i64 %0, %24
  br label %28

; <label>:28:                                     ; preds = %19, %14
  %29 = phi i32 [ %18, %14 ], [ %20, %19 ]
  %30 = phi i64 [ %17, %14 ], [ %26, %19 ]
  %31 = phi i64 [ 0, %14 ], [ %27, %19 ]
  %32 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 0
  store i64 2, i64* %32, align 8
  %33 = trunc i32 %29 to i8
  %34 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 0
  store i8 %33, i8* %34, align 1
  store i8 1, i8* %4, align 2
  br label %35

; <label>:35:                                     ; preds = %28, %9
  %36 = phi i64 [ %30, %28 ], [ %1, %9 ]
  %37 = phi i64 [ %31, %28 ], [ %0, %9 ]
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %184, label %39

; <label>:39:                                     ; preds = %35
  br label %40

; <label>:40:                                     ; preds = %39, %170
  %41 = phi i64 [ %173, %170 ], [ 0, %39 ]
  %42 = phi i64 [ %172, %170 ], [ %37, %39 ]
  %43 = phi i64 [ %171, %170 ], [ %36, %39 ]
  %44 = phi i64 [ %177, %170 ], [ 3, %39 ]
  %45 = getelementptr inbounds [675 x %struct.primes_dtab], [675 x %struct.primes_dtab]* @primes_dtab, i64 0, i64 %41, i32 0
  %46 = load i64, i64* %45, align 16
  %47 = mul i64 %46, %43
  %48 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %47, i64 %44) #15
  %49 = extractvalue { i64, i64 } %48, 1
  %50 = icmp ult i64 %42, %49
  br i1 %50, label %170, label %51

; <label>:51:                                     ; preds = %40
  %52 = getelementptr inbounds [675 x %struct.primes_dtab], [675 x %struct.primes_dtab]* @primes_dtab, i64 0, i64 %41, i32 1
  %53 = load i64, i64* %52, align 8
  br label %54

; <label>:54:                                     ; preds = %126, %51
  %55 = phi i64 [ %49, %51 ], [ %129, %126 ]
  %56 = phi i64 [ %47, %51 ], [ %127, %126 ]
  %57 = phi i64 [ %42, %51 ], [ %60, %126 ]
  %58 = phi i64 [ %43, %51 ], [ %56, %126 ]
  %59 = sub i64 %57, %55
  %60 = mul i64 %59, %46
  %61 = icmp ugt i64 %60, %53
  br i1 %61, label %167, label %62

; <label>:62:                                     ; preds = %54
  %63 = load i8, i8* %4, align 2
  %64 = zext i8 %63 to i32
  %65 = add nsw i32 %64, -1
  %66 = icmp eq i8 %63, 0
  br i1 %66, label %87, label %67

; <label>:67:                                     ; preds = %62
  %68 = zext i8 %63 to i64
  %69 = add nsw i64 %68, -1
  br label %70

; <label>:70:                                     ; preds = %75, %67
  %71 = phi i64 [ %69, %67 ], [ %76, %75 ]
  %72 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %71
  %73 = load i64, i64* %72, align 8
  %74 = icmp ugt i64 %73, %44
  br i1 %74, label %75, label %78

; <label>:75:                                     ; preds = %70
  %76 = add i64 %71, -1
  %77 = icmp sgt i64 %71, 0
  br i1 %77, label %70, label %85

; <label>:78:                                     ; preds = %70
  %79 = trunc i64 %71 to i32
  %80 = shl i64 %71, 32
  %81 = ashr exact i64 %80, 32
  %82 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %81
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, %44
  br i1 %84, label %163, label %87

; <label>:85:                                     ; preds = %75
  %86 = trunc i64 %76 to i32
  br label %87

; <label>:87:                                     ; preds = %85, %78, %62
  %88 = phi i32 [ %79, %78 ], [ %65, %62 ], [ %86, %85 ]
  %89 = icmp sgt i32 %65, %88
  br i1 %89, label %90, label %120

; <label>:90:                                     ; preds = %87
  %91 = zext i8 %63 to i64
  %92 = add nsw i64 %91, -1
  %93 = sext i32 %88 to i64
  %94 = sub nsw i64 %92, %93
  %95 = add nsw i64 %91, -2
  %96 = sub nsw i64 %95, %93
  %97 = and i64 %94, 3
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %114, label %99

; <label>:99:                                     ; preds = %90
  br label %100

; <label>:100:                                    ; preds = %100, %99
  %101 = phi i64 [ %92, %99 ], [ %110, %100 ]
  %102 = phi i64 [ %97, %99 ], [ %111, %100 ]
  %103 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %101
  %104 = load i64, i64* %103, align 8
  %105 = add nsw i64 %101, 1
  %106 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %105
  store i64 %104, i64* %106, align 8
  %107 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %101
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %105
  store i8 %108, i8* %109, align 1
  %110 = add i64 %101, -1
  %111 = add i64 %102, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %100

; <label>:113:                                    ; preds = %100
  br label %114

; <label>:114:                                    ; preds = %90, %113
  %115 = phi i64 [ %92, %90 ], [ %110, %113 ]
  %116 = icmp ult i64 %96, 3
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  br label %131

; <label>:118:                                    ; preds = %131
  br label %119

; <label>:119:                                    ; preds = %114, %118
  br label %120

; <label>:120:                                    ; preds = %119, %87
  %121 = add nsw i32 %88, 1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %122
  store i64 %44, i64* %123, align 8
  %124 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %122
  store i8 1, i8* %124, align 1
  %125 = add i8 %63, 1
  store i8 %125, i8* %4, align 2
  br label %126

; <label>:126:                                    ; preds = %163, %120
  %127 = mul i64 %56, %46
  %128 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %127, i64 %44) #15
  %129 = extractvalue { i64, i64 } %128, 1
  %130 = icmp ult i64 %60, %129
  br i1 %130, label %167, label %54

; <label>:131:                                    ; preds = %131, %117
  %132 = phi i64 [ %115, %117 ], [ %161, %131 ]
  %133 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %132
  %134 = load i64, i64* %133, align 8
  %135 = add nsw i64 %132, 1
  %136 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %135
  store i64 %134, i64* %136, align 8
  %137 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %132
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %135
  store i8 %138, i8* %139, align 1
  %140 = add i64 %132, -1
  %141 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %140
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %132
  store i64 %142, i64* %143, align 8
  %144 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %140
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %132
  store i8 %145, i8* %146, align 1
  %147 = add i64 %132, -2
  %148 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %147
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %140
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %147
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %140
  store i8 %152, i8* %153, align 1
  %154 = add i64 %132, -3
  %155 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %154
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %147
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %154
  %159 = load i8, i8* %158, align 1
  %160 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %147
  store i8 %159, i8* %160, align 1
  %161 = add i64 %132, -4
  %162 = icmp sgt i64 %161, %93
  br i1 %162, label %131, label %118

; <label>:163:                                    ; preds = %78
  %164 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %81
  %165 = load i8, i8* %164, align 1
  %166 = add i8 %165, 1
  store i8 %166, i8* %164, align 1
  br label %126

; <label>:167:                                    ; preds = %54, %126
  %168 = phi i64 [ %58, %54 ], [ %56, %126 ]
  %169 = phi i64 [ %57, %54 ], [ %60, %126 ]
  br label %170

; <label>:170:                                    ; preds = %167, %40
  %171 = phi i64 [ %43, %40 ], [ %168, %167 ]
  %172 = phi i64 [ %42, %40 ], [ %169, %167 ]
  %173 = add nuw nsw i64 %41, 1
  %174 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i64
  %177 = add i64 %176, %44
  %178 = icmp ne i64 %172, 0
  %179 = icmp ult i64 %173, 668
  %180 = and i1 %179, %178
  br i1 %180, label %40, label %181

; <label>:181:                                    ; preds = %170
  %182 = trunc i64 %173 to i32
  %183 = icmp ult i32 %182, 668
  br i1 %183, label %184, label %424

; <label>:184:                                    ; preds = %35, %181
  %185 = phi i64 [ %172, %181 ], [ 0, %35 ]
  %186 = phi i64 [ %171, %181 ], [ %36, %35 ]
  %187 = phi i64 [ %177, %181 ], [ 3, %35 ]
  %188 = phi i32 [ %182, %181 ], [ 0, %35 ]
  br label %189

; <label>:189:                                    ; preds = %412, %184
  %190 = phi i64 [ %186, %184 ], [ %413, %412 ]
  %191 = phi i64 [ %187, %184 ], [ %417, %412 ]
  %192 = phi i32 [ %188, %184 ], [ %420, %412 ]
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [675 x %struct.primes_dtab], [675 x %struct.primes_dtab]* @primes_dtab, i64 0, i64 %193
  %195 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 0, i32 0
  %196 = load i64, i64* %195, align 16
  %197 = mul i64 %196, %190
  %198 = getelementptr inbounds [675 x %struct.primes_dtab], [675 x %struct.primes_dtab]* @primes_dtab, i64 0, i64 %193, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = icmp ugt i64 %197, %199
  br i1 %200, label %203, label %201

; <label>:201:                                    ; preds = %189
  br label %213

; <label>:202:                                    ; preds = %278
  br label %203

; <label>:203:                                    ; preds = %202, %189
  %204 = phi i64 [ %190, %189 ], [ %214, %202 ]
  %205 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 1, i32 0
  %206 = load i64, i64* %205, align 16
  %207 = mul i64 %206, %204
  %208 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 1, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = icmp ugt i64 %207, %209
  br i1 %210, label %318, label %211

; <label>:211:                                    ; preds = %203
  %212 = add i32 %192, 1
  br label %328

; <label>:213:                                    ; preds = %201, %278
  %214 = phi i64 [ %279, %278 ], [ %197, %201 ]
  %215 = load i8, i8* %4, align 2
  %216 = zext i8 %215 to i32
  %217 = add nsw i32 %216, -1
  %218 = icmp eq i8 %215, 0
  br i1 %218, label %239, label %219

; <label>:219:                                    ; preds = %213
  %220 = zext i8 %215 to i64
  %221 = add nsw i64 %220, -1
  br label %222

; <label>:222:                                    ; preds = %227, %219
  %223 = phi i64 [ %221, %219 ], [ %228, %227 ]
  %224 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %223
  %225 = load i64, i64* %224, align 8
  %226 = icmp ugt i64 %225, %191
  br i1 %226, label %227, label %230

; <label>:227:                                    ; preds = %222
  %228 = add i64 %223, -1
  %229 = icmp sgt i64 %223, 0
  br i1 %229, label %222, label %237

; <label>:230:                                    ; preds = %222
  %231 = trunc i64 %223 to i32
  %232 = shl i64 %223, 32
  %233 = ashr exact i64 %232, 32
  %234 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %233
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %235, %191
  br i1 %236, label %313, label %239

; <label>:237:                                    ; preds = %227
  %238 = trunc i64 %228 to i32
  br label %239

; <label>:239:                                    ; preds = %237, %230, %213
  %240 = phi i32 [ %231, %230 ], [ %217, %213 ], [ %238, %237 ]
  %241 = icmp sgt i32 %217, %240
  br i1 %241, label %242, label %272

; <label>:242:                                    ; preds = %239
  %243 = zext i8 %215 to i64
  %244 = add nsw i64 %243, -1
  %245 = sext i32 %240 to i64
  %246 = sub nsw i64 %244, %245
  %247 = add nsw i64 %243, -2
  %248 = sub nsw i64 %247, %245
  %249 = and i64 %246, 3
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %266, label %251

; <label>:251:                                    ; preds = %242
  br label %252

; <label>:252:                                    ; preds = %252, %251
  %253 = phi i64 [ %244, %251 ], [ %262, %252 ]
  %254 = phi i64 [ %249, %251 ], [ %263, %252 ]
  %255 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %253
  %256 = load i64, i64* %255, align 8
  %257 = add nsw i64 %253, 1
  %258 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %257
  store i64 %256, i64* %258, align 8
  %259 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %253
  %260 = load i8, i8* %259, align 1
  %261 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %257
  store i8 %260, i8* %261, align 1
  %262 = add i64 %253, -1
  %263 = add i64 %254, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %252

; <label>:265:                                    ; preds = %252
  br label %266

; <label>:266:                                    ; preds = %242, %265
  %267 = phi i64 [ %244, %242 ], [ %262, %265 ]
  %268 = icmp ult i64 %248, 3
  br i1 %268, label %271, label %269

; <label>:269:                                    ; preds = %266
  br label %281

; <label>:270:                                    ; preds = %281
  br label %271

; <label>:271:                                    ; preds = %266, %270
  br label %272

; <label>:272:                                    ; preds = %271, %239
  %273 = add nsw i32 %240, 1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %274
  store i64 %191, i64* %275, align 8
  %276 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %274
  store i8 1, i8* %276, align 1
  %277 = add i8 %215, 1
  store i8 %277, i8* %4, align 2
  br label %278

; <label>:278:                                    ; preds = %313, %272
  %279 = mul i64 %214, %196
  %280 = icmp ugt i64 %279, %199
  br i1 %280, label %202, label %213

; <label>:281:                                    ; preds = %281, %269
  %282 = phi i64 [ %267, %269 ], [ %311, %281 ]
  %283 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %282
  %284 = load i64, i64* %283, align 8
  %285 = add nsw i64 %282, 1
  %286 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %285
  store i64 %284, i64* %286, align 8
  %287 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %282
  %288 = load i8, i8* %287, align 1
  %289 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %285
  store i8 %288, i8* %289, align 1
  %290 = add i64 %282, -1
  %291 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %290
  %292 = load i64, i64* %291, align 8
  %293 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %282
  store i64 %292, i64* %293, align 8
  %294 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %290
  %295 = load i8, i8* %294, align 1
  %296 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %282
  store i8 %295, i8* %296, align 1
  %297 = add i64 %282, -2
  %298 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %297
  %299 = load i64, i64* %298, align 8
  %300 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %290
  store i64 %299, i64* %300, align 8
  %301 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %297
  %302 = load i8, i8* %301, align 1
  %303 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %290
  store i8 %302, i8* %303, align 1
  %304 = add i64 %282, -3
  %305 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %304
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %297
  store i64 %306, i64* %307, align 8
  %308 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %304
  %309 = load i8, i8* %308, align 1
  %310 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %297
  store i8 %309, i8* %310, align 1
  %311 = add i64 %282, -4
  %312 = icmp sgt i64 %311, %245
  br i1 %312, label %281, label %270

; <label>:313:                                    ; preds = %230
  %314 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %233
  %315 = load i8, i8* %314, align 1
  %316 = add i8 %315, 1
  store i8 %316, i8* %314, align 1
  br label %278

; <label>:317:                                    ; preds = %328
  br label %318

; <label>:318:                                    ; preds = %317, %203
  %319 = phi i64 [ %204, %203 ], [ %329, %317 ]
  %320 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 2, i32 0
  %321 = load i64, i64* %320, align 16
  %322 = mul i64 %321, %319
  %323 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 2, i32 1
  %324 = load i64, i64* %323, align 8
  %325 = icmp ugt i64 %322, %324
  br i1 %325, label %333, label %326

; <label>:326:                                    ; preds = %318
  %327 = add i32 %192, 1
  br label %343

; <label>:328:                                    ; preds = %328, %211
  %329 = phi i64 [ %207, %211 ], [ %330, %328 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %212, i32 1) #11
  %330 = mul i64 %329, %206
  %331 = icmp ugt i64 %330, %209
  br i1 %331, label %317, label %328

; <label>:332:                                    ; preds = %343
  br label %333

; <label>:333:                                    ; preds = %332, %318
  %334 = phi i64 [ %319, %318 ], [ %344, %332 ]
  %335 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 3, i32 0
  %336 = load i64, i64* %335, align 16
  %337 = mul i64 %336, %334
  %338 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 3, i32 1
  %339 = load i64, i64* %338, align 8
  %340 = icmp ugt i64 %337, %339
  br i1 %340, label %348, label %341

; <label>:341:                                    ; preds = %333
  %342 = add i32 %192, 1
  br label %358

; <label>:343:                                    ; preds = %343, %326
  %344 = phi i64 [ %322, %326 ], [ %345, %343 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %327, i32 2) #11
  %345 = mul i64 %344, %321
  %346 = icmp ugt i64 %345, %324
  br i1 %346, label %332, label %343

; <label>:347:                                    ; preds = %358
  br label %348

; <label>:348:                                    ; preds = %347, %333
  %349 = phi i64 [ %334, %333 ], [ %359, %347 ]
  %350 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 4, i32 0
  %351 = load i64, i64* %350, align 16
  %352 = mul i64 %351, %349
  %353 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 4, i32 1
  %354 = load i64, i64* %353, align 8
  %355 = icmp ugt i64 %352, %354
  br i1 %355, label %363, label %356

; <label>:356:                                    ; preds = %348
  %357 = add i32 %192, 1
  br label %373

; <label>:358:                                    ; preds = %358, %341
  %359 = phi i64 [ %337, %341 ], [ %360, %358 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %342, i32 3) #11
  %360 = mul i64 %359, %336
  %361 = icmp ugt i64 %360, %339
  br i1 %361, label %347, label %358

; <label>:362:                                    ; preds = %373
  br label %363

; <label>:363:                                    ; preds = %362, %348
  %364 = phi i64 [ %349, %348 ], [ %374, %362 ]
  %365 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 5, i32 0
  %366 = load i64, i64* %365, align 16
  %367 = mul i64 %366, %364
  %368 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 5, i32 1
  %369 = load i64, i64* %368, align 8
  %370 = icmp ugt i64 %367, %369
  br i1 %370, label %378, label %371

; <label>:371:                                    ; preds = %363
  %372 = add i32 %192, 1
  br label %388

; <label>:373:                                    ; preds = %373, %356
  %374 = phi i64 [ %352, %356 ], [ %375, %373 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %357, i32 4) #11
  %375 = mul i64 %374, %351
  %376 = icmp ugt i64 %375, %354
  br i1 %376, label %362, label %373

; <label>:377:                                    ; preds = %388
  br label %378

; <label>:378:                                    ; preds = %377, %363
  %379 = phi i64 [ %364, %363 ], [ %389, %377 ]
  %380 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 6, i32 0
  %381 = load i64, i64* %380, align 16
  %382 = mul i64 %381, %379
  %383 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 6, i32 1
  %384 = load i64, i64* %383, align 8
  %385 = icmp ugt i64 %382, %384
  br i1 %385, label %393, label %386

; <label>:386:                                    ; preds = %378
  %387 = add i32 %192, 1
  br label %403

; <label>:388:                                    ; preds = %388, %371
  %389 = phi i64 [ %367, %371 ], [ %390, %388 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %372, i32 5) #11
  %390 = mul i64 %389, %366
  %391 = icmp ugt i64 %390, %369
  br i1 %391, label %377, label %388

; <label>:392:                                    ; preds = %403
  br label %393

; <label>:393:                                    ; preds = %392, %378
  %394 = phi i64 [ %379, %378 ], [ %404, %392 ]
  %395 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 7, i32 0
  %396 = load i64, i64* %395, align 16
  %397 = mul i64 %396, %394
  %398 = getelementptr inbounds %struct.primes_dtab, %struct.primes_dtab* %194, i64 7, i32 1
  %399 = load i64, i64* %398, align 8
  %400 = icmp ugt i64 %397, %399
  br i1 %400, label %412, label %401

; <label>:401:                                    ; preds = %393
  %402 = add i32 %192, 1
  br label %407

; <label>:403:                                    ; preds = %403, %386
  %404 = phi i64 [ %382, %386 ], [ %405, %403 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %387, i32 6) #11
  %405 = mul i64 %404, %381
  %406 = icmp ugt i64 %405, %384
  br i1 %406, label %392, label %403

; <label>:407:                                    ; preds = %407, %401
  %408 = phi i64 [ %397, %401 ], [ %409, %407 ]
  tail call fastcc void @factor_insert_refind(%struct.factors* %2, i64 %191, i32 %402, i32 7) #11
  %409 = mul i64 %408, %396
  %410 = icmp ugt i64 %409, %399
  br i1 %410, label %411, label %407

; <label>:411:                                    ; preds = %407
  br label %412

; <label>:412:                                    ; preds = %411, %393
  %413 = phi i64 [ %394, %393 ], [ %408, %411 ]
  %414 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff8, i64 0, i64 %193
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i64
  %417 = add i64 %416, %191
  %418 = mul i64 %417, %417
  %419 = icmp ule i64 %418, %413
  %420 = add i32 %192, 8
  %421 = icmp ult i32 %420, 668
  %422 = and i1 %421, %419
  br i1 %422, label %189, label %423

; <label>:423:                                    ; preds = %412
  br label %424

; <label>:424:                                    ; preds = %423, %181
  %425 = phi i64 [ %172, %181 ], [ %185, %423 ]
  %426 = phi i64 [ %171, %181 ], [ %413, %423 ]
  %427 = icmp eq i64 %425, 0
  %428 = icmp ult i64 %426, 2
  %429 = and i1 %427, %428
  br i1 %429, label %542, label %430

; <label>:430:                                    ; preds = %424
  %431 = tail call fastcc zeroext i1 @prime2_p(i64 %425, i64 %426)
  br i1 %431, label %432, label %539

; <label>:432:                                    ; preds = %430
  br i1 %427, label %439, label %433

; <label>:433:                                    ; preds = %432
  %434 = load i64, i64* %5, align 8
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %437, label %436

; <label>:436:                                    ; preds = %433
  tail call void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 565, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__.factor_insert_large, i64 0, i64 0)) #16
  unreachable

; <label>:437:                                    ; preds = %433
  %438 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 0, i64 0
  store i64 %426, i64* %438, align 8
  store i64 %425, i64* %5, align 8
  br label %542

; <label>:439:                                    ; preds = %432
  %440 = load i8, i8* %4, align 2
  %441 = zext i8 %440 to i32
  %442 = add nsw i32 %441, -1
  %443 = icmp eq i8 %440, 0
  br i1 %443, label %464, label %444

; <label>:444:                                    ; preds = %439
  %445 = zext i8 %440 to i64
  %446 = add nsw i64 %445, -1
  br label %447

; <label>:447:                                    ; preds = %452, %444
  %448 = phi i64 [ %446, %444 ], [ %453, %452 ]
  %449 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %448
  %450 = load i64, i64* %449, align 8
  %451 = icmp ugt i64 %450, %426
  br i1 %451, label %452, label %455

; <label>:452:                                    ; preds = %447
  %453 = add i64 %448, -1
  %454 = icmp sgt i64 %448, 0
  br i1 %454, label %447, label %462

; <label>:455:                                    ; preds = %447
  %456 = trunc i64 %448 to i32
  %457 = shl i64 %448, 32
  %458 = ashr exact i64 %457, 32
  %459 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %458
  %460 = load i64, i64* %459, align 8
  %461 = icmp eq i64 %460, %426
  br i1 %461, label %535, label %464

; <label>:462:                                    ; preds = %452
  %463 = trunc i64 %453 to i32
  br label %464

; <label>:464:                                    ; preds = %462, %455, %439
  %465 = phi i32 [ %456, %455 ], [ %442, %439 ], [ %463, %462 ]
  %466 = icmp sgt i32 %442, %465
  br i1 %466, label %467, label %497

; <label>:467:                                    ; preds = %464
  %468 = zext i8 %440 to i64
  %469 = add nsw i64 %468, -1
  %470 = sext i32 %465 to i64
  %471 = sub nsw i64 %469, %470
  %472 = add nsw i64 %468, -2
  %473 = sub nsw i64 %472, %470
  %474 = and i64 %471, 3
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %491, label %476

; <label>:476:                                    ; preds = %467
  br label %477

; <label>:477:                                    ; preds = %477, %476
  %478 = phi i64 [ %469, %476 ], [ %487, %477 ]
  %479 = phi i64 [ %474, %476 ], [ %488, %477 ]
  %480 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %478
  %481 = load i64, i64* %480, align 8
  %482 = add nsw i64 %478, 1
  %483 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %482
  store i64 %481, i64* %483, align 8
  %484 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %478
  %485 = load i8, i8* %484, align 1
  %486 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %482
  store i8 %485, i8* %486, align 1
  %487 = add i64 %478, -1
  %488 = add i64 %479, -1
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %477

; <label>:490:                                    ; preds = %477
  br label %491

; <label>:491:                                    ; preds = %467, %490
  %492 = phi i64 [ %469, %467 ], [ %487, %490 ]
  %493 = icmp ult i64 %473, 3
  br i1 %493, label %496, label %494

; <label>:494:                                    ; preds = %491
  br label %503

; <label>:495:                                    ; preds = %503
  br label %496

; <label>:496:                                    ; preds = %491, %495
  br label %497

; <label>:497:                                    ; preds = %496, %464
  %498 = add nsw i32 %465, 1
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %499
  store i64 %426, i64* %500, align 8
  %501 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %499
  store i8 1, i8* %501, align 1
  %502 = add i8 %440, 1
  store i8 %502, i8* %4, align 2
  br label %542

; <label>:503:                                    ; preds = %503, %494
  %504 = phi i64 [ %492, %494 ], [ %533, %503 ]
  %505 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %504
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %504, 1
  %508 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %507
  store i64 %506, i64* %508, align 8
  %509 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %504
  %510 = load i8, i8* %509, align 1
  %511 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %507
  store i8 %510, i8* %511, align 1
  %512 = add i64 %504, -1
  %513 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %512
  %514 = load i64, i64* %513, align 8
  %515 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %504
  store i64 %514, i64* %515, align 8
  %516 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %512
  %517 = load i8, i8* %516, align 1
  %518 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %504
  store i8 %517, i8* %518, align 1
  %519 = add i64 %504, -2
  %520 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %519
  %521 = load i64, i64* %520, align 8
  %522 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %512
  store i64 %521, i64* %522, align 8
  %523 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %519
  %524 = load i8, i8* %523, align 1
  %525 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %512
  store i8 %524, i8* %525, align 1
  %526 = add i64 %504, -3
  %527 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %526
  %528 = load i64, i64* %527, align 8
  %529 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %519
  store i64 %528, i64* %529, align 8
  %530 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %526
  %531 = load i8, i8* %530, align 1
  %532 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %519
  store i8 %531, i8* %532, align 1
  %533 = add i64 %504, -4
  %534 = icmp sgt i64 %533, %470
  br i1 %534, label %503, label %495

; <label>:535:                                    ; preds = %455
  %536 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %458
  %537 = load i8, i8* %536, align 1
  %538 = add i8 %537, 1
  store i8 %538, i8* %536, align 1
  br label %542

; <label>:539:                                    ; preds = %430
  br i1 %427, label %540, label %541

; <label>:540:                                    ; preds = %539
  tail call fastcc void @factor_using_pollard_rho(i64 %426, i64 1, %struct.factors* %2)
  br label %542

; <label>:541:                                    ; preds = %539
  tail call fastcc void @factor_using_pollard_rho2(i64 %425, i64 %426, i64 1, %struct.factors* %2)
  br label %542

; <label>:542:                                    ; preds = %437, %497, %535, %540, %541, %424, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #7

; Function Attrs: nounwind
declare i32 @isatty(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #8

declare void @error(i32, i32, i8*, ...) local_unnamed_addr #3

declare i32 @__gmpz_init_set_str(%struct.__mpz_struct*, i8*, i32) local_unnamed_addr #3

declare i32 @__gmp_printf(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mp_factor(%struct.__mpz_struct*, %struct.mp_factors*) unnamed_addr #6 {
  %3 = alloca [1 x %struct.__mpz_struct], align 16
  %4 = alloca [1 x %struct.__mpz_struct], align 16
  %5 = bitcast %struct.mp_factors* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 24, i32 8, i1 false) #11
  %6 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %62, label %9

; <label>:9:                                      ; preds = %2
  %10 = bitcast [1 x %struct.__mpz_struct]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #11
  %11 = load i1, i1* @dev_debug, align 1
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %9
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %13, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0)) #11
  br label %15

; <label>:15:                                     ; preds = %12, %9
  %16 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %4, i64 0, i64 0
  call void @__gmpz_init(%struct.__mpz_struct* nonnull %16) #11
  %17 = call i64 @__gmpz_scan1(%struct.__mpz_struct* nonnull %0, i64 0) #15
  call void @__gmpz_fdiv_q_2exp(%struct.__mpz_struct* nonnull %0, %struct.__mpz_struct* nonnull %0, i64 %17) #11
  %18 = icmp eq i64 %17, 0
  %19 = bitcast [1 x %struct.__mpz_struct]* %3 to i8*
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %3, i64 0, i64 0
  br i1 %18, label %27, label %21

; <label>:21:                                     ; preds = %15
  br label %22

; <label>:22:                                     ; preds = %21, %22
  %23 = phi i64 [ %24, %22 ], [ %17, %21 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) #11
  call void @__gmpz_init_set_ui(%struct.__mpz_struct* nonnull %20, i64 2) #11
  call fastcc void @mp_factor_insert(%struct.mp_factors* %1, %struct.__mpz_struct* nonnull %20) #11
  call void @__gmpz_clear(%struct.__mpz_struct* nonnull %20) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) #11
  %24 = add i64 %23, -1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %22

; <label>:26:                                     ; preds = %22
  br label %27

; <label>:27:                                     ; preds = %26, %15
  br label %38

; <label>:28:                                     ; preds = %46
  br label %29

; <label>:29:                                     ; preds = %28, %42
  %30 = add nuw nsw i64 %39, 1
  %31 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %39
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = add i64 %33, %40
  %35 = mul i64 %34, %34
  %36 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 %35) #15
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %50, label %38

; <label>:38:                                     ; preds = %27, %29
  %39 = phi i64 [ %30, %29 ], [ 1, %27 ]
  %40 = phi i64 [ %34, %29 ], [ 3, %27 ]
  %41 = icmp ult i64 %39, 669
  br i1 %41, label %42, label %50

; <label>:42:                                     ; preds = %38
  %43 = call i32 @__gmpz_divisible_ui_p(%struct.__mpz_struct* %0, i64 %40) #15
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %29, label %45

; <label>:45:                                     ; preds = %42
  br label %46

; <label>:46:                                     ; preds = %45, %46
  %47 = call i64 @__gmpz_tdiv_q_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* %0, i64 %40) #11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) #11
  call void @__gmpz_init_set_ui(%struct.__mpz_struct* nonnull %20, i64 %40) #11
  call fastcc void @mp_factor_insert(%struct.mp_factors* %1, %struct.__mpz_struct* nonnull %20) #11
  call void @__gmpz_clear(%struct.__mpz_struct* nonnull %20) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) #11
  %48 = call i32 @__gmpz_divisible_ui_p(%struct.__mpz_struct* %0, i64 %40) #15
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %28, label %46

; <label>:50:                                     ; preds = %29, %38
  call void @__gmpz_clear(%struct.__mpz_struct* nonnull %16) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #11
  %51 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 1) #15
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %62, label %53

; <label>:53:                                     ; preds = %50
  %54 = load i1, i1* @dev_debug, align 1
  br i1 %54, label %55, label %58

; <label>:55:                                     ; preds = %53
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %57 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %56, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.53, i64 0, i64 0)) #11
  br label %58

; <label>:58:                                     ; preds = %53, %55
  %59 = call fastcc zeroext i1 @mp_prime_p(%struct.__mpz_struct* %0)
  br i1 %59, label %60, label %61

; <label>:60:                                     ; preds = %58
  call fastcc void @mp_factor_insert(%struct.mp_factors* %1, %struct.__mpz_struct* %0)
  br label %62

; <label>:61:                                     ; preds = %58
  call fastcc void @mp_factor_using_pollard_rho(%struct.__mpz_struct* %0, i64 1, %struct.mp_factors* %1)
  br label %62

; <label>:62:                                     ; preds = %2, %50, %61, %60
  ret void
}

declare void @__gmpz_clear(%struct.__mpz_struct*) local_unnamed_addr #3

declare i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #3

declare i32 @fflush_unlocked(%struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #7

declare void @__gmpz_init(%struct.__mpz_struct*) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @__gmpz_scan1(%struct.__mpz_struct*, i64) local_unnamed_addr #4

declare void @__gmpz_fdiv_q_2exp(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #3

declare void @__gmpz_init_set_ui(%struct.__mpz_struct*, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mp_factor_insert(%struct.mp_factors* nocapture, %struct.__mpz_struct*) unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %0, i64 0, i32 0
  %6 = load [1 x %struct.__mpz_struct]*, [1 x %struct.__mpz_struct]** %5, align 8
  %7 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %0, i64 0, i32 1
  %8 = load i64*, i64** %7, align 8
  %9 = add i64 %4, -1
  %10 = icmp sgt i64 %9, -1
  br i1 %10, label %11, label %23

; <label>:11:                                     ; preds = %2
  br label %12

; <label>:12:                                     ; preds = %11, %17
  %13 = phi i64 [ %18, %17 ], [ %9, %11 ]
  %14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %6, i64 %13, i64 0
  %15 = tail call i32 @__gmpz_cmp(%struct.__mpz_struct* %14, %struct.__mpz_struct* %1) #15
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %12
  %18 = add nsw i64 %13, -1
  %19 = icmp sgt i64 %13, 0
  br i1 %19, label %12, label %22

; <label>:20:                                     ; preds = %12
  %21 = icmp eq i32 %15, 0
  br i1 %21, label %54, label %23

; <label>:22:                                     ; preds = %17
  br label %23

; <label>:23:                                     ; preds = %22, %2, %20
  %24 = phi i64 [ %13, %20 ], [ %9, %2 ], [ %18, %22 ]
  %25 = bitcast [1 x %struct.__mpz_struct]* %6 to i8*
  %26 = add i64 %4, 1
  %27 = shl i64 %26, 4
  %28 = tail call i8* @xrealloc(i8* %25, i64 %27) #11
  %29 = bitcast i8* %28 to [1 x %struct.__mpz_struct]*
  %30 = bitcast i64* %8 to i8*
  %31 = shl i64 %26, 3
  %32 = tail call i8* @xrealloc(i8* %30, i64 %31) #11
  %33 = bitcast i8* %32 to i64*
  %34 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %29, i64 %4, i64 0
  tail call void @__gmpz_init(%struct.__mpz_struct* %34) #11
  %35 = icmp sgt i64 %9, %24
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %23
  br label %44

; <label>:37:                                     ; preds = %44
  br label %38

; <label>:38:                                     ; preds = %37, %23
  %39 = add nsw i64 %24, 1
  %40 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %29, i64 %39, i64 0
  tail call void @__gmpz_set(%struct.__mpz_struct* %40, %struct.__mpz_struct* %1) #11
  %41 = getelementptr inbounds i64, i64* %33, i64 %39
  store i64 1, i64* %41, align 8
  %42 = bitcast %struct.mp_factors* %0 to i8**
  store i8* %28, i8** %42, align 8
  %43 = bitcast i64** %7 to i8**
  store i8* %32, i8** %43, align 8
  store i64 %26, i64* %3, align 8
  br label %58

; <label>:44:                                     ; preds = %36, %44
  %45 = phi i64 [ %52, %44 ], [ %9, %36 ]
  %46 = add nsw i64 %45, 1
  %47 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %29, i64 %46, i64 0
  %48 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %29, i64 %45, i64 0
  tail call void @__gmpz_set(%struct.__mpz_struct* %47, %struct.__mpz_struct* %48) #11
  %49 = getelementptr inbounds i64, i64* %33, i64 %45
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i64, i64* %33, i64 %46
  store i64 %50, i64* %51, align 8
  %52 = add nsw i64 %45, -1
  %53 = icmp sgt i64 %52, %24
  br i1 %53, label %44, label %37

; <label>:54:                                     ; preds = %20
  %55 = getelementptr inbounds i64, i64* %8, i64 %13
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %55, align 8
  br label %58

; <label>:58:                                     ; preds = %54, %38
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @__gmpz_cmp_ui(%struct.__mpz_struct*, i64) local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i32 @__gmpz_divisible_ui_p(%struct.__mpz_struct*, i64) local_unnamed_addr #4

declare i64 @__gmpz_tdiv_q_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @mp_prime_p(%struct.__mpz_struct*) unnamed_addr #6 {
  %2 = alloca [1 x %struct.__mpz_struct], align 16
  %3 = alloca [1 x %struct.__mpz_struct], align 16
  %4 = alloca [1 x %struct.__mpz_struct], align 16
  %5 = alloca [1 x %struct.__mpz_struct], align 16
  %6 = alloca %struct.mp_factors, align 8
  %7 = bitcast [1 x %struct.__mpz_struct]* %2 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7) #11
  %8 = bitcast [1 x %struct.__mpz_struct]* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #11
  %9 = bitcast [1 x %struct.__mpz_struct]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) #11
  %10 = bitcast [1 x %struct.__mpz_struct]* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #11
  %11 = bitcast %struct.mp_factors* %6 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %11) #11
  %12 = tail call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 1) #15
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %83, label %14

; <label>:14:                                     ; preds = %1
  %15 = tail call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 25030009) #15
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %83, label %17

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %2, i64 0, i64 0
  %19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %3, i64 0, i64 0
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %4, i64 0, i64 0
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %5, i64 0, i64 0
  call void (%struct.__mpz_struct*, ...) @__gmpz_inits(%struct.__mpz_struct* nonnull %18, %struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* nonnull %21, i8* null) #11
  call void @__gmpz_sub_ui(%struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* %0, i64 1) #11
  %22 = call i64 @__gmpz_scan1(%struct.__mpz_struct* nonnull %20, i64 0) #15
  call void @__gmpz_tdiv_q_2exp(%struct.__mpz_struct* nonnull %18, %struct.__mpz_struct* nonnull %20, i64 %22) #11
  call void @__gmpz_set_ui(%struct.__mpz_struct* nonnull %19, i64 2) #11
  %23 = call fastcc zeroext i1 @mp_millerrabin(%struct.__mpz_struct* %0, %struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %18, i64 %22)
  br i1 %23, label %24, label %79

; <label>:24:                                     ; preds = %17
  call void @__gmpz_set(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %20) #11
  call fastcc void @mp_factor(%struct.__mpz_struct* nonnull %21, %struct.mp_factors* nonnull %6)
  %25 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %6, i64 0, i32 2
  %26 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %6, i64 0, i32 0
  br label %29

; <label>:27:                                     ; preds = %45
  %28 = icmp ult i64 %50, 668
  br i1 %28, label %29, label %53

; <label>:29:                                     ; preds = %24, %27
  %30 = phi i64 [ 0, %24 ], [ %50, %27 ]
  %31 = load i64, i64* %25, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %71, label %33

; <label>:33:                                     ; preds = %29
  br label %34

; <label>:34:                                     ; preds = %33, %34
  %35 = phi i64 [ %40, %34 ], [ 0, %33 ]
  %36 = load [1 x %struct.__mpz_struct]*, [1 x %struct.__mpz_struct]** %26, align 8
  %37 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %36, i64 %35, i64 0
  call void @__gmpz_divexact(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* %37) #11
  call void @__gmpz_powm(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* %0) #11
  %38 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* nonnull %21, i64 1) #15
  %39 = icmp ne i32 %38, 0
  %40 = add i64 %35, 1
  %41 = load i64, i64* %25, align 8
  %42 = icmp ult i64 %40, %41
  %43 = and i1 %39, %42
  br i1 %43, label %34, label %44

; <label>:44:                                     ; preds = %34
  br i1 %39, label %55, label %45

; <label>:45:                                     ; preds = %44
  %46 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %30
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  call void @__gmpz_add_ui(%struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %19, i64 %48) #11
  %49 = call fastcc zeroext i1 @mp_millerrabin(%struct.__mpz_struct* %0, %struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %18, i64 %22)
  %50 = add nuw nsw i64 %30, 1
  br i1 %49, label %27, label %51

; <label>:51:                                     ; preds = %45
  %52 = load i64, i64* %25, align 8
  br label %56

; <label>:53:                                     ; preds = %27
  %54 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.43, i64 0, i64 0), i32 5) #11
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %54) #11
  call void @abort() #16
  unreachable

; <label>:55:                                     ; preds = %44
  br label %56

; <label>:56:                                     ; preds = %55, %51
  %57 = phi i64 [ %52, %51 ], [ %41, %55 ]
  %58 = phi i8 [ 0, %51 ], [ 1, %55 ]
  %59 = icmp eq i64 %57, 0
  br i1 %59, label %72, label %60

; <label>:60:                                     ; preds = %56
  br label %61

; <label>:61:                                     ; preds = %60, %61
  %62 = phi i64 [ %67, %61 ], [ 0, %60 ]
  %63 = phi i32 [ %66, %61 ], [ 0, %60 ]
  %64 = load [1 x %struct.__mpz_struct]*, [1 x %struct.__mpz_struct]** %26, align 8
  %65 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %64, i64 %62, i64 0
  call void @__gmpz_clear(%struct.__mpz_struct* %65) #11
  %66 = add i32 %63, 1
  %67 = zext i32 %66 to i64
  %68 = load i64, i64* %25, align 8
  %69 = icmp ult i64 %67, %68
  br i1 %69, label %61, label %70

; <label>:70:                                     ; preds = %61
  br label %72

; <label>:71:                                     ; preds = %29
  br label %72

; <label>:72:                                     ; preds = %71, %70, %56
  %73 = phi i8 [ %58, %56 ], [ %58, %70 ], [ 1, %71 ]
  %74 = bitcast %struct.mp_factors* %6 to i8**
  %75 = load i8*, i8** %74, align 8
  call void @free(i8* %75) #11
  %76 = getelementptr inbounds %struct.mp_factors, %struct.mp_factors* %6, i64 0, i32 1
  %77 = bitcast i64** %76 to i8**
  %78 = load i8*, i8** %77, align 8
  call void @free(i8* %78) #11
  br label %79

; <label>:79:                                     ; preds = %17, %72
  %80 = phi i8 [ %73, %72 ], [ 0, %17 ]
  call void (%struct.__mpz_struct*, ...) @__gmpz_clears(%struct.__mpz_struct* nonnull %18, %struct.__mpz_struct* nonnull %19, %struct.__mpz_struct* nonnull %20, %struct.__mpz_struct* nonnull %21, i8* null) #11
  %81 = and i8 %80, 1
  %82 = icmp ne i8 %81, 0
  br label %83

; <label>:83:                                     ; preds = %79, %14, %1
  %84 = phi i1 [ false, %1 ], [ true, %14 ], [ %82, %79 ]
  call void @llvm.lifetime.end(i64 24, i8* nonnull %11) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7) #11
  ret i1 %84
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mp_factor_using_pollard_rho(%struct.__mpz_struct*, i64, %struct.mp_factors* nocapture) unnamed_addr #6 {
  %4 = alloca [1 x %struct.__mpz_struct], align 16
  %5 = alloca [1 x %struct.__mpz_struct], align 16
  %6 = alloca [1 x %struct.__mpz_struct], align 16
  %7 = alloca [1 x %struct.__mpz_struct], align 16
  %8 = alloca [1 x %struct.__mpz_struct], align 16
  %9 = alloca [1 x %struct.__mpz_struct], align 16
  %10 = bitcast [1 x %struct.__mpz_struct]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #11
  %11 = bitcast [1 x %struct.__mpz_struct]* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #11
  %12 = bitcast [1 x %struct.__mpz_struct]* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #11
  %13 = bitcast [1 x %struct.__mpz_struct]* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #11
  %14 = bitcast [1 x %struct.__mpz_struct]* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #11
  %15 = bitcast [1 x %struct.__mpz_struct]* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #11
  %16 = load i1, i1* @dev_debug, align 1
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %3
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %19 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %18, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.55, i64 0, i64 0), i64 %1) #11
  br label %20

; <label>:20:                                     ; preds = %17, %3
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %8, i64 0, i64 0
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %9, i64 0, i64 0
  call void (%struct.__mpz_struct*, ...) @__gmpz_inits(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %22, i8* null) #11
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %6, i64 0, i64 0
  call void @__gmpz_init_set_si(%struct.__mpz_struct* nonnull %23, i64 2) #11
  %24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %4, i64 0, i64 0
  call void @__gmpz_init_set_si(%struct.__mpz_struct* nonnull %24, i64 2) #11
  %25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %5, i64 0, i64 0
  call void @__gmpz_init_set_si(%struct.__mpz_struct* nonnull %25, i64 2) #11
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %7, i64 0, i64 0
  call void @__gmpz_init_set_ui(%struct.__mpz_struct* nonnull %26, i64 1) #11
  %27 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 1) #15
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %78, label %29

; <label>:29:                                     ; preds = %20
  %30 = add i64 %1, 1
  br label %31

; <label>:31:                                     ; preds = %29, %74
  %32 = phi i64 [ 1, %29 ], [ %36, %74 ]
  %33 = phi i64 [ 1, %29 ], [ %38, %74 ]
  br label %34

; <label>:34:                                     ; preds = %31, %53
  %35 = phi i64 [ %36, %53 ], [ %33, %31 ]
  %36 = phi i64 [ %49, %53 ], [ %32, %31 ]
  br label %37

; <label>:37:                                     ; preds = %45, %34
  %38 = phi i64 [ %35, %34 ], [ %46, %45 ]
  call void @__gmpz_mul(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %24) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* %0) #11
  call void @__gmpz_add_ui(%struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %24, i64 %1) #11
  call void @__gmpz_sub(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* nonnull %24) #11
  call void @__gmpz_mul(%struct.__mpz_struct* nonnull %22, %struct.__mpz_struct* nonnull %26, %struct.__mpz_struct* nonnull %21) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %26, %struct.__mpz_struct* nonnull %22, %struct.__mpz_struct* %0) #11
  %39 = and i64 %38, 31
  %40 = icmp eq i64 %39, 1
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %37
  call void @__gmpz_gcd(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %26, %struct.__mpz_struct* %0) #11
  %42 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* nonnull %21, i64 1) #15
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %58

; <label>:44:                                     ; preds = %41
  call void @__gmpz_set(%struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %24) #11
  br label %45

; <label>:45:                                     ; preds = %37, %44
  %46 = add i64 %38, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %37

; <label>:48:                                     ; preds = %45
  call void @__gmpz_set(%struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* nonnull %24) #11
  %49 = shl i64 %36, 1
  %50 = icmp eq i64 %36, 0
  br i1 %50, label %53, label %51

; <label>:51:                                     ; preds = %48
  br label %54

; <label>:52:                                     ; preds = %54
  br label %53

; <label>:53:                                     ; preds = %52, %48
  call void @__gmpz_set(%struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %24) #11
  br label %34

; <label>:54:                                     ; preds = %51, %54
  %55 = phi i64 [ %56, %54 ], [ 0, %51 ]
  call void @__gmpz_mul(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %24) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* %0) #11
  call void @__gmpz_add_ui(%struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %24, i64 %1) #11
  %56 = add nuw i64 %55, 1
  %57 = icmp eq i64 %56, %36
  br i1 %57, label %52, label %54

; <label>:58:                                     ; preds = %41
  br label %59

; <label>:59:                                     ; preds = %58, %59
  call void @__gmpz_mul(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %23) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* %0) #11
  call void @__gmpz_add_ui(%struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %23, i64 %1) #11
  call void @__gmpz_sub(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* nonnull %23) #11
  call void @__gmpz_gcd(%struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* %0) #11
  %60 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* nonnull %21, i64 1) #15
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %59, label %62

; <label>:62:                                     ; preds = %59
  call void @__gmpz_divexact(%struct.__mpz_struct* %0, %struct.__mpz_struct* %0, %struct.__mpz_struct* nonnull %21) #11
  %63 = call fastcc zeroext i1 @mp_prime_p(%struct.__mpz_struct* nonnull %21)
  br i1 %63, label %70, label %64

; <label>:64:                                     ; preds = %62
  %65 = load i1, i1* @dev_debug, align 1
  br i1 %65, label %66, label %69

; <label>:66:                                     ; preds = %64
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %68 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %67, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.56, i64 0, i64 0)) #11
  br label %69

; <label>:69:                                     ; preds = %66, %64
  call fastcc void @mp_factor_using_pollard_rho(%struct.__mpz_struct* nonnull %21, i64 %30, %struct.mp_factors* %2)
  br label %71

; <label>:70:                                     ; preds = %62
  call fastcc void @mp_factor_insert(%struct.mp_factors* %2, %struct.__mpz_struct* nonnull %21)
  br label %71

; <label>:71:                                     ; preds = %70, %69
  %72 = call fastcc zeroext i1 @mp_prime_p(%struct.__mpz_struct* %0)
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %71
  call fastcc void @mp_factor_insert(%struct.mp_factors* %2, %struct.__mpz_struct* %0)
  br label %78

; <label>:74:                                     ; preds = %71
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* %0) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* %0) #11
  call void @__gmpz_mod(%struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* nonnull %23, %struct.__mpz_struct* %0) #11
  %75 = call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %0, i64 1) #15
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %31

; <label>:77:                                     ; preds = %74
  br label %78

; <label>:78:                                     ; preds = %77, %20, %73
  call void (%struct.__mpz_struct*, ...) @__gmpz_clears(%struct.__mpz_struct* nonnull %26, %struct.__mpz_struct* nonnull %22, %struct.__mpz_struct* nonnull %21, %struct.__mpz_struct* nonnull %25, %struct.__mpz_struct* nonnull %24, %struct.__mpz_struct* nonnull %23, i8* null) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #11
  ret void
}

declare void @__gmpz_inits(%struct.__mpz_struct*, ...) local_unnamed_addr #3

declare void @__gmpz_init_set_si(%struct.__mpz_struct*, i64) local_unnamed_addr #3

declare void @__gmpz_mul(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_mod(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_add_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #3

declare void @__gmpz_sub(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_gcd(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_set(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_divexact(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

declare void @__gmpz_clears(%struct.__mpz_struct*, ...) local_unnamed_addr #3

declare void @__gmpz_sub_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #3

declare void @__gmpz_tdiv_q_2exp(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #3

declare void @__gmpz_set_ui(%struct.__mpz_struct*, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @mp_millerrabin(%struct.__mpz_struct*, %struct.__mpz_struct* readonly, %struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*, i64) unnamed_addr #6 {
  tail call void @__gmpz_powm(%struct.__mpz_struct* %3, %struct.__mpz_struct* %2, %struct.__mpz_struct* %4, %struct.__mpz_struct* %0) #11
  %7 = tail call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %3, i64 1) #15
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %6
  %10 = tail call i32 @__gmpz_cmp(%struct.__mpz_struct* %3, %struct.__mpz_struct* %1) #15
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %27, label %12

; <label>:12:                                     ; preds = %9
  %13 = icmp ugt i64 %5, 1
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %12
  br label %15

; <label>:15:                                     ; preds = %14, %19
  %16 = phi i64 [ %22, %19 ], [ 1, %14 ]
  tail call void @__gmpz_powm_ui(%struct.__mpz_struct* %3, %struct.__mpz_struct* %3, i64 2, %struct.__mpz_struct* %0) #11
  %17 = tail call i32 @__gmpz_cmp(%struct.__mpz_struct* %3, %struct.__mpz_struct* %1) #15
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %19

; <label>:19:                                     ; preds = %15
  %20 = tail call i32 @__gmpz_cmp_ui(%struct.__mpz_struct* %3, i64 1) #15
  %21 = icmp ne i32 %20, 0
  %22 = add nuw i64 %16, 1
  %23 = icmp ult i64 %22, %5
  %24 = and i1 %21, %23
  br i1 %24, label %15, label %25

; <label>:25:                                     ; preds = %19, %15
  %26 = phi i1 [ true, %15 ], [ false, %19 ]
  br label %27

; <label>:27:                                     ; preds = %25, %12, %9, %6
  %28 = phi i1 [ true, %6 ], [ true, %9 ], [ false, %12 ], [ %26, %25 ]
  ret i1 %28
}

declare void @__gmpz_powm(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i32 @__gmpz_cmp(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #4

declare void @__gmpz_powm_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64, %struct.__mpz_struct*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @factor_insert_refind(%struct.factors* nocapture, i64, i32, i32) unnamed_addr #6 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %81, label %6

; <label>:6:                                      ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 4
  br i1 %8, label %9, label %39

; <label>:9:                                      ; preds = %72, %44, %39, %6
  %10 = phi i64 [ 0, %44 ], [ 0, %39 ], [ 0, %6 ], [ %42, %72 ]
  %11 = phi i64 [ %1, %44 ], [ %1, %39 ], [ %1, %6 ], [ %76, %72 ]
  %12 = sub nsw i64 %7, %10
  %13 = add nsw i64 %7, -1
  %14 = sub nsw i64 %13, %10
  %15 = and i64 %12, 3
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %33, label %17

; <label>:17:                                     ; preds = %9
  br label %18

; <label>:18:                                     ; preds = %18, %17
  %19 = phi i64 [ %29, %18 ], [ %10, %17 ]
  %20 = phi i64 [ %28, %18 ], [ %11, %17 ]
  %21 = phi i64 [ %30, %18 ], [ %15, %17 ]
  %22 = trunc i64 %19 to i32
  %23 = add i32 %22, %2
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = add i64 %27, %20
  %29 = add nuw nsw i64 %19, 1
  %30 = add i64 %21, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %18

; <label>:32:                                     ; preds = %18
  br label %33

; <label>:33:                                     ; preds = %9, %32
  %34 = phi i64 [ undef, %9 ], [ %28, %32 ]
  %35 = phi i64 [ %10, %9 ], [ %29, %32 ]
  %36 = phi i64 [ %11, %9 ], [ %28, %32 ]
  %37 = icmp ult i64 %14, 3
  br i1 %37, label %79, label %38

; <label>:38:                                     ; preds = %33
  br label %184

; <label>:39:                                     ; preds = %6
  %40 = and i32 %3, 3
  %41 = zext i32 %40 to i64
  %42 = sub nsw i64 %7, %41
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %9, label %44

; <label>:44:                                     ; preds = %39
  %45 = add nsw i64 %7, -1
  %46 = trunc i64 %45 to i32
  %47 = add i32 %46, %2
  %48 = icmp ult i32 %47, %2
  %49 = icmp ugt i64 %45, 4294967295
  %50 = or i1 %48, %49
  br i1 %50, label %9, label %51

; <label>:51:                                     ; preds = %44
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1, i32 0
  br label %53

; <label>:53:                                     ; preds = %51, %53
  %54 = phi i64 [ %70, %53 ], [ 0, %51 ]
  %55 = phi <2 x i64> [ %68, %53 ], [ %52, %51 ]
  %56 = phi <2 x i64> [ %69, %53 ], [ zeroinitializer, %51 ]
  %57 = trunc i64 %54 to i32
  %58 = add i32 %57, %2
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %59
  %61 = bitcast i8* %60 to <2 x i8>*
  %62 = load <2 x i8>, <2 x i8>* %61, align 1
  %63 = getelementptr i8, i8* %60, i64 2
  %64 = bitcast i8* %63 to <2 x i8>*
  %65 = load <2 x i8>, <2 x i8>* %64, align 1
  %66 = zext <2 x i8> %62 to <2 x i64>
  %67 = zext <2 x i8> %65 to <2 x i64>
  %68 = add <2 x i64> %66, %55
  %69 = add <2 x i64> %67, %56
  %70 = add i64 %54, 4
  %71 = icmp eq i64 %70, %42
  br i1 %71, label %72, label %53

; <label>:72:                                     ; preds = %53
  %73 = add <2 x i64> %69, %68
  %74 = shufflevector <2 x i64> %73, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %75 = add <2 x i64> %73, %74
  %76 = extractelement <2 x i64> %75, i32 0
  %77 = icmp eq i32 %40, 0
  br i1 %77, label %81, label %9

; <label>:78:                                     ; preds = %184
  br label %79

; <label>:79:                                     ; preds = %33, %78
  %80 = phi i64 [ %34, %33 ], [ %217, %78 ]
  br label %81

; <label>:81:                                     ; preds = %79, %72, %4
  %82 = phi i64 [ %1, %4 ], [ %76, %72 ], [ %80, %79 ]
  %83 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 3
  %84 = load i8, i8* %83, align 2
  %85 = zext i8 %84 to i32
  %86 = add nsw i32 %85, -1
  %87 = icmp eq i8 %84, 0
  br i1 %87, label %108, label %88

; <label>:88:                                     ; preds = %81
  %89 = zext i8 %84 to i64
  %90 = add nsw i64 %89, -1
  br label %91

; <label>:91:                                     ; preds = %96, %88
  %92 = phi i64 [ %90, %88 ], [ %97, %96 ]
  %93 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %92
  %94 = load i64, i64* %93, align 8
  %95 = icmp ugt i64 %94, %82
  br i1 %95, label %96, label %99

; <label>:96:                                     ; preds = %91
  %97 = add i64 %92, -1
  %98 = icmp sgt i64 %92, 0
  br i1 %98, label %91, label %106

; <label>:99:                                     ; preds = %91
  %100 = trunc i64 %92 to i32
  %101 = shl i64 %92, 32
  %102 = ashr exact i64 %101, 32
  %103 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %102
  %104 = load i64, i64* %103, align 8
  %105 = icmp eq i64 %104, %82
  br i1 %105, label %179, label %108

; <label>:106:                                    ; preds = %96
  %107 = trunc i64 %97 to i32
  br label %108

; <label>:108:                                    ; preds = %106, %99, %81
  %109 = phi i32 [ %100, %99 ], [ %86, %81 ], [ %107, %106 ]
  %110 = icmp sgt i32 %86, %109
  br i1 %110, label %111, label %141

; <label>:111:                                    ; preds = %108
  %112 = zext i8 %84 to i64
  %113 = add nsw i64 %112, -1
  %114 = sext i32 %109 to i64
  %115 = sub nsw i64 %113, %114
  %116 = add nsw i64 %112, -2
  %117 = sub nsw i64 %116, %114
  %118 = and i64 %115, 3
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %135, label %120

; <label>:120:                                    ; preds = %111
  br label %121

; <label>:121:                                    ; preds = %121, %120
  %122 = phi i64 [ %113, %120 ], [ %131, %121 ]
  %123 = phi i64 [ %118, %120 ], [ %132, %121 ]
  %124 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %122
  %125 = load i64, i64* %124, align 8
  %126 = add nsw i64 %122, 1
  %127 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %126
  store i64 %125, i64* %127, align 8
  %128 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %122
  %129 = load i8, i8* %128, align 1
  %130 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %126
  store i8 %129, i8* %130, align 1
  %131 = add i64 %122, -1
  %132 = add i64 %123, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %121

; <label>:134:                                    ; preds = %121
  br label %135

; <label>:135:                                    ; preds = %111, %134
  %136 = phi i64 [ %113, %111 ], [ %131, %134 ]
  %137 = icmp ult i64 %117, 3
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  br label %147

; <label>:139:                                    ; preds = %147
  br label %140

; <label>:140:                                    ; preds = %135, %139
  br label %141

; <label>:141:                                    ; preds = %140, %108
  %142 = add nsw i32 %109, 1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %143
  store i64 %82, i64* %144, align 8
  %145 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %143
  store i8 1, i8* %145, align 1
  %146 = add i8 %84, 1
  store i8 %146, i8* %83, align 2
  br label %183

; <label>:147:                                    ; preds = %147, %138
  %148 = phi i64 [ %136, %138 ], [ %177, %147 ]
  %149 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %148
  %150 = load i64, i64* %149, align 8
  %151 = add nsw i64 %148, 1
  %152 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %151
  store i64 %150, i64* %152, align 8
  %153 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %148
  %154 = load i8, i8* %153, align 1
  %155 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %151
  store i8 %154, i8* %155, align 1
  %156 = add i64 %148, -1
  %157 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %156
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %148
  store i64 %158, i64* %159, align 8
  %160 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %156
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %148
  store i8 %161, i8* %162, align 1
  %163 = add i64 %148, -2
  %164 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %163
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %156
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %163
  %168 = load i8, i8* %167, align 1
  %169 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %156
  store i8 %168, i8* %169, align 1
  %170 = add i64 %148, -3
  %171 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %170
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 1, i64 %163
  store i64 %172, i64* %173, align 8
  %174 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %170
  %175 = load i8, i8* %174, align 1
  %176 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %163
  store i8 %175, i8* %176, align 1
  %177 = add i64 %148, -4
  %178 = icmp sgt i64 %177, %114
  br i1 %178, label %147, label %139

; <label>:179:                                    ; preds = %99
  %180 = getelementptr inbounds %struct.factors, %struct.factors* %0, i64 0, i32 2, i64 %102
  %181 = load i8, i8* %180, align 1
  %182 = add i8 %181, 1
  store i8 %182, i8* %180, align 1
  br label %183

; <label>:183:                                    ; preds = %141, %179
  ret void

; <label>:184:                                    ; preds = %184, %38
  %185 = phi i64 [ %35, %38 ], [ %218, %184 ]
  %186 = phi i64 [ %36, %38 ], [ %217, %184 ]
  %187 = trunc i64 %185 to i32
  %188 = add i32 %187, %2
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = add i64 %192, %186
  %194 = add nuw nsw i64 %185, 1
  %195 = trunc i64 %194 to i32
  %196 = add i32 %195, %2
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i64
  %201 = add i64 %200, %193
  %202 = add nsw i64 %185, 2
  %203 = trunc i64 %202 to i32
  %204 = add i32 %203, %2
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i64
  %209 = add i64 %208, %201
  %210 = add nsw i64 %185, 3
  %211 = trunc i64 %210 to i32
  %212 = add i32 %211, %2
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i64
  %217 = add i64 %216, %209
  %218 = add nsw i64 %185, 4
  %219 = icmp eq i64 %218, %7
  br i1 %219, label %78, label %184
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @prime2_p(i64, i64) unnamed_addr #6 {
  %3 = alloca [2 x i64], align 16
  %4 = alloca [2 x i64], align 16
  %5 = alloca [2 x i64], align 16
  %6 = alloca [2 x i64], align 16
  %7 = alloca %struct.factors, align 8
  %8 = alloca [2 x i64], align 16
  %9 = alloca [2 x i64], align 16
  %10 = bitcast [2 x i64]* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #11
  %11 = bitcast [2 x i64]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #11
  %12 = bitcast [2 x i64]* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #11
  %13 = bitcast [2 x i64]* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #11
  %14 = bitcast %struct.factors* %7 to i8*
  call void @llvm.lifetime.start(i64 256, i8* nonnull %14) #11
  %15 = icmp eq i64 %0, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %2
  %17 = tail call fastcc zeroext i1 @prime_p(i64 %1)
  br label %239

; <label>:18:                                     ; preds = %2
  %19 = icmp eq i64 %1, 0
  %20 = zext i1 %19 to i64
  %21 = sub i64 %0, %20
  %22 = add i64 %1, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %29

; <label>:24:                                     ; preds = %18
  %25 = tail call i32 asm "bsfq $1,${0:q}", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %21) #15
  %26 = zext i32 %25 to i64
  %27 = lshr i64 %21, %26
  %28 = add i32 %25, 64
  br label %38

; <label>:29:                                     ; preds = %18
  %30 = tail call i32 asm "bsfq $1,${0:q}", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %22) #15
  %31 = sub i32 64, %30
  %32 = zext i32 %31 to i64
  %33 = shl i64 %21, %32
  %34 = zext i32 %30 to i64
  %35 = lshr i64 %22, %34
  %36 = or i64 %33, %35
  %37 = lshr i64 %21, %34
  br label %38

; <label>:38:                                     ; preds = %29, %24
  %39 = phi i64 [ %36, %29 ], [ %27, %24 ]
  %40 = phi i64 [ %37, %29 ], [ 0, %24 ]
  %41 = phi i32 [ %30, %29 ], [ %28, %24 ]
  %42 = getelementptr inbounds [2 x i64], [2 x i64]* %3, i64 0, i64 0
  store i64 %39, i64* %42, align 16
  %43 = getelementptr inbounds [2 x i64], [2 x i64]* %3, i64 0, i64 1
  store i64 %40, i64* %43, align 8
  %44 = lshr i64 %1, 1
  %45 = and i64 %44, 127
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = mul i64 %48, %1
  %50 = sub i64 2, %49
  %51 = mul i64 %48, %50
  %52 = mul i64 %51, %1
  %53 = sub i64 2, %52
  %54 = mul i64 %51, %53
  %55 = mul i64 %54, %1
  %56 = sub i64 2, %55
  %57 = icmp ugt i64 %0, 1
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i64
  %60 = zext i1 %57 to i64
  %61 = select i1 %57, i64 63, i64 127
  br label %62

; <label>:62:                                     ; preds = %38, %79
  %63 = phi i64 [ %61, %38 ], [ %82, %79 ]
  %64 = phi i64 [ %60, %38 ], [ %81, %79 ]
  %65 = phi i64 [ %59, %38 ], [ %80, %79 ]
  %66 = shl i64 %64, 1
  %67 = lshr i64 %65, 63
  %68 = or i64 %66, %67
  %69 = shl i64 %65, 1
  %70 = icmp ugt i64 %68, %0
  br i1 %70, label %75, label %71

; <label>:71:                                     ; preds = %62
  %72 = icmp ne i64 %68, %0
  %73 = icmp ult i64 %69, %1
  %74 = or i1 %73, %72
  br i1 %74, label %79, label %75

; <label>:75:                                     ; preds = %71, %62
  %76 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %68, i64 %0, i64 %69, i64 %1) #15
  %77 = extractvalue { i64, i64 } %76, 0
  %78 = extractvalue { i64, i64 } %76, 1
  br label %79

; <label>:79:                                     ; preds = %75, %71
  %80 = phi i64 [ %78, %75 ], [ %69, %71 ]
  %81 = phi i64 [ %77, %75 ], [ %68, %71 ]
  %82 = add nsw i64 %63, -1
  %83 = icmp eq i64 %63, 0
  br i1 %83, label %84, label %62

; <label>:84:                                     ; preds = %79
  %85 = mul i64 %54, %56
  %86 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 1
  store i64 %81, i64* %86, align 8
  %87 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 0
  store i64 %80, i64* %87, align 16
  %88 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %89 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %90 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %81, i64 %81, i64 %80, i64 %80) #15
  %91 = extractvalue { i64, i64 } %90, 0
  %92 = extractvalue { i64, i64 } %90, 1
  store i64 %91, i64* %88, align 8
  store i64 %92, i64* %89, align 16
  %93 = icmp ugt i64 %91, %0
  br i1 %93, label %98, label %94

; <label>:94:                                     ; preds = %84
  %95 = icmp ne i64 %91, %0
  %96 = icmp ult i64 %92, %1
  %97 = or i1 %95, %96
  br i1 %97, label %102, label %98

; <label>:98:                                     ; preds = %94, %84
  %99 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %91, i64 %0, i64 %92, i64 %1) #15
  %100 = extractvalue { i64, i64 } %99, 0
  %101 = extractvalue { i64, i64 } %99, 1
  store i64 %100, i64* %88, align 8
  store i64 %101, i64* %89, align 16
  br label %102

; <label>:102:                                    ; preds = %94, %98
  %103 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 %1, i64* %103, align 16
  %104 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1
  store i64 %0, i64* %104, align 8
  %105 = call fastcc zeroext i1 @millerrabin2(i64* nonnull %103, i64 %85, i64* nonnull %89, i64* nonnull %42, i32 %41, i64* nonnull %87)
  br i1 %105, label %106, label %239

; <label>:106:                                    ; preds = %102
  call fastcc void @factor(i64 %21, i64 %22, %struct.factors* nonnull %7)
  %107 = bitcast [2 x i64]* %8 to i8*
  %108 = bitcast [2 x i64]* %9 to i8*
  %109 = getelementptr inbounds %struct.factors, %struct.factors* %7, i64 0, i32 0, i64 1
  %110 = getelementptr inbounds %struct.factors, %struct.factors* %7, i64 0, i32 0, i64 0
  %111 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %112 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %113 = getelementptr inbounds [2 x i64], [2 x i64]* %9, i64 0, i64 1
  %114 = getelementptr inbounds [2 x i64], [2 x i64]* %9, i64 0, i64 0
  %115 = getelementptr inbounds %struct.factors, %struct.factors* %7, i64 0, i32 3
  %116 = shl i64 %21, 63
  %117 = lshr i64 %22, 1
  %118 = or i64 %116, %117
  %119 = lshr i64 %21, 1
  br label %120

; <label>:120:                                    ; preds = %106, %232
  %121 = phi i64 [ %80, %106 ], [ %197, %232 ]
  %122 = phi i64 [ 0, %106 ], [ %233, %232 ]
  %123 = phi i64 [ 2, %106 ], [ %203, %232 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108) #11
  %124 = load i64, i64* %109, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %148, label %126

; <label>:126:                                    ; preds = %120
  %127 = load i64, i64* %110, align 8
  %128 = lshr i64 %127, 1
  %129 = and i64 %128, 127
  %130 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = mul i64 %132, %127
  %134 = sub i64 2, %133
  %135 = mul i64 %132, %134
  %136 = mul i64 %135, %127
  %137 = sub i64 2, %136
  %138 = mul i64 %135, %137
  %139 = mul i64 %138, %127
  %140 = sub i64 2, %139
  %141 = mul i64 %138, %140
  %142 = mul i64 %141, %22
  store i64 %142, i64* %111, align 16
  store i64 0, i64* %112, align 8
  %143 = call fastcc i64 @powm2(i64* %113, i64* nonnull %89, i64* nonnull %111, i64* nonnull %103, i64 %85, i64* nonnull %87)
  store i64 %143, i64* %114, align 16
  %144 = icmp eq i64 %143, %121
  br i1 %144, label %145, label %148

; <label>:145:                                    ; preds = %126
  %146 = load i64, i64* %113, align 8
  %147 = icmp ne i64 %146, %81
  br label %148

; <label>:148:                                    ; preds = %120, %126, %145
  %149 = phi i1 [ %147, %145 ], [ true, %126 ], [ true, %120 ]
  %150 = load i8, i8* %115, align 2
  %151 = icmp ne i8 %150, 0
  %152 = and i1 %149, %151
  br i1 %152, label %153, label %196

; <label>:153:                                    ; preds = %148
  br label %154

; <label>:154:                                    ; preds = %153, %184
  %155 = phi i32 [ %190, %184 ], [ 0, %153 ]
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds %struct.factors, %struct.factors* %7, i64 0, i32 1, i64 %156
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 2
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %154
  store i64 %118, i64* %111, align 16
  store i64 %119, i64* %112, align 8
  br label %184

; <label>:161:                                    ; preds = %154
  %162 = lshr i64 %158, 1
  %163 = and i64 %162, 127
  %164 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = mul i64 %166, %158
  %168 = sub i64 2, %167
  %169 = mul i64 %166, %168
  %170 = mul i64 %169, %158
  %171 = sub i64 2, %170
  %172 = mul i64 %169, %171
  %173 = mul i64 %172, %158
  %174 = sub i64 2, %173
  %175 = mul i64 %172, %174
  %176 = mul i64 %175, %22
  %177 = icmp ult i64 %21, %158
  br i1 %177, label %183, label %178

; <label>:178:                                    ; preds = %161
  %179 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %176, i64 %158) #15
  %180 = extractvalue { i64, i64 } %179, 1
  %181 = sub i64 %21, %180
  %182 = mul i64 %181, %175
  store i64 %182, i64* %112, align 8
  store i64 %176, i64* %111, align 16
  br label %184

; <label>:183:                                    ; preds = %161
  store i64 %176, i64* %111, align 16
  store i64 0, i64* %112, align 8
  br label %184

; <label>:184:                                    ; preds = %178, %183, %160
  %185 = call fastcc i64 @powm2(i64* %113, i64* nonnull %89, i64* nonnull %111, i64* nonnull %103, i64 %85, i64* nonnull %87)
  store i64 %185, i64* %114, align 16
  %186 = load i64, i64* %113, align 8
  %187 = icmp ne i64 %186, %81
  %188 = icmp ne i64 %185, %80
  %189 = or i1 %187, %188
  %190 = add i32 %155, 1
  %191 = load i8, i8* %115, align 2
  %192 = zext i8 %191 to i32
  %193 = icmp ult i32 %190, %192
  %194 = and i1 %189, %193
  br i1 %194, label %154, label %195

; <label>:195:                                    ; preds = %184
  br label %196

; <label>:196:                                    ; preds = %195, %148
  %197 = phi i64 [ %121, %148 ], [ %80, %195 ]
  %198 = phi i1 [ %149, %148 ], [ %189, %195 ]
  br i1 %198, label %235, label %199

; <label>:199:                                    ; preds = %196
  %200 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %122
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i64
  %203 = add i64 %202, %123
  %204 = icmp ult i64 %203, %0
  %205 = select i1 %204, i64 %203, i64 0
  %206 = select i1 %204, i64 0, i64 %203
  %207 = select i1 %204, i64 63, i64 127
  br label %208

; <label>:208:                                    ; preds = %199, %225
  %209 = phi i64 [ %207, %199 ], [ %228, %225 ]
  %210 = phi i64 [ %206, %199 ], [ %227, %225 ]
  %211 = phi i64 [ %205, %199 ], [ %226, %225 ]
  %212 = shl i64 %211, 1
  %213 = lshr i64 %210, 63
  %214 = or i64 %213, %212
  %215 = shl i64 %210, 1
  %216 = icmp ugt i64 %214, %0
  br i1 %216, label %221, label %217

; <label>:217:                                    ; preds = %208
  %218 = icmp ne i64 %214, %0
  %219 = icmp ult i64 %215, %1
  %220 = or i1 %219, %218
  br i1 %220, label %225, label %221

; <label>:221:                                    ; preds = %217, %208
  %222 = call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %214, i64 %0, i64 %215, i64 %1) #15
  %223 = extractvalue { i64, i64 } %222, 0
  %224 = extractvalue { i64, i64 } %222, 1
  br label %225

; <label>:225:                                    ; preds = %221, %217
  %226 = phi i64 [ %223, %221 ], [ %214, %217 ]
  %227 = phi i64 [ %224, %221 ], [ %215, %217 ]
  %228 = add nsw i64 %209, -1
  %229 = icmp eq i64 %209, 0
  br i1 %229, label %230, label %208

; <label>:230:                                    ; preds = %225
  store i64 %226, i64* %88, align 8
  store i64 %227, i64* %89, align 16
  %231 = call fastcc zeroext i1 @millerrabin2(i64* nonnull %103, i64 %85, i64* nonnull %89, i64* nonnull %42, i32 %41, i64* nonnull %87)
  br i1 %231, label %232, label %235

; <label>:232:                                    ; preds = %230
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  %233 = add nuw nsw i64 %122, 1
  %234 = icmp ult i64 %233, 668
  br i1 %234, label %120, label %237

; <label>:235:                                    ; preds = %196, %230
  %236 = phi i1 [ false, %230 ], [ true, %196 ]
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  br label %239

; <label>:237:                                    ; preds = %232
  %238 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.43, i64 0, i64 0), i32 5) #11
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %238) #11
  call void @abort() #16
  unreachable

; <label>:239:                                    ; preds = %235, %102, %16
  %240 = phi i1 [ %17, %16 ], [ %236, %235 ], [ false, %102 ]
  call void @llvm.lifetime.end(i64 256, i8* nonnull %14) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #11
  ret i1 %240
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @factor_using_pollard_rho(i64, i64, %struct.factors*) unnamed_addr #6 {
  %4 = icmp ugt i64 %0, 1
  br i1 %4, label %5, label %11

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 3
  br label %7

; <label>:7:                                      ; preds = %5, %225
  %8 = phi i64 [ %1, %5 ], [ %20, %225 ]
  %9 = phi i64 [ %0, %5 ], [ %46, %225 ]
  br label %21

; <label>:10:                                     ; preds = %225
  br label %11

; <label>:11:                                     ; preds = %10, %3
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1474, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__.factor_using_pollard_rho, i64 0, i64 0)) #16
  unreachable

; <label>:12:                                     ; preds = %40
  %13 = sub i64 %9, %42
  %14 = icmp ult i64 %42, %13
  %15 = select i1 %14, i64 %9, i64 0
  %16 = sub i64 %42, %13
  %17 = add i64 %16, %15
  %18 = icmp eq i64 %9, 1
  br i1 %18, label %439, label %19

; <label>:19:                                     ; preds = %12
  %20 = add i64 %8, 1
  br label %45

; <label>:21:                                     ; preds = %7, %40
  %22 = phi i32 [ 64, %7 ], [ %43, %40 ]
  %23 = phi i64 [ 0, %7 ], [ %42, %40 ]
  %24 = phi i64 [ 1, %7 ], [ %41, %40 ]
  %25 = phi i64 [ 0, %7 ], [ %29, %40 ]
  %26 = phi i64 [ %9, %7 ], [ %30, %40 ]
  %27 = shl i64 %26, 63
  %28 = lshr i64 %25, 1
  %29 = or i64 %28, %27
  %30 = lshr i64 %26, 1
  %31 = icmp ugt i64 %24, %30
  br i1 %31, label %36, label %32

; <label>:32:                                     ; preds = %21
  %33 = icmp ne i64 %24, %30
  %34 = icmp ult i64 %23, %29
  %35 = or i1 %33, %34
  br i1 %35, label %40, label %36

; <label>:36:                                     ; preds = %32, %21
  %37 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %24, i64 %30, i64 %23, i64 %29) #15
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = extractvalue { i64, i64 } %37, 1
  br label %40

; <label>:40:                                     ; preds = %32, %36
  %41 = phi i64 [ %38, %36 ], [ %24, %32 ]
  %42 = phi i64 [ %39, %36 ], [ %23, %32 ]
  %43 = add nsw i32 %22, -1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %12, label %21

; <label>:45:                                     ; preds = %19, %433
  %46 = phi i64 [ %9, %19 ], [ %228, %433 ]
  %47 = phi i64 [ %17, %19 ], [ %434, %433 ]
  %48 = phi i64 [ %17, %19 ], [ %435, %433 ]
  %49 = phi i64 [ %17, %19 ], [ %436, %433 ]
  %50 = phi i64 [ %42, %19 ], [ %113, %433 ]
  %51 = phi i64 [ 1, %19 ], [ %82, %433 ]
  %52 = phi i64 [ 1, %19 ], [ %75, %433 ]
  %53 = icmp ugt i64 %46, %8
  br i1 %53, label %55, label %54

; <label>:54:                                     ; preds = %45
  tail call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1480, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__.factor_using_pollard_rho, i64 0, i64 0)) #16
  unreachable

; <label>:55:                                     ; preds = %45
  %56 = lshr i64 %46, 1
  %57 = and i64 %56, 127
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = mul i64 %60, %46
  %62 = sub i64 2, %61
  %63 = mul i64 %60, %62
  %64 = mul i64 %63, %46
  %65 = sub i64 2, %64
  %66 = mul i64 %63, %65
  %67 = mul i64 %66, %46
  %68 = sub i64 2, %67
  %69 = mul i64 %66, %68
  %70 = sub i64 %46, %8
  %71 = and i64 %46, 1
  %72 = icmp eq i64 %71, 0
  br label %74

; <label>:73:                                     ; preds = %156
  br label %151

; <label>:74:                                     ; preds = %151, %55
  %75 = phi i64 [ %52, %55 ], [ %149, %151 ]
  %76 = phi i64 [ %51, %55 ], [ %152, %151 ]
  %77 = phi i64 [ %50, %55 ], [ %113, %151 ]
  %78 = phi i64 [ %49, %55 ], [ %153, %151 ]
  %79 = phi i64 [ %48, %55 ], [ %99, %151 ]
  %80 = phi i64 [ %47, %55 ], [ %154, %151 ]
  br label %81

; <label>:81:                                     ; preds = %144, %74
  %82 = phi i64 [ %76, %74 ], [ %146, %144 ]
  %83 = phi i64 [ %77, %74 ], [ %113, %144 ]
  %84 = phi i64 [ %78, %74 ], [ %145, %144 ]
  %85 = phi i64 [ %80, %74 ], [ %99, %144 ]
  %86 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %85, i64 %85) #15
  %87 = extractvalue { i64, i64 } %86, 0
  %88 = extractvalue { i64, i64 } %86, 1
  %89 = mul i64 %87, %69
  %90 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %89, i64 %46) #15
  %91 = extractvalue { i64, i64 } %90, 1
  %92 = sub i64 %88, %91
  %93 = icmp ult i64 %88, %91
  %94 = select i1 %93, i64 %46, i64 0
  %95 = add i64 %94, %92
  %96 = icmp ult i64 %95, %70
  %97 = select i1 %96, i64 %46, i64 0
  %98 = sub i64 %95, %70
  %99 = add i64 %98, %97
  %100 = icmp ult i64 %79, %99
  %101 = select i1 %100, i64 %46, i64 0
  %102 = sub i64 %79, %99
  %103 = add i64 %102, %101
  %104 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %83, i64 %103) #15
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = extractvalue { i64, i64 } %104, 1
  %107 = mul i64 %105, %69
  %108 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %107, i64 %46) #15
  %109 = extractvalue { i64, i64 } %108, 1
  %110 = sub i64 %106, %109
  %111 = icmp ult i64 %106, %109
  %112 = select i1 %111, i64 %46, i64 0
  %113 = add i64 %112, %110
  %114 = and i64 %82, 31
  %115 = icmp eq i64 %114, 1
  br i1 %115, label %116, label %144

; <label>:116:                                    ; preds = %81
  %117 = select i1 %72, i64 %113, i64 %46
  %118 = select i1 %72, i64 %46, i64 %113
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %141, label %120

; <label>:120:                                    ; preds = %116
  %121 = lshr i64 %117, 1
  br label %122

; <label>:122:                                    ; preds = %133, %120
  %123 = phi i64 [ %121, %120 ], [ %136, %133 ]
  %124 = phi i64 [ %118, %120 ], [ %138, %133 ]
  br label %125

; <label>:125:                                    ; preds = %125, %122
  %126 = phi i64 [ %124, %122 ], [ %129, %125 ]
  %127 = and i64 %126, 1
  %128 = icmp eq i64 %127, 0
  %129 = lshr i64 %126, 1
  br i1 %128, label %125, label %130

; <label>:130:                                    ; preds = %125
  %131 = sub i64 %129, %123
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %139, label %133

; <label>:133:                                    ; preds = %130
  %134 = ashr i64 %131, 63
  %135 = and i64 %134, %131
  %136 = add i64 %135, %123
  %137 = xor i64 %134, %131
  %138 = sub i64 %137, %134
  br label %122

; <label>:139:                                    ; preds = %130
  %140 = or i64 %126, 1
  br label %141

; <label>:141:                                    ; preds = %116, %139
  %142 = phi i64 [ %140, %139 ], [ %117, %116 ]
  %143 = icmp eq i64 %142, 1
  br i1 %143, label %144, label %175

; <label>:144:                                    ; preds = %141, %81
  %145 = phi i64 [ %84, %81 ], [ %99, %141 ]
  %146 = add i64 %82, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %81

; <label>:148:                                    ; preds = %144
  %149 = shl i64 %75, 1
  %150 = icmp eq i64 %75, 0
  br i1 %150, label %151, label %155

; <label>:151:                                    ; preds = %148, %73
  %152 = phi i64 [ 0, %148 ], [ %75, %73 ]
  %153 = phi i64 [ %99, %148 ], [ %172, %73 ]
  %154 = phi i64 [ %99, %148 ], [ %172, %73 ]
  br label %74

; <label>:155:                                    ; preds = %148
  br label %156

; <label>:156:                                    ; preds = %155, %156
  %157 = phi i64 [ %172, %156 ], [ %99, %155 ]
  %158 = phi i64 [ %173, %156 ], [ 0, %155 ]
  %159 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %157, i64 %157) #15
  %160 = extractvalue { i64, i64 } %159, 0
  %161 = extractvalue { i64, i64 } %159, 1
  %162 = mul i64 %160, %69
  %163 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %162, i64 %46) #15
  %164 = extractvalue { i64, i64 } %163, 1
  %165 = sub i64 %161, %164
  %166 = icmp ult i64 %161, %164
  %167 = select i1 %166, i64 %46, i64 0
  %168 = add i64 %167, %165
  %169 = icmp ult i64 %168, %70
  %170 = select i1 %169, i64 %46, i64 0
  %171 = sub i64 %168, %70
  %172 = add i64 %171, %170
  %173 = add nuw i64 %158, 1
  %174 = icmp eq i64 %173, %75
  br i1 %174, label %73, label %156

; <label>:175:                                    ; preds = %141
  br label %176

; <label>:176:                                    ; preds = %175, %220
  %177 = phi i64 [ %191, %220 ], [ %84, %175 ]
  %178 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %177, i64 %177) #15
  %179 = extractvalue { i64, i64 } %178, 0
  %180 = extractvalue { i64, i64 } %178, 1
  %181 = mul i64 %179, %69
  %182 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %181, i64 %46) #15
  %183 = extractvalue { i64, i64 } %182, 1
  %184 = sub i64 %180, %183
  %185 = icmp ult i64 %180, %183
  %186 = select i1 %185, i64 %46, i64 0
  %187 = add i64 %186, %184
  %188 = icmp ult i64 %187, %70
  %189 = select i1 %188, i64 %46, i64 0
  %190 = sub i64 %187, %70
  %191 = add i64 %190, %189
  %192 = icmp ult i64 %79, %191
  %193 = select i1 %192, i64 %46, i64 0
  %194 = sub i64 %79, %191
  %195 = add i64 %194, %193
  %196 = select i1 %72, i64 %195, i64 %46
  %197 = select i1 %72, i64 %46, i64 %195
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %220, label %199

; <label>:199:                                    ; preds = %176
  %200 = lshr i64 %196, 1
  br label %201

; <label>:201:                                    ; preds = %212, %199
  %202 = phi i64 [ %200, %199 ], [ %215, %212 ]
  %203 = phi i64 [ %197, %199 ], [ %217, %212 ]
  br label %204

; <label>:204:                                    ; preds = %204, %201
  %205 = phi i64 [ %203, %201 ], [ %208, %204 ]
  %206 = and i64 %205, 1
  %207 = icmp eq i64 %206, 0
  %208 = lshr i64 %205, 1
  br i1 %207, label %204, label %209

; <label>:209:                                    ; preds = %204
  %210 = sub i64 %208, %202
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %218, label %212

; <label>:212:                                    ; preds = %209
  %213 = ashr i64 %210, 63
  %214 = and i64 %213, %210
  %215 = add i64 %214, %202
  %216 = xor i64 %213, %210
  %217 = sub i64 %216, %213
  br label %201

; <label>:218:                                    ; preds = %209
  %219 = or i64 %205, 1
  br label %220

; <label>:220:                                    ; preds = %176, %218
  %221 = phi i64 [ %219, %218 ], [ %196, %176 ]
  %222 = icmp eq i64 %221, 1
  br i1 %222, label %176, label %223

; <label>:223:                                    ; preds = %220
  %224 = icmp eq i64 %46, %221
  br i1 %224, label %225, label %227

; <label>:225:                                    ; preds = %223
  %226 = icmp ugt i64 %46, 1
  br i1 %226, label %7, label %10

; <label>:227:                                    ; preds = %223
  %228 = udiv i64 %46, %221
  %229 = tail call fastcc zeroext i1 @prime_p(i64 %221)
  br i1 %229, label %231, label %230

; <label>:230:                                    ; preds = %227
  tail call fastcc void @factor_using_pollard_rho(i64 %221, i64 %20, %struct.factors* %2)
  br label %331

; <label>:231:                                    ; preds = %227
  %232 = load i8, i8* %6, align 2
  %233 = zext i8 %232 to i32
  %234 = add nsw i32 %233, -1
  %235 = icmp eq i8 %232, 0
  br i1 %235, label %256, label %236

; <label>:236:                                    ; preds = %231
  %237 = zext i8 %232 to i64
  %238 = add nsw i64 %237, -1
  br label %239

; <label>:239:                                    ; preds = %244, %236
  %240 = phi i64 [ %238, %236 ], [ %245, %244 ]
  %241 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %240
  %242 = load i64, i64* %241, align 8
  %243 = icmp ugt i64 %242, %221
  br i1 %243, label %244, label %247

; <label>:244:                                    ; preds = %239
  %245 = add i64 %240, -1
  %246 = icmp sgt i64 %240, 0
  br i1 %246, label %239, label %254

; <label>:247:                                    ; preds = %239
  %248 = trunc i64 %240 to i32
  %249 = shl i64 %240, 32
  %250 = ashr exact i64 %249, 32
  %251 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %250
  %252 = load i64, i64* %251, align 8
  %253 = icmp eq i64 %252, %221
  br i1 %253, label %327, label %256

; <label>:254:                                    ; preds = %244
  %255 = trunc i64 %245 to i32
  br label %256

; <label>:256:                                    ; preds = %254, %247, %231
  %257 = phi i32 [ %248, %247 ], [ %234, %231 ], [ %255, %254 ]
  %258 = icmp sgt i32 %234, %257
  br i1 %258, label %259, label %289

; <label>:259:                                    ; preds = %256
  %260 = zext i8 %232 to i64
  %261 = add nsw i64 %260, -1
  %262 = sext i32 %257 to i64
  %263 = sub nsw i64 %261, %262
  %264 = add nsw i64 %260, -2
  %265 = sub nsw i64 %264, %262
  %266 = and i64 %263, 3
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %283, label %268

; <label>:268:                                    ; preds = %259
  br label %269

; <label>:269:                                    ; preds = %269, %268
  %270 = phi i64 [ %261, %268 ], [ %279, %269 ]
  %271 = phi i64 [ %266, %268 ], [ %280, %269 ]
  %272 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %270
  %273 = load i64, i64* %272, align 8
  %274 = add nsw i64 %270, 1
  %275 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %274
  store i64 %273, i64* %275, align 8
  %276 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %270
  %277 = load i8, i8* %276, align 1
  %278 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %274
  store i8 %277, i8* %278, align 1
  %279 = add i64 %270, -1
  %280 = add i64 %271, -1
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %269

; <label>:282:                                    ; preds = %269
  br label %283

; <label>:283:                                    ; preds = %259, %282
  %284 = phi i64 [ %261, %259 ], [ %279, %282 ]
  %285 = icmp ult i64 %265, 3
  br i1 %285, label %288, label %286

; <label>:286:                                    ; preds = %283
  br label %295

; <label>:287:                                    ; preds = %295
  br label %288

; <label>:288:                                    ; preds = %283, %287
  br label %289

; <label>:289:                                    ; preds = %288, %256
  %290 = add nsw i32 %257, 1
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %291
  store i64 %221, i64* %292, align 8
  %293 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %291
  store i8 1, i8* %293, align 1
  %294 = add i8 %232, 1
  store i8 %294, i8* %6, align 2
  br label %331

; <label>:295:                                    ; preds = %295, %286
  %296 = phi i64 [ %284, %286 ], [ %325, %295 ]
  %297 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %296
  %298 = load i64, i64* %297, align 8
  %299 = add nsw i64 %296, 1
  %300 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %299
  store i64 %298, i64* %300, align 8
  %301 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %296
  %302 = load i8, i8* %301, align 1
  %303 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %299
  store i8 %302, i8* %303, align 1
  %304 = add i64 %296, -1
  %305 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %304
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %296
  store i64 %306, i64* %307, align 8
  %308 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %304
  %309 = load i8, i8* %308, align 1
  %310 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %296
  store i8 %309, i8* %310, align 1
  %311 = add i64 %296, -2
  %312 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %311
  %313 = load i64, i64* %312, align 8
  %314 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %304
  store i64 %313, i64* %314, align 8
  %315 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %311
  %316 = load i8, i8* %315, align 1
  %317 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %304
  store i8 %316, i8* %317, align 1
  %318 = add i64 %296, -3
  %319 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %318
  %320 = load i64, i64* %319, align 8
  %321 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %311
  store i64 %320, i64* %321, align 8
  %322 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %318
  %323 = load i8, i8* %322, align 1
  %324 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %311
  store i8 %323, i8* %324, align 1
  %325 = add i64 %296, -4
  %326 = icmp sgt i64 %325, %262
  br i1 %326, label %295, label %287

; <label>:327:                                    ; preds = %247
  %328 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %250
  %329 = load i8, i8* %328, align 1
  %330 = add i8 %329, 1
  store i8 %330, i8* %328, align 1
  br label %331

; <label>:331:                                    ; preds = %327, %289, %230
  %332 = tail call fastcc zeroext i1 @prime_p(i64 %228)
  br i1 %332, label %333, label %433

; <label>:333:                                    ; preds = %331
  %334 = load i8, i8* %6, align 2
  %335 = zext i8 %334 to i32
  %336 = add nsw i32 %335, -1
  %337 = icmp eq i8 %334, 0
  br i1 %337, label %358, label %338

; <label>:338:                                    ; preds = %333
  %339 = zext i8 %334 to i64
  %340 = add nsw i64 %339, -1
  br label %341

; <label>:341:                                    ; preds = %346, %338
  %342 = phi i64 [ %340, %338 ], [ %347, %346 ]
  %343 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %342
  %344 = load i64, i64* %343, align 8
  %345 = icmp ugt i64 %344, %228
  br i1 %345, label %346, label %349

; <label>:346:                                    ; preds = %341
  %347 = add i64 %342, -1
  %348 = icmp sgt i64 %342, 0
  br i1 %348, label %341, label %356

; <label>:349:                                    ; preds = %341
  %350 = trunc i64 %342 to i32
  %351 = shl i64 %342, 32
  %352 = ashr exact i64 %351, 32
  %353 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %352
  %354 = load i64, i64* %353, align 8
  %355 = icmp eq i64 %354, %228
  br i1 %355, label %429, label %358

; <label>:356:                                    ; preds = %346
  %357 = trunc i64 %347 to i32
  br label %358

; <label>:358:                                    ; preds = %356, %349, %333
  %359 = phi i32 [ %350, %349 ], [ %336, %333 ], [ %357, %356 ]
  %360 = icmp sgt i32 %336, %359
  br i1 %360, label %361, label %391

; <label>:361:                                    ; preds = %358
  %362 = zext i8 %334 to i64
  %363 = add nsw i64 %362, -1
  %364 = sext i32 %359 to i64
  %365 = sub nsw i64 %363, %364
  %366 = add nsw i64 %362, -2
  %367 = sub nsw i64 %366, %364
  %368 = and i64 %365, 3
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %385, label %370

; <label>:370:                                    ; preds = %361
  br label %371

; <label>:371:                                    ; preds = %371, %370
  %372 = phi i64 [ %363, %370 ], [ %381, %371 ]
  %373 = phi i64 [ %368, %370 ], [ %382, %371 ]
  %374 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %372
  %375 = load i64, i64* %374, align 8
  %376 = add nsw i64 %372, 1
  %377 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %376
  store i64 %375, i64* %377, align 8
  %378 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %372
  %379 = load i8, i8* %378, align 1
  %380 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %376
  store i8 %379, i8* %380, align 1
  %381 = add i64 %372, -1
  %382 = add i64 %373, -1
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %384, label %371

; <label>:384:                                    ; preds = %371
  br label %385

; <label>:385:                                    ; preds = %361, %384
  %386 = phi i64 [ %363, %361 ], [ %381, %384 ]
  %387 = icmp ult i64 %367, 3
  br i1 %387, label %390, label %388

; <label>:388:                                    ; preds = %385
  br label %397

; <label>:389:                                    ; preds = %397
  br label %390

; <label>:390:                                    ; preds = %385, %389
  br label %391

; <label>:391:                                    ; preds = %390, %358
  %392 = add nsw i32 %359, 1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %393
  store i64 %228, i64* %394, align 8
  %395 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %393
  store i8 1, i8* %395, align 1
  %396 = add i8 %334, 1
  store i8 %396, i8* %6, align 2
  br label %440

; <label>:397:                                    ; preds = %397, %388
  %398 = phi i64 [ %386, %388 ], [ %427, %397 ]
  %399 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %398
  %400 = load i64, i64* %399, align 8
  %401 = add nsw i64 %398, 1
  %402 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %401
  store i64 %400, i64* %402, align 8
  %403 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %398
  %404 = load i8, i8* %403, align 1
  %405 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %401
  store i8 %404, i8* %405, align 1
  %406 = add i64 %398, -1
  %407 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %406
  %408 = load i64, i64* %407, align 8
  %409 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %398
  store i64 %408, i64* %409, align 8
  %410 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %406
  %411 = load i8, i8* %410, align 1
  %412 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %398
  store i8 %411, i8* %412, align 1
  %413 = add i64 %398, -2
  %414 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %413
  %415 = load i64, i64* %414, align 8
  %416 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %406
  store i64 %415, i64* %416, align 8
  %417 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %413
  %418 = load i8, i8* %417, align 1
  %419 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %406
  store i8 %418, i8* %419, align 1
  %420 = add i64 %398, -3
  %421 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %420
  %422 = load i64, i64* %421, align 8
  %423 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %413
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %420
  %425 = load i8, i8* %424, align 1
  %426 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %413
  store i8 %425, i8* %426, align 1
  %427 = add i64 %398, -4
  %428 = icmp sgt i64 %427, %364
  br i1 %428, label %397, label %389

; <label>:429:                                    ; preds = %349
  %430 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 2, i64 %352
  %431 = load i8, i8* %430, align 1
  %432 = add i8 %431, 1
  store i8 %432, i8* %430, align 1
  br label %440

; <label>:433:                                    ; preds = %331
  %434 = urem i64 %99, %228
  %435 = urem i64 %79, %228
  %436 = urem i64 %191, %228
  %437 = icmp eq i64 %228, 1
  br i1 %437, label %438, label %45

; <label>:438:                                    ; preds = %433
  br label %440

; <label>:439:                                    ; preds = %12
  br label %440

; <label>:440:                                    ; preds = %439, %438, %429, %391
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @factor_using_pollard_rho2(i64, i64, i64, %struct.factors*) unnamed_addr #6 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7) #11
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #11
  %9 = icmp ugt i64 %0, 1
  %10 = zext i1 %9 to i64
  %11 = xor i1 %9, true
  %12 = zext i1 %11 to i64
  %13 = select i1 %9, i64 63, i64 127
  br label %14

; <label>:14:                                     ; preds = %4, %31
  %15 = phi i64 [ %13, %4 ], [ %34, %31 ]
  %16 = phi i64 [ %12, %4 ], [ %33, %31 ]
  %17 = phi i64 [ %10, %4 ], [ %32, %31 ]
  %18 = shl i64 %17, 1
  %19 = lshr i64 %16, 63
  %20 = or i64 %19, %18
  %21 = shl i64 %16, 1
  %22 = icmp ugt i64 %20, %0
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %14
  %24 = icmp ne i64 %20, %0
  %25 = icmp ult i64 %21, %1
  %26 = or i1 %25, %24
  br i1 %26, label %31, label %27

; <label>:27:                                     ; preds = %23, %14
  %28 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %20, i64 %0, i64 %21, i64 %1) #15
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = extractvalue { i64, i64 } %28, 1
  br label %31

; <label>:31:                                     ; preds = %27, %23
  %32 = phi i64 [ %29, %27 ], [ %20, %23 ]
  %33 = phi i64 [ %30, %27 ], [ %21, %23 ]
  %34 = add nsw i64 %15, -1
  %35 = icmp eq i64 %15, 0
  br i1 %35, label %36, label %14

; <label>:36:                                     ; preds = %31
  %37 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %32, i64 %32, i64 %33, i64 %33) #15
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = extractvalue { i64, i64 } %37, 1
  %40 = icmp ugt i64 %38, %0
  br i1 %40, label %45, label %41

; <label>:41:                                     ; preds = %36
  %42 = icmp ne i64 %38, %0
  %43 = icmp ult i64 %39, %1
  %44 = or i1 %42, %43
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %41, %36
  %46 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %38, i64 %0, i64 %39, i64 %1) #15
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = extractvalue { i64, i64 } %46, 1
  br label %49

; <label>:49:                                     ; preds = %41, %45
  %50 = phi i64 [ %38, %41 ], [ %47, %45 ]
  %51 = phi i64 [ %39, %41 ], [ %48, %45 ]
  %52 = icmp ne i64 %0, 0
  %53 = icmp ne i64 %1, 1
  %54 = or i1 %53, %52
  br i1 %54, label %55, label %630

; <label>:55:                                     ; preds = %49
  %56 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 3
  %57 = add i64 %2, 1
  br label %59

; <label>:58:                                     ; preds = %621
  br label %586

; <label>:59:                                     ; preds = %586, %55
  %60 = phi i64 [ %0, %55 ], [ %243, %586 ]
  %61 = phi i64 [ %1, %55 ], [ %235, %586 ]
  %62 = phi i64 [ %51, %55 ], [ %538, %586 ]
  %63 = phi i64 [ %51, %55 ], [ %584, %586 ]
  %64 = phi i64 [ %51, %55 ], [ %587, %586 ]
  %65 = phi i64 [ %32, %55 ], [ %135, %586 ]
  %66 = phi i64 [ %33, %55 ], [ %134, %586 ]
  %67 = phi i64 [ 1, %55 ], [ %101, %586 ]
  %68 = phi i64 [ 1, %55 ], [ %91, %586 ]
  %69 = phi i64 [ %50, %55 ], [ %588, %586 ]
  %70 = phi i64 [ %50, %55 ], [ %583, %586 ]
  %71 = phi i64 [ %50, %55 ], [ %537, %586 ]
  %72 = lshr i64 %61, 1
  %73 = and i64 %72, 127
  %74 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = mul i64 %76, %61
  %78 = sub i64 2, %77
  %79 = mul i64 %76, %78
  %80 = mul i64 %79, %61
  %81 = sub i64 2, %80
  %82 = mul i64 %79, %81
  %83 = mul i64 %82, %61
  %84 = sub i64 2, %83
  %85 = mul i64 %82, %84
  br label %87

; <label>:86:                                     ; preds = %177
  br label %152

; <label>:87:                                     ; preds = %152, %59
  %88 = phi i64 [ %71, %59 ], [ %153, %152 ]
  %89 = phi i64 [ %70, %59 ], [ %121, %152 ]
  %90 = phi i64 [ %69, %59 ], [ %154, %152 ]
  %91 = phi i64 [ %68, %59 ], [ %150, %152 ]
  %92 = phi i64 [ %67, %59 ], [ %155, %152 ]
  %93 = phi i64 [ %66, %59 ], [ %134, %152 ]
  %94 = phi i64 [ %65, %59 ], [ %135, %152 ]
  %95 = phi i64 [ %64, %59 ], [ %156, %152 ]
  %96 = phi i64 [ %63, %59 ], [ %122, %152 ]
  %97 = phi i64 [ %62, %59 ], [ %157, %152 ]
  br label %98

; <label>:98:                                     ; preds = %144, %87
  %99 = phi i64 [ %88, %87 ], [ %121, %144 ]
  %100 = phi i64 [ %90, %87 ], [ %145, %144 ]
  %101 = phi i64 [ %92, %87 ], [ %147, %144 ]
  %102 = phi i64 [ %93, %87 ], [ %134, %144 ]
  %103 = phi i64 [ %94, %87 ], [ %135, %144 ]
  %104 = phi i64 [ %95, %87 ], [ %146, %144 ]
  %105 = phi i64 [ %97, %87 ], [ %122, %144 ]
  %106 = call fastcc i64 @mulredc2(i64* nonnull %6, i64 %99, i64 %105, i64 %99, i64 %105, i64 %60, i64 %61, i64 %85)
  %107 = load i64, i64* %6, align 8
  %108 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %107, i64 0, i64 %106, i64 %2) #15
  %109 = extractvalue { i64, i64 } %108, 0
  %110 = extractvalue { i64, i64 } %108, 1
  %111 = icmp ugt i64 %109, %60
  br i1 %111, label %116, label %112

; <label>:112:                                    ; preds = %98
  %113 = icmp ne i64 %109, %60
  %114 = icmp ult i64 %110, %61
  %115 = or i1 %113, %114
  br i1 %115, label %120, label %116

; <label>:116:                                    ; preds = %112, %98
  %117 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %109, i64 %60, i64 %110, i64 %61) #15
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = extractvalue { i64, i64 } %117, 1
  br label %120

; <label>:120:                                    ; preds = %112, %116
  %121 = phi i64 [ %118, %116 ], [ %109, %112 ]
  %122 = phi i64 [ %119, %116 ], [ %110, %112 ]
  %123 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %89, i64 %121, i64 %96, i64 %122) #15
  %124 = extractvalue { i64, i64 } %123, 0
  %125 = extractvalue { i64, i64 } %123, 1
  %126 = icmp slt i64 %124, 0
  br i1 %126, label %127, label %131

; <label>:127:                                    ; preds = %120
  %128 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %124, i64 %60, i64 %125, i64 %61) #15
  %129 = extractvalue { i64, i64 } %128, 0
  %130 = extractvalue { i64, i64 } %128, 1
  br label %131

; <label>:131:                                    ; preds = %127, %120
  %132 = phi i64 [ %130, %127 ], [ %125, %120 ]
  %133 = phi i64 [ %129, %127 ], [ %124, %120 ]
  %134 = call fastcc i64 @mulredc2(i64* nonnull %6, i64 %103, i64 %102, i64 %133, i64 %132, i64 %60, i64 %61, i64 %85)
  %135 = load i64, i64* %6, align 8
  %136 = and i64 %101, 31
  %137 = icmp eq i64 %136, 1
  br i1 %137, label %138, label %144

; <label>:138:                                    ; preds = %131
  %139 = call fastcc i64 @gcd2_odd(i64* nonnull %5, i64 %135, i64 %134, i64 %60, i64 %61)
  %140 = load i64, i64* %5, align 8
  %141 = icmp ne i64 %140, 0
  %142 = icmp ne i64 %139, 1
  %143 = or i1 %142, %141
  br i1 %143, label %182, label %144

; <label>:144:                                    ; preds = %138, %131
  %145 = phi i64 [ %100, %131 ], [ %121, %138 ]
  %146 = phi i64 [ %104, %131 ], [ %122, %138 ]
  %147 = add i64 %101, -1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %98

; <label>:149:                                    ; preds = %144
  %150 = shl i64 %91, 1
  %151 = icmp eq i64 %91, 0
  br i1 %151, label %152, label %158

; <label>:152:                                    ; preds = %149, %86
  %153 = phi i64 [ %121, %149 ], [ %178, %86 ]
  %154 = phi i64 [ %121, %149 ], [ %178, %86 ]
  %155 = phi i64 [ 0, %149 ], [ %91, %86 ]
  %156 = phi i64 [ %122, %149 ], [ %179, %86 ]
  %157 = phi i64 [ %122, %149 ], [ %179, %86 ]
  br label %87

; <label>:158:                                    ; preds = %149
  br label %159

; <label>:159:                                    ; preds = %158, %177
  %160 = phi i64 [ %179, %177 ], [ %122, %158 ]
  %161 = phi i64 [ %180, %177 ], [ 0, %158 ]
  %162 = phi i64 [ %178, %177 ], [ %121, %158 ]
  %163 = call fastcc i64 @mulredc2(i64* nonnull %6, i64 %162, i64 %160, i64 %162, i64 %160, i64 %60, i64 %61, i64 %85)
  %164 = load i64, i64* %6, align 8
  %165 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %164, i64 0, i64 %163, i64 %2) #15
  %166 = extractvalue { i64, i64 } %165, 0
  %167 = extractvalue { i64, i64 } %165, 1
  %168 = icmp ugt i64 %166, %60
  br i1 %168, label %173, label %169

; <label>:169:                                    ; preds = %159
  %170 = icmp ne i64 %166, %60
  %171 = icmp ult i64 %167, %61
  %172 = or i1 %170, %171
  br i1 %172, label %177, label %173

; <label>:173:                                    ; preds = %169, %159
  %174 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %166, i64 %60, i64 %167, i64 %61) #15
  %175 = extractvalue { i64, i64 } %174, 0
  %176 = extractvalue { i64, i64 } %174, 1
  br label %177

; <label>:177:                                    ; preds = %169, %173
  %178 = phi i64 [ %175, %173 ], [ %166, %169 ]
  %179 = phi i64 [ %176, %173 ], [ %167, %169 ]
  %180 = add nuw i64 %161, 1
  %181 = icmp eq i64 %180, %91
  br i1 %181, label %86, label %159

; <label>:182:                                    ; preds = %138
  br label %183

; <label>:183:                                    ; preds = %182, %211
  %184 = phi i64 [ %201, %211 ], [ %100, %182 ]
  %185 = phi i64 [ %202, %211 ], [ %104, %182 ]
  %186 = call fastcc i64 @mulredc2(i64* nonnull %6, i64 %184, i64 %185, i64 %184, i64 %185, i64 %60, i64 %61, i64 %85)
  %187 = load i64, i64* %6, align 8
  %188 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %187, i64 0, i64 %186, i64 %2) #15
  %189 = extractvalue { i64, i64 } %188, 0
  %190 = extractvalue { i64, i64 } %188, 1
  %191 = icmp ugt i64 %189, %60
  br i1 %191, label %196, label %192

; <label>:192:                                    ; preds = %183
  %193 = icmp ne i64 %189, %60
  %194 = icmp ult i64 %190, %61
  %195 = or i1 %193, %194
  br i1 %195, label %200, label %196

; <label>:196:                                    ; preds = %192, %183
  %197 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %189, i64 %60, i64 %190, i64 %61) #15
  %198 = extractvalue { i64, i64 } %197, 0
  %199 = extractvalue { i64, i64 } %197, 1
  br label %200

; <label>:200:                                    ; preds = %192, %196
  %201 = phi i64 [ %198, %196 ], [ %189, %192 ]
  %202 = phi i64 [ %199, %196 ], [ %190, %192 ]
  %203 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %89, i64 %201, i64 %96, i64 %202) #15
  %204 = extractvalue { i64, i64 } %203, 0
  %205 = extractvalue { i64, i64 } %203, 1
  %206 = icmp slt i64 %204, 0
  br i1 %206, label %207, label %211

; <label>:207:                                    ; preds = %200
  %208 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %204, i64 %60, i64 %205, i64 %61) #15
  %209 = extractvalue { i64, i64 } %208, 0
  %210 = extractvalue { i64, i64 } %208, 1
  br label %211

; <label>:211:                                    ; preds = %207, %200
  %212 = phi i64 [ %210, %207 ], [ %205, %200 ]
  %213 = phi i64 [ %209, %207 ], [ %204, %200 ]
  %214 = call fastcc i64 @gcd2_odd(i64* nonnull %5, i64 %213, i64 %212, i64 %60, i64 %61)
  %215 = load i64, i64* %5, align 8
  %216 = icmp eq i64 %215, 0
  %217 = icmp eq i64 %214, 1
  %218 = and i1 %217, %216
  br i1 %218, label %183, label %219

; <label>:219:                                    ; preds = %211
  br i1 %216, label %220, label %346

; <label>:220:                                    ; preds = %219
  %221 = lshr i64 %214, 1
  %222 = and i64 %221, 127
  %223 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i64
  %226 = mul i64 %225, %214
  %227 = sub i64 2, %226
  %228 = mul i64 %225, %227
  %229 = mul i64 %228, %214
  %230 = sub i64 2, %229
  %231 = mul i64 %228, %230
  %232 = mul i64 %231, %214
  %233 = sub i64 2, %232
  %234 = mul i64 %231, %233
  %235 = mul i64 %234, %61
  %236 = icmp ult i64 %60, %214
  br i1 %236, label %242, label %237

; <label>:237:                                    ; preds = %220
  %238 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %235, i64 %214) #15
  %239 = extractvalue { i64, i64 } %238, 1
  %240 = sub i64 %60, %239
  %241 = mul i64 %240, %234
  br label %242

; <label>:242:                                    ; preds = %220, %237
  %243 = phi i64 [ %241, %237 ], [ 0, %220 ]
  %244 = tail call fastcc zeroext i1 @prime_p(i64 %214)
  br i1 %244, label %246, label %245

; <label>:245:                                    ; preds = %242
  tail call fastcc void @factor_using_pollard_rho(i64 %214, i64 %57, %struct.factors* %3)
  br label %376

; <label>:246:                                    ; preds = %242
  %247 = load i8, i8* %56, align 2
  %248 = zext i8 %247 to i32
  %249 = add nsw i32 %248, -1
  %250 = icmp eq i8 %247, 0
  br i1 %250, label %271, label %251

; <label>:251:                                    ; preds = %246
  %252 = zext i8 %247 to i64
  %253 = add nsw i64 %252, -1
  br label %254

; <label>:254:                                    ; preds = %259, %251
  %255 = phi i64 [ %253, %251 ], [ %260, %259 ]
  %256 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %255
  %257 = load i64, i64* %256, align 8
  %258 = icmp ugt i64 %257, %214
  br i1 %258, label %259, label %262

; <label>:259:                                    ; preds = %254
  %260 = add i64 %255, -1
  %261 = icmp sgt i64 %255, 0
  br i1 %261, label %254, label %269

; <label>:262:                                    ; preds = %254
  %263 = trunc i64 %255 to i32
  %264 = shl i64 %255, 32
  %265 = ashr exact i64 %264, 32
  %266 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %265
  %267 = load i64, i64* %266, align 8
  %268 = icmp eq i64 %267, %214
  br i1 %268, label %342, label %271

; <label>:269:                                    ; preds = %259
  %270 = trunc i64 %260 to i32
  br label %271

; <label>:271:                                    ; preds = %269, %262, %246
  %272 = phi i32 [ %263, %262 ], [ %249, %246 ], [ %270, %269 ]
  %273 = icmp sgt i32 %249, %272
  br i1 %273, label %274, label %304

; <label>:274:                                    ; preds = %271
  %275 = zext i8 %247 to i64
  %276 = add nsw i64 %275, -1
  %277 = sext i32 %272 to i64
  %278 = sub nsw i64 %276, %277
  %279 = add nsw i64 %275, -2
  %280 = sub nsw i64 %279, %277
  %281 = and i64 %278, 3
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %298, label %283

; <label>:283:                                    ; preds = %274
  br label %284

; <label>:284:                                    ; preds = %284, %283
  %285 = phi i64 [ %276, %283 ], [ %294, %284 ]
  %286 = phi i64 [ %281, %283 ], [ %295, %284 ]
  %287 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %285
  %288 = load i64, i64* %287, align 8
  %289 = add nsw i64 %285, 1
  %290 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %289
  store i64 %288, i64* %290, align 8
  %291 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %285
  %292 = load i8, i8* %291, align 1
  %293 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %289
  store i8 %292, i8* %293, align 1
  %294 = add i64 %285, -1
  %295 = add i64 %286, -1
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %284

; <label>:297:                                    ; preds = %284
  br label %298

; <label>:298:                                    ; preds = %274, %297
  %299 = phi i64 [ %276, %274 ], [ %294, %297 ]
  %300 = icmp ult i64 %280, 3
  br i1 %300, label %303, label %301

; <label>:301:                                    ; preds = %298
  br label %310

; <label>:302:                                    ; preds = %310
  br label %303

; <label>:303:                                    ; preds = %298, %302
  br label %304

; <label>:304:                                    ; preds = %303, %271
  %305 = add nsw i32 %272, 1
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %306
  store i64 %214, i64* %307, align 8
  %308 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %306
  store i8 1, i8* %308, align 1
  %309 = add i8 %247, 1
  store i8 %309, i8* %56, align 2
  br label %376

; <label>:310:                                    ; preds = %310, %301
  %311 = phi i64 [ %299, %301 ], [ %340, %310 ]
  %312 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %311
  %313 = load i64, i64* %312, align 8
  %314 = add nsw i64 %311, 1
  %315 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %314
  store i64 %313, i64* %315, align 8
  %316 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %311
  %317 = load i8, i8* %316, align 1
  %318 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %314
  store i8 %317, i8* %318, align 1
  %319 = add i64 %311, -1
  %320 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %319
  %321 = load i64, i64* %320, align 8
  %322 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %311
  store i64 %321, i64* %322, align 8
  %323 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %319
  %324 = load i8, i8* %323, align 1
  %325 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %311
  store i8 %324, i8* %325, align 1
  %326 = add i64 %311, -2
  %327 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %326
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %319
  store i64 %328, i64* %329, align 8
  %330 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %326
  %331 = load i8, i8* %330, align 1
  %332 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %319
  store i8 %331, i8* %332, align 1
  %333 = add i64 %311, -3
  %334 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %333
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %326
  store i64 %335, i64* %336, align 8
  %337 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %333
  %338 = load i8, i8* %337, align 1
  %339 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %326
  store i8 %338, i8* %339, align 1
  %340 = add i64 %311, -4
  %341 = icmp sgt i64 %340, %277
  br i1 %341, label %310, label %302

; <label>:342:                                    ; preds = %262
  %343 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %265
  %344 = load i8, i8* %343, align 1
  %345 = add i8 %344, 1
  store i8 %345, i8* %343, align 1
  br label %376

; <label>:346:                                    ; preds = %219
  %347 = icmp eq i64 %60, %215
  %348 = icmp eq i64 %61, %214
  %349 = and i1 %348, %347
  br i1 %349, label %375, label %350

; <label>:350:                                    ; preds = %346
  %351 = lshr i64 %214, 1
  %352 = and i64 %351, 127
  %353 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i64
  %356 = mul i64 %355, %214
  %357 = sub i64 2, %356
  %358 = mul i64 %355, %357
  %359 = mul i64 %358, %214
  %360 = sub i64 2, %359
  %361 = mul i64 %358, %360
  %362 = mul i64 %361, %214
  %363 = sub i64 2, %362
  %364 = mul i64 %361, %363
  %365 = mul i64 %364, %61
  %366 = tail call fastcc zeroext i1 @prime2_p(i64 %215, i64 %214)
  br i1 %366, label %368, label %367

; <label>:367:                                    ; preds = %350
  tail call fastcc void @factor_using_pollard_rho2(i64 %215, i64 %214, i64 %57, %struct.factors* %3)
  br label %379

; <label>:368:                                    ; preds = %350
  %369 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 1
  %370 = load i64, i64* %369, align 8
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %373, label %372

; <label>:372:                                    ; preds = %368
  tail call void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 565, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__.factor_insert_large, i64 0, i64 0)) #16
  unreachable

; <label>:373:                                    ; preds = %368
  %374 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 0
  store i64 %214, i64* %374, align 8
  store i64 %215, i64* %369, align 8
  br label %379

; <label>:375:                                    ; preds = %346
  tail call fastcc void @factor_using_pollard_rho2(i64 %60, i64 %61, i64 %57, %struct.factors* %3)
  br label %630

; <label>:376:                                    ; preds = %342, %304, %245
  %377 = icmp eq i64 %243, 0
  br i1 %377, label %378, label %483

; <label>:378:                                    ; preds = %376
  br label %379

; <label>:379:                                    ; preds = %378, %367, %373
  %380 = phi i64 [ %365, %373 ], [ %365, %367 ], [ %235, %378 ]
  %381 = tail call fastcc zeroext i1 @prime_p(i64 %380)
  br i1 %381, label %382, label %482

; <label>:382:                                    ; preds = %379
  %383 = load i8, i8* %56, align 2
  %384 = zext i8 %383 to i32
  %385 = add nsw i32 %384, -1
  %386 = icmp eq i8 %383, 0
  br i1 %386, label %407, label %387

; <label>:387:                                    ; preds = %382
  %388 = zext i8 %383 to i64
  %389 = add nsw i64 %388, -1
  br label %390

; <label>:390:                                    ; preds = %395, %387
  %391 = phi i64 [ %389, %387 ], [ %396, %395 ]
  %392 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %391
  %393 = load i64, i64* %392, align 8
  %394 = icmp ugt i64 %393, %380
  br i1 %394, label %395, label %398

; <label>:395:                                    ; preds = %390
  %396 = add i64 %391, -1
  %397 = icmp sgt i64 %391, 0
  br i1 %397, label %390, label %405

; <label>:398:                                    ; preds = %390
  %399 = trunc i64 %391 to i32
  %400 = shl i64 %391, 32
  %401 = ashr exact i64 %400, 32
  %402 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %401
  %403 = load i64, i64* %402, align 8
  %404 = icmp eq i64 %403, %380
  br i1 %404, label %478, label %407

; <label>:405:                                    ; preds = %395
  %406 = trunc i64 %396 to i32
  br label %407

; <label>:407:                                    ; preds = %405, %398, %382
  %408 = phi i32 [ %399, %398 ], [ %385, %382 ], [ %406, %405 ]
  %409 = icmp sgt i32 %385, %408
  br i1 %409, label %410, label %440

; <label>:410:                                    ; preds = %407
  %411 = zext i8 %383 to i64
  %412 = add nsw i64 %411, -1
  %413 = sext i32 %408 to i64
  %414 = sub nsw i64 %412, %413
  %415 = add nsw i64 %411, -2
  %416 = sub nsw i64 %415, %413
  %417 = and i64 %414, 3
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %434, label %419

; <label>:419:                                    ; preds = %410
  br label %420

; <label>:420:                                    ; preds = %420, %419
  %421 = phi i64 [ %412, %419 ], [ %430, %420 ]
  %422 = phi i64 [ %417, %419 ], [ %431, %420 ]
  %423 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %421
  %424 = load i64, i64* %423, align 8
  %425 = add nsw i64 %421, 1
  %426 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %425
  store i64 %424, i64* %426, align 8
  %427 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %421
  %428 = load i8, i8* %427, align 1
  %429 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %425
  store i8 %428, i8* %429, align 1
  %430 = add i64 %421, -1
  %431 = add i64 %422, -1
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %420

; <label>:433:                                    ; preds = %420
  br label %434

; <label>:434:                                    ; preds = %410, %433
  %435 = phi i64 [ %412, %410 ], [ %430, %433 ]
  %436 = icmp ult i64 %416, 3
  br i1 %436, label %439, label %437

; <label>:437:                                    ; preds = %434
  br label %446

; <label>:438:                                    ; preds = %446
  br label %439

; <label>:439:                                    ; preds = %434, %438
  br label %440

; <label>:440:                                    ; preds = %439, %407
  %441 = add nsw i32 %408, 1
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %442
  store i64 %380, i64* %443, align 8
  %444 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %442
  store i8 1, i8* %444, align 1
  %445 = add i8 %383, 1
  store i8 %445, i8* %56, align 2
  br label %630

; <label>:446:                                    ; preds = %446, %437
  %447 = phi i64 [ %435, %437 ], [ %476, %446 ]
  %448 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %447
  %449 = load i64, i64* %448, align 8
  %450 = add nsw i64 %447, 1
  %451 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %450
  store i64 %449, i64* %451, align 8
  %452 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %447
  %453 = load i8, i8* %452, align 1
  %454 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %450
  store i8 %453, i8* %454, align 1
  %455 = add i64 %447, -1
  %456 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %455
  %457 = load i64, i64* %456, align 8
  %458 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %447
  store i64 %457, i64* %458, align 8
  %459 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %455
  %460 = load i8, i8* %459, align 1
  %461 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %447
  store i8 %460, i8* %461, align 1
  %462 = add i64 %447, -2
  %463 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %462
  %464 = load i64, i64* %463, align 8
  %465 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %455
  store i64 %464, i64* %465, align 8
  %466 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %462
  %467 = load i8, i8* %466, align 1
  %468 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %455
  store i8 %467, i8* %468, align 1
  %469 = add i64 %447, -3
  %470 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %469
  %471 = load i64, i64* %470, align 8
  %472 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 1, i64 %462
  store i64 %471, i64* %472, align 8
  %473 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %469
  %474 = load i8, i8* %473, align 1
  %475 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %462
  store i8 %474, i8* %475, align 1
  %476 = add i64 %447, -4
  %477 = icmp sgt i64 %476, %413
  br i1 %477, label %446, label %438

; <label>:478:                                    ; preds = %398
  %479 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 2, i64 %401
  %480 = load i8, i8* %479, align 1
  %481 = add i8 %480, 1
  store i8 %481, i8* %479, align 1
  br label %630

; <label>:482:                                    ; preds = %379
  tail call fastcc void @factor_using_pollard_rho(i64 %380, i64 %2, %struct.factors* %3)
  br label %630

; <label>:483:                                    ; preds = %376
  %484 = tail call fastcc zeroext i1 @prime2_p(i64 %243, i64 %235)
  br i1 %484, label %485, label %492

; <label>:485:                                    ; preds = %483
  %486 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 1
  %487 = load i64, i64* %486, align 8
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %490, label %489

; <label>:489:                                    ; preds = %485
  tail call void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 565, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__.factor_insert_large, i64 0, i64 0)) #16
  unreachable

; <label>:490:                                    ; preds = %485
  %491 = getelementptr inbounds %struct.factors, %struct.factors* %3, i64 0, i32 0, i64 0
  store i64 %235, i64* %491, align 8
  store i64 %243, i64* %486, align 8
  br label %630

; <label>:492:                                    ; preds = %483
  %493 = icmp eq i64 %121, 0
  br i1 %493, label %536, label %494

; <label>:494:                                    ; preds = %492
  %495 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %243) #15
  %496 = trunc i64 %495 to i32
  %497 = xor i32 %496, 63
  %498 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %121) #15
  %499 = trunc i64 %498 to i32
  %500 = xor i32 %499, 63
  %501 = sub nsw i32 %497, %500
  %502 = zext i32 %501 to i64
  %503 = icmp sgt i32 %501, 0
  br i1 %503, label %504, label %536

; <label>:504:                                    ; preds = %494
  %505 = shl i64 %235, %502
  %506 = sub nsw i32 64, %501
  %507 = zext i32 %506 to i64
  %508 = lshr i64 %235, %507
  %509 = shl i64 %243, %502
  %510 = or i64 %508, %509
  br label %511

; <label>:511:                                    ; preds = %526, %504
  %512 = phi i32 [ %533, %526 ], [ 0, %504 ]
  %513 = phi i64 [ %528, %526 ], [ %121, %504 ]
  %514 = phi i64 [ %527, %526 ], [ %122, %504 ]
  %515 = phi i64 [ %532, %526 ], [ %510, %504 ]
  %516 = phi i64 [ %531, %526 ], [ %505, %504 ]
  %517 = icmp ugt i64 %513, %515
  br i1 %517, label %522, label %518

; <label>:518:                                    ; preds = %511
  %519 = icmp ne i64 %513, %515
  %520 = icmp ult i64 %514, %516
  %521 = or i1 %519, %520
  br i1 %521, label %526, label %522

; <label>:522:                                    ; preds = %518, %511
  %523 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %513, i64 %515, i64 %514, i64 %516) #15
  %524 = extractvalue { i64, i64 } %523, 0
  %525 = extractvalue { i64, i64 } %523, 1
  br label %526

; <label>:526:                                    ; preds = %522, %518
  %527 = phi i64 [ %525, %522 ], [ %514, %518 ]
  %528 = phi i64 [ %524, %522 ], [ %513, %518 ]
  %529 = shl i64 %515, 63
  %530 = lshr i64 %516, 1
  %531 = or i64 %530, %529
  %532 = lshr i64 %515, 1
  %533 = add nuw nsw i32 %512, 1
  %534 = icmp eq i32 %533, %501
  br i1 %534, label %535, label %511

; <label>:535:                                    ; preds = %526
  br label %536

; <label>:536:                                    ; preds = %535, %494, %492
  %537 = phi i64 [ 0, %492 ], [ %121, %494 ], [ %528, %535 ]
  %538 = phi i64 [ %122, %492 ], [ %122, %494 ], [ %527, %535 ]
  %539 = icmp eq i64 %89, 0
  br i1 %539, label %582, label %540

; <label>:540:                                    ; preds = %536
  %541 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %243) #15
  %542 = trunc i64 %541 to i32
  %543 = xor i32 %542, 63
  %544 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %89) #15
  %545 = trunc i64 %544 to i32
  %546 = xor i32 %545, 63
  %547 = sub nsw i32 %543, %546
  %548 = zext i32 %547 to i64
  %549 = icmp sgt i32 %547, 0
  br i1 %549, label %550, label %582

; <label>:550:                                    ; preds = %540
  %551 = shl i64 %235, %548
  %552 = sub nsw i32 64, %547
  %553 = zext i32 %552 to i64
  %554 = lshr i64 %235, %553
  %555 = shl i64 %243, %548
  %556 = or i64 %554, %555
  br label %557

; <label>:557:                                    ; preds = %572, %550
  %558 = phi i32 [ %579, %572 ], [ 0, %550 ]
  %559 = phi i64 [ %574, %572 ], [ %89, %550 ]
  %560 = phi i64 [ %573, %572 ], [ %96, %550 ]
  %561 = phi i64 [ %578, %572 ], [ %556, %550 ]
  %562 = phi i64 [ %577, %572 ], [ %551, %550 ]
  %563 = icmp ugt i64 %559, %561
  br i1 %563, label %568, label %564

; <label>:564:                                    ; preds = %557
  %565 = icmp ne i64 %559, %561
  %566 = icmp ult i64 %560, %562
  %567 = or i1 %565, %566
  br i1 %567, label %572, label %568

; <label>:568:                                    ; preds = %564, %557
  %569 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %559, i64 %561, i64 %560, i64 %562) #15
  %570 = extractvalue { i64, i64 } %569, 0
  %571 = extractvalue { i64, i64 } %569, 1
  br label %572

; <label>:572:                                    ; preds = %568, %564
  %573 = phi i64 [ %571, %568 ], [ %560, %564 ]
  %574 = phi i64 [ %570, %568 ], [ %559, %564 ]
  %575 = shl i64 %561, 63
  %576 = lshr i64 %562, 1
  %577 = or i64 %576, %575
  %578 = lshr i64 %561, 1
  %579 = add nuw nsw i32 %558, 1
  %580 = icmp eq i32 %579, %547
  br i1 %580, label %581, label %557

; <label>:581:                                    ; preds = %572
  br label %582

; <label>:582:                                    ; preds = %581, %540, %536
  %583 = phi i64 [ 0, %536 ], [ %89, %540 ], [ %574, %581 ]
  %584 = phi i64 [ %96, %536 ], [ %96, %540 ], [ %573, %581 ]
  %585 = icmp eq i64 %201, 0
  br i1 %585, label %586, label %589

; <label>:586:                                    ; preds = %582, %589, %58
  %587 = phi i64 [ %202, %582 ], [ %202, %589 ], [ %622, %58 ]
  %588 = phi i64 [ 0, %582 ], [ %201, %589 ], [ %623, %58 ]
  br label %59

; <label>:589:                                    ; preds = %582
  %590 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %243) #15
  %591 = trunc i64 %590 to i32
  %592 = xor i32 %591, 63
  %593 = tail call i64 asm "bsrq $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %201) #15
  %594 = trunc i64 %593 to i32
  %595 = xor i32 %594, 63
  %596 = sub nsw i32 %592, %595
  %597 = zext i32 %596 to i64
  %598 = icmp sgt i32 %596, 0
  br i1 %598, label %599, label %586

; <label>:599:                                    ; preds = %589
  %600 = shl i64 %235, %597
  %601 = sub nsw i32 64, %596
  %602 = zext i32 %601 to i64
  %603 = lshr i64 %235, %602
  %604 = shl i64 %243, %597
  %605 = or i64 %603, %604
  br label %606

; <label>:606:                                    ; preds = %621, %599
  %607 = phi i32 [ %628, %621 ], [ 0, %599 ]
  %608 = phi i64 [ %623, %621 ], [ %201, %599 ]
  %609 = phi i64 [ %622, %621 ], [ %202, %599 ]
  %610 = phi i64 [ %627, %621 ], [ %605, %599 ]
  %611 = phi i64 [ %626, %621 ], [ %600, %599 ]
  %612 = icmp ugt i64 %608, %610
  br i1 %612, label %617, label %613

; <label>:613:                                    ; preds = %606
  %614 = icmp ne i64 %608, %610
  %615 = icmp ult i64 %609, %611
  %616 = or i1 %614, %615
  br i1 %616, label %621, label %617

; <label>:617:                                    ; preds = %613, %606
  %618 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %608, i64 %610, i64 %609, i64 %611) #15
  %619 = extractvalue { i64, i64 } %618, 0
  %620 = extractvalue { i64, i64 } %618, 1
  br label %621

; <label>:621:                                    ; preds = %617, %613
  %622 = phi i64 [ %620, %617 ], [ %609, %613 ]
  %623 = phi i64 [ %619, %617 ], [ %608, %613 ]
  %624 = shl i64 %610, 63
  %625 = lshr i64 %611, 1
  %626 = or i64 %625, %624
  %627 = lshr i64 %610, 1
  %628 = add nuw nsw i32 %607, 1
  %629 = icmp eq i32 %628, %596
  br i1 %629, label %58, label %606

; <label>:630:                                    ; preds = %49, %478, %440, %375, %490, %482
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7) #11
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @mulredc2(i64* nocapture, i64, i64, i64, i64, i64, i64, i64) unnamed_addr #6 {
  %9 = sub i64 0, %7
  %10 = icmp sgt i64 %1, -1
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %8
  tail call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 999, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @__PRETTY_FUNCTION__.mulredc2, i64 0, i64 0)) #16
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = icmp sgt i64 %3, -1
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %12
  tail call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1000, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @__PRETTY_FUNCTION__.mulredc2, i64 0, i64 0)) #16
  unreachable

; <label>:15:                                     ; preds = %12
  %16 = icmp sgt i64 %5, -1
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %15
  tail call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1001, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @__PRETTY_FUNCTION__.mulredc2, i64 0, i64 0)) #16
  unreachable

; <label>:18:                                     ; preds = %15
  %19 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %2, i64 %4) #15
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = extractvalue { i64, i64 } %19, 1
  %22 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %2, i64 %3) #15
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = extractvalue { i64, i64 } %22, 1
  %25 = mul i64 %20, %9
  %26 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %25, i64 %6) #15
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %25, i64 %5) #15
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = extractvalue { i64, i64 } %28, 1
  %31 = icmp ne i64 %20, 0
  %32 = zext i1 %31 to i64
  %33 = add i64 %32, %23
  %34 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %24, i64 0, i64 %33, i64 %27) #15
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  %37 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %35, i64 0, i64 %36, i64 %21) #15
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = extractvalue { i64, i64 } %37, 1
  %40 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %38, i64 %30, i64 %39, i64 %29) #15
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = extractvalue { i64, i64 } %40, 1
  %43 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %1, i64 %4) #15
  %44 = extractvalue { i64, i64 } %43, 0
  %45 = extractvalue { i64, i64 } %43, 1
  %46 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %1, i64 %3) #15
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = extractvalue { i64, i64 } %46, 1
  %49 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %45, i64 0, i64 %44, i64 %42) #15
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = extractvalue { i64, i64 } %49, 1
  %52 = mul i64 %51, %9
  %53 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %48, i64 0, i64 %47, i64 %41) #15
  %54 = extractvalue { i64, i64 } %53, 0
  %55 = extractvalue { i64, i64 } %53, 1
  %56 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %52, i64 %6) #15
  %57 = extractvalue { i64, i64 } %56, 1
  %58 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %52, i64 %5) #15
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = extractvalue { i64, i64 } %58, 1
  %61 = icmp ne i64 %51, 0
  %62 = zext i1 %61 to i64
  %63 = add i64 %62, %55
  %64 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %54, i64 0, i64 %63, i64 %57) #15
  %65 = extractvalue { i64, i64 } %64, 0
  %66 = extractvalue { i64, i64 } %64, 1
  %67 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %65, i64 0, i64 %66, i64 %50) #15
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = extractvalue { i64, i64 } %67, 1
  %70 = tail call { i64, i64 } asm "addq $5,${1:q}\0A\09adcq $3,${0:q}", "=r,=&r,0,rme,%1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %68, i64 %60, i64 %69, i64 %59) #15
  %71 = extractvalue { i64, i64 } %70, 0
  %72 = extractvalue { i64, i64 } %70, 1
  %73 = icmp ugt i64 %71, %5
  br i1 %73, label %78, label %74

; <label>:74:                                     ; preds = %18
  %75 = icmp ne i64 %71, %5
  %76 = icmp ult i64 %72, %6
  %77 = or i1 %75, %76
  br i1 %77, label %82, label %78

; <label>:78:                                     ; preds = %74, %18
  %79 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %71, i64 %5, i64 %72, i64 %6) #15
  %80 = extractvalue { i64, i64 } %79, 0
  %81 = extractvalue { i64, i64 } %79, 1
  br label %82

; <label>:82:                                     ; preds = %74, %78
  %83 = phi i64 [ %81, %78 ], [ %72, %74 ]
  %84 = phi i64 [ %80, %78 ], [ %71, %74 ]
  store i64 %84, i64* %0, align 8
  ret i64 %83
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @gcd2_odd(i64* nocapture, i64, i64, i64, i64) unnamed_addr #6 {
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5
  tail call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 483, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @__PRETTY_FUNCTION__.gcd2_odd, i64 0, i64 0)) #16
  unreachable

; <label>:9:                                      ; preds = %5
  %10 = or i64 %2, %1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %12

; <label>:12:                                     ; preds = %9
  %13 = and i64 %2, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %18

; <label>:15:                                     ; preds = %12
  br label %24

; <label>:16:                                     ; preds = %9
  store i64 %3, i64* %0, align 8
  br label %116

; <label>:17:                                     ; preds = %24
  br label %18

; <label>:18:                                     ; preds = %17, %12
  %19 = phi i64 [ %1, %12 ], [ %30, %17 ]
  %20 = phi i64 [ %2, %12 ], [ %29, %17 ]
  %21 = or i64 %19, %3
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %46, label %23

; <label>:23:                                     ; preds = %18
  br label %36

; <label>:24:                                     ; preds = %15, %24
  %25 = phi i64 [ %29, %24 ], [ %2, %15 ]
  %26 = phi i64 [ %30, %24 ], [ %1, %15 ]
  %27 = shl i64 %26, 63
  %28 = lshr i64 %25, 1
  %29 = or i64 %28, %27
  %30 = lshr i64 %26, 1
  %31 = and i64 %28, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %24, label %17

; <label>:33:                                     ; preds = %88
  %34 = or i64 %84, %94
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %45, label %36

; <label>:36:                                     ; preds = %23, %33
  %37 = phi i64 [ %76, %33 ], [ %4, %23 ]
  %38 = phi i64 [ %84, %33 ], [ %3, %23 ]
  %39 = phi i64 [ %93, %33 ], [ %20, %23 ]
  %40 = phi i64 [ %94, %33 ], [ %19, %23 ]
  br label %75

; <label>:41:                                     ; preds = %106
  %42 = or i64 %112, %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %75

; <label>:44:                                     ; preds = %41
  br label %46

; <label>:45:                                     ; preds = %33
  br label %46

; <label>:46:                                     ; preds = %45, %44, %18
  %47 = phi i64 [ %20, %18 ], [ %39, %44 ], [ %93, %45 ]
  %48 = phi i64 [ %4, %18 ], [ %111, %44 ], [ %76, %45 ]
  store i64 0, i64* %0, align 8
  %49 = and i64 %47, 1
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i64 %48, i64 %47
  %52 = select i1 %50, i64 %47, i64 %48
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %116, label %54

; <label>:54:                                     ; preds = %46
  %55 = lshr i64 %51, 1
  br label %56

; <label>:56:                                     ; preds = %67, %54
  %57 = phi i64 [ %55, %54 ], [ %70, %67 ]
  %58 = phi i64 [ %52, %54 ], [ %72, %67 ]
  br label %59

; <label>:59:                                     ; preds = %59, %56
  %60 = phi i64 [ %58, %56 ], [ %63, %59 ]
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  %63 = lshr i64 %60, 1
  br i1 %62, label %59, label %64

; <label>:64:                                     ; preds = %59
  %65 = sub i64 %63, %57
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %73, label %67

; <label>:67:                                     ; preds = %64
  %68 = ashr i64 %65, 63
  %69 = and i64 %68, %65
  %70 = add i64 %69, %57
  %71 = xor i64 %68, %65
  %72 = sub i64 %71, %68
  br label %56

; <label>:73:                                     ; preds = %64
  %74 = or i64 %60, 1
  br label %116

; <label>:75:                                     ; preds = %36, %41
  %76 = phi i64 [ %37, %36 ], [ %111, %41 ]
  %77 = phi i64 [ %38, %36 ], [ %112, %41 ]
  %78 = icmp ugt i64 %40, %77
  br i1 %78, label %83, label %79

; <label>:79:                                     ; preds = %75
  %80 = icmp eq i64 %40, %77
  %81 = icmp ugt i64 %39, %76
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %97

; <label>:83:                                     ; preds = %79, %75
  %84 = phi i64 [ %40, %79 ], [ %77, %75 ]
  %85 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %40, i64 %84, i64 %39, i64 %76) #15
  %86 = extractvalue { i64, i64 } %85, 0
  %87 = extractvalue { i64, i64 } %85, 1
  br label %88

; <label>:88:                                     ; preds = %88, %83
  %89 = phi i64 [ %86, %83 ], [ %94, %88 ]
  %90 = phi i64 [ %87, %83 ], [ %93, %88 ]
  %91 = shl i64 %89, 63
  %92 = lshr i64 %90, 1
  %93 = or i64 %92, %91
  %94 = lshr i64 %89, 1
  %95 = and i64 %92, 1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %88, label %33

; <label>:97:                                     ; preds = %79
  %98 = icmp ugt i64 %77, %40
  %99 = icmp ugt i64 %76, %39
  %100 = and i1 %80, %99
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %115

; <label>:102:                                    ; preds = %97
  %103 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %77, i64 %40, i64 %76, i64 %39) #15
  %104 = extractvalue { i64, i64 } %103, 0
  %105 = extractvalue { i64, i64 } %103, 1
  br label %106

; <label>:106:                                    ; preds = %106, %102
  %107 = phi i64 [ %104, %102 ], [ %112, %106 ]
  %108 = phi i64 [ %105, %102 ], [ %111, %106 ]
  %109 = shl i64 %107, 63
  %110 = lshr i64 %108, 1
  %111 = or i64 %110, %109
  %112 = lshr i64 %107, 1
  %113 = and i64 %110, 1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %106, label %41

; <label>:115:                                    ; preds = %97
  store i64 %40, i64* %0, align 8
  br label %116

; <label>:116:                                    ; preds = %73, %46, %115, %16
  %117 = phi i64 [ %4, %16 ], [ %39, %115 ], [ %74, %73 ], [ %51, %46 ]
  ret i64 %117
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @prime_p(i64) unnamed_addr #6 {
  %2 = alloca %struct.factors, align 8
  %3 = bitcast %struct.factors* %2 to i8*
  call void @llvm.lifetime.start(i64 256, i8* nonnull %3) #11
  %4 = icmp ult i64 %0, 2
  br i1 %4, label %178, label %5

; <label>:5:                                      ; preds = %1
  %6 = icmp ult i64 %0, 25030009
  br i1 %6, label %178, label %7

; <label>:7:                                      ; preds = %5
  %8 = add i64 %0, -1
  %9 = and i64 %8, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %20

; <label>:11:                                     ; preds = %7
  br label %12

; <label>:12:                                     ; preds = %11, %12
  %13 = phi i32 [ %16, %12 ], [ 0, %11 ]
  %14 = phi i64 [ %15, %12 ], [ %8, %11 ]
  %15 = lshr i64 %14, 1
  %16 = add nuw nsw i32 %13, 1
  %17 = and i64 %15, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %12, label %19

; <label>:19:                                     ; preds = %12
  br label %20

; <label>:20:                                     ; preds = %19, %7
  %21 = phi i64 [ %8, %7 ], [ %15, %19 ]
  %22 = phi i32 [ 0, %7 ], [ %16, %19 ]
  %23 = lshr i64 %0, 1
  %24 = and i64 %23, 127
  %25 = getelementptr inbounds [128 x i8], [128 x i8]* @binvert_table, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = mul i64 %27, %0
  %29 = sub i64 2, %28
  %30 = mul i64 %27, %29
  %31 = mul i64 %30, %0
  %32 = sub i64 2, %31
  %33 = mul i64 %30, %32
  %34 = mul i64 %33, %0
  %35 = sub i64 2, %34
  %36 = mul i64 %33, %35
  %37 = icmp ugt i64 %0, 1
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %20
  br label %47

; <label>:39:                                     ; preds = %20
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1220, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__PRETTY_FUNCTION__.prime_p, i64 0, i64 0)) #16
  unreachable

; <label>:40:                                     ; preds = %66
  %41 = sub i64 %0, %68
  %42 = icmp ult i64 %68, %41
  %43 = select i1 %42, i64 %0, i64 0
  %44 = sub i64 %68, %41
  %45 = add i64 %44, %43
  %46 = tail call fastcc zeroext i1 @millerrabin(i64 %0, i64 %36, i64 %45, i64 %21, i32 %22, i64 %68) #1
  br i1 %46, label %71, label %178

; <label>:47:                                     ; preds = %38, %66
  %48 = phi i32 [ %69, %66 ], [ 64, %38 ]
  %49 = phi i64 [ %68, %66 ], [ 0, %38 ]
  %50 = phi i64 [ %67, %66 ], [ 1, %38 ]
  %51 = phi i64 [ %55, %66 ], [ 0, %38 ]
  %52 = phi i64 [ %56, %66 ], [ %0, %38 ]
  %53 = shl i64 %52, 63
  %54 = lshr i64 %51, 1
  %55 = or i64 %54, %53
  %56 = lshr i64 %52, 1
  %57 = icmp ugt i64 %50, %56
  br i1 %57, label %62, label %58

; <label>:58:                                     ; preds = %47
  %59 = icmp ne i64 %50, %56
  %60 = icmp ult i64 %49, %55
  %61 = or i1 %59, %60
  br i1 %61, label %66, label %62

; <label>:62:                                     ; preds = %58, %47
  %63 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %50, i64 %56, i64 %49, i64 %55) #15
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = extractvalue { i64, i64 } %63, 1
  br label %66

; <label>:66:                                     ; preds = %58, %62
  %67 = phi i64 [ %64, %62 ], [ %50, %58 ]
  %68 = phi i64 [ %65, %62 ], [ %49, %58 ]
  %69 = add nsw i32 %48, -1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %40, label %47

; <label>:71:                                     ; preds = %40
  call fastcc void @factor(i64 0, i64 %8, %struct.factors* nonnull %2)
  %72 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 3
  %73 = load i8, i8* %72, align 2
  %74 = icmp eq i8 %73, 0
  %75 = zext i8 %73 to i64
  br label %78

; <label>:76:                                     ; preds = %170
  %77 = icmp ult i64 %173, 668
  br i1 %77, label %78, label %174

; <label>:78:                                     ; preds = %71, %76
  %79 = phi i64 [ 0, %71 ], [ %173, %76 ]
  %80 = phi i64 [ %45, %71 ], [ %171, %76 ]
  %81 = phi i64 [ 2, %71 ], [ %134, %76 ]
  br i1 %74, label %176, label %82

; <label>:82:                                     ; preds = %78
  br label %83

; <label>:83:                                     ; preds = %82, %124
  %84 = phi i64 [ %126, %124 ], [ 0, %82 ]
  %85 = getelementptr inbounds %struct.factors, %struct.factors* %2, i64 0, i32 1, i64 %84
  %86 = load i64, i64* %85, align 8
  %87 = udiv i64 %8, %86
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %88, 0
  %90 = select i1 %89, i64 %68, i64 %80
  br label %91

; <label>:91:                                     ; preds = %113, %83
  %92 = phi i64 [ %87, %83 ], [ %110, %113 ]
  %93 = phi i64 [ %80, %83 ], [ %109, %113 ]
  %94 = phi i64 [ %90, %83 ], [ %123, %113 ]
  br label %95

; <label>:95:                                     ; preds = %99, %91
  %96 = phi i64 [ %110, %99 ], [ %92, %91 ]
  %97 = phi i64 [ %109, %99 ], [ %93, %91 ]
  %98 = icmp eq i64 %96, 0
  br i1 %98, label %124, label %99

; <label>:99:                                     ; preds = %95
  %100 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %97, i64 %97) #15
  %101 = extractvalue { i64, i64 } %100, 0
  %102 = extractvalue { i64, i64 } %100, 1
  %103 = mul i64 %101, %36
  %104 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %103, i64 %0) #15
  %105 = extractvalue { i64, i64 } %104, 1
  %106 = sub i64 %102, %105
  %107 = icmp ult i64 %102, %105
  %108 = select i1 %107, i64 %0, i64 0
  %109 = add i64 %108, %106
  %110 = lshr i64 %96, 1
  %111 = and i64 %110, 1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %95, label %113

; <label>:113:                                    ; preds = %99
  %114 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %94, i64 %109) #15
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = extractvalue { i64, i64 } %114, 1
  %117 = mul i64 %115, %36
  %118 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %117, i64 %0) #15
  %119 = extractvalue { i64, i64 } %118, 1
  %120 = sub i64 %116, %119
  %121 = icmp ult i64 %116, %119
  %122 = select i1 %121, i64 %0, i64 0
  %123 = add i64 %120, %122
  br label %91

; <label>:124:                                    ; preds = %95
  %125 = icmp ne i64 %94, %68
  %126 = add nuw nsw i64 %84, 1
  %127 = icmp ult i64 %126, %75
  %128 = and i1 %125, %127
  br i1 %128, label %83, label %129

; <label>:129:                                    ; preds = %124
  br i1 %125, label %176, label %130

; <label>:130:                                    ; preds = %129
  %131 = getelementptr inbounds [675 x i8], [675 x i8]* @primes_diff, i64 0, i64 %79
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i64
  %134 = add i64 %133, %81
  %135 = call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %68, i64 %134) #15
  %136 = extractvalue { i64, i64 } %135, 0
  %137 = extractvalue { i64, i64 } %135, 1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %141

; <label>:139:                                    ; preds = %130
  %140 = urem i64 %136, %0
  br label %170

; <label>:141:                                    ; preds = %130
  %142 = icmp ult i64 %137, %0
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %141
  br label %145

; <label>:144:                                    ; preds = %141
  call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 1268, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__PRETTY_FUNCTION__.prime_p, i64 0, i64 0)) #16
  unreachable

; <label>:145:                                    ; preds = %143, %164
  %146 = phi i32 [ %167, %164 ], [ 64, %143 ]
  %147 = phi i64 [ %166, %164 ], [ %136, %143 ]
  %148 = phi i64 [ %165, %164 ], [ %137, %143 ]
  %149 = phi i64 [ %153, %164 ], [ 0, %143 ]
  %150 = phi i64 [ %154, %164 ], [ %0, %143 ]
  %151 = shl i64 %150, 63
  %152 = lshr i64 %149, 1
  %153 = or i64 %152, %151
  %154 = lshr i64 %150, 1
  %155 = icmp ugt i64 %148, %154
  br i1 %155, label %160, label %156

; <label>:156:                                    ; preds = %145
  %157 = icmp ne i64 %148, %154
  %158 = icmp ult i64 %147, %153
  %159 = or i1 %157, %158
  br i1 %159, label %164, label %160

; <label>:160:                                    ; preds = %156, %145
  %161 = call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %148, i64 %154, i64 %147, i64 %153) #15
  %162 = extractvalue { i64, i64 } %161, 0
  %163 = extractvalue { i64, i64 } %161, 1
  br label %164

; <label>:164:                                    ; preds = %156, %160
  %165 = phi i64 [ %162, %160 ], [ %148, %156 ]
  %166 = phi i64 [ %163, %160 ], [ %147, %156 ]
  %167 = add nsw i32 %146, -1
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %145

; <label>:169:                                    ; preds = %164
  br label %170

; <label>:170:                                    ; preds = %169, %139
  %171 = phi i64 [ %140, %139 ], [ %166, %169 ]
  %172 = call fastcc zeroext i1 @millerrabin(i64 %0, i64 %36, i64 %171, i64 %21, i32 %22, i64 %68) #1
  %173 = add nuw nsw i64 %79, 1
  br i1 %172, label %76, label %176

; <label>:174:                                    ; preds = %76
  %175 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.43, i64 0, i64 0), i32 5) #11
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %175) #11
  call void @abort() #16
  unreachable

; <label>:176:                                    ; preds = %170, %78, %129
  %177 = phi i1 [ true, %78 ], [ true, %129 ], [ false, %170 ]
  br label %178

; <label>:178:                                    ; preds = %176, %40, %5, %1
  %179 = phi i1 [ false, %1 ], [ true, %5 ], [ false, %40 ], [ %177, %176 ]
  call void @llvm.lifetime.end(i64 256, i8* nonnull %3) #11
  ret i1 %179
}

; Function Attrs: nounwind readnone sspstrong uwtable
define internal fastcc zeroext i1 @millerrabin(i64, i64, i64, i64, i32, i64) unnamed_addr #9 {
  %7 = and i64 %3, 1
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %8, i64 %5, i64 %2
  br label %10

; <label>:10:                                     ; preds = %32, %6
  %11 = phi i64 [ %3, %6 ], [ %29, %32 ]
  %12 = phi i64 [ %2, %6 ], [ %28, %32 ]
  %13 = phi i64 [ %9, %6 ], [ %42, %32 ]
  br label %14

; <label>:14:                                     ; preds = %18, %10
  %15 = phi i64 [ %29, %18 ], [ %11, %10 ]
  %16 = phi i64 [ %28, %18 ], [ %12, %10 ]
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %43, label %18

; <label>:18:                                     ; preds = %14
  %19 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %16, i64 %16) #15
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = extractvalue { i64, i64 } %19, 1
  %22 = mul i64 %20, %1
  %23 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %22, i64 %0) #15
  %24 = extractvalue { i64, i64 } %23, 1
  %25 = sub i64 %21, %24
  %26 = icmp ult i64 %21, %24
  %27 = select i1 %26, i64 %0, i64 0
  %28 = add i64 %27, %25
  %29 = lshr i64 %15, 1
  %30 = and i64 %29, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %14, label %32

; <label>:32:                                     ; preds = %18
  %33 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %13, i64 %28) #15
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = mul i64 %34, %1
  %37 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %36, i64 %0) #15
  %38 = extractvalue { i64, i64 } %37, 1
  %39 = sub i64 %35, %38
  %40 = icmp ult i64 %35, %38
  %41 = select i1 %40, i64 %0, i64 0
  %42 = add i64 %39, %41
  br label %10

; <label>:43:                                     ; preds = %14
  %44 = sub i64 %0, %5
  %45 = icmp eq i64 %13, %5
  %46 = icmp eq i64 %13, %44
  %47 = or i1 %45, %46
  br i1 %47, label %72, label %48

; <label>:48:                                     ; preds = %43
  %49 = icmp ugt i32 %4, 1
  br i1 %49, label %50, label %72

; <label>:50:                                     ; preds = %48
  br label %51

; <label>:51:                                     ; preds = %50, %65
  %52 = phi i32 [ %67, %65 ], [ 1, %50 ]
  %53 = phi i64 [ %63, %65 ], [ %13, %50 ]
  %54 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %53, i64 %53) #15
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = extractvalue { i64, i64 } %54, 1
  %57 = mul i64 %55, %1
  %58 = tail call { i64, i64 } asm "mulq $3", "={ax},={dx},%0,rm,~{dirflag},~{fpsr},~{flags}"(i64 %57, i64 %0) #15
  %59 = extractvalue { i64, i64 } %58, 1
  %60 = sub i64 %56, %59
  %61 = icmp ult i64 %56, %59
  %62 = select i1 %61, i64 %0, i64 0
  %63 = add i64 %62, %60
  %64 = icmp eq i64 %63, %44
  br i1 %64, label %70, label %65

; <label>:65:                                     ; preds = %51
  %66 = icmp ne i64 %63, %5
  %67 = add nuw i32 %52, 1
  %68 = icmp ult i32 %67, %4
  %69 = and i1 %66, %68
  br i1 %69, label %51, label %70

; <label>:70:                                     ; preds = %65, %51
  %71 = phi i1 [ true, %51 ], [ false, %65 ]
  br label %72

; <label>:72:                                     ; preds = %70, %48, %43
  %73 = phi i1 [ true, %43 ], [ false, %48 ], [ %71, %70 ]
  ret i1 %73
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @millerrabin2(i64* nocapture readonly, i64, i64* nocapture readonly, i64* nocapture readonly, i32, i64* nocapture readonly) unnamed_addr #6 {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #11
  %9 = call fastcc i64 @powm2(i64* nonnull %7, i64* %2, i64* %3, i64* %0, i64 %1, i64* %5)
  %10 = load i64, i64* %7, align 8
  %11 = load i64, i64* %5, align 8
  %12 = icmp eq i64 %9, %11
  %13 = getelementptr inbounds i64, i64* %5, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %10, %14
  %16 = and i1 %12, %15
  br i1 %16, label %58, label %17

; <label>:17:                                     ; preds = %6
  %18 = getelementptr inbounds i64, i64* %0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = load i64, i64* %0, align 8
  %21 = tail call { i64, i64 } asm "subq $5,${1:q}\0A\09sbbq $3,${0:q}", "=r,=&r,0,rme,1,rme,~{dirflag},~{fpsr},~{flags}"(i64 %19, i64 %14, i64 %20, i64 %11) #15
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = icmp eq i64 %9, %23
  %25 = icmp eq i64 %10, %22
  %26 = and i1 %24, %25
  br i1 %26, label %58, label %27

; <label>:27:                                     ; preds = %17
  %28 = icmp ugt i32 %4, 1
  br i1 %28, label %29, label %58

; <label>:29:                                     ; preds = %27
  %30 = call fastcc i64 @mulredc2(i64* nonnull %7, i64 %10, i64 %9, i64 %10, i64 %9, i64 %19, i64 %20, i64 %1)
  %31 = load i64, i64* %7, align 8
  %32 = icmp eq i64 %30, %23
  %33 = icmp eq i64 %31, %22
  %34 = and i1 %32, %33
  br i1 %34, label %58, label %35

; <label>:35:                                     ; preds = %29
  br label %36

; <label>:36:                                     ; preds = %35, %48
  %37 = phi i64 [ %52, %48 ], [ %31, %35 ]
  %38 = phi i64 [ %51, %48 ], [ %30, %35 ]
  %39 = phi i32 [ %46, %48 ], [ 1, %35 ]
  %40 = load i64, i64* %5, align 8
  %41 = icmp eq i64 %38, %40
  br i1 %41, label %42, label %45

; <label>:42:                                     ; preds = %36
  %43 = load i64, i64* %13, align 8
  %44 = icmp eq i64 %37, %43
  br i1 %44, label %56, label %45

; <label>:45:                                     ; preds = %36, %42
  %46 = add nuw i32 %39, 1
  %47 = icmp ult i32 %46, %4
  br i1 %47, label %48, label %56

; <label>:48:                                     ; preds = %45
  %49 = load i64, i64* %18, align 8
  %50 = load i64, i64* %0, align 8
  %51 = call fastcc i64 @mulredc2(i64* nonnull %7, i64 %37, i64 %38, i64 %37, i64 %38, i64 %49, i64 %50, i64 %1)
  %52 = load i64, i64* %7, align 8
  %53 = icmp eq i64 %51, %23
  %54 = icmp eq i64 %52, %22
  %55 = and i1 %53, %54
  br i1 %55, label %56, label %36

; <label>:56:                                     ; preds = %45, %48, %42
  %57 = phi i1 [ false, %45 ], [ true, %48 ], [ false, %42 ]
  br label %58

; <label>:58:                                     ; preds = %56, %29, %6, %27, %17
  %59 = phi i1 [ true, %17 ], [ false, %27 ], [ true, %6 ], [ true, %29 ], [ %57, %56 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #11
  ret i1 %59
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @powm2(i64* nocapture, i64* nocapture readonly, i64* nocapture readonly, i64* nocapture readonly, i64, i64* nocapture readonly) unnamed_addr #6 {
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds i64, i64* %1, i64 1
  %9 = load i64, i64* %3, align 8
  %10 = getelementptr inbounds i64, i64* %3, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %5, align 8
  %13 = getelementptr inbounds i64, i64* %5, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %2, align 8
  %16 = load i64, i64* %8, align 8
  br label %17

; <label>:17:                                     ; preds = %6, %29
  %18 = phi i64 [ %16, %6 ], [ %35, %29 ]
  %19 = phi i64 [ %15, %6 ], [ %34, %29 ]
  %20 = phi i32 [ 64, %6 ], [ %33, %29 ]
  %21 = phi i64 [ %14, %6 ], [ %31, %29 ]
  %22 = phi i64 [ %12, %6 ], [ %30, %29 ]
  %23 = phi i64 [ %7, %6 ], [ %32, %29 ]
  %24 = and i64 %19, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %29, label %26

; <label>:26:                                     ; preds = %17
  %27 = tail call fastcc i64 @mulredc2(i64* %0, i64 %21, i64 %22, i64 %18, i64 %23, i64 %11, i64 %9, i64 %4)
  %28 = load i64, i64* %0, align 8
  br label %29

; <label>:29:                                     ; preds = %17, %26
  %30 = phi i64 [ %27, %26 ], [ %22, %17 ]
  %31 = phi i64 [ %28, %26 ], [ %21, %17 ]
  %32 = tail call fastcc i64 @mulredc2(i64* %0, i64 %18, i64 %23, i64 %18, i64 %23, i64 %11, i64 %9, i64 %4)
  %33 = add nsw i32 %20, -1
  %34 = lshr i64 %19, 1
  %35 = load i64, i64* %0, align 8
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %37, label %17

; <label>:37:                                     ; preds = %29
  %38 = getelementptr inbounds i64, i64* %2, i64 1
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %61, label %41

; <label>:41:                                     ; preds = %37
  br label %42

; <label>:42:                                     ; preds = %41, %53
  %43 = phi i64 [ %58, %53 ], [ %39, %41 ]
  %44 = phi i64 [ %55, %53 ], [ %31, %41 ]
  %45 = phi i64 [ %54, %53 ], [ %30, %41 ]
  %46 = phi i64 [ %56, %53 ], [ %32, %41 ]
  %47 = phi i64 [ %57, %53 ], [ %35, %41 ]
  %48 = and i64 %43, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %42
  %51 = tail call fastcc i64 @mulredc2(i64* %0, i64 %44, i64 %45, i64 %47, i64 %46, i64 %11, i64 %9, i64 %4)
  %52 = load i64, i64* %0, align 8
  br label %53

; <label>:53:                                     ; preds = %42, %50
  %54 = phi i64 [ %51, %50 ], [ %45, %42 ]
  %55 = phi i64 [ %52, %50 ], [ %44, %42 ]
  %56 = tail call fastcc i64 @mulredc2(i64* %0, i64 %47, i64 %46, i64 %47, i64 %46, i64 %11, i64 %9, i64 %4)
  %57 = load i64, i64* %0, align 8
  %58 = lshr i64 %43, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %42

; <label>:60:                                     ; preds = %53
  br label %61

; <label>:61:                                     ; preds = %60, %37
  %62 = phi i64 [ %30, %37 ], [ %54, %60 ]
  %63 = phi i64 [ %31, %37 ], [ %55, %60 ]
  store i64 %63, i64* %0, align 8
  ret i64 %62
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout_set_file_name(i8*) local_unnamed_addr #6 {
  store i8* %0, i8** @file_name, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout_set_ignore_EPIPE(i1 zeroext) local_unnamed_addr #6 {
  %2 = zext i1 %0 to i8
  store i8 %2, i8* @ignore_EPIPE, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout() #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %2 = tail call i32 @close_stream(%struct._IO_FILE* %1) #11
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %21, label %4

; <label>:4:                                      ; preds = %0
  %5 = load i8, i8* @ignore_EPIPE, align 1
  %6 = icmp eq i8 %5, 0
  %7 = tail call i32* @__errno_location() #1
  br i1 %6, label %11, label %8

; <label>:8:                                      ; preds = %4
  %9 = load i32, i32* %7, align 4
  %10 = icmp eq i32 %9, 32
  br i1 %10, label %21, label %11

; <label>:11:                                     ; preds = %4, %8
  %12 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i32 5) #11
  %13 = load i8*, i8** @file_name, align 8
  %14 = icmp eq i8* %13, null
  %15 = load i32, i32* %7, align 4
  br i1 %14, label %18, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call i8* @quotearg_colon(i8* nonnull %13) #11
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.19, i64 0, i64 0), i8* %17, i8* %12) #11
  br label %19

; <label>:18:                                     ; preds = %11
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.20, i64 0, i64 0), i8* %12) #11
  br label %19

; <label>:19:                                     ; preds = %18, %16
  %20 = load volatile i32, i32* @exit_failure, align 4
  tail call void @_exit(i32 %20) #16
  unreachable

; <label>:21:                                     ; preds = %0, %8
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = tail call i32 @close_stream(%struct._IO_FILE* %22) #11
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %21
  %26 = load volatile i32, i32* @exit_failure, align 4
  tail call void @_exit(i32 %26) #16
  unreachable

; <label>:27:                                     ; preds = %21
  ret void
}

; Function Attrs: noreturn
declare void @_exit(i32) local_unnamed_addr #10

; Function Attrs: nounwind sspstrong uwtable
define i64 @full_write(i32, i8*, i64) local_unnamed_addr #6 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %20, label %5

; <label>:5:                                      ; preds = %3
  br label %6

; <label>:6:                                      ; preds = %5, %13
  %7 = phi i64 [ %14, %13 ], [ 0, %5 ]
  %8 = phi i8* [ %15, %13 ], [ %1, %5 ]
  %9 = phi i64 [ %16, %13 ], [ %2, %5 ]
  %10 = tail call i64 @safe_write(i32 %0, i8* %8, i64 %9) #11
  switch i64 %10, label %13 [
    i64 -1, label %18
    i64 0, label %11
  ]

; <label>:11:                                     ; preds = %6
  %12 = tail call i32* @__errno_location() #1
  store i32 28, i32* %12, align 4
  br label %20

; <label>:13:                                     ; preds = %6
  %14 = add i64 %10, %7
  %15 = getelementptr inbounds i8, i8* %8, i64 %10
  %16 = sub i64 %9, %10
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %6

; <label>:18:                                     ; preds = %6, %13
  %19 = phi i64 [ %7, %6 ], [ %14, %13 ]
  br label %20

; <label>:20:                                     ; preds = %18, %11, %3
  %21 = phi i64 [ 0, %3 ], [ %7, %11 ], [ %19, %18 ]
  ret i64 %21
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @umaxtostr(i64, i8*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds i8, i8* %1, i64 20
  store i8 0, i8* %3, align 1
  br label %4

; <label>:4:                                      ; preds = %2, %4
  %5 = phi i64 [ %0, %2 ], [ %11, %4 ]
  %6 = phi i8* [ %3, %2 ], [ %10, %4 ]
  %7 = urem i64 %5, 10
  %8 = trunc i64 %7 to i8
  %9 = or i8 %8, 48
  %10 = getelementptr inbounds i8, i8* %6, i64 -1
  store i8 %9, i8* %10, align 1
  %11 = udiv i64 %5, 10
  %12 = icmp ugt i64 %5, 9
  br i1 %12, label %4, label %13

; <label>:13:                                     ; preds = %4
  ret i8* %10
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_program_name(i8*) local_unnamed_addr #6 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = tail call i64 @fwrite(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.41, i64 0, i64 0), i64 55, i64 1, %struct._IO_FILE* %4) #18
  tail call void @abort() #16
  unreachable

; <label>:6:                                      ; preds = %1
  %7 = tail call i8* @strrchr(i8* nonnull %0, i32 47) #15
  %8 = icmp ne i8* %7, null
  %9 = getelementptr inbounds i8, i8* %7, i64 1
  %10 = select i1 %8, i8* %9, i8* %0
  %11 = ptrtoint i8* %10 to i64
  %12 = ptrtoint i8* %0 to i64
  %13 = sub i64 %11, %12
  %14 = icmp sgt i64 %13, 6
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %6
  %16 = getelementptr inbounds i8, i8* %10, i64 -7
  %17 = tail call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.42, i64 0, i64 0), i64 7) #15
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %15
  %20 = tail call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.43, i64 0, i64 0), i64 3) #15
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds i8, i8* %10, i64 3
  store i8* %23, i8** @program_invocation_short_name, align 8
  br label %24

; <label>:24:                                     ; preds = %19, %22, %15, %6
  %25 = phi i8* [ %23, %22 ], [ %10, %19 ], [ %0, %15 ], [ %0, %6 ]
  store i8* %25, i8** @program_name, align 8
  store i8* %25, i8** @program_invocation_name, align 8
  ret void
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #11

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define i8* @proper_name(i8*) local_unnamed_addr #6 {
  %2 = tail call i8* @dcgettext(i8* null, i8* %0, i32 5) #11
  %3 = icmp eq i8* %2, %0
  br i1 %3, label %14, label %4

; <label>:4:                                      ; preds = %1
  %5 = tail call fastcc zeroext i1 @mbsstr_trimmed_wordbounded(i8* %2, i8* %0)
  br i1 %5, label %14, label %6

; <label>:6:                                      ; preds = %4
  %7 = tail call i64 @strlen(i8* %2) #15
  %8 = tail call i64 @strlen(i8* %0) #15
  %9 = add i64 %7, 4
  %10 = add i64 %9, %8
  %11 = tail call noalias i8* @xmalloc(i64 %10) #11
  %12 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %11, i1 false)
  %13 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %11, i32 1, i64 %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i64 0, i64 0), i8* %2, i8* %0) #11
  br label %14

; <label>:14:                                     ; preds = %1, %4, %6
  %15 = phi i8* [ %11, %6 ], [ %2, %4 ], [ %0, %1 ]
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @mbsstr_trimmed_wordbounded(i8*, i8*) unnamed_addr #6 {
  %3 = alloca %struct.mbuiter_multi, align 8
  %4 = alloca %struct.mbuiter_multi, align 8
  %5 = tail call i8* @trim2(i8* %1, i32 2) #11
  %6 = load i8, i8* %0, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %147, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 0
  %10 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 0
  %11 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 1
  %12 = bitcast %struct.__mbstate_t* %11 to i64*
  %13 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 2
  %14 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 0
  %15 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 0
  %16 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 1
  %17 = bitcast %struct.__mbstate_t* %16 to i64*
  %18 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 2
  %19 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 2
  %20 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 3
  %21 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 2
  %22 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 3
  %23 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 1
  %24 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 1
  br label %25

; <label>:25:                                     ; preds = %8, %108
  %26 = phi i8* [ %0, %8 ], [ %109, %108 ]
  %27 = call i8* @mbsstr(i8* %26, i8* %5) #15
  %28 = icmp eq i8* %27, null
  br i1 %28, label %145, label %29

; <label>:29:                                     ; preds = %25
  %30 = call i64 @__ctype_get_mb_cur_max() #11
  %31 = icmp ugt i64 %30, 1
  br i1 %31, label %32, label %112

; <label>:32:                                     ; preds = %29
  call void @llvm.lifetime.start(i64 64, i8* nonnull %9) #11
  store i8* %26, i8** %10, align 8
  store i8 0, i8* %9, align 8
  store i64 0, i64* %12, align 4
  store i8 0, i8* %13, align 4
  %33 = icmp ult i8* %26, %27
  br i1 %33, label %34, label %52

; <label>:34:                                     ; preds = %32
  br label %35

; <label>:35:                                     ; preds = %34, %42
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %3)
  %36 = load i8, i8* %21, align 8
  %37 = load i32, i32* %22, align 4
  %38 = icmp eq i8 %36, 0
  %39 = icmp ne i32 %37, 0
  %40 = or i1 %38, %39
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %35
  call void @abort() #16
  unreachable

; <label>:42:                                     ; preds = %35
  %43 = load i64, i64* %23, align 8
  %44 = load i8*, i8** %10, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %43
  store i8* %45, i8** %10, align 8
  store i8 0, i8* %13, align 4
  %46 = icmp ult i8* %45, %27
  br i1 %46, label %35, label %47

; <label>:47:                                     ; preds = %42
  br i1 %38, label %52, label %48

; <label>:48:                                     ; preds = %47
  %49 = call i32 @iswalnum(i32 %37) #11
  %50 = icmp eq i32 %49, 0
  %51 = zext i1 %50 to i8
  br label %52

; <label>:52:                                     ; preds = %48, %47, %32
  %53 = phi i8 [ 1, %32 ], [ 1, %47 ], [ %51, %48 ]
  store i8* %27, i8** %10, align 8
  store i8 0, i8* %9, align 8
  store i64 0, i64* %12, align 4
  store i8 0, i8* %13, align 4
  call void @llvm.lifetime.start(i64 64, i8* nonnull %14) #11
  store i8* %5, i8** %15, align 8
  store i8 0, i8* %14, align 8
  store i64 0, i64* %17, align 4
  store i8 0, i8* %18, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %54 = load i8, i8* %19, align 8
  %55 = load i32, i32* %20, align 4
  %56 = icmp eq i8 %54, 0
  %57 = icmp ne i32 %55, 0
  %58 = or i1 %56, %57
  br i1 %58, label %59, label %80

; <label>:59:                                     ; preds = %52
  br label %60

; <label>:60:                                     ; preds = %59, %67
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %3)
  %61 = load i8, i8* %21, align 8
  %62 = load i32, i32* %22, align 4
  %63 = icmp eq i8 %61, 0
  %64 = icmp ne i32 %62, 0
  %65 = or i1 %63, %64
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %60
  call void @abort() #16
  unreachable

; <label>:67:                                     ; preds = %60
  %68 = load i64, i64* %23, align 8
  %69 = load i8*, i8** %10, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  store i8* %70, i8** %10, align 8
  store i8 0, i8* %13, align 4
  %71 = load i64, i64* %24, align 8
  %72 = load i8*, i8** %15, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %71
  store i8* %73, i8** %15, align 8
  store i8 0, i8* %18, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %74 = load i8, i8* %19, align 8
  %75 = load i32, i32* %20, align 4
  %76 = icmp eq i8 %74, 0
  %77 = icmp ne i32 %75, 0
  %78 = or i1 %76, %77
  br i1 %78, label %60, label %79

; <label>:79:                                     ; preds = %67
  br label %80

; <label>:80:                                     ; preds = %79, %52
  call void @llvm.lifetime.end(i64 64, i8* nonnull %14) #11
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %3)
  %81 = load i8, i8* %21, align 8
  %82 = load i32, i32* %22, align 4
  %83 = icmp eq i32 %82, 0
  %84 = icmp ne i8 %81, 0
  %85 = and i1 %84, %83
  %86 = icmp eq i8 %81, 0
  %87 = or i1 %86, %85
  br i1 %87, label %92, label %88

; <label>:88:                                     ; preds = %80
  %89 = call i32 @iswalnum(i32 %82) #11
  %90 = icmp eq i32 %89, 0
  %91 = zext i1 %90 to i8
  br label %92

; <label>:92:                                     ; preds = %80, %88
  %93 = phi i8 [ 1, %80 ], [ %91, %88 ]
  %94 = icmp eq i8 %53, 0
  %95 = icmp eq i8 %93, 0
  %96 = or i1 %94, %95
  br i1 %96, label %97, label %103

; <label>:97:                                     ; preds = %92
  store i8* %27, i8** %10, align 8
  store i8 0, i8* %9, align 8
  store i64 0, i64* %12, align 4
  store i8 0, i8* %13, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %3)
  %98 = load i8, i8* %21, align 8
  %99 = load i32, i32* %22, align 4
  %100 = icmp eq i8 %98, 0
  %101 = icmp ne i32 %99, 0
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %92, %97
  %104 = phi i8 [ 0, %97 ], [ 1, %92 ]
  call void @llvm.lifetime.end(i64 64, i8* nonnull %9) #11
  br label %147

; <label>:105:                                    ; preds = %97
  %106 = load i64, i64* %23, align 8
  %107 = getelementptr inbounds i8, i8* %27, i64 %106
  call void @llvm.lifetime.end(i64 64, i8* nonnull %9) #11
  br label %108

; <label>:108:                                    ; preds = %105, %141
  %109 = phi i8* [ %107, %105 ], [ %144, %141 ]
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %145, label %25

; <label>:112:                                    ; preds = %29
  %113 = icmp ult i8* %26, %27
  br i1 %113, label %114, label %124

; <label>:114:                                    ; preds = %112
  %115 = tail call i16** @__ctype_b_loc() #1
  %116 = load i16*, i16** %115, align 8
  %117 = getelementptr inbounds i8, i8* %27, i64 -1
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds i16, i16* %116, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = and i16 %121, 8
  %123 = icmp eq i16 %122, 0
  br label %124

; <label>:124:                                    ; preds = %114, %112
  %125 = phi i1 [ true, %112 ], [ %123, %114 ]
  %126 = call i64 @strlen(i8* %5) #15
  %127 = getelementptr inbounds i8, i8* %27, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %138, label %130

; <label>:130:                                    ; preds = %124
  %131 = tail call i16** @__ctype_b_loc() #1
  %132 = load i16*, i16** %131, align 8
  %133 = zext i8 %128 to i64
  %134 = getelementptr inbounds i16, i16* %132, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = and i16 %135, 8
  %137 = icmp eq i16 %136, 0
  br label %138

; <label>:138:                                    ; preds = %130, %124
  %139 = phi i1 [ true, %124 ], [ %137, %130 ]
  %140 = and i1 %125, %139
  br i1 %140, label %145, label %141

; <label>:141:                                    ; preds = %138
  %142 = load i8, i8* %27, align 1
  %143 = icmp eq i8 %142, 0
  %144 = getelementptr inbounds i8, i8* %27, i64 1
  br i1 %143, label %145, label %108

; <label>:145:                                    ; preds = %138, %141, %25, %108
  %146 = phi i8 [ 0, %108 ], [ 0, %25 ], [ 0, %141 ], [ 1, %138 ]
  br label %147

; <label>:147:                                    ; preds = %145, %2, %103
  %148 = phi i8 [ %104, %103 ], [ 0, %2 ], [ %146, %145 ]
  call void @free(i8* %5) #11
  %149 = and i8 %148, 1
  %150 = icmp ne i8 %149, 0
  ret i1 %150
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1) #1

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @__ctype_get_mb_cur_max() local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @iswalnum(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define i8* @proper_name_utf8(i8*, i8*) local_unnamed_addr #6 {
  %3 = tail call i8* @dcgettext(i8* null, i8* %0, i32 5) #11
  %4 = tail call i8* @locale_charset() #11
  %5 = tail call i32 @c_strcasecmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.55, i64 0, i64 0)) #15
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %19, label %7

; <label>:7:                                      ; preds = %2
  %8 = tail call i8* @xstr_iconv(i8* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.55, i64 0, i64 0), i8* %4) #11
  %9 = tail call i64 @strlen(i8* %4) #15
  %10 = add i64 %9, 11
  %11 = tail call noalias i8* @xmalloc(i64 %10) #11
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %4, i64 %9, i32 1, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.56, i64 0, i64 0), i64 11, i32 1, i1 false)
  %13 = tail call i8* @xstr_iconv(i8* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.55, i64 0, i64 0), i8* %11) #11
  tail call void @free(i8* %11) #11
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %7
  %16 = tail call i8* @strchr(i8* nonnull %13, i32 63) #11
  %17 = icmp eq i8* %16, null
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %15
  tail call void @free(i8* nonnull %13) #11
  br label %19

; <label>:19:                                     ; preds = %2, %18, %7, %15
  %20 = phi i8* [ null, %18 ], [ null, %7 ], [ %13, %15 ], [ %1, %2 ]
  %21 = phi i8* [ %8, %18 ], [ %8, %7 ], [ %8, %15 ], [ %1, %2 ]
  %22 = phi i8* [ null, %18 ], [ null, %7 ], [ %13, %15 ], [ null, %2 ]
  %23 = phi i8* [ %8, %18 ], [ %8, %7 ], [ %8, %15 ], [ null, %2 ]
  %24 = icmp ne i8* %21, null
  %25 = icmp ne i8* %20, null
  %26 = select i1 %25, i8* %20, i8* %0
  %27 = select i1 %24, i8* %21, i8* %26
  %28 = tail call i32 @strcmp(i8* %3, i8* %0) #11
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %58, label %30

; <label>:30:                                     ; preds = %19
  %31 = tail call fastcc zeroext i1 @mbsstr_trimmed_wordbounded(i8* %3, i8* %0)
  br i1 %31, label %39, label %32

; <label>:32:                                     ; preds = %30
  br i1 %24, label %33, label %35

; <label>:33:                                     ; preds = %32
  %34 = tail call fastcc zeroext i1 @mbsstr_trimmed_wordbounded(i8* %3, i8* nonnull %21)
  br i1 %34, label %39, label %35

; <label>:35:                                     ; preds = %33, %32
  %36 = icmp eq i8* %20, null
  br i1 %36, label %45, label %37

; <label>:37:                                     ; preds = %35
  %38 = tail call fastcc zeroext i1 @mbsstr_trimmed_wordbounded(i8* %3, i8* nonnull %20)
  br i1 %38, label %39, label %45

; <label>:39:                                     ; preds = %37, %33, %30
  %40 = icmp eq i8* %23, null
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %39
  tail call void @free(i8* nonnull %23) #11
  br label %42

; <label>:42:                                     ; preds = %39, %41
  %43 = icmp eq i8* %22, null
  br i1 %43, label %68, label %44

; <label>:44:                                     ; preds = %42
  tail call void @free(i8* nonnull %22) #11
  br label %68

; <label>:45:                                     ; preds = %35, %37
  %46 = tail call i64 @strlen(i8* %3) #15
  %47 = tail call i64 @strlen(i8* %27) #15
  %48 = add i64 %46, 4
  %49 = add i64 %48, %47
  %50 = tail call noalias i8* @xmalloc(i64 %49) #11
  %51 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %50, i1 false)
  %52 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %50, i32 1, i64 %51, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i64 0, i64 0), i8* %3, i8* %27) #11
  %53 = icmp eq i8* %23, null
  br i1 %53, label %55, label %54

; <label>:54:                                     ; preds = %45
  tail call void @free(i8* nonnull %23) #11
  br label %55

; <label>:55:                                     ; preds = %45, %54
  %56 = icmp eq i8* %22, null
  br i1 %56, label %68, label %57

; <label>:57:                                     ; preds = %55
  tail call void @free(i8* nonnull %22) #11
  br label %68

; <label>:58:                                     ; preds = %19
  %59 = icmp eq i8* %23, null
  %60 = icmp eq i8* %23, %27
  %61 = or i1 %59, %60
  br i1 %61, label %63, label %62

; <label>:62:                                     ; preds = %58
  tail call void @free(i8* %23) #11
  br label %63

; <label>:63:                                     ; preds = %58, %62
  %64 = icmp eq i8* %22, null
  %65 = icmp eq i8* %22, %27
  %66 = or i1 %64, %65
  br i1 %66, label %68, label %67

; <label>:67:                                     ; preds = %63
  tail call void @free(i8* %22) #11
  br label %68

; <label>:68:                                     ; preds = %67, %63, %57, %55, %44, %42
  %69 = phi i8* [ %3, %42 ], [ %3, %44 ], [ %50, %55 ], [ %50, %57 ], [ %27, %63 ], [ %27, %67 ]
  ret i8* %69
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define %struct.quoting_options* @clone_quoting_options(%struct.quoting_options*) local_unnamed_addr #6 {
  %2 = tail call i32* @__errno_location() #1
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne %struct.quoting_options* %0, null
  %5 = bitcast %struct.quoting_options* %0 to i8*
  %6 = select i1 %4, i8* %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*)
  %7 = tail call i8* @xmemdup(i8* %6, i64 56) #11
  %8 = bitcast i8* %7 to %struct.quoting_options*
  store i32 %3, i32* %2, align 4
  ret %struct.quoting_options* %8
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i32 @get_quoting_style(%struct.quoting_options* readonly) local_unnamed_addr #12 {
  %2 = icmp ne %struct.quoting_options* %0, null
  %3 = select i1 %2, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  ret i32 %5
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_quoting_style(%struct.quoting_options*, i32) local_unnamed_addr #6 {
  %3 = icmp ne %struct.quoting_options* %0, null
  %4 = select i1 %3, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) local_unnamed_addr #6 {
  %4 = icmp ne %struct.quoting_options* %0, null
  %5 = select i1 %4, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %6 = lshr i8 %1, 5
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 %7
  %9 = and i8 %1, 31
  %10 = zext i8 %9 to i32
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, %10
  %13 = and i32 %12, 1
  %14 = and i32 %2, 1
  %15 = xor i32 %13, %14
  %16 = shl i32 %15, %10
  %17 = xor i32 %16, %11
  store i32 %17, i32* %8, align 4
  ret i32 %13
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @set_quoting_flags(%struct.quoting_options*, i32) local_unnamed_addr #6 {
  %3 = icmp eq %struct.quoting_options* %0, null
  %4 = select i1 %3, %struct.quoting_options* @default_quoting_options, %struct.quoting_options* %0
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  store i32 %1, i32* %5, align 4
  ret i32 %6
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_custom_quoting(%struct.quoting_options*, i8*, i8*) local_unnamed_addr #6 {
  %4 = icmp eq %struct.quoting_options* %0, null
  %5 = select i1 %4, %struct.quoting_options* @default_quoting_options, %struct.quoting_options* %0
  %6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %6, align 8
  %7 = icmp ne i8* %1, null
  %8 = icmp ne i8* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  tail call void @abort() #16
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %1, i8** %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %2, i8** %13, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @quotearg_buffer(i8*, i64, i8*, i64, %struct.quoting_options* readonly) local_unnamed_addr #6 {
  %6 = icmp ne %struct.quoting_options* %4, null
  %7 = select i1 %6, %struct.quoting_options* %4, %struct.quoting_options* @default_quoting_options
  %8 = tail call i32* @__errno_location() #1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 2, i64 0
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 4
  %18 = load i8*, i8** %17, align 8
  %19 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %1, i8* %2, i64 %3, i32 %11, i32 %13, i32* %14, i8* %16, i8* %18)
  store i32 %9, i32* %8, align 4
  ret i64 %19
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32* readonly, i8* readonly, i8* readonly) unnamed_addr #6 {
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.__mbstate_t*
  %12 = alloca i32, align 4
  %13 = tail call i64 @__ctype_get_mb_cur_max() #11
  %14 = icmp eq i64 %13, 1
  %15 = lshr i32 %5, 1
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = bitcast i64* %10 to i8*
  %19 = bitcast i32* %12 to i8*
  %20 = icmp eq i32* %6, null
  %21 = icmp ne i32* %6, null
  %22 = and i32 %5, 1
  %23 = icmp eq i32 %22, 0
  %24 = and i32 %5, 4
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds i8, i8* %2, i64 1
  br label %27

; <label>:27:                                     ; preds = %614, %9
  %28 = phi i32 [ %4, %9 ], [ %96, %614 ]
  %29 = phi i8* [ %7, %9 ], [ %97, %614 ]
  %30 = phi i8* [ %8, %9 ], [ %98, %614 ]
  %31 = phi i64 [ 0, %9 ], [ %126, %614 ]
  %32 = phi i8* [ null, %9 ], [ %100, %614 ]
  %33 = phi i64 [ 0, %9 ], [ %101, %614 ]
  %34 = phi i8 [ 0, %9 ], [ %102, %614 ]
  %35 = phi i64 [ %3, %9 ], [ %598, %614 ]
  %36 = phi i8 [ %17, %9 ], [ %103, %614 ]
  %37 = phi i8 [ 0, %9 ], [ %128, %614 ]
  %38 = phi i8 [ 0, %9 ], [ %129, %614 ]
  %39 = phi i8 [ 1, %9 ], [ %130, %614 ]
  %40 = phi i64 [ %1, %9 ], [ %126, %614 ]
  switch i32 %28, label %94 [
    i32 6, label %41
    i32 5, label %42
    i32 7, label %95
    i32 0, label %93
    i32 2, label %85
    i32 4, label %79
    i32 3, label %76
    i32 1, label %77
    i32 10, label %51
    i32 8, label %48
    i32 9, label %48
  ]

; <label>:41:                                     ; preds = %27
  br label %95

; <label>:42:                                     ; preds = %27
  %43 = and i8 %36, 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %95

; <label>:45:                                     ; preds = %42
  %46 = icmp eq i64 %40, 0
  br i1 %46, label %95, label %47

; <label>:47:                                     ; preds = %45
  store i8 34, i8* %0, align 1
  br label %95

; <label>:48:                                     ; preds = %27, %27
  %49 = call fastcc i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.67, i64 0, i64 0), i32 %28)
  %50 = call fastcc i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.68, i64 0, i64 0), i32 %28)
  br label %51

; <label>:51:                                     ; preds = %27, %48
  %52 = phi i8* [ %49, %48 ], [ %29, %27 ]
  %53 = phi i8* [ %50, %48 ], [ %30, %27 ]
  %54 = and i8 %36, 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %73

; <label>:56:                                     ; preds = %51
  %57 = load i8, i8* %52, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %73, label %59

; <label>:59:                                     ; preds = %56
  br label %60

; <label>:60:                                     ; preds = %59, %67
  %61 = phi i8 [ %70, %67 ], [ %57, %59 ]
  %62 = phi i8* [ %69, %67 ], [ %52, %59 ]
  %63 = phi i64 [ %68, %67 ], [ 0, %59 ]
  %64 = icmp ult i64 %63, %40
  br i1 %64, label %65, label %67

; <label>:65:                                     ; preds = %60
  %66 = getelementptr inbounds i8, i8* %0, i64 %63
  store i8 %61, i8* %66, align 1
  br label %67

; <label>:67:                                     ; preds = %65, %60
  %68 = add i64 %63, 1
  %69 = getelementptr inbounds i8, i8* %62, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %60

; <label>:72:                                     ; preds = %67
  br label %73

; <label>:73:                                     ; preds = %72, %56, %51
  %74 = phi i64 [ 0, %51 ], [ 0, %56 ], [ %68, %72 ]
  %75 = call i64 @strlen(i8* %53) #15
  br label %95

; <label>:76:                                     ; preds = %27
  br label %77

; <label>:77:                                     ; preds = %27, %76
  %78 = phi i8 [ %34, %27 ], [ 1, %76 ]
  br label %79

; <label>:79:                                     ; preds = %27, %77
  %80 = phi i8 [ %34, %27 ], [ %78, %77 ]
  %81 = phi i8 [ %36, %27 ], [ 1, %77 ]
  %82 = and i8 %81, 1
  %83 = icmp eq i8 %82, 0
  %84 = select i1 %83, i8 1, i8 %80
  br label %85

; <label>:85:                                     ; preds = %79, %27
  %86 = phi i8 [ %34, %27 ], [ %84, %79 ]
  %87 = phi i8 [ %36, %27 ], [ %81, %79 ]
  %88 = and i8 %87, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %90, label %95

; <label>:90:                                     ; preds = %85
  %91 = icmp eq i64 %40, 0
  br i1 %91, label %95, label %92

; <label>:92:                                     ; preds = %90
  store i8 39, i8* %0, align 1
  br label %95

; <label>:93:                                     ; preds = %27
  br label %95

; <label>:94:                                     ; preds = %27
  call void @abort() #16
  unreachable

; <label>:95:                                     ; preds = %41, %85, %90, %92, %27, %42, %45, %47, %93, %73
  %96 = phi i32 [ 0, %93 ], [ %28, %73 ], [ 5, %47 ], [ 5, %45 ], [ 5, %42 ], [ 7, %27 ], [ 2, %92 ], [ 2, %90 ], [ 2, %85 ], [ 5, %41 ]
  %97 = phi i8* [ %29, %93 ], [ %52, %73 ], [ %29, %47 ], [ %29, %45 ], [ %29, %42 ], [ %29, %27 ], [ %29, %92 ], [ %29, %90 ], [ %29, %85 ], [ %29, %41 ]
  %98 = phi i8* [ %30, %93 ], [ %53, %73 ], [ %30, %47 ], [ %30, %45 ], [ %30, %42 ], [ %30, %27 ], [ %30, %92 ], [ %30, %90 ], [ %30, %85 ], [ %30, %41 ]
  %99 = phi i64 [ 0, %93 ], [ %74, %73 ], [ 1, %47 ], [ 1, %45 ], [ 0, %42 ], [ 0, %27 ], [ 1, %92 ], [ 1, %90 ], [ 0, %85 ], [ 0, %41 ]
  %100 = phi i8* [ %32, %93 ], [ %53, %73 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.69, i64 0, i64 0), %47 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.69, i64 0, i64 0), %45 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.69, i64 0, i64 0), %42 ], [ %32, %27 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.68, i64 0, i64 0), %92 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.68, i64 0, i64 0), %90 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.68, i64 0, i64 0), %85 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.69, i64 0, i64 0), %41 ]
  %101 = phi i64 [ %33, %93 ], [ %75, %73 ], [ 1, %47 ], [ 1, %45 ], [ 1, %42 ], [ %33, %27 ], [ 1, %92 ], [ 1, %90 ], [ 1, %85 ], [ 1, %41 ]
  %102 = phi i8 [ %34, %93 ], [ 1, %73 ], [ 1, %47 ], [ 1, %45 ], [ 1, %42 ], [ 1, %27 ], [ %86, %92 ], [ %86, %90 ], [ %86, %85 ], [ 1, %41 ]
  %103 = phi i8 [ 0, %93 ], [ %36, %73 ], [ %36, %47 ], [ %36, %45 ], [ %36, %42 ], [ 0, %27 ], [ %87, %92 ], [ %87, %90 ], [ %87, %85 ], [ 1, %41 ]
  %104 = and i8 %102, 1
  %105 = icmp ne i8 %104, 0
  %106 = icmp ne i32 %96, 2
  %107 = and i1 %106, %105
  %108 = icmp ne i64 %101, 0
  %109 = and i1 %108, %107
  %110 = icmp ugt i64 %101, 1
  %111 = and i8 %103, 1
  %112 = icmp eq i8 %111, 0
  %113 = xor i1 %105, true
  %114 = icmp eq i32 %96, 2
  %115 = icmp ne i8 %111, 0
  %116 = and i1 %114, %115
  %117 = and i1 %21, %115
  %118 = or i1 %106, %112
  %119 = and i8 %102, %103
  %120 = and i8 %119, 1
  %121 = icmp ne i8 %120, 0
  %122 = and i1 %121, %108
  br label %123

; <label>:123:                                    ; preds = %587, %95
  %124 = phi i64 [ 0, %95 ], [ %596, %587 ]
  %125 = phi i64 [ %99, %95 ], [ %589, %587 ]
  %126 = phi i64 [ %31, %95 ], [ %590, %587 ]
  %127 = phi i64 [ %35, %95 ], [ %591, %587 ]
  %128 = phi i8 [ %37, %95 ], [ %592, %587 ]
  %129 = phi i8 [ %38, %95 ], [ %593, %587 ]
  %130 = phi i8 [ %39, %95 ], [ %594, %587 ]
  %131 = phi i64 [ %40, %95 ], [ %595, %587 ]
  %132 = icmp eq i64 %127, -1
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %123
  %134 = icmp eq i64 %124, %127
  br i1 %134, label %597, label %139

; <label>:135:                                    ; preds = %123
  %136 = getelementptr inbounds i8, i8* %2, i64 %124
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %597, label %139

; <label>:139:                                    ; preds = %133, %135
  br i1 %109, label %140, label %155

; <label>:140:                                    ; preds = %139
  %141 = add i64 %124, %101
  %142 = and i1 %110, %132
  br i1 %142, label %143, label %145

; <label>:143:                                    ; preds = %140
  %144 = call i64 @strlen(i8* %2) #15
  br label %145

; <label>:145:                                    ; preds = %140, %143
  %146 = phi i64 [ %144, %143 ], [ %127, %140 ]
  %147 = icmp ugt i64 %141, %146
  br i1 %147, label %155, label %148

; <label>:148:                                    ; preds = %145
  %149 = getelementptr inbounds i8, i8* %2, i64 %124
  %150 = call i32 @memcmp(i8* %149, i8* %100, i64 %101) #15
  %151 = icmp ne i32 %150, 0
  %152 = or i1 %151, %112
  %153 = xor i1 %151, true
  %154 = zext i1 %153 to i8
  br i1 %152, label %155, label %644

; <label>:155:                                    ; preds = %148, %145, %139
  %156 = phi i64 [ %146, %148 ], [ %146, %145 ], [ %127, %139 ]
  %157 = phi i8 [ %154, %148 ], [ 0, %145 ], [ 0, %139 ]
  %158 = getelementptr inbounds i8, i8* %2, i64 %124
  %159 = load i8, i8* %158, align 1
  switch i8 %159, label %298 [
    i8 0, label %160
    i8 63, label %210
    i8 7, label %257
    i8 8, label %247
    i8 12, label %248
    i8 10, label %255
    i8 13, label %249
    i8 9, label %250
    i8 11, label %251
    i8 92, label %252
    i8 123, label %259
    i8 125, label %259
    i8 35, label %270
    i8 126, label %270
    i8 32, label %272
    i8 33, label %273
    i8 34, label %273
    i8 36, label %273
    i8 38, label %273
    i8 40, label %273
    i8 41, label %273
    i8 42, label %273
    i8 59, label %273
    i8 60, label %273
    i8 61, label %273
    i8 62, label %273
    i8 91, label %273
    i8 94, label %273
    i8 96, label %273
    i8 124, label %273
    i8 39, label %275
    i8 37, label %476
    i8 43, label %476
    i8 44, label %476
    i8 45, label %476
    i8 46, label %476
    i8 47, label %476
    i8 48, label %476
    i8 49, label %476
    i8 50, label %476
    i8 51, label %476
    i8 52, label %476
    i8 53, label %476
    i8 54, label %476
    i8 55, label %476
    i8 56, label %476
    i8 57, label %476
    i8 58, label %476
    i8 65, label %476
    i8 66, label %476
    i8 67, label %476
    i8 68, label %476
    i8 69, label %476
    i8 70, label %476
    i8 71, label %476
    i8 72, label %476
    i8 73, label %476
    i8 74, label %476
    i8 75, label %476
    i8 76, label %476
    i8 77, label %476
    i8 78, label %476
    i8 79, label %476
    i8 80, label %476
    i8 81, label %476
    i8 82, label %476
    i8 83, label %476
    i8 84, label %476
    i8 85, label %476
    i8 86, label %476
    i8 87, label %476
    i8 88, label %476
    i8 89, label %476
    i8 90, label %476
    i8 93, label %476
    i8 95, label %476
    i8 97, label %476
    i8 98, label %476
    i8 99, label %476
    i8 100, label %476
    i8 101, label %476
    i8 102, label %476
    i8 103, label %476
    i8 104, label %476
    i8 105, label %476
    i8 106, label %476
    i8 107, label %476
    i8 108, label %476
    i8 109, label %476
    i8 110, label %476
    i8 111, label %476
    i8 112, label %476
    i8 113, label %476
    i8 114, label %476
    i8 115, label %476
    i8 116, label %476
    i8 117, label %476
    i8 118, label %476
    i8 119, label %476
    i8 120, label %476
    i8 121, label %476
    i8 122, label %476
  ]

; <label>:160:                                    ; preds = %155
  br i1 %105, label %161, label %209

; <label>:161:                                    ; preds = %160
  br i1 %112, label %162, label %644

; <label>:162:                                    ; preds = %161
  %163 = and i8 %128, 1
  %164 = icmp eq i8 %163, 0
  %165 = and i1 %114, %164
  br i1 %165, label %166, label %182

; <label>:166:                                    ; preds = %162
  %167 = icmp ult i64 %125, %131
  br i1 %167, label %168, label %170

; <label>:168:                                    ; preds = %166
  %169 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 39, i8* %169, align 1
  br label %170

; <label>:170:                                    ; preds = %168, %166
  %171 = add i64 %125, 1
  %172 = icmp ult i64 %171, %131
  br i1 %172, label %173, label %175

; <label>:173:                                    ; preds = %170
  %174 = getelementptr inbounds i8, i8* %0, i64 %171
  store i8 36, i8* %174, align 1
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = add i64 %125, 2
  %177 = icmp ult i64 %176, %131
  br i1 %177, label %178, label %180

; <label>:178:                                    ; preds = %175
  %179 = getelementptr inbounds i8, i8* %0, i64 %176
  store i8 39, i8* %179, align 1
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = add i64 %125, 3
  br label %182

; <label>:182:                                    ; preds = %162, %180
  %183 = phi i64 [ %181, %180 ], [ %125, %162 ]
  %184 = phi i8 [ 1, %180 ], [ %128, %162 ]
  %185 = icmp ult i64 %183, %131
  br i1 %185, label %186, label %188

; <label>:186:                                    ; preds = %182
  %187 = getelementptr inbounds i8, i8* %0, i64 %183
  store i8 92, i8* %187, align 1
  br label %188

; <label>:188:                                    ; preds = %186, %182
  %189 = add i64 %183, 1
  br i1 %106, label %190, label %476

; <label>:190:                                    ; preds = %188
  %191 = add i64 %124, 1
  %192 = icmp ult i64 %191, %156
  br i1 %192, label %193, label %476

; <label>:193:                                    ; preds = %190
  %194 = getelementptr inbounds i8, i8* %2, i64 %191
  %195 = load i8, i8* %194, align 1
  %196 = add i8 %195, -48
  %197 = icmp ult i8 %196, 10
  br i1 %197, label %198, label %476

; <label>:198:                                    ; preds = %193
  %199 = icmp ult i64 %189, %131
  br i1 %199, label %200, label %202

; <label>:200:                                    ; preds = %198
  %201 = getelementptr inbounds i8, i8* %0, i64 %189
  store i8 48, i8* %201, align 1
  br label %202

; <label>:202:                                    ; preds = %200, %198
  %203 = add i64 %183, 2
  %204 = icmp ult i64 %203, %131
  br i1 %204, label %205, label %207

; <label>:205:                                    ; preds = %202
  %206 = getelementptr inbounds i8, i8* %0, i64 %203
  store i8 48, i8* %206, align 1
  br label %207

; <label>:207:                                    ; preds = %205, %202
  %208 = add i64 %183, 3
  br label %476

; <label>:209:                                    ; preds = %160
  br i1 %23, label %476, label %587

; <label>:210:                                    ; preds = %155
  switch i32 %96, label %476 [
    i32 2, label %211
    i32 5, label %212
  ]

; <label>:211:                                    ; preds = %210
  br i1 %112, label %476, label %644

; <label>:212:                                    ; preds = %210
  br i1 %25, label %476, label %213

; <label>:213:                                    ; preds = %212
  %214 = add i64 %124, 2
  %215 = icmp ult i64 %214, %156
  br i1 %215, label %216, label %476

; <label>:216:                                    ; preds = %213
  %217 = add i64 %124, 1
  %218 = getelementptr inbounds i8, i8* %2, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 63
  br i1 %220, label %221, label %476

; <label>:221:                                    ; preds = %216
  %222 = getelementptr inbounds i8, i8* %2, i64 %214
  %223 = load i8, i8* %222, align 1
  %224 = sext i8 %223 to i32
  switch i32 %224, label %476 [
    i32 33, label %225
    i32 39, label %225
    i32 40, label %225
    i32 41, label %225
    i32 45, label %225
    i32 47, label %225
    i32 60, label %225
    i32 61, label %225
    i32 62, label %225
  ]

; <label>:225:                                    ; preds = %221, %221, %221, %221, %221, %221, %221, %221, %221
  br i1 %112, label %226, label %644

; <label>:226:                                    ; preds = %225
  %227 = icmp ult i64 %125, %131
  br i1 %227, label %228, label %230

; <label>:228:                                    ; preds = %226
  %229 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 63, i8* %229, align 1
  br label %230

; <label>:230:                                    ; preds = %228, %226
  %231 = add i64 %125, 1
  %232 = icmp ult i64 %231, %131
  br i1 %232, label %233, label %235

; <label>:233:                                    ; preds = %230
  %234 = getelementptr inbounds i8, i8* %0, i64 %231
  store i8 34, i8* %234, align 1
  br label %235

; <label>:235:                                    ; preds = %233, %230
  %236 = add i64 %125, 2
  %237 = icmp ult i64 %236, %131
  br i1 %237, label %238, label %240

; <label>:238:                                    ; preds = %235
  %239 = getelementptr inbounds i8, i8* %0, i64 %236
  store i8 34, i8* %239, align 1
  br label %240

; <label>:240:                                    ; preds = %238, %235
  %241 = add i64 %125, 3
  %242 = icmp ult i64 %241, %131
  br i1 %242, label %243, label %245

; <label>:243:                                    ; preds = %240
  %244 = getelementptr inbounds i8, i8* %0, i64 %241
  store i8 63, i8* %244, align 1
  br label %245

; <label>:245:                                    ; preds = %243, %240
  %246 = add i64 %125, 4
  br label %476

; <label>:247:                                    ; preds = %155
  br label %257

; <label>:248:                                    ; preds = %155
  br label %257

; <label>:249:                                    ; preds = %155
  br label %255

; <label>:250:                                    ; preds = %155
  br label %255

; <label>:251:                                    ; preds = %155
  br label %257

; <label>:252:                                    ; preds = %155
  br i1 %114, label %253, label %254

; <label>:253:                                    ; preds = %252
  br i1 %112, label %542, label %644

; <label>:254:                                    ; preds = %252
  br i1 %122, label %542, label %255

; <label>:255:                                    ; preds = %254, %155, %250, %249
  %256 = phi i8 [ 92, %254 ], [ 116, %250 ], [ 114, %249 ], [ 110, %155 ]
  br i1 %118, label %257, label %644

; <label>:257:                                    ; preds = %255, %155, %251, %248, %247
  %258 = phi i8 [ %256, %255 ], [ 118, %251 ], [ 102, %248 ], [ 98, %247 ], [ 97, %155 ]
  br i1 %105, label %503, label %476

; <label>:259:                                    ; preds = %155, %155
  %260 = icmp eq i64 %156, -1
  br i1 %260, label %261, label %266

; <label>:261:                                    ; preds = %259
  %262 = load i8, i8* %26, align 1
  %263 = icmp ne i8 %262, 0
  %264 = icmp ne i64 %124, 0
  %265 = or i1 %264, %263
  br i1 %265, label %476, label %272

; <label>:266:                                    ; preds = %259
  %267 = icmp ne i64 %156, 1
  %268 = icmp ne i64 %124, 0
  %269 = or i1 %268, %267
  br i1 %269, label %476, label %272

; <label>:270:                                    ; preds = %155, %155
  %271 = icmp eq i64 %124, 0
  br i1 %271, label %272, label %476

; <label>:272:                                    ; preds = %270, %266, %261, %155
  br label %273

; <label>:273:                                    ; preds = %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %272
  %274 = phi i8 [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 1, %272 ]
  br i1 %118, label %476, label %644

; <label>:275:                                    ; preds = %155
  br i1 %114, label %276, label %476

; <label>:276:                                    ; preds = %275
  br i1 %112, label %277, label %644

; <label>:277:                                    ; preds = %276
  %278 = icmp eq i64 %131, 0
  %279 = icmp ne i64 %126, 0
  %280 = or i1 %279, %278
  %281 = select i1 %280, i64 %126, i64 %131
  %282 = select i1 %280, i64 %131, i64 0
  %283 = icmp ult i64 %125, %282
  br i1 %283, label %284, label %286

; <label>:284:                                    ; preds = %277
  %285 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 39, i8* %285, align 1
  br label %286

; <label>:286:                                    ; preds = %284, %277
  %287 = add i64 %125, 1
  %288 = icmp ult i64 %287, %282
  br i1 %288, label %289, label %291

; <label>:289:                                    ; preds = %286
  %290 = getelementptr inbounds i8, i8* %0, i64 %287
  store i8 92, i8* %290, align 1
  br label %291

; <label>:291:                                    ; preds = %289, %286
  %292 = add i64 %125, 2
  %293 = icmp ult i64 %292, %282
  br i1 %293, label %294, label %296

; <label>:294:                                    ; preds = %291
  %295 = getelementptr inbounds i8, i8* %0, i64 %292
  store i8 39, i8* %295, align 1
  br label %296

; <label>:296:                                    ; preds = %294, %291
  %297 = add i64 %125, 3
  br label %476

; <label>:298:                                    ; preds = %155
  br i1 %14, label %299, label %308

; <label>:299:                                    ; preds = %298
  %300 = tail call i16** @__ctype_b_loc() #1
  %301 = load i16*, i16** %300, align 8
  %302 = zext i8 %159 to i64
  %303 = getelementptr inbounds i16, i16* %301, i64 %302
  %304 = load i16, i16* %303, align 2
  %305 = lshr i16 %304, 14
  %306 = trunc i16 %305 to i8
  %307 = and i8 %306, 1
  br label %368

; <label>:308:                                    ; preds = %298
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18) #11
  store i64 0, i64* %10, align 8
  %309 = icmp eq i64 %156, -1
  br i1 %309, label %310, label %312

; <label>:310:                                    ; preds = %308
  %311 = call i64 @strlen(i8* nonnull %2) #15
  br label %312

; <label>:312:                                    ; preds = %310, %308
  %313 = phi i64 [ %156, %308 ], [ %311, %310 ]
  br label %314

; <label>:314:                                    ; preds = %312, %355
  %315 = phi i64 [ %360, %355 ], [ 0, %312 ]
  %316 = phi i8 [ %359, %355 ], [ 1, %312 ]
  call void @llvm.lifetime.start(i64 4, i8* nonnull %19) #11
  %317 = add i64 %315, %124
  %318 = getelementptr inbounds i8, i8* %2, i64 %317
  %319 = sub i64 %313, %317
  %320 = call i64 @rpl_mbrtowc(i32* nonnull %12, i8* %318, i64 %319, %struct.__mbstate_t* nonnull %11) #11
  switch i64 %320, label %334 [
    i64 0, label %350
    i64 -1, label %347
    i64 -2, label %321
  ]

; <label>:321:                                    ; preds = %314
  %322 = icmp ugt i64 %313, %317
  br i1 %322, label %323, label %351

; <label>:323:                                    ; preds = %321
  br label %324

; <label>:324:                                    ; preds = %323, %330
  %325 = phi i64 [ %332, %330 ], [ %317, %323 ]
  %326 = phi i64 [ %331, %330 ], [ %315, %323 ]
  %327 = getelementptr inbounds i8, i8* %2, i64 %325
  %328 = load i8, i8* %327, align 1
  %329 = icmp eq i8 %328, 0
  br i1 %329, label %348, label %330

; <label>:330:                                    ; preds = %324
  %331 = add i64 %326, 1
  %332 = add i64 %331, %124
  %333 = icmp ult i64 %332, %313
  br i1 %333, label %324, label %348

; <label>:334:                                    ; preds = %314
  %335 = icmp ugt i64 %320, 1
  %336 = and i1 %116, %335
  br i1 %336, label %337, label %355

; <label>:337:                                    ; preds = %334
  br label %338

; <label>:338:                                    ; preds = %337, %344
  %339 = phi i64 [ %345, %344 ], [ 1, %337 ]
  %340 = add i64 %339, %317
  %341 = getelementptr inbounds i8, i8* %2, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = sext i8 %342 to i32
  switch i32 %343, label %344 [
    i32 91, label %367
    i32 92, label %367
    i32 94, label %367
    i32 96, label %367
    i32 124, label %367
  ]

; <label>:344:                                    ; preds = %338
  %345 = add nuw i64 %339, 1
  %346 = icmp ult i64 %345, %320
  br i1 %346, label %338, label %354

; <label>:347:                                    ; preds = %314
  br label %351

; <label>:348:                                    ; preds = %324, %330
  %349 = phi i64 [ %331, %330 ], [ %326, %324 ]
  br label %351

; <label>:350:                                    ; preds = %314
  br label %351

; <label>:351:                                    ; preds = %350, %348, %347, %321
  %352 = phi i64 [ %315, %321 ], [ %315, %347 ], [ %349, %348 ], [ %315, %350 ]
  %353 = phi i8 [ 0, %321 ], [ 0, %347 ], [ 0, %348 ], [ %316, %350 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #11
  br label %364

; <label>:354:                                    ; preds = %344
  br label %355

; <label>:355:                                    ; preds = %354, %334
  %356 = load i32, i32* %12, align 4
  %357 = call i32 @iswprint(i32 %356) #11
  %358 = icmp eq i32 %357, 0
  %359 = select i1 %358, i8 0, i8 %316
  %360 = add i64 %320, %315
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #11
  %361 = call i32 @mbsinit(%struct.__mbstate_t* nonnull %11) #15
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %314, label %363

; <label>:363:                                    ; preds = %355
  br label %364

; <label>:364:                                    ; preds = %363, %351
  %365 = phi i8 [ %353, %351 ], [ %359, %363 ]
  %366 = phi i64 [ %352, %351 ], [ %360, %363 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #11
  br label %368

; <label>:367:                                    ; preds = %338, %338, %338, %338, %338
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #11
  br label %649

; <label>:368:                                    ; preds = %364, %299
  %369 = phi i64 [ %156, %299 ], [ %313, %364 ]
  %370 = phi i64 [ 1, %299 ], [ %366, %364 ]
  %371 = phi i8 [ %307, %299 ], [ %365, %364 ]
  %372 = and i8 %371, 1
  %373 = icmp ne i8 %372, 0
  %374 = icmp ult i64 %370, 2
  %375 = or i1 %373, %113
  %376 = and i1 %374, %375
  br i1 %376, label %476, label %377

; <label>:377:                                    ; preds = %368
  %378 = add i64 %370, %124
  br label %379

; <label>:379:                                    ; preds = %472, %377
  %380 = phi i64 [ %124, %377 ], [ %447, %472 ]
  %381 = phi i64 [ %125, %377 ], [ %473, %472 ]
  %382 = phi i8 [ %128, %377 ], [ %468, %472 ]
  %383 = phi i8 [ %159, %377 ], [ %475, %472 ]
  %384 = phi i8 [ %157, %377 ], [ %445, %472 ]
  %385 = phi i8 [ 0, %377 ], [ %446, %472 ]
  br i1 %375, label %432, label %386

; <label>:386:                                    ; preds = %379
  br i1 %112, label %387, label %643

; <label>:387:                                    ; preds = %386
  %388 = and i8 %382, 1
  %389 = icmp eq i8 %388, 0
  %390 = and i1 %114, %389
  br i1 %390, label %391, label %407

; <label>:391:                                    ; preds = %387
  %392 = icmp ult i64 %381, %131
  br i1 %392, label %393, label %395

; <label>:393:                                    ; preds = %391
  %394 = getelementptr inbounds i8, i8* %0, i64 %381
  store i8 39, i8* %394, align 1
  br label %395

; <label>:395:                                    ; preds = %393, %391
  %396 = add i64 %381, 1
  %397 = icmp ult i64 %396, %131
  br i1 %397, label %398, label %400

; <label>:398:                                    ; preds = %395
  %399 = getelementptr inbounds i8, i8* %0, i64 %396
  store i8 36, i8* %399, align 1
  br label %400

; <label>:400:                                    ; preds = %398, %395
  %401 = add i64 %381, 2
  %402 = icmp ult i64 %401, %131
  br i1 %402, label %403, label %405

; <label>:403:                                    ; preds = %400
  %404 = getelementptr inbounds i8, i8* %0, i64 %401
  store i8 39, i8* %404, align 1
  br label %405

; <label>:405:                                    ; preds = %403, %400
  %406 = add i64 %381, 3
  br label %407

; <label>:407:                                    ; preds = %387, %405
  %408 = phi i64 [ %406, %405 ], [ %381, %387 ]
  %409 = phi i8 [ 1, %405 ], [ %382, %387 ]
  %410 = icmp ult i64 %408, %131
  br i1 %410, label %411, label %413

; <label>:411:                                    ; preds = %407
  %412 = getelementptr inbounds i8, i8* %0, i64 %408
  store i8 92, i8* %412, align 1
  br label %413

; <label>:413:                                    ; preds = %411, %407
  %414 = add i64 %408, 1
  %415 = icmp ult i64 %414, %131
  br i1 %415, label %416, label %420

; <label>:416:                                    ; preds = %413
  %417 = lshr i8 %383, 6
  %418 = or i8 %417, 48
  %419 = getelementptr inbounds i8, i8* %0, i64 %414
  store i8 %418, i8* %419, align 1
  br label %420

; <label>:420:                                    ; preds = %416, %413
  %421 = add i64 %408, 2
  %422 = icmp ult i64 %421, %131
  br i1 %422, label %423, label %428

; <label>:423:                                    ; preds = %420
  %424 = lshr i8 %383, 3
  %425 = and i8 %424, 7
  %426 = or i8 %425, 48
  %427 = getelementptr inbounds i8, i8* %0, i64 %421
  store i8 %426, i8* %427, align 1
  br label %428

; <label>:428:                                    ; preds = %423, %420
  %429 = add i64 %408, 3
  %430 = and i8 %383, 7
  %431 = or i8 %430, 48
  br label %441

; <label>:432:                                    ; preds = %379
  %433 = and i8 %384, 1
  %434 = icmp eq i8 %433, 0
  br i1 %434, label %441, label %435

; <label>:435:                                    ; preds = %432
  %436 = icmp ult i64 %381, %131
  br i1 %436, label %437, label %439

; <label>:437:                                    ; preds = %435
  %438 = getelementptr inbounds i8, i8* %0, i64 %381
  store i8 92, i8* %438, align 1
  br label %439

; <label>:439:                                    ; preds = %437, %435
  %440 = add i64 %381, 1
  br label %441

; <label>:441:                                    ; preds = %432, %439, %428
  %442 = phi i64 [ %440, %439 ], [ %381, %432 ], [ %429, %428 ]
  %443 = phi i8 [ %382, %439 ], [ %382, %432 ], [ %409, %428 ]
  %444 = phi i8 [ %383, %439 ], [ %383, %432 ], [ %431, %428 ]
  %445 = phi i8 [ 0, %439 ], [ %384, %432 ], [ %384, %428 ]
  %446 = phi i8 [ %385, %439 ], [ %385, %432 ], [ 1, %428 ]
  %447 = add i64 %380, 1
  %448 = icmp ugt i64 %378, %447
  br i1 %448, label %449, label %541

; <label>:449:                                    ; preds = %441
  %450 = and i8 %443, 1
  %451 = icmp ne i8 %450, 0
  %452 = and i8 %446, 1
  %453 = icmp eq i8 %452, 0
  %454 = and i1 %451, %453
  br i1 %454, label %455, label %466

; <label>:455:                                    ; preds = %449
  %456 = icmp ult i64 %442, %131
  br i1 %456, label %457, label %459

; <label>:457:                                    ; preds = %455
  %458 = getelementptr inbounds i8, i8* %0, i64 %442
  store i8 39, i8* %458, align 1
  br label %459

; <label>:459:                                    ; preds = %457, %455
  %460 = add i64 %442, 1
  %461 = icmp ult i64 %460, %131
  br i1 %461, label %462, label %464

; <label>:462:                                    ; preds = %459
  %463 = getelementptr inbounds i8, i8* %0, i64 %460
  store i8 39, i8* %463, align 1
  br label %464

; <label>:464:                                    ; preds = %462, %459
  %465 = add i64 %442, 2
  br label %466

; <label>:466:                                    ; preds = %449, %464
  %467 = phi i64 [ %465, %464 ], [ %442, %449 ]
  %468 = phi i8 [ 0, %464 ], [ %443, %449 ]
  %469 = icmp ult i64 %467, %131
  br i1 %469, label %470, label %472

; <label>:470:                                    ; preds = %466
  %471 = getelementptr inbounds i8, i8* %0, i64 %467
  store i8 %444, i8* %471, align 1
  br label %472

; <label>:472:                                    ; preds = %470, %466
  %473 = add i64 %467, 1
  %474 = getelementptr inbounds i8, i8* %2, i64 %447
  %475 = load i8, i8* %474, align 1
  br label %379

; <label>:476:                                    ; preds
  %477 = phi i64 [ %124, %296 ], [ %124, %275 ], [ %124, %273 ], [ %124, %270 ], [ %124, %261 ], [ %124, %266 ], [ %124, %257 ], [ %124, %210 ], [ %124, %221 ], [ %214, %245 ], [ %124, %216 ], [ %124, %213 ], [ %124, %212 ], [ %124, %211 ], [ %124, %209 ], [ %124, %207 ], [ %124, %193 ], [ %124, %190 ], [ %124, %188 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %368 ]
  %478 = phi i64 [ %297, %296 ], [ %125, %275 ], [ %125, %273 ], [ %125, %270 ], [ %125, %261 ], [ %125, %266 ], [ %125, %257 ], [ %125, %210 ], [ %125, %221 ], [ %246, %245 ], [ %125, %216 ], [ %125, %213 ], [ %125, %212 ], [ %125, %211 ], [ %125, %209 ], [ %208, %207 ], [ %189, %193 ], [ %189, %190 ], [ %189, %188 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %368 ]
  %479 = phi i64 [ %281, %296 ], [ %126, %275 ], [ %126, %273 ], [ %126, %270 ], [ %126, %261 ], [ %126, %266 ], [ %126, %257 ], [ %126, %210 ], [ %126, %221 ], [ %126, %245 ], [ %126, %216 ], [ %126, %213 ], [ %126, %212 ], [ %126, %211 ], [ %126, %209 ], [ %126, %207 ], [ %126, %193 ], [ %126, %190 ], [ %126, %188 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %368 ]
  %480 = phi i64 [ %156, %296 ], [ %156, %275 ], [ %156, %273 ], [ %156, %270 ], [ -1, %261 ], [ %156, %266 ], [ %156, %257 ], [ %156, %210 ], [ %156, %221 ], [ %156, %245 ], [ %156, %216 ], [ %156, %213 ], [ %156, %212 ], [ %156, %211 ], [ %156, %209 ], [ %156, %207 ], [ %156, %193 ], [ %156, %190 ], [ %156, %188 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %369, %368 ]
  %481 = phi i8 [ 0, %296 ], [ %128, %275 ], [ %128, %273 ], [ %128, %270 ], [ %128, %261 ], [ %128, %266 ], [ %128, %257 ], [ %128, %210 ], [ %128, %221 ], [ %128, %245 ], [ %128, %216 ], [ %128, %213 ], [ %128, %212 ], [ %128, %211 ], [ %128, %209 ], [ %184, %207 ], [ %184, %193 ], [ %184, %190 ], [ %184, %188 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %368 ]
  %482 = phi i8 [ 1, %296 ], [ 1, %275 ], [ %129, %273 ], [ %129, %270 ], [ %129, %261 ], [ %129, %266 ], [ %129, %257 ], [ %129, %210 ], [ %129, %221 ], [ %129, %245 ], [ %129, %216 ], [ %129, %213 ], [ %129, %212 ], [ %129, %211 ], [ %129, %209 ], [ %129, %207 ], [ %129, %193 ], [ %129, %190 ], [ %129, %188 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %368 ]
  %483 = phi i8 [ 39, %296 ], [ 39, %275 ], [ %159, %273 ], [ %159, %270 ], [ %159, %261 ], [ %159, %266 ], [ %159, %257 ], [ 63, %210 ], [ 63, %221 ], [ %223, %245 ], [ 63, %216 ], [ 63, %213 ], [ 63, %212 ], [ 63, %211 ], [ 0, %209 ], [ 48, %207 ], [ 48, %193 ], [ 48, %190 ], [ 48, %188 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %368 ]
  %484 = phi i8 [ 0, %296 ], [ 0, %275 ], [ 0, %273 ], [ 0, %270 ], [ 0, %261 ], [ 0, %266 ], [ 0, %257 ], [ 0, %210 ], [ 0, %221 ], [ 0, %245 ], [ 0, %216 ], [ 0, %213 ], [ 0, %212 ], [ 0, %211 ], [ 0, %209 ], [ 1, %207 ], [ 1, %193 ], [ 1, %190 ], [ 1, %188 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %368 ]
  %485 = phi i8 [ 1, %296 ], [ 1, %275 ], [ %274, %273 ], [ 0, %270 ], [ 0, %261 ], [ 0, %266 ], [ 0, %257 ], [ 0, %210 ], [ 0, %221 ], [ 0, %245 ], [ 0, %216 ], [ 0, %213 ], [ 0, %212 ], [ 0, %211 ], [ 0, %209 ], [ 0, %207 ], [ 0, %193 ], [ 0, %190 ], [ 0, %188 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ %372, %368 ]
  %486 = phi i64 [ %282, %296 ], [ %131, %275 ], [ %131, %273 ], [ %131, %270 ], [ %131, %261 ], [ %131, %266 ], [ %131, %257 ], [ %131, %210 ], [ %131, %221 ], [ %131, %245 ], [ %131, %216 ], [ %131, %213 ], [ %131, %212 ], [ %131, %211 ], [ %131, %209 ], [ %131, %207 ], [ %131, %193 ], [ %131, %190 ], [ %131, %188 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %368 ]
  br i1 %107, label %488, label %487

; <label>:487:                                    ; preds = %476
  br i1 %117, label %489, label %501

; <label>:488:                                    ; preds = %476
  br i1 %20, label %501, label %489

; <label>:489:                                    ; preds = %488, %487
  %490 = lshr i8 %483, 5
  %491 = zext i8 %490 to i64
  %492 = getelementptr inbounds i32, i32* %6, i64 %491
  %493 = load i32, i32* %492, align 4
  %494 = and i8 %483, 31
  %495 = zext i8 %494 to i32
  %496 = shl i32 1, %495
  %497 = and i32 %493, %496
  %498 = icmp eq i32 %497, 0
  %499 = icmp eq i8 %157, 0
  %500 = and i1 %499, %498
  br i1 %500, label %542, label %503

; <label>:501:                                    ; preds = %488, %487
  %502 = icmp eq i8 %157, 0
  br i1 %502, label %542, label %503

; <label>:503:                                    ; preds = %257, %489, %501
  %504 = phi i64 [ %477, %489 ], [ %477, %501 ], [ %124, %257 ]
  %505 = phi i64 [ %478, %489 ], [ %478, %501 ], [ %125, %257 ]
  %506 = phi i64 [ %479, %489 ], [ %479, %501 ], [ %126, %257 ]
  %507 = phi i64 [ %480, %489 ], [ %480, %501 ], [ %156, %257 ]
  %508 = phi i8 [ %481, %489 ], [ %481, %501 ], [ %128, %257 ]
  %509 = phi i8 [ %482, %489 ], [ %482, %501 ], [ %129, %257 ]
  %510 = phi i8 [ %483, %489 ], [ %483, %501 ], [ %258, %257 ]
  %511 = phi i8 [ %485, %489 ], [ %485, %501 ], [ 0, %257 ]
  %512 = phi i64 [ %486, %489 ], [ %486, %501 ], [ %131, %257 ]
  br i1 %112, label %513, label %644

; <label>:513:                                    ; preds = %503
  %514 = and i8 %508, 1
  %515 = icmp eq i8 %514, 0
  %516 = and i1 %114, %515
  br i1 %516, label %517, label %533

; <label>:517:                                    ; preds = %513
  %518 = icmp ult i64 %505, %512
  br i1 %518, label %519, label %521

; <label>:519:                                    ; preds = %517
  %520 = getelementptr inbounds i8, i8* %0, i64 %505
  store i8 39, i8* %520, align 1
  br label %521

; <label>:521:                                    ; preds = %519, %517
  %522 = add i64 %505, 1
  %523 = icmp ult i64 %522, %512
  br i1 %523, label %524, label %526

; <label>:524:                                    ; preds = %521
  %525 = getelementptr inbounds i8, i8* %0, i64 %522
  store i8 36, i8* %525, align 1
  br label %526

; <label>:526:                                    ; preds = %524, %521
  %527 = add i64 %505, 2
  %528 = icmp ult i64 %527, %512
  br i1 %528, label %529, label %531

; <label>:529:                                    ; preds = %526
  %530 = getelementptr inbounds i8, i8* %0, i64 %527
  store i8 39, i8* %530, align 1
  br label %531

; <label>:531:                                    ; preds = %529, %526
  %532 = add i64 %505, 3
  br label %533

; <label>:533:                                    ; preds = %513, %531
  %534 = phi i64 [ %532, %531 ], [ %505, %513 ]
  %535 = phi i8 [ 1, %531 ], [ %508, %513 ]
  %536 = icmp ult i64 %534, %512
  br i1 %536, label %537, label %539

; <label>:537:                                    ; preds = %533
  %538 = getelementptr inbounds i8, i8* %0, i64 %534
  store i8 92, i8* %538, align 1
  br label %539

; <label>:539:                                    ; preds = %533, %537
  %540 = add i64 %534, 1
  br label %569

; <label>:541:                                    ; preds = %441
  br label %542

; <label>:542:                                    ; preds = %541, %254, %489, %253, %501
  %543 = phi i64 [ %477, %501 ], [ %124, %253 ], [ %477, %489 ], [ %124, %254 ], [ %380, %541 ]
  %544 = phi i64 [ %478, %501 ], [ %125, %253 ], [ %478, %489 ], [ %125, %254 ], [ %442, %541 ]
  %545 = phi i64 [ %479, %501 ], [ %126, %253 ], [ %479, %489 ], [ %126, %254 ], [ %126, %541 ]
  %546 = phi i64 [ %480, %501 ], [ %156, %253 ], [ %480, %489 ], [ %156, %254 ], [ %369, %541 ]
  %547 = phi i8 [ %481, %501 ], [ %128, %253 ], [ %481, %489 ], [ %128, %254 ], [ %443, %541 ]
  %548 = phi i8 [ %482, %501 ], [ %129, %253 ], [ %482, %489 ], [ %129, %254 ], [ %129, %541 ]
  %549 = phi i8 [ %483, %501 ], [ 92, %253 ], [ %483, %489 ], [ 92, %254 ], [ %444, %541 ]
  %550 = phi i8 [ %484, %501 ], [ 0, %253 ], [ %484, %489 ], [ 0, %254 ], [ %446, %541 ]
  %551 = phi i8 [ %485, %501 ], [ 0, %253 ], [ %485, %489 ], [ 0, %254 ], [ %372, %541 ]
  %552 = phi i64 [ %486, %501 ], [ %131, %253 ], [ %486, %489 ], [ %131, %254 ], [ %131, %541 ]
  %553 = and i8 %547, 1
  %554 = icmp ne i8 %553, 0
  %555 = and i8 %550, 1
  %556 = icmp eq i8 %555, 0
  %557 = and i1 %554, %556
  br i1 %557, label %558, label %569

; <label>:558:                                    ; preds = %542
  %559 = icmp ult i64 %544, %552
  br i1 %559, label %560, label %562

; <label>:560:                                    ; preds = %558
  %561 = getelementptr inbounds i8, i8* %0, i64 %544
  store i8 39, i8* %561, align 1
  br label %562

; <label>:562:                                    ; preds = %560, %558
  %563 = add i64 %544, 1
  %564 = icmp ult i64 %563, %552
  br i1 %564, label %565, label %567

; <label>:565:                                    ; preds = %562
  %566 = getelementptr inbounds i8, i8* %0, i64 %563
  store i8 39, i8* %566, align 1
  br label %567

; <label>:567:                                    ; preds = %565, %562
  %568 = add i64 %544, 2
  br label %569

; <label>:569:                                    ; preds = %539, %542, %567
  %570 = phi i64 [ %552, %567 ], [ %552, %542 ], [ %512, %539 ]
  %571 = phi i8 [ %551, %567 ], [ %551, %542 ], [ %511, %539 ]
  %572 = phi i8 [ %549, %567 ], [ %549, %542 ], [ %510, %539 ]
  %573 = phi i8 [ %548, %567 ], [ %548, %542 ], [ %509, %539 ]
  %574 = phi i64 [ %546, %567 ], [ %546, %542 ], [ %507, %539 ]
  %575 = phi i64 [ %545, %567 ], [ %545, %542 ], [ %506, %539 ]
  %576 = phi i64 [ %543, %567 ], [ %543, %542 ], [ %504, %539 ]
  %577 = phi i64 [ %568, %567 ], [ %544, %542 ], [ %540, %539 ]
  %578 = phi i8 [ 0, %567 ], [ %547, %542 ], [ %535, %539 ]
  %579 = icmp ult i64 %577, %570
  br i1 %579, label %580, label %582

; <label>:580:                                    ; preds = %569
  %581 = getelementptr inbounds i8, i8* %0, i64 %577
  store i8 %572, i8* %581, align 1
  br label %582

; <label>:582:                                    ; preds = %580, %569
  %583 = add i64 %577, 1
  %584 = and i8 %571, 1
  %585 = icmp eq i8 %584, 0
  %586 = select i1 %585, i8 0, i8 %130
  br label %587

; <label>:587:                                    ; preds = %582, %209
  %588 = phi i64 [ %124, %209 ], [ %576, %582 ]
  %589 = phi i64 [ %125, %209 ], [ %583, %582 ]
  %590 = phi i64 [ %126, %209 ], [ %575, %582 ]
  %591 = phi i64 [ %156, %209 ], [ %574, %582 ]
  %592 = phi i8 [ %128, %209 ], [ %578, %582 ]
  %593 = phi i8 [ %129, %209 ], [ %573, %582 ]
  %594 = phi i8 [ %130, %209 ], [ %586, %582 ]
  %595 = phi i64 [ %131, %209 ], [ %570, %582 ]
  %596 = add i64 %588, 1
  br label %123

; <label>:597:                                    ; preds = %133, %135
  %598 = phi i64 [ %124, %133 ], [ -1, %135 ]
  %599 = icmp eq i64 %125, 0
  %600 = and i1 %114, %599
  %601 = xor i1 %600, true
  %602 = or i1 %112, %601
  br i1 %602, label %603, label %648

; <label>:603:                                    ; preds = %597
  %604 = and i1 %114, %112
  %605 = xor i1 %604, true
  %606 = and i8 %129, 1
  %607 = icmp eq i8 %606, 0
  %608 = or i1 %607, %605
  br i1 %608, label %618, label %609

; <label>:609:                                    ; preds = %603
  %610 = and i8 %130, 1
  %611 = icmp eq i8 %610, 0
  br i1 %611, label %614, label %612

; <label>:612:                                    ; preds = %609
  %613 = call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %126, i8* %2, i64 %598, i32 5, i32 %5, i32* %6, i8* %97, i8* %98)
  br label %659

; <label>:614:                                    ; preds = %609
  %615 = icmp eq i64 %131, 0
  %616 = icmp ne i64 %126, 0
  %617 = and i1 %616, %615
  br i1 %617, label %27, label %618

; <label>:618:                                    ; preds = %603, %614
  %619 = icmp ne i8* %100, null
  %620 = and i1 %619, %112
  br i1 %620, label %621, label %638

; <label>:621:                                    ; preds = %618
  %622 = load i8, i8* %100, align 1
  %623 = icmp eq i8 %622, 0
  br i1 %623, label %638, label %624

; <label>:624:                                    ; preds = %621
  br label %625

; <label>:625:                                    ; preds = %624, %632
  %626 = phi i8 [ %635, %632 ], [ %622, %624 ]
  %627 = phi i8* [ %634, %632 ], [ %100, %624 ]
  %628 = phi i64 [ %633, %632 ], [ %125, %624 ]
  %629 = icmp ult i64 %628, %131
  br i1 %629, label %630, label %632

; <label>:630:                                    ; preds = %625
  %631 = getelementptr inbounds i8, i8* %0, i64 %628
  store i8 %626, i8* %631, align 1
  br label %632

; <label>:632:                                    ; preds = %630, %625
  %633 = add i64 %628, 1
  %634 = getelementptr inbounds i8, i8* %627, i64 1
  %635 = load i8, i8* %634, align 1
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %637, label %625

; <label>:637:                                    ; preds = %632
  br label %638

; <label>:638:                                    ; preds = %637, %621, %618
  %639 = phi i64 [ %125, %618 ], [ %125, %621 ], [ %633, %637 ]
  %640 = icmp ult i64 %639, %131
  br i1 %640, label %641, label %659

; <label>:641:                                    ; preds = %638
  %642 = getelementptr inbounds i8, i8* %0, i64 %639
  store i8 0, i8* %642, align 1
  br label %659

; <label>:643:                                    ; preds = %386
  br label %649

; <label>:644:                                    ; preds = %148, %161, %211, %225, %253, %255, %273, %276, %503
  %645 = phi i32 [ %96, %148 ], [ %96, %161 ], [ 2, %211 ], [ 5, %225 ], [ 2, %253 ], [ 2, %255 ], [ 2, %273 ], [ 2, %276 ], [ %96, %503 ]
  %646 = phi i64 [ %146, %148 ], [ %156, %161 ], [ %156, %211 ], [ %156, %225 ], [ %156, %253 ], [ %156, %255 ], [ %156, %273 ], [ %156, %276 ], [ %507, %503 ]
  %647 = phi i64 [ %131, %148 ], [ %131, %161 ], [ %131, %211 ], [ %131, %225 ], [ %131, %253 ], [ %131, %255 ], [ %131, %273 ], [ %131, %276 ], [ %512, %503 ]
  br label %649

; <label>:648:                                    ; preds = %597
  br label %649

; <label>:649:                                    ; preds = %648, %644, %643, %367
  %650 = phi i32 [ 2, %367 ], [ %96, %643 ], [ %645, %644 ], [ %96, %648 ]
  %651 = phi i64 [ %313, %367 ], [ %369, %643 ], [ %646, %644 ], [ %598, %648 ]
  %652 = phi i64 [ %131, %367 ], [ %131, %643 ], [ %647, %644 ], [ %131, %648 ]
  %653 = icmp ne i32 %650, 2
  %654 = icmp eq i8 %104, 0
  %655 = or i1 %653, %654
  %656 = select i1 %655, i32 %650, i32 4
  %657 = and i32 %5, -3
  %658 = call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %652, i8* %2, i64 %651, i32 %656, i32 %657, i32* null, i8* %97, i8* %98)
  br label %659

; <label>:659:                                    ; preds = %638, %641, %649, %612
  %660 = phi i64 [ %658, %649 ], [ %613, %612 ], [ %639, %641 ], [ %639, %638 ]
  ret i64 %660
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i8* @gettext_quote(i8*, i32) unnamed_addr #6 {
  %3 = tail call i8* @dcgettext(i8* null, i8* %0, i32 5) #11
  %4 = icmp eq i8* %3, %0
  br i1 %4, label %5, label %75

; <label>:5:                                      ; preds = %2
  %6 = tail call i8* @locale_charset() #11
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = and i32 %8, -33
  switch i32 %9, label %72 [
    i32 85, label %10
    i32 71, label %38
  ]

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = and i32 %13, -33
  %15 = icmp eq i32 %14, 84
  br i1 %15, label %16, label %72

; <label>:16:                                     ; preds = %10
  %17 = getelementptr inbounds i8, i8* %6, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = and i32 %19, -33
  %21 = icmp eq i32 %20, 70
  br i1 %21, label %22, label %72

; <label>:22:                                     ; preds = %16
  %23 = getelementptr inbounds i8, i8* %6, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 45
  br i1 %25, label %26, label %72

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 56
  br i1 %29, label %30, label %72

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds i8, i8* %6, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %72

; <label>:34:                                     ; preds = %30
  %35 = load i8, i8* %0, align 1
  %36 = icmp eq i8 %35, 96
  %37 = select i1 %36, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.70, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.71, i64 0, i64 0)
  br label %75

; <label>:38:                                     ; preds = %5
  %39 = getelementptr inbounds i8, i8* %6, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = and i32 %41, -33
  %43 = icmp eq i32 %42, 66
  br i1 %43, label %44, label %72

; <label>:44:                                     ; preds = %38
  %45 = getelementptr inbounds i8, i8* %6, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 49
  br i1 %47, label %48, label %72

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds i8, i8* %6, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 56
  br i1 %51, label %52, label %72

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds i8, i8* %6, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 48
  br i1 %55, label %56, label %72

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds i8, i8* %6, i64 5
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 51
  br i1 %59, label %60, label %72

; <label>:60:                                     ; preds = %56
  %61 = getelementptr inbounds i8, i8* %6, i64 6
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 48
  br i1 %63, label %64, label %72

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds i8, i8* %6, i64 7
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %72

; <label>:68:                                     ; preds = %64
  %69 = load i8, i8* %0, align 1
  %70 = icmp eq i8 %69, 96
  %71 = select i1 %70, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.72, i64 0, i64 0)
  br label %75

; <label>:72:                                     ; preds = %5, %30, %26, %22, %16, %10, %64, %60, %56, %52, %48, %44, %38
  %73 = icmp eq i32 %1, 9
  %74 = select i1 %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.69, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.68, i64 0, i64 0)
  br label %75

; <label>:75:                                     ; preds = %2, %72, %68, %34
  %76 = phi i8* [ %37, %34 ], [ %71, %68 ], [ %74, %72 ], [ %3, %2 ]
  ret i8* %76
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @iswprint(i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @mbsinit(%struct.__mbstate_t*) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_alloc(i8*, i64, %struct.quoting_options*) local_unnamed_addr #6 {
  %4 = icmp ne %struct.quoting_options* %2, null
  %5 = select i1 %4, %struct.quoting_options* %2, %struct.quoting_options* @default_quoting_options
  %6 = tail call i32* @__errno_location() #1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = or i32 %9, 1
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 0
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  %17 = load i8*, i8** %16, align 8
  %18 = tail call fastcc i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %0, i64 %1, i32 %12, i32 %10, i32* %13, i8* %15, i8* %17) #11
  %19 = add i64 %18, 1
  %20 = tail call noalias i8* @xmalloc(i64 %19) #11
  %21 = load i32, i32* %11, align 8
  %22 = load i8*, i8** %14, align 8
  %23 = load i8*, i8** %16, align 8
  %24 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %20, i64 %19, i8* %0, i64 %1, i32 %21, i32 %10, i32* %13, i8* %22, i8* %23) #11
  store i32 %7, i32* %6, align 4
  ret i8* %20
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_alloc_mem(i8*, i64, i64*, %struct.quoting_options*) local_unnamed_addr #6 {
  %5 = icmp ne %struct.quoting_options* %3, null
  %6 = select i1 %5, %struct.quoting_options* %3, %struct.quoting_options* @default_quoting_options
  %7 = tail call i32* @__errno_location() #1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i64* %2, null
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = or i32 %10, %13
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 2, i64 0
  %18 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 4
  %21 = load i8*, i8** %20, align 8
  %22 = tail call fastcc i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %0, i64 %1, i32 %16, i32 %14, i32* %17, i8* %19, i8* %21)
  %23 = add i64 %22, 1
  %24 = tail call noalias i8* @xmalloc(i64 %23) #11
  %25 = load i32, i32* %15, align 8
  %26 = load i8*, i8** %18, align 8
  %27 = load i8*, i8** %20, align 8
  %28 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %24, i64 %23, i8* %0, i64 %1, i32 %25, i32 %14, i32* %17, i8* %26, i8* %27)
  store i32 %8, i32* %7, align 4
  br i1 %11, label %29, label %30

; <label>:29:                                     ; preds = %4
  store i64 %22, i64* %2, align 8
  br label %30

; <label>:30:                                     ; preds = %29, %4
  ret i8* %24
}

; Function Attrs: nounwind sspstrong uwtable
define void @quotearg_free() local_unnamed_addr #6 {
  %1 = load %struct.tokenbuffer*, %struct.tokenbuffer** @slotvec, align 8
  %2 = load i32, i32* @nslots, align 4
  %3 = icmp sgt i32 %2, 1
  br i1 %3, label %4, label %14

; <label>:4:                                      ; preds = %0
  br label %5

; <label>:5:                                      ; preds = %4, %5
  %6 = phi i64 [ %9, %5 ], [ 1, %4 ]
  %7 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %1, i64 %6, i32 1
  %8 = load i8*, i8** %7, align 8
  tail call void @free(i8* %8) #11
  %9 = add nuw i64 %6, 1
  %10 = load i32, i32* @nslots, align 4
  %11 = sext i32 %10 to i64
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %5, label %13

; <label>:13:                                     ; preds = %5
  br label %14

; <label>:14:                                     ; preds = %13, %0
  %15 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %1, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %14
  tail call void @free(i8* %16) #11
  store i64 256, i64* getelementptr inbounds (%struct.tokenbuffer, %struct.tokenbuffer* @slotvec0, i64 0, i32 0), align 8
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), i8** getelementptr inbounds (%struct.tokenbuffer, %struct.tokenbuffer* @slotvec0, i64 0, i32 1), align 8
  br label %19

; <label>:19:                                     ; preds = %14, %18
  %20 = icmp eq %struct.tokenbuffer* %1, @slotvec0
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %19
  %22 = bitcast %struct.tokenbuffer* %1 to i8*
  tail call void @free(i8* %22) #11
  store %struct.tokenbuffer* @slotvec0, %struct.tokenbuffer** @slotvec, align 8
  br label %23

; <label>:23:                                     ; preds = %19, %21
  store i32 1, i32* @nslots, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n(i32, i8*) local_unnamed_addr #6 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* nonnull @default_quoting_options)
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) unnamed_addr #6 {
  %5 = tail call i32* @__errno_location() #1
  %6 = load i32, i32* %5, align 4
  %7 = load %struct.tokenbuffer*, %struct.tokenbuffer** @slotvec, align 8
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  tail call void @abort() #16
  unreachable

; <label>:10:                                     ; preds = %4
  %11 = load i32, i32* @nslots, align 4
  %12 = icmp sgt i32 %11, %0
  br i1 %12, label %34, label %13

; <label>:13:                                     ; preds = %10
  %14 = icmp eq %struct.tokenbuffer* %7, @slotvec0
  %15 = icmp ugt i32 %0, 2147483646
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %13
  tail call void @xalloc_die() #16
  unreachable

; <label>:17:                                     ; preds = %13
  %18 = bitcast %struct.tokenbuffer* %7 to i8*
  %19 = select i1 %14, i8* null, i8* %18
  %20 = add nsw i32 %0, 1
  %21 = sext i32 %20 to i64
  %22 = shl nsw i64 %21, 4
  %23 = tail call i8* @xrealloc(i8* %19, i64 %22) #11
  %24 = bitcast i8* %23 to %struct.tokenbuffer*
  store i8* %23, i8** bitcast (%struct.tokenbuffer** @slotvec to i8**), align 8
  br i1 %14, label %25, label %26

; <label>:25:                                     ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* bitcast (%struct.tokenbuffer* @slotvec0 to i8*), i64 16, i32 8, i1 false)
  br label %26

; <label>:26:                                     ; preds = %25, %17
  %27 = load i32, i32* @nslots, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %24, i64 %28
  %30 = bitcast %struct.tokenbuffer* %29 to i8*
  %31 = sub nsw i32 %20, %27
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 4
  tail call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 %33, i32 8, i1 false)
  store i32 %20, i32* @nslots, align 4
  br label %34

; <label>:34:                                     ; preds = %10, %26
  %35 = phi %struct.tokenbuffer* [ %24, %26 ], [ %7, %10 ]
  %36 = sext i32 %0 to i64
  %37 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %35, i64 %36, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %35, i64 %36, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = or i32 %42, 1
  %44 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 0
  %47 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 3
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 4
  %50 = load i8*, i8** %49, align 8
  %51 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %40, i64 %38, i8* %1, i64 %2, i32 %45, i32 %43, i32* %46, i8* %48, i8* %50)
  %52 = icmp ugt i64 %38, %51
  br i1 %52, label %63, label %53

; <label>:53:                                     ; preds = %34
  %54 = add i64 %51, 1
  store i64 %54, i64* %37, align 8
  %55 = icmp eq i8* %40, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %55, label %57, label %56

; <label>:56:                                     ; preds = %53
  tail call void @free(i8* %40) #11
  br label %57

; <label>:57:                                     ; preds = %53, %56
  %58 = tail call noalias i8* @xmalloc(i64 %54) #11
  store i8* %58, i8** %39, align 8
  %59 = load i32, i32* %44, align 8
  %60 = load i8*, i8** %47, align 8
  %61 = load i8*, i8** %49, align 8
  %62 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %58, i64 %54, i8* %1, i64 %2, i32 %59, i32 %43, i32* %46, i8* %60, i8* %61)
  br label %63

; <label>:63:                                     ; preds = %34, %57
  %64 = phi i8* [ %58, %57 ], [ %40, %34 ]
  store i32 %6, i32* %5, align 4
  ret i8* %64
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_mem(i32, i8*, i64) local_unnamed_addr #6 {
  %4 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* nonnull @default_quoting_options)
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg(i8*) local_unnamed_addr #6 {
  %2 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull @default_quoting_options) #11
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_mem(i8*, i64) local_unnamed_addr #6 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull @default_quoting_options) #11
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style(i32, i32, i8*) local_unnamed_addr #6 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #11
  %7 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 52, i32 4, i1 false)
  %8 = icmp eq i32 %1, 10
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  tail call void @abort() #16
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %1, i32* %11, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %13 = bitcast i32* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* nonnull %7, i64 52, i32 4, i1 false) #11
  call void @llvm.lifetime.end(i64 52, i8* nonnull %7)
  %14 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* nonnull %5)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #11
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style_mem(i32, i32, i8*, i64) local_unnamed_addr #6 {
  %5 = alloca [52 x i8], align 4
  %6 = alloca %struct.quoting_options, align 8
  %7 = bitcast %struct.quoting_options* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #11
  %8 = getelementptr inbounds [52 x i8], [52 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %8)
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 52, i32 4, i1 false)
  %9 = icmp eq i32 %1, 10
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %4
  tail call void @abort() #16
  unreachable

; <label>:11:                                     ; preds = %4
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  store i32 %1, i32* %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 1
  %14 = bitcast i32* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* nonnull %8, i64 52, i32 4, i1 false) #11
  call void @llvm.lifetime.end(i64 52, i8* nonnull %8)
  %15 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 %3, %struct.quoting_options* nonnull %6)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #11
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_style(i32, i8*) local_unnamed_addr #6 {
  %3 = alloca [52 x i8], align 4
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #11
  %6 = getelementptr inbounds [52 x i8], [52 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %6)
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 52, i32 4, i1 false)
  %7 = icmp eq i32 %0, 10
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  tail call void @abort() #16
  unreachable

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 %0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 1
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* nonnull %6, i64 52, i32 4, i1 false) #11
  call void @llvm.lifetime.end(i64 52, i8* nonnull %6)
  %13 = call fastcc i8* @quotearg_n_options(i32 0, i8* %1, i64 -1, %struct.quoting_options* nonnull %4) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #11
  ret i8* %13
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_style_mem(i32, i8*, i64) local_unnamed_addr #6 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #11
  %7 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 52, i32 4, i1 false)
  %8 = icmp eq i32 %0, 10
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  tail call void @abort() #16
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %0, i32* %11, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %13 = bitcast i32* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* nonnull %7, i64 52, i32 4, i1 false) #11
  call void @llvm.lifetime.end(i64 52, i8* nonnull %7)
  %14 = call fastcc i8* @quotearg_n_options(i32 0, i8* %1, i64 %2, %struct.quoting_options* nonnull %5) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #11
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_char_mem(i8*, i64, i8 signext) local_unnamed_addr #6 {
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false)
  %6 = lshr i8 %2, 5
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 2, i64 %7
  %9 = and i8 %2, 31
  %10 = zext i8 %9 to i32
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, %10
  %13 = and i32 %12, 1
  %14 = xor i32 %13, 1
  %15 = shl i32 %14, %10
  %16 = xor i32 %15, %11
  store i32 %16, i32* %8, align 4
  %17 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull %4)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #11
  ret i8* %17
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_char(i8*, i8 signext) local_unnamed_addr #6 {
  %3 = alloca %struct.quoting_options, align 8
  %4 = bitcast %struct.quoting_options* %3 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %4) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %4, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %5 = lshr i8 %1, 5
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 %6
  %8 = and i8 %1, 31
  %9 = zext i8 %8 to i32
  %10 = load i32, i32* %7, align 4
  %11 = lshr i32 %10, %9
  %12 = and i32 %11, 1
  %13 = xor i32 %12, 1
  %14 = shl i32 %13, %9
  %15 = xor i32 %14, %10
  store i32 %15, i32* %7, align 4
  %16 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull %3) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %4) #11
  ret i8* %16
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_colon(i8*) local_unnamed_addr #6 {
  %2 = alloca %struct.quoting_options, align 8
  %3 = bitcast %struct.quoting_options* %2 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %3) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %3, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %2, i64 0, i32 2, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 67108864
  store i32 %6, i32* %4, align 4
  %7 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull %2) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %3) #11
  ret i8* %7
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_colon_mem(i8*, i64) local_unnamed_addr #6 {
  %3 = alloca %struct.quoting_options, align 8
  %4 = bitcast %struct.quoting_options* %3 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %4) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %4, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 67108864
  store i32 %7, i32* %5, align 4
  %8 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull %3) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %4) #11
  ret i8* %8
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style_colon(i32, i32, i8*) local_unnamed_addr #6 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = alloca [52 x i8], align 4
  %7 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #11
  %8 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %8)
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 52, i32 4, i1 false)
  %9 = icmp eq i32 %1, 10
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @abort() #16
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds [52 x i8], [52 x i8]* %6, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %12, i8* nonnull %8, i64 52, i32 4, i1 false)
  call void @llvm.lifetime.end(i64 52, i8* nonnull %8)
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %1, i32* %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %15 = bitcast i32* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* nonnull %12, i64 52, i32 4, i1 false)
  %16 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = or i32 %17, 67108864
  store i32 %18, i32* %16, align 4
  %19 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* nonnull %5)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #11
  ret i8* %19
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_custom(i32, i8*, i8*, i8*) local_unnamed_addr #6 {
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %6, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %7, align 8
  %8 = icmp ne i8* %1, null
  %9 = icmp ne i8* %2, null
  %10 = and i1 %8, %9
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %4
  tail call void @abort() #16
  unreachable

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %1, i8** %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %2, i8** %14, align 8
  %15 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %3, i64 -1, %struct.quoting_options* nonnull %5) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #11
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_custom_mem(i32, i8*, i8*, i8*, i64) local_unnamed_addr #6 {
  %6 = alloca %struct.quoting_options, align 8
  %7 = bitcast %struct.quoting_options* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %7, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false)
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  store i32 10, i32* %8, align 8
  %9 = icmp ne i8* %1, null
  %10 = icmp ne i8* %2, null
  %11 = and i1 %9, %10
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %5
  tail call void @abort() #16
  unreachable

; <label>:13:                                     ; preds = %5
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 3
  store i8* %1, i8** %14, align 8
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 4
  store i8* %2, i8** %15, align 8
  %16 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %3, i64 %4, %struct.quoting_options* nonnull %6)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #11
  ret i8* %16
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_custom(i8*, i8*, i8*) local_unnamed_addr #6 {
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 10, i32* %6, align 8
  %7 = icmp ne i8* %0, null
  %8 = icmp ne i8* %1, null
  %9 = and i1 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  tail call void @abort() #16
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 3
  store i8* %0, i8** %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 4
  store i8* %1, i8** %13, align 8
  %14 = call fastcc i8* @quotearg_n_options(i32 0, i8* %2, i64 -1, %struct.quoting_options* nonnull %4) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #11
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_custom_mem(i8*, i8*, i8*, i64) local_unnamed_addr #6 {
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %6, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #11
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %7, align 8
  %8 = icmp ne i8* %0, null
  %9 = icmp ne i8* %1, null
  %10 = and i1 %8, %9
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %4
  tail call void @abort() #16
  unreachable

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %0, i8** %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %1, i8** %14, align 8
  %15 = call fastcc i8* @quotearg_n_options(i32 0, i8* %2, i64 %3, %struct.quoting_options* nonnull %5) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #11
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_n_mem(i32, i8*, i64) local_unnamed_addr #6 {
  %4 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* nonnull @quote_quoting_options)
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_mem(i8*, i64) local_unnamed_addr #6 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull @quote_quoting_options) #11
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_n(i32, i8*) local_unnamed_addr #6 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* nonnull @quote_quoting_options) #11
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote(i8*) local_unnamed_addr #6 {
  %2 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull @quote_quoting_options) #11
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define void @init_tokenbuffer(%struct.tokenbuffer* nocapture) local_unnamed_addr #6 {
  %2 = bitcast %struct.tokenbuffer* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @readtoken(%struct._IO_FILE*, i8* nocapture readonly, i64, %struct.tokenbuffer* nocapture) local_unnamed_addr #6 {
  %5 = alloca [4 x i64], align 16
  %6 = bitcast [4 x i64]* %5 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 32, i32 16, i1 false)
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %27, label %8

; <label>:8:                                      ; preds = %4
  %9 = and i64 %2, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %21, label %11

; <label>:11:                                     ; preds = %8
  br label %12

; <label>:12:                                     ; preds = %11
  %13 = load i8, i8* %1, align 1
  %14 = zext i8 %13 to i64
  %15 = and i64 %14, 63
  %16 = shl i64 1, %15
  %17 = lshr i64 %14, 6
  %18 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %16, %19
  store i64 %20, i64* %18, align 8
  br label %21

; <label>:21:                                     ; preds = %8, %12
  %22 = phi i64 [ 0, %8 ], [ 1, %12 ]
  %23 = icmp eq i64 %2, 1
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  br label %30

; <label>:25:                                     ; preds = %30
  br label %26

; <label>:26:                                     ; preds = %21, %25
  br label %27

; <label>:27:                                     ; preds = %26, %4
  %28 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1
  %29 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2
  br label %53

; <label>:30:                                     ; preds = %30, %24
  %31 = phi i64 [ %22, %24 ], [ %51, %30 ]
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = and i64 %34, 63
  %36 = shl i64 1, %35
  %37 = lshr i64 %34, 6
  %38 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %37
  %39 = load i64, i64* %38, align 8
  %40 = or i64 %36, %39
  store i64 %40, i64* %38, align 8
  %41 = add nuw i64 %31, 1
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = and i64 %44, 63
  %46 = shl i64 1, %45
  %47 = lshr i64 %44, 6
  %48 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = or i64 %46, %49
  store i64 %50, i64* %48, align 8
  %51 = add i64 %31, 2
  %52 = icmp eq i64 %51, %2
  br i1 %52, label %25, label %30

; <label>:53:                                     ; preds = %27, %64
  %54 = load i8*, i8** %28, align 8
  %55 = load i8*, i8** %29, align 8
  %56 = icmp ult i8* %54, %55
  br i1 %56, label %57, label %61

; <label>:57:                                     ; preds = %53
  %58 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %58, i8** %28, align 8
  %59 = load i8, i8* %54, align 1
  %60 = zext i8 %59 to i32
  br label %64

; <label>:61:                                     ; preds = %53
  %62 = tail call i32 @__uflow(%struct._IO_FILE* nonnull %0) #11
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %64, label %135

; <label>:64:                                     ; preds = %57, %61
  %65 = phi i32 [ %60, %57 ], [ %62, %61 ]
  %66 = sext i32 %65 to i64
  %67 = lshr i64 %66, 6
  %68 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %67
  %69 = load i64, i64* %68, align 8
  %70 = and i64 %66, 63
  %71 = shl i64 1, %70
  %72 = and i64 %71, %69
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %53

; <label>:74:                                     ; preds = %64
  %75 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %3, i64 0, i32 1
  %76 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %3, i64 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = load i8*, i8** %75, align 8
  br label %79

; <label>:79:                                     ; preds = %125, %74
  %80 = phi i1 [ false, %74 ], [ %126, %125 ]
  %81 = phi i64 [ 0, %74 ], [ %115, %125 ]
  %82 = phi i32 [ %65, %74 ], [ %127, %125 ]
  %83 = phi i8* [ %78, %74 ], [ %103, %125 ]
  %84 = phi i64 [ %77, %74 ], [ %102, %125 ]
  %85 = icmp eq i64 %81, %84
  br i1 %85, label %86, label %101

; <label>:86:                                     ; preds = %79
  %87 = icmp eq i8* %83, null
  br i1 %87, label %88, label %91

; <label>:88:                                     ; preds = %86
  %89 = icmp eq i64 %81, 0
  %90 = select i1 %89, i64 128, i64 %81
  br label %98

; <label>:91:                                     ; preds = %86
  %92 = icmp ult i64 %81, 6148914691236517204
  br i1 %92, label %94, label %93

; <label>:93:                                     ; preds = %91
  tail call void @xalloc_die() #16
  unreachable

; <label>:94:                                     ; preds = %91
  %95 = lshr i64 %81, 1
  %96 = add i64 %81, 1
  %97 = add i64 %96, %95
  br label %98

; <label>:98:                                     ; preds = %88, %94
  %99 = phi i64 [ %97, %94 ], [ %90, %88 ]
  %100 = tail call i8* @xrealloc(i8* %83, i64 %99) #11
  br label %101

; <label>:101:                                    ; preds = %98, %79
  %102 = phi i64 [ %99, %98 ], [ %84, %79 ]
  %103 = phi i8* [ %100, %98 ], [ %83, %79 ]
  br i1 %80, label %132, label %104

; <label>:104:                                    ; preds = %101
  %105 = sext i32 %82 to i64
  %106 = lshr i64 %105, 6
  %107 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %106
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %105, 63
  %110 = shl i64 1, %109
  %111 = and i64 %108, %110
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %132

; <label>:113:                                    ; preds = %104
  %114 = trunc i32 %82 to i8
  %115 = add i64 %81, 1
  %116 = getelementptr inbounds i8, i8* %103, i64 %81
  store i8 %114, i8* %116, align 1
  %117 = load i8*, i8** %28, align 8
  %118 = load i8*, i8** %29, align 8
  %119 = icmp ult i8* %117, %118
  br i1 %119, label %128, label %120

; <label>:120:                                    ; preds = %113
  %121 = tail call i32 @__uflow(%struct._IO_FILE* nonnull %0) #11
  %122 = icmp slt i32 %121, 0
  %123 = icmp eq i64 %115, 0
  %124 = and i1 %122, %123
  br i1 %124, label %134, label %125

; <label>:125:                                    ; preds = %120, %128
  %126 = phi i1 [ %122, %120 ], [ false, %128 ]
  %127 = phi i32 [ %121, %120 ], [ %131, %128 ]
  br label %79

; <label>:128:                                    ; preds = %113
  %129 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %129, i8** %28, align 8
  %130 = load i8, i8* %117, align 1
  %131 = zext i8 %130 to i32
  br label %125

; <label>:132:                                    ; preds = %104, %101
  %133 = getelementptr inbounds i8, i8* %103, i64 %81
  store i8 0, i8* %133, align 1
  store i8* %103, i8** %75, align 8
  store i64 %102, i64* %76, align 8
  br label %136

; <label>:134:                                    ; preds = %120
  br label %136

; <label>:135:                                    ; preds = %61
  br label %136

; <label>:136:                                    ; preds = %135, %134, %132
  %137 = phi i64 [ %81, %132 ], [ -1, %134 ], [ -1, %135 ]
  call void @llvm.lifetime.end(i64 32, i8* nonnull %6) #11
  ret i64 %137
}

declare i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define i64 @readtokens(%struct._IO_FILE*, i64, i8* nocapture readonly, i64, i8*** nocapture, i64**) local_unnamed_addr #6 {
  %7 = alloca %struct.tokenbuffer, align 8
  %8 = bitcast %struct.tokenbuffer* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #11
  %9 = icmp eq i64 %1, 0
  %10 = add i64 %1, 1
  %11 = select i1 %9, i64 64, i64 %10
  %12 = icmp ugt i64 %11, 1152921504606846975
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %6
  tail call void @xalloc_die() #16
  unreachable

; <label>:14:                                     ; preds = %6
  %15 = shl i64 %11, 3
  %16 = tail call noalias i8* @xmalloc(i64 %15) #11
  %17 = bitcast i8* %16 to i8**
  %18 = tail call noalias i8* @xmalloc(i64 %15) #11
  %19 = bitcast i8* %18 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 16, i32 8, i1 false) #11
  %20 = getelementptr inbounds %struct.tokenbuffer, %struct.tokenbuffer* %7, i64 0, i32 1
  br label %21

; <label>:21:                                     ; preds = %69, %14
  %22 = phi i64 [ %11, %14 ], [ %58, %69 ]
  %23 = phi i8* [ %18, %14 ], [ %59, %69 ]
  %24 = phi i8* [ %18, %14 ], [ %60, %69 ]
  %25 = phi i64* [ %19, %14 ], [ %61, %69 ]
  %26 = phi i64 [ 0, %14 ], [ %74, %69 ]
  %27 = phi i8* [ %16, %14 ], [ %62, %69 ]
  %28 = phi i8** [ %17, %14 ], [ %63, %69 ]
  %29 = call i64 @readtoken(%struct._IO_FILE* %0, i8* %2, i64 %3, %struct.tokenbuffer* nonnull %7)
  %30 = icmp ult i64 %26, %22
  br i1 %30, label %57, label %31

; <label>:31:                                     ; preds = %21
  %32 = icmp eq i8* %27, null
  br i1 %32, label %33, label %35

; <label>:33:                                     ; preds = %31
  %34 = icmp eq i64 %22, 0
  br i1 %34, label %42, label %44

; <label>:35:                                     ; preds = %31
  %36 = icmp ult i64 %22, 768614336404564650
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %35
  tail call void @xalloc_die() #16
  unreachable

; <label>:38:                                     ; preds = %35
  %39 = lshr i64 %22, 1
  %40 = add i64 %22, 1
  %41 = add i64 %40, %39
  br label %44

; <label>:42:                                     ; preds = %33
  %43 = tail call i8* @xrealloc(i8* %27, i64 128) #11
  br label %50

; <label>:44:                                     ; preds = %33, %38
  %45 = phi i64 [ %41, %38 ], [ %22, %33 ]
  %46 = shl i64 %45, 3
  %47 = tail call i8* @xrealloc(i8* %27, i64 %46) #11
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

; <label>:49:                                     ; preds = %44
  tail call void @xalloc_die() #16
  unreachable

; <label>:50:                                     ; preds = %42, %44
  %51 = phi i8* [ %43, %42 ], [ %47, %44 ]
  %52 = phi i64 [ 128, %42 ], [ %46, %44 ]
  %53 = phi i64 [ 16, %42 ], [ %45, %44 ]
  %54 = bitcast i8* %51 to i8**
  %55 = tail call i8* @xrealloc(i8* %24, i64 %52) #11
  %56 = bitcast i8* %55 to i64*
  br label %57

; <label>:57:                                     ; preds = %21, %50
  %58 = phi i64 [ %22, %21 ], [ %53, %50 ]
  %59 = phi i8* [ %23, %21 ], [ %55, %50 ]
  %60 = phi i8* [ %24, %21 ], [ %55, %50 ]
  %61 = phi i64* [ %25, %21 ], [ %56, %50 ]
  %62 = phi i8* [ %27, %21 ], [ %51, %50 ]
  %63 = phi i8** [ %28, %21 ], [ %54, %50 ]
  %64 = icmp eq i64 %29, -1
  br i1 %64, label %75, label %65

; <label>:65:                                     ; preds = %57
  %66 = add i64 %29, 1
  %67 = icmp slt i64 %66, 0
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %65
  tail call void @xalloc_die() #16
  unreachable

; <label>:69:                                     ; preds = %65
  %70 = tail call noalias i8* @xmalloc(i64 %66) #11
  %71 = getelementptr inbounds i64, i64* %61, i64 %26
  store i64 %29, i64* %71, align 8
  %72 = load i8*, i8** %20, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %72, i64 %66, i32 1, i1 false)
  %73 = getelementptr inbounds i8*, i8** %63, i64 %26
  store i8* %70, i8** %73, align 8
  %74 = add i64 %26, 1
  br label %21

; <label>:75:                                     ; preds = %57
  %76 = getelementptr inbounds i8*, i8** %63, i64 %26
  store i8* null, i8** %76, align 8
  %77 = getelementptr inbounds i64, i64* %61, i64 %26
  store i64 0, i64* %77, align 8
  %78 = load i8*, i8** %20, align 8
  tail call void @free(i8* %78) #11
  store i8** %63, i8*** %4, align 8
  %79 = icmp eq i64** %5, null
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %75
  %81 = bitcast i64** %5 to i8**
  store i8* %59, i8** %81, align 8
  br label %83

; <label>:82:                                     ; preds = %75
  tail call void @free(i8* %59) #11
  br label %83

; <label>:83:                                     ; preds = %82, %80
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #11
  ret i64 %26
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @safe_write(i32, i8* nocapture readonly, i64) local_unnamed_addr #6 {
  br label %4

; <label>:4:                                      ; preds = %13, %3
  %5 = phi i64 [ 2147475456, %13 ], [ %2, %3 ]
  br label %6

; <label>:6:                                      ; preds = %4, %9
  %7 = tail call i64 @write(i32 %0, i8* %1, i64 %5) #11
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %6
  %10 = tail call i32* @__errno_location() #1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 4
  br i1 %12, label %6, label %13

; <label>:13:                                     ; preds = %9
  %14 = icmp eq i32 %11, 22
  %15 = icmp ugt i64 %5, 2147475456
  %16 = and i1 %15, %14
  br i1 %16, label %4, label %18

; <label>:17:                                     ; preds = %6
  br label %19

; <label>:18:                                     ; preds = %13
  br label %19

; <label>:19:                                     ; preds = %18, %17
  ret i64 %7
}

declare i64 @write(i32, i8* nocapture readonly, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define i8* @trim2(i8* nocapture readonly, i32) local_unnamed_addr #6 {
  %3 = alloca %struct.mbiter_multi, align 8
  %4 = tail call noalias i8* @__strdup(i8* %0) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @xalloc_die() #16
  unreachable

; <label>:7:                                      ; preds = %2
  %8 = tail call i64 @__ctype_get_mb_cur_max() #11
  %9 = icmp ugt i64 %8, 1
  br i1 %9, label %10, label %118

; <label>:10:                                     ; preds = %7
  %11 = bitcast %struct.mbiter_multi* %3 to i8*
  call void @llvm.lifetime.start(i64 72, i8* nonnull %11) #11
  %12 = icmp eq i32 %1, 0
  %13 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 0
  br i1 %12, label %14, label %20

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 0
  %16 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 1
  %17 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 2
  %18 = bitcast %struct.__mbstate_t* %17 to i64*
  %19 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 3
  br label %53

; <label>:20:                                     ; preds = %10
  store i8* %4, i8** %13, align 8
  %21 = tail call i64 @strlen(i8* nonnull %4) #15
  %22 = getelementptr inbounds i8, i8* %4, i64 %21
  %23 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 0
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 1
  store i8 0, i8* %24, align 8
  %25 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 2
  %26 = bitcast %struct.__mbstate_t* %25 to i64*
  store i64 0, i64* %26, align 4
  %27 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 3
  %28 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 3
  store i8 0, i8* %28, align 4
  %29 = icmp sgt i64 %21, 0
  br i1 %29, label %30, label %48

; <label>:30:                                     ; preds = %20
  %31 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 2
  %32 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 1
  br label %33

; <label>:33:                                     ; preds = %30, %40
  call void @mbiter_multi_next(%struct.mbiter_multi* nonnull %3)
  %34 = load i8, i8* %31, align 8
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %46, label %36

; <label>:36:                                     ; preds = %33
  %37 = load i32, i32* %27, align 4
  %38 = call i32 @iswspace(i32 %37) #11
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

; <label>:40:                                     ; preds = %36
  %41 = load i64, i64* %32, align 8
  %42 = load i8*, i8** %13, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %41
  store i8* %43, i8** %13, align 8
  store i8 0, i8* %28, align 4
  %44 = load i8*, i8** %23, align 8
  %45 = icmp ult i8* %43, %44
  br i1 %45, label %33, label %46

; <label>:46:                                     ; preds = %36, %33, %40
  %47 = load i8*, i8** %13, align 8
  br label %48

; <label>:48:                                     ; preds = %46, %20
  %49 = phi i8* [ %47, %46 ], [ %4, %20 ]
  %50 = call i64 @strlen(i8* %49) #15
  %51 = add i64 %50, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %4, i8* %49, i64 %51, i32 1, i1 false)
  %52 = icmp eq i32 %1, 1
  br i1 %52, label %117, label %53

; <label>:53:                                     ; preds = %14, %48
  %54 = phi i8* [ %19, %14 ], [ %28, %48 ]
  %55 = phi i64* [ %18, %14 ], [ %26, %48 ]
  %56 = phi i8* [ %16, %14 ], [ %24, %48 ]
  %57 = phi i8** [ %15, %14 ], [ %23, %48 ]
  store i8* %4, i8** %13, align 8
  %58 = call i64 @strlen(i8* nonnull %4) #15
  %59 = getelementptr inbounds i8, i8* %4, i64 %58
  store i8* %59, i8** %57, align 8
  store i8 0, i8* %56, align 8
  store i64 0, i64* %55, align 4
  store i8 0, i8* %54, align 4
  %60 = icmp sgt i64 %58, 0
  br i1 %60, label %61, label %117

; <label>:61:                                     ; preds = %53
  %62 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 2
  %63 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 3
  %64 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %3, i64 0, i32 4, i32 1
  br label %65

; <label>:65:                                     ; preds = %61, %106
  %66 = phi i8* [ undef, %61 ], [ %108, %106 ]
  %67 = phi i32 [ 0, %61 ], [ %107, %106 ]
  call void @mbiter_multi_next(%struct.mbiter_multi* nonnull %3)
  switch i32 %67, label %98 [
    i32 0, label %68
    i32 1, label %82
  ]

; <label>:68:                                     ; preds = %65
  %69 = load i8, i8* %62, align 8
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %106, label %71

; <label>:71:                                     ; preds = %68
  %72 = load i32, i32* %63, align 4
  %73 = call i32 @iswspace(i32 %72) #11
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %106

; <label>:75:                                     ; preds = %71
  %76 = load i8, i8* %62, align 8
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %106, label %78

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* %63, align 4
  %80 = call i32 @iswspace(i32 %79) #11
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %106, label %105

; <label>:82:                                     ; preds = %65
  %83 = load i8, i8* %62, align 8
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %106, label %85

; <label>:85:                                     ; preds = %82
  %86 = load i32, i32* %63, align 4
  %87 = call i32 @iswspace(i32 %86) #11
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %106, label %89

; <label>:89:                                     ; preds = %85
  %90 = load i8, i8* %62, align 8
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %105, label %92

; <label>:92:                                     ; preds = %89
  %93 = load i32, i32* %63, align 4
  %94 = call i32 @iswspace(i32 %93) #11
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %105, label %96

; <label>:96:                                     ; preds = %92
  %97 = load i8*, i8** %13, align 8
  br label %106

; <label>:98:                                     ; preds = %65
  %99 = load i8, i8* %62, align 8
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %105, label %101

; <label>:101:                                    ; preds = %98
  %102 = load i32, i32* %63, align 4
  %103 = call i32 @iswspace(i32 %102) #11
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

; <label>:105:                                    ; preds = %78, %89, %92, %101, %98
  br label %106

; <label>:106:                                    ; preds = %68, %75, %78, %71, %85, %82, %101, %96, %105
  %107 = phi i32 [ 0, %71 ], [ 2, %96 ], [ 2, %101 ], [ 1, %105 ], [ 1, %85 ], [ 1, %82 ], [ 1, %78 ], [ 1, %75 ], [ 1, %68 ]
  %108 = phi i8* [ %66, %71 ], [ %97, %96 ], [ %66, %101 ], [ %66, %105 ], [ %66, %85 ], [ %66, %82 ], [ %66, %78 ], [ %66, %75 ], [ %66, %68 ]
  %109 = load i64, i64* %64, align 8
  %110 = load i8*, i8** %13, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 %109
  store i8* %111, i8** %13, align 8
  store i8 0, i8* %54, align 4
  %112 = load i8*, i8** %57, align 8
  %113 = icmp ult i8* %111, %112
  br i1 %113, label %65, label %114

; <label>:114:                                    ; preds = %106
  %115 = icmp eq i32 %107, 2
  br i1 %115, label %116, label %117

; <label>:116:                                    ; preds = %114
  store i8 0, i8* %108, align 1
  br label %117

; <label>:117:                                    ; preds = %53, %114, %116, %48
  call void @llvm.lifetime.end(i64 72, i8* nonnull %11) #11
  br label %165

; <label>:118:                                    ; preds = %7
  %119 = icmp eq i32 %1, 0
  br i1 %119, label %145, label %120

; <label>:120:                                    ; preds = %118
  %121 = load i8, i8* %4, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %140, label %123

; <label>:123:                                    ; preds = %120
  %124 = tail call i16** @__ctype_b_loc() #1
  %125 = load i16*, i16** %124, align 8
  br label %126

; <label>:126:                                    ; preds = %123, %134
  %127 = phi i8 [ %121, %123 ], [ %136, %134 ]
  %128 = phi i8* [ %4, %123 ], [ %135, %134 ]
  %129 = zext i8 %127 to i64
  %130 = getelementptr inbounds i16, i16* %125, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = and i16 %131, 8192
  %133 = icmp eq i16 %132, 0
  br i1 %133, label %138, label %134

; <label>:134:                                    ; preds = %126
  %135 = getelementptr inbounds i8, i8* %128, i64 1
  %136 = load i8, i8* %135, align 1
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %138, label %126

; <label>:138:                                    ; preds = %126, %134
  %139 = phi i8* [ %128, %126 ], [ %135, %134 ]
  br label %140

; <label>:140:                                    ; preds = %138, %120
  %141 = phi i8* [ %4, %120 ], [ %139, %138 ]
  %142 = tail call i64 @strlen(i8* %141) #15
  %143 = add i64 %142, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %4, i8* %141, i64 %143, i32 1, i1 false)
  %144 = icmp eq i32 %1, 1
  br i1 %144, label %165, label %145

; <label>:145:                                    ; preds = %118, %140
  %146 = tail call i64 @strlen(i8* nonnull %4) #15
  %147 = getelementptr inbounds i8, i8* %4, i64 %146
  %148 = getelementptr inbounds i8, i8* %147, i64 -1
  %149 = icmp ult i8* %148, %4
  br i1 %149, label %165, label %150

; <label>:150:                                    ; preds = %145
  %151 = tail call i16** @__ctype_b_loc() #1
  br label %152

; <label>:152:                                    ; preds = %150, %161
  %153 = phi i8* [ %148, %150 ], [ %162, %161 ]
  %154 = load i16*, i16** %151, align 8
  %155 = load i8, i8* %153, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds i16, i16* %154, i64 %156
  %158 = load i16, i16* %157, align 2
  %159 = and i16 %158, 8192
  %160 = icmp eq i16 %159, 0
  br i1 %160, label %164, label %161

; <label>:161:                                    ; preds = %152
  store i8 0, i8* %153, align 1
  %162 = getelementptr inbounds i8, i8* %153, i64 -1
  %163 = icmp ult i8* %162, %4
  br i1 %163, label %164, label %152

; <label>:164:                                    ; preds = %161, %152
  br label %165

; <label>:165:                                    ; preds = %164, %145, %140, %117
  ret i8* %4
}

; Function Attrs: nounwind
declare noalias i8* @__strdup(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @iswspace(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #7

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8** readonly, i64) local_unnamed_addr #6 {
  %7 = icmp eq i8* %1, null
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %6
  %9 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85, i64 0, i64 0), i8* nonnull %1, i8* %2, i8* %3) #11
  br label %12

; <label>:10:                                     ; preds = %6
  %11 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.86, i64 0, i64 0), i8* %2, i8* %3) #11
  br label %12

; <label>:12:                                     ; preds = %10, %8
  %13 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.87, i64 0, i64 0), i32 5) #11
  %14 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %13, i32 2017) #11
  %15 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.3.88, i64 0, i64 0), i32 5) #11
  %16 = tail call i32 @fputs_unlocked(i8* %15, %struct._IO_FILE* %0) #11
  switch i64 %5, label %126 [
    i64 0, label %17
    i64 1, label %18
    i64 2, label %22
    i64 3, label %28
    i64 4, label %36
    i64 5, label %46
    i64 6, label %58
    i64 7, label %72
    i64 8, label %88
    i64 9, label %106
  ]

; <label>:17:                                     ; preds = %12
  tail call void @abort() #16
  unreachable

; <label>:18:                                     ; preds = %12
  %19 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.89, i64 0, i64 0), i32 5) #11
  %20 = load i8*, i8** %4, align 8
  %21 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %19, i8* %20) #11
  br label %146

; <label>:22:                                     ; preds = %12
  %23 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5.90, i64 0, i64 0), i32 5) #11
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8*, i8** %4, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %23, i8* %24, i8* %26) #11
  br label %146

; <label>:28:                                     ; preds = %12
  %29 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.91, i64 0, i64 0), i32 5) #11
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8*, i8** %4, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8*, i8** %4, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %29, i8* %30, i8* %32, i8* %34) #11
  br label %146

; <label>:36:                                     ; preds = %12
  %37 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7.92, i64 0, i64 0), i32 5) #11
  %38 = load i8*, i8** %4, align 8
  %39 = getelementptr inbounds i8*, i8** %4, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8*, i8** %4, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8*, i8** %4, i64 3
  %44 = load i8*, i8** %43, align 8
  %45 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %37, i8* %38, i8* %40, i8* %42, i8* %44) #11
  br label %146

; <label>:46:                                     ; preds = %12
  %47 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.93, i64 0, i64 0), i32 5) #11
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8*, i8** %4, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8*, i8** %4, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8*, i8** %4, i64 3
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds i8*, i8** %4, i64 4
  %56 = load i8*, i8** %55, align 8
  %57 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %47, i8* %48, i8* %50, i8* %52, i8* %54, i8* %56) #11
  br label %146

; <label>:58:                                     ; preds = %12
  %59 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9.94, i64 0, i64 0), i32 5) #11
  %60 = load i8*, i8** %4, align 8
  %61 = getelementptr inbounds i8*, i8** %4, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8*, i8** %4, i64 2
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8*, i8** %4, i64 3
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8*, i8** %4, i64 4
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds i8*, i8** %4, i64 5
  %70 = load i8*, i8** %69, align 8
  %71 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %59, i8* %60, i8* %62, i8* %64, i8* %66, i8* %68, i8* %70) #11
  br label %146

; <label>:72:                                     ; preds = %12
  %73 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10.95, i64 0, i64 0), i32 5) #11
  %74 = load i8*, i8** %4, align 8
  %75 = getelementptr inbounds i8*, i8** %4, i64 1
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds i8*, i8** %4, i64 2
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8*, i8** %4, i64 3
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds i8*, i8** %4, i64 4
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8*, i8** %4, i64 5
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds i8*, i8** %4, i64 6
  %86 = load i8*, i8** %85, align 8
  %87 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %73, i8* %74, i8* %76, i8* %78, i8* %80, i8* %82, i8* %84, i8* %86) #11
  br label %146

; <label>:88:                                     ; preds = %12
  %89 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.96, i64 0, i64 0), i32 5) #11
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8*, i8** %4, i64 1
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds i8*, i8** %4, i64 2
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds i8*, i8** %4, i64 3
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds i8*, i8** %4, i64 4
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8*, i8** %4, i64 5
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8*, i8** %4, i64 6
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds i8*, i8** %4, i64 7
  %104 = load i8*, i8** %103, align 8
  %105 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %89, i8* %90, i8* %92, i8* %94, i8* %96, i8* %98, i8* %100, i8* %102, i8* %104) #11
  br label %146

; <label>:106:                                    ; preds = %12
  %107 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.12.97, i64 0, i64 0), i32 5) #11
  %108 = load i8*, i8** %4, align 8
  %109 = getelementptr inbounds i8*, i8** %4, i64 1
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds i8*, i8** %4, i64 2
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8*, i8** %4, i64 3
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds i8*, i8** %4, i64 4
  %116 = load i8*, i8** %115, align 8
  %117 = getelementptr inbounds i8*, i8** %4, i64 5
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8*, i8** %4, i64 6
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8*, i8** %4, i64 7
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds i8*, i8** %4, i64 8
  %124 = load i8*, i8** %123, align 8
  %125 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %107, i8* %108, i8* %110, i8* %112, i8* %114, i8* %116, i8* %118, i8* %120, i8* %122, i8* %124) #11
  br label %146

; <label>:126:                                    ; preds = %12
  %127 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.13.98, i64 0, i64 0), i32 5) #11
  %128 = load i8*, i8** %4, align 8
  %129 = getelementptr inbounds i8*, i8** %4, i64 1
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds i8*, i8** %4, i64 2
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8*, i8** %4, i64 3
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds i8*, i8** %4, i64 4
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds i8*, i8** %4, i64 5
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8*, i8** %4, i64 6
  %140 = load i8*, i8** %139, align 8
  %141 = getelementptr inbounds i8*, i8** %4, i64 7
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8*, i8** %4, i64 8
  %144 = load i8*, i8** %143, align 8
  %145 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %127, i8* %128, i8* %130, i8* %132, i8* %134, i8* %136, i8* %138, i8* %140, i8* %142, i8* %144) #11
  br label %146

; <label>:146:                                    ; preds = %126, %106, %88, %72, %58, %46, %36, %28, %22, %18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_ar(%struct._IO_FILE*, i8*, i8*, i8*, i8** readonly) local_unnamed_addr #6 {
  br label %6

; <label>:6:                                      ; preds = %6, %5
  %7 = phi i64 [ 0, %5 ], [ %11, %6 ]
  %8 = getelementptr inbounds i8*, i8** %4, i64 %7
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  %11 = add i64 %7, 1
  br i1 %10, label %12, label %6

; <label>:12:                                     ; preds = %6
  tail call void @version_etc_arn(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, i8** nonnull %4, i64 %7)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag* nocapture) local_unnamed_addr #6 {
  %6 = alloca [10 x i8*], align 16
  %7 = bitcast [10 x i8*]* %6 to i8*
  call void @llvm.lifetime.start(i64 80, i8* nonnull %7) #11
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 3
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 2
  %11 = load i32, i32* %8, align 8
  %12 = icmp ult i32 %11, 41
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %5
  %14 = load i8*, i8** %9, align 8
  %15 = sext i32 %11 to i64
  %16 = getelementptr i8, i8* %14, i64 %15
  %17 = add i32 %11, 8
  store i32 %17, i32* %8, align 8
  br label %21

; <label>:18:                                     ; preds = %5
  %19 = load i8*, i8** %10, align 8
  %20 = getelementptr i8, i8* %19, i64 8
  store i8* %20, i8** %10, align 8
  br label %21

; <label>:21:                                     ; preds = %18, %13
  %22 = phi i32 [ %17, %13 ], [ %11, %18 ]
  %23 = phi i8* [ %16, %13 ], [ %19, %18 ]
  %24 = bitcast i8* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 0
  store i8* %25, i8** %26, align 16
  %27 = icmp eq i8* %25, null
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %21
  %29 = icmp ult i32 %22, 41
  br i1 %29, label %35, label %32

; <label>:30:                                     ; preds = %135, %128, %121, %114, %108, %91, %74, %57, %40, %21
  %31 = phi i64 [ 0, %21 ], [ 1, %40 ], [ 2, %57 ], [ 3, %74 ], [ 4, %91 ], [ 5, %108 ], [ 6, %114 ], [ 7, %121 ], [ 8, %128 ], [ %142, %135 ]
  call void @version_etc_arn(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, i8** nonnull %26, i64 %31)
  call void @llvm.lifetime.end(i64 80, i8* nonnull %7) #11
  ret void

; <label>:32:                                     ; preds = %28
  %33 = load i8*, i8** %10, align 8
  %34 = getelementptr i8, i8* %33, i64 8
  store i8* %34, i8** %10, align 8
  br label %40

; <label>:35:                                     ; preds = %28
  %36 = load i8*, i8** %9, align 8
  %37 = sext i32 %22 to i64
  %38 = getelementptr i8, i8* %36, i64 %37
  %39 = add i32 %22, 8
  store i32 %39, i32* %8, align 8
  br label %40

; <label>:40:                                     ; preds = %35, %32
  %41 = phi i32 [ %39, %35 ], [ %22, %32 ]
  %42 = phi i8* [ %38, %35 ], [ %33, %32 ]
  %43 = bitcast i8* %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 1
  store i8* %44, i8** %45, align 8
  %46 = icmp eq i8* %44, null
  br i1 %46, label %30, label %47

; <label>:47:                                     ; preds = %40
  %48 = icmp ult i32 %41, 41
  br i1 %48, label %52, label %49

; <label>:49:                                     ; preds = %47
  %50 = load i8*, i8** %10, align 8
  %51 = getelementptr i8, i8* %50, i64 8
  store i8* %51, i8** %10, align 8
  br label %57

; <label>:52:                                     ; preds = %47
  %53 = load i8*, i8** %9, align 8
  %54 = sext i32 %41 to i64
  %55 = getelementptr i8, i8* %53, i64 %54
  %56 = add i32 %41, 8
  store i32 %56, i32* %8, align 8
  br label %57

; <label>:57:                                     ; preds = %52, %49
  %58 = phi i32 [ %56, %52 ], [ %41, %49 ]
  %59 = phi i8* [ %55, %52 ], [ %50, %49 ]
  %60 = bitcast i8* %59 to i8**
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 2
  store i8* %61, i8** %62, align 16
  %63 = icmp eq i8* %61, null
  br i1 %63, label %30, label %64

; <label>:64:                                     ; preds = %57
  %65 = icmp ult i32 %58, 41
  br i1 %65, label %69, label %66

; <label>:66:                                     ; preds = %64
  %67 = load i8*, i8** %10, align 8
  %68 = getelementptr i8, i8* %67, i64 8
  store i8* %68, i8** %10, align 8
  br label %74

; <label>:69:                                     ; preds = %64
  %70 = load i8*, i8** %9, align 8
  %71 = sext i32 %58 to i64
  %72 = getelementptr i8, i8* %70, i64 %71
  %73 = add i32 %58, 8
  store i32 %73, i32* %8, align 8
  br label %74

; <label>:74:                                     ; preds = %69, %66
  %75 = phi i32 [ %73, %69 ], [ %58, %66 ]
  %76 = phi i8* [ %72, %69 ], [ %67, %66 ]
  %77 = bitcast i8* %76 to i8**
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 3
  store i8* %78, i8** %79, align 8
  %80 = icmp eq i8* %78, null
  br i1 %80, label %30, label %81

; <label>:81:                                     ; preds = %74
  %82 = icmp ult i32 %75, 41
  br i1 %82, label %86, label %83

; <label>:83:                                     ; preds = %81
  %84 = load i8*, i8** %10, align 8
  %85 = getelementptr i8, i8* %84, i64 8
  store i8* %85, i8** %10, align 8
  br label %91

; <label>:86:                                     ; preds = %81
  %87 = load i8*, i8** %9, align 8
  %88 = sext i32 %75 to i64
  %89 = getelementptr i8, i8* %87, i64 %88
  %90 = add i32 %75, 8
  store i32 %90, i32* %8, align 8
  br label %91

; <label>:91:                                     ; preds = %86, %83
  %92 = phi i32 [ %90, %86 ], [ %75, %83 ]
  %93 = phi i8* [ %89, %86 ], [ %84, %83 ]
  %94 = bitcast i8* %93 to i8**
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 4
  store i8* %95, i8** %96, align 16
  %97 = icmp eq i8* %95, null
  br i1 %97, label %30, label %98

; <label>:98:                                     ; preds = %91
  %99 = icmp ult i32 %92, 41
  br i1 %99, label %103, label %100

; <label>:100:                                    ; preds = %98
  %101 = load i8*, i8** %10, align 8
  %102 = getelementptr i8, i8* %101, i64 8
  store i8* %102, i8** %10, align 8
  br label %108

; <label>:103:                                    ; preds = %98
  %104 = load i8*, i8** %9, align 8
  %105 = sext i32 %92 to i64
  %106 = getelementptr i8, i8* %104, i64 %105
  %107 = add i32 %92, 8
  store i32 %107, i32* %8, align 8
  br label %108

; <label>:108:                                    ; preds = %103, %100
  %109 = phi i8* [ %106, %103 ], [ %101, %100 ]
  %110 = bitcast i8* %109 to i8**
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 5
  store i8* %111, i8** %112, align 8
  %113 = icmp eq i8* %111, null
  br i1 %113, label %30, label %114

; <label>:114:                                    ; preds = %108
  %115 = load i8*, i8** %10, align 8
  %116 = getelementptr i8, i8* %115, i64 8
  store i8* %116, i8** %10, align 8
  %117 = bitcast i8* %115 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 6
  store i8* %118, i8** %119, align 16
  %120 = icmp eq i8* %118, null
  br i1 %120, label %30, label %121

; <label>:121:                                    ; preds = %114
  %122 = load i8*, i8** %10, align 8
  %123 = getelementptr i8, i8* %122, i64 8
  store i8* %123, i8** %10, align 8
  %124 = bitcast i8* %122 to i8**
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 7
  store i8* %125, i8** %126, align 8
  %127 = icmp eq i8* %125, null
  br i1 %127, label %30, label %128

; <label>:128:                                    ; preds = %121
  %129 = load i8*, i8** %10, align 8
  %130 = getelementptr i8, i8* %129, i64 8
  store i8* %130, i8** %10, align 8
  %131 = bitcast i8* %129 to i8**
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 8
  store i8* %132, i8** %133, align 16
  %134 = icmp eq i8* %132, null
  br i1 %134, label %30, label %135

; <label>:135:                                    ; preds = %128
  %136 = load i8*, i8** %10, align 8
  %137 = getelementptr i8, i8* %136, i64 8
  store i8* %137, i8** %10, align 8
  %138 = bitcast i8* %136 to i8**
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 9
  store i8* %139, i8** %140, align 8
  %141 = icmp eq i8* %139, null
  %142 = select i1 %141, i64 9, i64 10
  br label %30
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) local_unnamed_addr #6 {
  %5 = alloca [1 x %struct.__va_list_tag], align 16
  %6 = bitcast [1 x %struct.__va_list_tag]* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %6)
  call void @version_etc_va(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, %struct.__va_list_tag* nonnull %7)
  call void @llvm.va_end(i8* nonnull %6)
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #11

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #11

; Function Attrs: nounwind sspstrong uwtable
define void @emit_bug_reporting_address() local_unnamed_addr #6 {
  %1 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14.101, i64 0, i64 0), i32 5) #11
  %2 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15.102, i64 0, i64 0)) #11
  %3 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0), i32 5) #11
  %4 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.103, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18.104, i64 0, i64 0)) #11
  %5 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.19, i64 0, i64 0), i32 5) #11
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %7 = tail call i32 @fputs_unlocked(i8* %5, %struct._IO_FILE* %6) #11
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xnmalloc(i64, i64) local_unnamed_addr #13 {
  %3 = udiv i64 9223372036854775807, %1
  %4 = icmp ult i64 %3, %0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %2
  tail call void @xalloc_die() #16
  unreachable

; <label>:6:                                      ; preds = %2
  %7 = mul i64 %1, %0
  %8 = tail call noalias i8* @malloc(i64 %7) #11
  %9 = icmp eq i8* %8, null
  %10 = icmp ne i64 %7, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %6
  tail call void @xalloc_die() #16
  unreachable

; <label>:13:                                     ; preds = %6
  ret i8* %8
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xmalloc(i64) local_unnamed_addr #6 {
  %2 = tail call noalias i8* @malloc(i64 %0) #11
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #16
  unreachable

; <label>:7:                                      ; preds = %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xnrealloc(i8*, i64, i64) local_unnamed_addr #13 {
  %4 = udiv i64 9223372036854775807, %2
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %3
  tail call void @xalloc_die() #16
  unreachable

; <label>:7:                                      ; preds = %3
  %8 = mul i64 %2, %1
  %9 = icmp eq i64 %8, 0
  %10 = icmp ne i8* %0, null
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %7
  tail call void @free(i8* nonnull %0) #11
  br label %19

; <label>:13:                                     ; preds = %7
  %14 = tail call i8* @realloc(i8* %0, i64 %8) #11
  %15 = icmp eq i8* %14, null
  %16 = icmp ne i64 %8, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %13
  tail call void @xalloc_die() #16
  unreachable

; <label>:19:                                     ; preds = %12, %13
  %20 = phi i8* [ null, %12 ], [ %14, %13 ]
  ret i8* %20
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xrealloc(i8*, i64) local_unnamed_addr #6 {
  %3 = icmp eq i64 %1, 0
  %4 = icmp ne i8* %0, null
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @free(i8* nonnull %0) #11
  br label %13

; <label>:7:                                      ; preds = %2
  %8 = tail call i8* @realloc(i8* %0, i64 %1) #11
  %9 = icmp eq i8* %8, null
  %10 = icmp ne i64 %1, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %7
  tail call void @xalloc_die() #16
  unreachable

; <label>:13:                                     ; preds = %7, %6
  %14 = phi i8* [ null, %6 ], [ %8, %7 ]
  ret i8* %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @x2nrealloc(i8*, i64* nocapture, i64) local_unnamed_addr #13 {
  %4 = load i64, i64* %1, align 8
  %5 = icmp eq i8* %0, null
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %3
  %7 = icmp eq i64 %4, 0
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %6
  %9 = udiv i64 128, %2
  %10 = icmp ugt i64 %2, 128
  %11 = zext i1 %10 to i64
  %12 = add nuw nsw i64 %9, %11
  br label %17

; <label>:13:                                     ; preds = %3
  %14 = udiv i64 6148914691236517204, %2
  %15 = icmp ugt i64 %14, %4
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %13
  tail call void @xalloc_die() #16
  unreachable

; <label>:17:                                     ; preds = %6, %8
  %18 = phi i64 [ %12, %8 ], [ %4, %6 ]
  store i64 %18, i64* %1, align 8
  %19 = mul i64 %18, %2
  br label %27

; <label>:20:                                     ; preds = %13
  %21 = lshr i64 %4, 1
  %22 = add i64 %4, 1
  %23 = add i64 %22, %21
  store i64 %23, i64* %1, align 8
  %24 = mul i64 %23, %2
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %20
  tail call void @free(i8* nonnull %0) #11
  br label %34

; <label>:27:                                     ; preds = %17, %20
  %28 = phi i64 [ %19, %17 ], [ %24, %20 ]
  %29 = tail call i8* @realloc(i8* %0, i64 %28) #11
  %30 = icmp eq i8* %29, null
  %31 = icmp ne i64 %28, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %27
  tail call void @xalloc_die() #16
  unreachable

; <label>:34:                                     ; preds = %26, %27
  %35 = phi i8* [ null, %26 ], [ %29, %27 ]
  ret i8* %35
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xcharalloc(i64) local_unnamed_addr #13 {
  %2 = tail call noalias i8* @malloc(i64 %0) #11
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #16
  unreachable

; <label>:7:                                      ; preds = %1
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @x2realloc(i8*, i64* nocapture) local_unnamed_addr #6 {
  %3 = load i64, i64* %1, align 8
  %4 = icmp eq i8* %0, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %2
  %6 = icmp eq i64 %3, 0
  %7 = select i1 %6, i64 128, i64 %3
  store i64 %7, i64* %1, align 8
  br label %17

; <label>:8:                                      ; preds = %2
  %9 = icmp ult i64 %3, 6148914691236517204
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %8
  tail call void @xalloc_die() #16
  unreachable

; <label>:11:                                     ; preds = %8
  %12 = lshr i64 %3, 1
  %13 = add i64 %3, 1
  %14 = add i64 %13, %12
  store i64 %14, i64* %1, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  tail call void @free(i8* nonnull %0) #11
  br label %24

; <label>:17:                                     ; preds = %11, %5
  %18 = phi i64 [ %7, %5 ], [ %14, %11 ]
  %19 = tail call i8* @realloc(i8* %0, i64 %18) #11
  %20 = icmp eq i8* %19, null
  %21 = icmp ne i64 %18, 0
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %17
  tail call void @xalloc_die() #16
  unreachable

; <label>:24:                                     ; preds = %16, %17
  %25 = phi i8* [ null, %16 ], [ %19, %17 ]
  ret i8* %25
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xzalloc(i64) local_unnamed_addr #6 {
  %2 = tail call noalias i8* @malloc(i64 %0) #11
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #16
  unreachable

; <label>:7:                                      ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 %0, i32 1, i1 false)
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xcalloc(i64, i64) local_unnamed_addr #6 {
  %3 = udiv i64 9223372036854775807, %1
  %4 = icmp ult i64 %3, %0
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %2
  %6 = tail call i8* @rpl_calloc(i64 %0, i64 %1) #11
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5, %2
  tail call void @xalloc_die() #16
  unreachable

; <label>:9:                                      ; preds = %5
  ret i8* %6
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xmemdup(i8* nocapture readonly, i64) local_unnamed_addr #6 {
  %3 = tail call noalias i8* @malloc(i64 %1) #11
  %4 = icmp eq i8* %3, null
  %5 = icmp ne i64 %1, 0
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %2
  tail call void @xalloc_die() #16
  unreachable

; <label>:8:                                      ; preds = %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %0, i64 %1, i32 1, i1 false)
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xstrdup(i8* nocapture readonly) local_unnamed_addr #6 {
  %2 = tail call i64 @strlen(i8* %0) #15
  %3 = add i64 %2, 1
  %4 = tail call noalias i8* @malloc(i64 %3) #11
  %5 = icmp eq i8* %4, null
  %6 = icmp ne i64 %3, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %1
  tail call void @xalloc_die() #16
  unreachable

; <label>:9:                                      ; preds = %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %0, i64 %3, i32 1, i1 false) #11
  ret i8* %4
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define void @xalloc_die() local_unnamed_addr #0 {
  %1 = load volatile i32, i32* @exit_failure, align 4
  %2 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.115, i64 0, i64 0), i32 5) #11
  tail call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.116, i64 0, i64 0), i8* %2) #11
  tail call void @abort() #16
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @xmem_cd_iconv(i8*, i64, i8*, i8**, i64*) local_unnamed_addr #6 {
  %6 = tail call i32 @mem_cd_iconv(i8* %0, i64 %1, i8* %2, i8** %3, i64* %4) #11
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %5
  %9 = tail call i32* @__errno_location() #1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 12
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  tail call void @xalloc_die() #16
  unreachable

; <label>:13:                                     ; preds = %8, %5
  ret i32 %6
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @xstr_cd_iconv(i8*, i8*) local_unnamed_addr #6 {
  %3 = tail call i8* @str_cd_iconv(i8* %0, i8* %1) #11
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %2
  %6 = tail call i32* @__errno_location() #1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 12
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %5
  tail call void @xalloc_die() #16
  unreachable

; <label>:10:                                     ; preds = %5, %2
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @xstr_iconv(i8*, i8*, i8*) local_unnamed_addr #6 {
  %4 = tail call i8* @str_iconv(i8* %0, i8* %1, i8* %2) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %3
  %7 = tail call i32* @__errno_location() #1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 12
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %6
  tail call void @xalloc_die() #16
  unreachable

; <label>:11:                                     ; preds = %6, %3
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @rpl_calloc(i64, i64) local_unnamed_addr #6 {
  %3 = icmp eq i64 %0, 0
  %4 = icmp eq i64 %1, 0
  %5 = or i1 %3, %4
  br i1 %5, label %12, label %6

; <label>:6:                                      ; preds = %2
  %7 = mul i64 %1, %0
  %8 = udiv i64 %7, %1
  %9 = icmp eq i64 %8, %0
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %6
  %11 = tail call i32* @__errno_location() #1
  store i32 12, i32* %11, align 4
  br label %16

; <label>:12:                                     ; preds = %6, %2
  %13 = phi i64 [ 1, %2 ], [ %1, %6 ]
  %14 = phi i64 [ 1, %2 ], [ %0, %6 ]
  %15 = tail call noalias i8* @calloc(i64 %14, i64 %13) #11
  br label %16

; <label>:16:                                     ; preds = %10, %12
  %17 = phi i8* [ %15, %12 ], [ null, %10 ]
  ret i8* %17
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) local_unnamed_addr #6 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %6) #11
  %7 = icmp eq i32* %0, null
  %8 = select i1 %7, i32* %5, i32* %0
  %9 = call i64 @mbrtowc(i32* %8, i8* %1, i64 %2, %struct.__mbstate_t* %3) #11
  %10 = icmp ugt i64 %9, -3
  %11 = icmp ne i64 %2, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %4
  %14 = call zeroext i1 @hard_locale(i32 0) #11
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %13
  %16 = load i8, i8* %1, align 1
  %17 = zext i8 %16 to i32
  store i32 %17, i32* %8, align 4
  br label %18

; <label>:18:                                     ; preds = %4, %13, %15
  %19 = phi i64 [ 1, %15 ], [ %9, %13 ], [ %9, %4 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %6) #11
  ret i64 %19
}

; Function Attrs: nounwind
declare i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) local_unnamed_addr #2

; Function Attrs: nounwind readonly sspstrong uwtable
define i32 @c_strcasecmp(i8* readonly, i8* readonly) local_unnamed_addr #12 {
  %3 = icmp eq i8* %0, %1
  br i1 %3, label %34, label %4

; <label>:4:                                      ; preds = %2
  br label %5

; <label>:5:                                      ; preds = %4, %24
  %6 = phi i8* [ %26, %24 ], [ %1, %4 ]
  %7 = phi i8* [ %25, %24 ], [ %0, %4 ]
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = add nsw i32 %9, -65
  %11 = icmp ult i32 %10, 26
  %12 = add nuw nsw i32 %9, 32
  %13 = select i1 %11, i32 %12, i32 %9
  %14 = load i8, i8* %6, align 1
  %15 = zext i8 %14 to i32
  %16 = add nsw i32 %15, -65
  %17 = icmp ult i32 %16, 26
  %18 = add nuw nsw i32 %15, 32
  %19 = select i1 %17, i32 %18, i32 %15
  %20 = and i32 %13, 255
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %5
  %23 = and i32 %19, 255
  br label %30

; <label>:24:                                     ; preds = %5
  %25 = getelementptr inbounds i8, i8* %7, i64 1
  %26 = getelementptr inbounds i8, i8* %6, i64 1
  %27 = and i32 %19, 255
  %28 = icmp eq i32 %20, %27
  br i1 %28, label %5, label %29

; <label>:29:                                     ; preds = %24
  br label %30

; <label>:30:                                     ; preds = %29, %22
  %31 = phi i32 [ %23, %22 ], [ %27, %29 ]
  %32 = phi i32 [ 0, %22 ], [ %20, %29 ]
  %33 = sub nsw i32 %32, %31
  br label %34

; <label>:34:                                     ; preds = %2, %30
  %35 = phi i32 [ %33, %30 ], [ 0, %2 ]
  ret i32 %35
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @close_stream(%struct._IO_FILE*) local_unnamed_addr #6 {
  %2 = tail call i64 @__fpending(%struct._IO_FILE* %0) #11
  %3 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 32
  %6 = icmp eq i32 %5, 0
  %7 = tail call i32 @rpl_fclose(%struct._IO_FILE* %0) #11
  %8 = icmp ne i32 %7, 0
  br i1 %6, label %9, label %19

; <label>:9:                                      ; preds = %1
  %10 = xor i1 %8, true
  %11 = icmp ne i64 %2, 0
  %12 = or i1 %11, %10
  %13 = sext i1 %8 to i32
  br i1 %12, label %22, label %14

; <label>:14:                                     ; preds = %9
  %15 = tail call i32* @__errno_location() #1
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, 9
  %18 = sext i1 %17 to i32
  br label %22

; <label>:19:                                     ; preds = %1
  br i1 %8, label %22, label %20

; <label>:20:                                     ; preds = %19
  %21 = tail call i32* @__errno_location() #1
  store i32 0, i32* %21, align 4
  br label %22

; <label>:22:                                     ; preds = %9, %14, %19, %20
  %23 = phi i32 [ -1, %20 ], [ -1, %19 ], [ %18, %14 ], [ %13, %9 ]
  ret i32 %23
}

; Function Attrs: nounwind
declare i64 @__fpending(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define zeroext i1 @hard_locale(i32) local_unnamed_addr #6 {
  %2 = tail call i8* @setlocale(i32 %0, i8* null) #11
  %3 = icmp eq i8* %2, null
  br i1 %3, label %15, label %4

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* %2, align 1
  %6 = icmp eq i8 %5, 67
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %4, %7
  %12 = tail call i32 @strcmp(i8* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.129, i64 0, i64 0)) #11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11, %7
  br label %15

; <label>:15:                                     ; preds = %1, %11, %14
  %16 = phi i1 [ false, %14 ], [ true, %11 ], [ true, %1 ]
  ret i1 %16
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @locale_charset() local_unnamed_addr #6 {
  %1 = alloca [51 x i8], align 16
  %2 = alloca [51 x i8], align 16
  %3 = tail call i8* @nl_langinfo(i32 14) #11
  %4 = icmp eq i8* %3, null
  %5 = select i1 %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.132, i64 0, i64 0), i8* %3
  %6 = load volatile i8*, i8** @charset_aliases, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %127

; <label>:8:                                      ; preds = %0
  %9 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3.133, i64 0, i64 0)) #11
  %10 = icmp eq i8* %9, null
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %8
  %12 = load i8, i8* %9, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11, %8
  br label %15

; <label>:15:                                     ; preds = %14, %11
  %16 = phi i8* [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.134, i64 0, i64 0), %14 ], [ %9, %11 ]
  %17 = tail call i64 @strlen(i8* nonnull %16) #15
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

; <label>:19:                                     ; preds = %15
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 47
  br label %24

; <label>:24:                                     ; preds = %19, %15
  %25 = phi i1 [ false, %15 ], [ %23, %19 ]
  %26 = zext i1 %25 to i64
  %27 = add i64 %17, 14
  %28 = add i64 %27, %26
  %29 = tail call noalias i8* @malloc(i64 %28) #11
  %30 = icmp eq i8* %29, null
  br i1 %30, label %125, label %31

; <label>:31:                                     ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %29, i8* %16, i64 %17, i32 1, i1 false) #11
  %32 = getelementptr inbounds i8, i8* %29, i64 %17
  br i1 %25, label %33, label %35

; <label>:33:                                     ; preds = %31
  store i8 47, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.135, i64 0, i64 0), i64 14, i32 1, i1 false) #11
  br label %37

; <label>:35:                                     ; preds = %31
  %36 = getelementptr inbounds i8, i8* %32, i64 %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.135, i64 0, i64 0), i64 14, i32 1, i1 false) #11
  br label %37

; <label>:37:                                     ; preds = %35, %33
  %38 = tail call i32 (i8*, i32, ...) @open(i8* nonnull %29, i32 131072) #11
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %123, label %40

; <label>:40:                                     ; preds = %37
  %41 = tail call %struct._IO_FILE* @fdopen(i32 %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.136, i64 0, i64 0)) #11
  %42 = icmp eq %struct._IO_FILE* %41, null
  br i1 %42, label %48, label %43

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds [51 x i8], [51 x i8]* %1, i64 0, i64 0
  %45 = getelementptr inbounds [51 x i8], [51 x i8]* %2, i64 0, i64 0
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i64 0, i32 1
  %47 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i64 0, i32 2
  br label %50

; <label>:48:                                     ; preds = %40
  %49 = tail call i32 @close(i32 %38) #11
  br label %123

; <label>:50:                                     ; preds = %111, %43
  %51 = phi i64 [ %112, %111 ], [ 0, %43 ]
  %52 = phi i8* [ %113, %111 ], [ null, %43 ]
  call void @llvm.lifetime.start(i64 51, i8* nonnull %44) #11
  call void @llvm.lifetime.start(i64 51, i8* nonnull %45) #11
  %53 = load i8*, i8** %46, align 8
  %54 = load i8*, i8** %47, align 8
  %55 = icmp ult i8* %53, %54
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %50
  %57 = call i32 @__uflow(%struct._IO_FILE* nonnull %41) #11
  br label %62

; <label>:58:                                     ; preds = %50
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %59, i8** %46, align 8
  %60 = load i8, i8* %53, align 1
  %61 = zext i8 %60 to i32
  br label %62

; <label>:62:                                     ; preds = %58, %56
  %63 = phi i32 [ %57, %56 ], [ %61, %58 ]
  switch i32 %63, label %77 [
    i32 -1, label %115
    i32 32, label %111
    i32 10, label %111
    i32 9, label %111
    i32 35, label %64
  ]

; <label>:64:                                     ; preds = %62
  br label %65

; <label>:65:                                     ; preds = %64, %75
  %66 = load i8*, i8** %46, align 8
  %67 = load i8*, i8** %47, align 8
  %68 = icmp ult i8* %66, %67
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %65
  %70 = call i32 @__uflow(%struct._IO_FILE* nonnull %41) #11
  br label %75

; <label>:71:                                     ; preds = %65
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %72, i8** %46, align 8
  %73 = load i8, i8* %66, align 1
  %74 = zext i8 %73 to i32
  br label %75

; <label>:75:                                     ; preds = %71, %69
  %76 = phi i32 [ %70, %69 ], [ %74, %71 ]
  switch i32 %76, label %65 [
    i32 -1, label %114
    i32 10, label %110
  ]

; <label>:77:                                     ; preds = %62
  %78 = call i32 @ungetc(i32 %63, %struct._IO_FILE* nonnull %41) #11
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* nonnull %41, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.137, i64 0, i64 0), i8* nonnull %44, i8* nonnull %45) #11
  %80 = icmp slt i32 %79, 2
  br i1 %80, label %115, label %81

; <label>:81:                                     ; preds = %77
  %82 = call i64 @strlen(i8* nonnull %44) #15
  %83 = call i64 @strlen(i8* nonnull %45) #15
  %84 = icmp eq i64 %51, 0
  %85 = add i64 %82, 1
  %86 = add i64 %85, %83
  %87 = add i64 %86, 1
  br i1 %84, label %88, label %91

; <label>:88:                                     ; preds = %81
  %89 = add i64 %86, 2
  %90 = call noalias i8* @malloc(i64 %89) #11
  br label %95

; <label>:91:                                     ; preds = %81
  %92 = add i64 %87, %51
  %93 = add i64 %92, 1
  %94 = call i8* @realloc(i8* %52, i64 %93) #11
  br label %95

; <label>:95:                                     ; preds = %91, %88
  %96 = phi i64 [ %87, %88 ], [ %92, %91 ]
  %97 = phi i8* [ %90, %88 ], [ %94, %91 ]
  %98 = icmp eq i8* %97, null
  br i1 %98, label %99, label %100

; <label>:99:                                     ; preds = %95
  call void @free(i8* %52) #11
  br label %116

; <label>:100:                                    ; preds = %95
  %101 = getelementptr inbounds i8, i8* %97, i64 %96
  %102 = xor i64 %83, -1
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = xor i64 %82, -1
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %105, i1 false) #11
  %107 = call i8* @__strcpy_chk(i8* nonnull %105, i8* nonnull %44, i64 %106) #11
  %108 = call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %103, i1 false) #11
  %109 = call i8* @__strcpy_chk(i8* nonnull %103, i8* nonnull %45, i64 %108) #11
  br label %111

; <label>:110:                                    ; preds = %75
  br label %111

; <label>:111:                                    ; preds = %110, %100, %62, %62, %62
  %112 = phi i64 [ %96, %100 ], [ %51, %62 ], [ %51, %62 ], [ %51, %62 ], [ %51, %110 ]
  %113 = phi i8* [ %97, %100 ], [ %52, %62 ], [ %52, %62 ], [ %52, %62 ], [ %52, %110 ]
  call void @llvm.lifetime.end(i64 51, i8* nonnull %45) #11
  call void @llvm.lifetime.end(i64 51, i8* nonnull %44) #11
  br label %50

; <label>:114:                                    ; preds = %75
  br label %116

; <label>:115:                                    ; preds = %62, %77
  br label %116

; <label>:116:                                    ; preds = %115, %114, %99
  %117 = phi i64 [ 0, %99 ], [ %51, %114 ], [ %51, %115 ]
  %118 = phi i8* [ null, %99 ], [ %52, %114 ], [ %52, %115 ]
  call void @llvm.lifetime.end(i64 51, i8* nonnull %45) #11
  call void @llvm.lifetime.end(i64 51, i8* nonnull %44) #11
  %119 = call i32 @rpl_fclose(%struct._IO_FILE* nonnull %41) #11
  %120 = icmp eq i64 %117, 0
  br i1 %120, label %123, label %121

; <label>:121:                                    ; preds = %116
  %122 = getelementptr inbounds i8, i8* %118, i64 %117
  store i8 0, i8* %122, align 1
  br label %123

; <label>:123:                                    ; preds = %121, %116, %48, %37
  %124 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.132, i64 0, i64 0), %37 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.132, i64 0, i64 0), %48 ], [ %118, %121 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.132, i64 0, i64 0), %116 ]
  call void @free(i8* %29) #11
  br label %125

; <label>:125:                                    ; preds = %123, %24
  %126 = phi i8* [ %124, %123 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.132, i64 0, i64 0), %24 ]
  store volatile i8* %126, i8** @charset_aliases, align 8
  br label %127

; <label>:127:                                    ; preds = %0, %125
  %128 = phi i8* [ %6, %0 ], [ %126, %125 ]
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %157, label %131

; <label>:131:                                    ; preds = %127
  br label %132

; <label>:132:                                    ; preds = %131, %147
  %133 = phi i8 [ %154, %147 ], [ %129, %131 ]
  %134 = phi i8* [ %153, %147 ], [ %128, %131 ]
  %135 = call i32 @strcmp(i8* %5, i8* %134) #11
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %143, label %137

; <label>:137:                                    ; preds = %132
  %138 = icmp eq i8 %133, 42
  br i1 %138, label %139, label %147

; <label>:139:                                    ; preds = %137
  %140 = getelementptr inbounds i8, i8* %134, i64 1
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %147

; <label>:143:                                    ; preds = %139, %132
  %144 = call i64 @strlen(i8* %134) #15
  %145 = getelementptr inbounds i8, i8* %134, i64 %144
  %146 = getelementptr inbounds i8, i8* %145, i64 1
  br label %157

; <label>:147:                                    ; preds = %137, %139
  %148 = call i64 @strlen(i8* %134) #15
  %149 = add i64 %148, 1
  %150 = getelementptr inbounds i8, i8* %134, i64 %149
  %151 = call i64 @strlen(i8* %150) #15
  %152 = add i64 %151, 1
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %132

; <label>:156:                                    ; preds = %147
  br label %157

; <label>:157:                                    ; preds = %156, %127, %143
  %158 = phi i8* [ %146, %143 ], [ %5, %127 ], [ %5, %156 ]
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 0
  %161 = select i1 %160, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.138, i64 0, i64 0), i8* %158
  ret i8* %161
}

; Function Attrs: nounwind
declare i8* @nl_langinfo(i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #4

declare i32 @open(i8* nocapture readonly, i32, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #2

declare i32 @close(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @ungetc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @fscanf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbiter_multi_next(%struct.mbiter_multi*) local_unnamed_addr #13 {
  %2 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %76

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4
  %11 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 2
  br label %41

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = lshr i32 %18, 5
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([8 x i32]* @is_basic_table to [0 x i32]*), i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %18, 31
  %24 = shl i32 1, %23
  %25 = and i32 %24, %22
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %33, label %27

; <label>:27:                                     ; preds = %14
  %28 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 1
  store i64 1, i64* %28, align 8
  %29 = load i8, i8* %16, align 1
  %30 = sext i8 %29 to i32
  %31 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 3
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 2
  store i8 1, i8* %32, align 8
  br label %75

; <label>:33:                                     ; preds = %14
  %34 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 2
  %35 = tail call i32 @mbsinit(%struct.__mbstate_t* %34) #15
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %33
  tail call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.141, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.142, i64 0, i64 0), i32 142, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.mbiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:38:                                     ; preds = %33
  store i8 1, i8* %6, align 8
  %39 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4
  %40 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %39, i64 0, i32 0
  br label %41

; <label>:41:                                     ; preds = %9, %38
  %42 = phi %struct.__mbstate_t* [ %13, %9 ], [ %34, %38 ]
  %43 = phi i8** [ %11, %9 ], [ %40, %38 ]
  %44 = phi %struct.mbchar* [ %10, %9 ], [ %39, %38 ]
  %45 = phi i8* [ %12, %9 ], [ %16, %38 ]
  %46 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 3
  %47 = bitcast %struct.mbiter_multi* %0 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = ptrtoint i8* %45 to i64
  %50 = sub i64 %48, %49
  %51 = tail call i64 @rpl_mbrtowc(i32* %46, i8* %45, i64 %50, %struct.__mbstate_t* %42) #11
  %52 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 1
  store i64 %51, i64* %52, align 8
  switch i64 %51, label %70 [
    i64 -1, label %53
    i64 -2, label %55
    i64 0, label %61
  ]

; <label>:53:                                     ; preds = %41
  store i64 1, i64* %52, align 8
  %54 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 2
  store i8 0, i8* %54, align 8
  br label %75

; <label>:55:                                     ; preds = %41
  %56 = load i64, i64* %47, align 8
  %57 = bitcast %struct.mbchar* %44 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  store i64 %59, i64* %52, align 8
  %60 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 2
  store i8 0, i8* %60, align 8
  br label %75

; <label>:61:                                     ; preds = %41
  store i64 1, i64* %52, align 8
  %62 = load i8*, i8** %43, align 8
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %66, label %65

; <label>:65:                                     ; preds = %61
  tail call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2.143, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.142, i64 0, i64 0), i32 169, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.mbiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:66:                                     ; preds = %61
  %67 = load i32, i32* %46, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %70, label %69

; <label>:69:                                     ; preds = %66
  tail call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.144, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.142, i64 0, i64 0), i32 170, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.mbiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:70:                                     ; preds = %41, %66
  %71 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 2
  store i8 1, i8* %71, align 8
  %72 = tail call i32 @mbsinit(%struct.__mbstate_t* %42) #15
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %75, label %74

; <label>:74:                                     ; preds = %70
  store i8 0, i8* %6, align 8
  br label %75

; <label>:75:                                     ; preds = %70, %53, %74, %55, %27
  store i8 1, i8* %2, align 4
  br label %76

; <label>:76:                                     ; preds = %1, %75
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbiter_multi_reloc(%struct.mbiter_multi* nocapture, i64) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 %1
  store i8* %5, i8** %3, align 8
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  store i8* %8, i8** %6, align 8
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbiter_multi_copy(%struct.mbiter_multi*, %struct.mbiter_multi* readonly) local_unnamed_addr #13 {
  %3 = bitcast %struct.mbiter_multi* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %struct.mbiter_multi* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 1
  store i8 %7, i8* %9, align 8
  %10 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 2
  br i1 %8, label %16, label %11

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 2
  %13 = bitcast %struct.__mbstate_t* %12 to i64*
  %14 = bitcast %struct.__mbstate_t* %10 to i64*
  %15 = load i64, i64* %13, align 4
  store i64 %15, i64* %14, align 4
  br label %18

; <label>:16:                                     ; preds = %2
  %17 = bitcast %struct.__mbstate_t* %10 to i64*
  store i64 0, i64* %17, align 4
  br label %18

; <label>:18:                                     ; preds = %16, %11
  %19 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 3
  %20 = load i8, i8* %19, align 4
  %21 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 3
  store i8 %20, i8* %21, align 4
  %22 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 4, i64 0
  %25 = icmp eq i8* %23, %24
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %18
  %27 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 1
  br label %32

; <label>:28:                                     ; preds = %18
  %29 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 4, i64 0
  %30 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 1
  %31 = load i64, i64* %30, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %23, i64 %31, i32 8, i1 false) #11
  br label %32

; <label>:32:                                     ; preds = %28, %26
  %33 = phi i64* [ %27, %26 ], [ %30, %28 ]
  %34 = phi i8* [ %23, %26 ], [ %29, %28 ]
  %35 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 0
  store i8* %34, i8** %35, align 8
  %36 = load i64, i64* %33, align 8
  %37 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 1
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 2
  %39 = load i8, i8* %38, align 8
  %40 = icmp eq i8 %39, 0
  %41 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 2
  store i8 %39, i8* %41, align 8
  br i1 %40, label %46, label %42

; <label>:42:                                     ; preds = %32
  %43 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i64 0, i32 4, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i64 0, i32 4, i32 3
  store i32 %44, i32* %45, align 4
  br label %46

; <label>:46:                                     ; preds = %32, %42
  ret void
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i8* @mbsstr(i8* nonnull, i8* nonnull) local_unnamed_addr #12 {
  %3 = alloca %struct.mbuiter_multi, align 8
  %4 = alloca %struct.mbuiter_multi, align 8
  %5 = alloca %struct.mbuiter_multi, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.mbuiter_multi, align 8
  %8 = alloca %struct.mbuiter_multi, align 8
  %9 = alloca i8*, align 8
  %10 = tail call i64 @__ctype_get_mb_cur_max() #11
  %11 = icmp ugt i64 %10, 1
  br i1 %11, label %12, label %212

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %13) #11
  %14 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 0
  store i8* %1, i8** %14, align 8
  store i8 0, i8* %13, align 8
  %15 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 1
  %16 = bitcast %struct.__mbstate_t* %15 to i64*
  store i64 0, i64* %16, align 4
  %17 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 2
  store i8 0, i8* %17, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %3)
  %18 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 2
  %19 = load i8, i8* %18, align 8
  %20 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i8 %19, 0
  %23 = icmp ne i32 %21, 0
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %210

; <label>:25:                                     ; preds = %12
  %26 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %26) #11
  %27 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %27) #11
  %28 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 0
  store i8* %1, i8** %28, align 8
  store i8 0, i8* %26, align 8
  %29 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 1
  %30 = bitcast %struct.__mbstate_t* %29 to i64*
  store i64 0, i64* %30, align 4
  %31 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 2
  store i8 0, i8* %31, align 4
  %32 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 0
  store i8* %0, i8** %32, align 8
  store i8 0, i8* %27, align 8
  %33 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 1
  %34 = bitcast %struct.__mbstate_t* %33 to i64*
  store i64 0, i64* %34, align 4
  %35 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 2
  store i8 0, i8* %35, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %5)
  %36 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 2
  %37 = load i8, i8* %36, align 8
  %38 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i8 %37, 0
  %41 = icmp ne i32 %39, 0
  %42 = or i1 %40, %41
  br i1 %42, label %43, label %208

; <label>:43:                                     ; preds = %25
  %44 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 1
  %45 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %3, i64 0, i32 3, i32 1
  %46 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 0
  %47 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 0
  %48 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 3, i32 1
  %49 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 3, i32 0
  %50 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 2
  %51 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 3, i32 0
  %52 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 1
  %53 = bitcast %struct.__mbstate_t* %52 to i64*
  %54 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 2
  %55 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 3, i32 2
  %56 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 3, i32 3
  %57 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %8, i64 0, i32 3, i32 1
  %58 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 3, i32 2
  %59 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %7, i64 0, i32 3, i32 3
  %60 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 2
  %61 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 3
  %62 = bitcast i8** %6 to i8*
  %63 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 1
  br label %64

; <label>:64:                                     ; preds = %43, %196
  %65 = phi i64 [ 0, %43 ], [ %105, %196 ]
  %66 = phi i64 [ 0, %43 ], [ %197, %196 ]
  %67 = phi i64 [ 0, %43 ], [ %106, %196 ]
  %68 = phi i8 [ 1, %43 ], [ %104, %196 ]
  %69 = and i8 %68, 1
  %70 = icmp eq i8 %69, 0
  %71 = icmp ult i64 %67, 10
  %72 = or i1 %71, %70
  %73 = mul i64 %67, 5
  %74 = icmp ult i64 %66, %73
  %75 = or i1 %72, %74
  br i1 %75, label %103, label %76

; <label>:76:                                     ; preds = %64
  %77 = sub i64 %66, %65
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %94, label %79

; <label>:79:                                     ; preds = %76
  br label %80

; <label>:80:                                     ; preds = %79, %87
  %81 = phi i64 [ %91, %87 ], [ %77, %79 ]
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %82 = load i8, i8* %60, align 8
  %83 = load i32, i32* %61, align 4
  %84 = icmp eq i8 %82, 0
  %85 = icmp ne i32 %83, 0
  %86 = or i1 %84, %85
  br i1 %86, label %87, label %93

; <label>:87:                                     ; preds = %80
  %88 = load i64, i64* %63, align 8
  %89 = load i8*, i8** %28, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 %88
  store i8* %90, i8** %28, align 8
  store i8 0, i8* %31, align 4
  %91 = add i64 %81, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %80

; <label>:93:                                     ; preds = %87, %80
  br label %94

; <label>:94:                                     ; preds = %93, %76
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %95 = load i8, i8* %60, align 8
  %96 = load i32, i32* %61, align 4
  %97 = icmp eq i8 %95, 0
  %98 = icmp ne i32 %96, 0
  %99 = or i1 %97, %98
  br i1 %99, label %103, label %100

; <label>:100:                                    ; preds = %94
  call void @llvm.lifetime.start(i64 8, i8* nonnull %62) #11
  %101 = call fastcc zeroext i1 @knuth_morris_pratt_multibyte(i8* nonnull %0, i8* nonnull %1, i8** nonnull %6)
  %102 = load i8*, i8** %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %62) #11
  br i1 %101, label %206, label %103

; <label>:103:                                    ; preds = %100, %94, %64
  %104 = phi i8 [ %68, %64 ], [ %68, %94 ], [ 0, %100 ]
  %105 = phi i64 [ %65, %64 ], [ %66, %94 ], [ %66, %100 ]
  %106 = add i64 %67, 1
  %107 = add i64 %66, 1
  %108 = load i8, i8* %36, align 8
  %109 = icmp eq i8 %108, 0
  %110 = load i8, i8* %18, align 8
  %111 = icmp eq i8 %110, 0
  %112 = or i1 %109, %111
  br i1 %112, label %117, label %113

; <label>:113:                                    ; preds = %103
  %114 = load i32, i32* %38, align 4
  %115 = load i32, i32* %20, align 4
  %116 = icmp eq i32 %114, %115
  br i1 %116, label %126, label %196

; <label>:117:                                    ; preds = %103
  %118 = load i64, i64* %44, align 8
  %119 = load i64, i64* %45, align 8
  %120 = icmp eq i64 %118, %119
  br i1 %120, label %121, label %196

; <label>:121:                                    ; preds = %117
  %122 = load i8*, i8** %32, align 8
  %123 = load i8*, i8** %14, align 8
  %124 = call i32 @memcmp(i8* %122, i8* %123, i64 %118) #15
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %196

; <label>:126:                                    ; preds = %121, %113
  call void @llvm.lifetime.start(i64 64, i8* nonnull %46) #11
  call void @llvm.lifetime.start(i64 64, i8* nonnull %47) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %46, i8* nonnull %27, i64 64, i32 8, i1 false)
  %127 = load i64, i64* %48, align 8
  %128 = load i8*, i8** %49, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 %127
  store i8* %129, i8** %49, align 8
  store i8 0, i8* %50, align 4
  store i8* %1, i8** %51, align 8
  store i8 0, i8* %47, align 8
  store i64 0, i64* %53, align 4
  store i8 0, i8* %54, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %8)
  %130 = load i8, i8* %55, align 8
  %131 = load i32, i32* %56, align 4
  %132 = icmp eq i8 %130, 0
  %133 = icmp ne i32 %131, 0
  %134 = or i1 %132, %133
  br i1 %134, label %135, label %145

; <label>:135:                                    ; preds = %126
  %136 = load i64, i64* %57, align 8
  %137 = load i8*, i8** %51, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 %136
  store i8* %138, i8** %51, align 8
  store i8 0, i8* %54, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %8)
  %139 = load i8, i8* %55, align 8
  %140 = load i32, i32* %56, align 4
  %141 = icmp eq i8 %139, 0
  %142 = icmp ne i32 %140, 0
  %143 = or i1 %141, %142
  br i1 %143, label %144, label %147

; <label>:144:                                    ; preds = %135
  br label %150

; <label>:145:                                    ; preds = %126
  call void @abort() #16
  unreachable

; <label>:146:                                    ; preds = %180
  br label %148

; <label>:147:                                    ; preds = %135
  br label %148

; <label>:148:                                    ; preds = %147, %146
  %149 = load i8*, i8** %32, align 8
  br label %194

; <label>:150:                                    ; preds = %144, %180
  %151 = phi i64 [ %158, %180 ], [ %107, %144 ]
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %7)
  %152 = load i8, i8* %58, align 8
  %153 = icmp ne i8 %152, 0
  %154 = load i32, i32* %59, align 4
  %155 = icmp eq i32 %154, 0
  %156 = and i1 %153, %155
  br i1 %156, label %193, label %157

; <label>:157:                                    ; preds = %150
  %158 = add i64 %151, 1
  %159 = xor i1 %153, true
  %160 = load i8, i8* %55, align 8
  %161 = icmp eq i8 %160, 0
  %162 = or i1 %161, %159
  br i1 %162, label %171, label %163

; <label>:163:                                    ; preds = %157
  %164 = load i32, i32* %56, align 4
  %165 = icmp eq i32 %154, %164
  br i1 %165, label %166, label %192

; <label>:166:                                    ; preds = %163
  %167 = load i64, i64* %48, align 8
  %168 = load i8*, i8** %49, align 8
  %169 = load i64, i64* %57, align 8
  %170 = load i8*, i8** %51, align 8
  br label %180

; <label>:171:                                    ; preds = %157
  %172 = load i64, i64* %48, align 8
  %173 = load i64, i64* %57, align 8
  %174 = icmp eq i64 %172, %173
  br i1 %174, label %175, label %192

; <label>:175:                                    ; preds = %171
  %176 = load i8*, i8** %49, align 8
  %177 = load i8*, i8** %51, align 8
  %178 = call i32 @memcmp(i8* %176, i8* %177, i64 %172) #15
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %192

; <label>:180:                                    ; preds = %166, %175
  %181 = phi i8* [ %170, %166 ], [ %177, %175 ]
  %182 = phi i64 [ %169, %166 ], [ %172, %175 ]
  %183 = phi i8* [ %168, %166 ], [ %176, %175 ]
  %184 = phi i64 [ %167, %166 ], [ %172, %175 ]
  %185 = getelementptr inbounds i8, i8* %183, i64 %184
  store i8* %185, i8** %49, align 8
  store i8 0, i8* %50, align 4
  %186 = getelementptr inbounds i8, i8* %181, i64 %182
  store i8* %186, i8** %51, align 8
  store i8 0, i8* %54, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %8)
  %187 = load i8, i8* %55, align 8
  %188 = load i32, i32* %56, align 4
  %189 = icmp eq i8 %187, 0
  %190 = icmp ne i32 %188, 0
  %191 = or i1 %189, %190
  br i1 %191, label %150, label %146

; <label>:192:                                    ; preds = %163, %171, %175
  call void @llvm.lifetime.end(i64 64, i8* nonnull %47) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %46) #11
  br label %196

; <label>:193:                                    ; preds = %150
  br label %194

; <label>:194:                                    ; preds = %193, %148
  %195 = phi i8* [ %149, %148 ], [ null, %193 ]
  call void @llvm.lifetime.end(i64 64, i8* nonnull %47) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %46) #11
  br label %208

; <label>:196:                                    ; preds = %192, %113, %117, %121
  %197 = phi i64 [ %107, %113 ], [ %107, %121 ], [ %107, %117 ], [ %158, %192 ]
  %198 = load i64, i64* %44, align 8
  %199 = load i8*, i8** %32, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 %198
  store i8* %200, i8** %32, align 8
  store i8 0, i8* %35, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %5)
  %201 = load i8, i8* %36, align 8
  %202 = load i32, i32* %38, align 4
  %203 = icmp eq i8 %201, 0
  %204 = icmp ne i32 %202, 0
  %205 = or i1 %203, %204
  br i1 %205, label %64, label %206

; <label>:206:                                    ; preds = %100, %196
  %207 = phi i8* [ null, %196 ], [ %102, %100 ]
  br label %208

; <label>:208:                                    ; preds = %206, %25, %194
  %209 = phi i8* [ %195, %194 ], [ null, %25 ], [ %207, %206 ]
  call void @llvm.lifetime.end(i64 64, i8* nonnull %27) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %26) #11
  br label %210

; <label>:210:                                    ; preds = %12, %208
  %211 = phi i8* [ %209, %208 ], [ %0, %12 ]
  call void @llvm.lifetime.end(i64 64, i8* nonnull %13) #11
  br label %285

; <label>:212:                                    ; preds = %2
  %213 = load i8, i8* %1, align 1
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %285, label %215

; <label>:215:                                    ; preds = %212
  %216 = load i8, i8* %0, align 1
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %285, label %218

; <label>:218:                                    ; preds = %215
  %219 = bitcast i8** %9 to i8*
  br label %220

; <label>:220:                                    ; preds = %218, %276
  %221 = phi i8 [ %216, %218 ], [ %279, %276 ]
  %222 = phi i8* [ %0, %218 ], [ %278, %276 ]
  %223 = phi i8* [ %1, %218 ], [ %256, %276 ]
  %224 = phi i64 [ 0, %218 ], [ %255, %276 ]
  %225 = phi i64 [ 0, %218 ], [ %277, %276 ]
  %226 = phi i64 [ 0, %218 ], [ %257, %276 ]
  %227 = phi i8 [ 1, %218 ], [ %254, %276 ]
  %228 = and i8 %227, 1
  %229 = icmp eq i8 %228, 0
  %230 = icmp ult i64 %226, 10
  %231 = or i1 %230, %229
  %232 = mul i64 %226, 5
  %233 = icmp ult i64 %225, %232
  %234 = or i1 %231, %233
  br i1 %234, label %252, label %235

; <label>:235:                                    ; preds = %220
  %236 = icmp eq i8* %223, null
  br i1 %236, label %245, label %237

; <label>:237:                                    ; preds = %235
  %238 = sub i64 %225, %224
  %239 = tail call i64 @strnlen(i8* nonnull %223, i64 %238) #15
  %240 = getelementptr inbounds i8, i8* %223, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = icmp eq i8 %241, 0
  %243 = icmp eq i8* %240, null
  %244 = or i1 %242, %243
  br i1 %244, label %245, label %252

; <label>:245:                                    ; preds = %237, %235
  %246 = phi i64 [ %224, %235 ], [ %225, %237 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %219) #11
  %247 = tail call i64 @strlen(i8* nonnull %1) #15
  %248 = call fastcc zeroext i1 @knuth_morris_pratt(i8* %222, i8* nonnull %1, i64 %247, i8** nonnull %9)
  %249 = load i8*, i8** %9, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %219) #11
  br i1 %248, label %283, label %250

; <label>:250:                                    ; preds = %245
  %251 = load i8, i8* %222, align 1
  br label %252

; <label>:252:                                    ; preds = %250, %237, %220
  %253 = phi i8 [ %251, %250 ], [ %221, %220 ], [ %221, %237 ]
  %254 = phi i8 [ 0, %250 ], [ %227, %220 ], [ %227, %237 ]
  %255 = phi i64 [ %246, %250 ], [ %224, %220 ], [ %225, %237 ]
  %256 = phi i8* [ null, %250 ], [ %223, %220 ], [ %240, %237 ]
  %257 = add i64 %226, 1
  %258 = add i64 %225, 1
  %259 = icmp eq i8 %253, %213
  br i1 %259, label %260, label %276

; <label>:260:                                    ; preds = %252
  br label %261

; <label>:261:                                    ; preds = %260, %272
  %262 = phi i64 [ %273, %272 ], [ %258, %260 ]
  %263 = phi i8* [ %266, %272 ], [ %222, %260 ]
  %264 = phi i8* [ %265, %272 ], [ %1, %260 ]
  %265 = getelementptr inbounds i8, i8* %264, i64 1
  %266 = getelementptr inbounds i8, i8* %263, i64 1
  %267 = load i8, i8* %265, align 1
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %281, label %269

; <label>:269:                                    ; preds = %261
  %270 = load i8, i8* %266, align 1
  %271 = icmp eq i8 %270, 0
  br i1 %271, label %281, label %272

; <label>:272:                                    ; preds = %269
  %273 = add i64 %262, 1
  %274 = icmp eq i8 %270, %267
  br i1 %274, label %261, label %275

; <label>:275:                                    ; preds = %272
  br label %276

; <label>:276:                                    ; preds = %275, %252
  %277 = phi i64 [ %258, %252 ], [ %273, %275 ]
  %278 = getelementptr inbounds i8, i8* %222, i64 1
  %279 = load i8, i8* %278, align 1
  %280 = icmp eq i8 %279, 0
  br i1 %280, label %283, label %220

; <label>:281:                                    ; preds = %261, %269
  %282 = phi i8* [ %222, %261 ], [ null, %269 ]
  br label %285

; <label>:283:                                    ; preds = %245, %276
  %284 = phi i8* [ null, %276 ], [ %249, %245 ]
  br label %285

; <label>:285:                                    ; preds = %283, %281, %215, %212, %210
  %286 = phi i8* [ %211, %210 ], [ %0, %212 ], [ null, %215 ], [ %282, %281 ], [ %284, %283 ]
  ret i8* %286
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @knuth_morris_pratt_multibyte(i8*, i8*, i8** nocapture) unnamed_addr #6 {
  %4 = alloca %struct.mbuiter_multi, align 8
  %5 = alloca %struct.mbuiter_multi, align 8
  %6 = alloca %struct.mbuiter_multi, align 8
  %7 = tail call i64 @mbslen(i8* %1) #15
  %8 = icmp ugt i64 %7, 164703072086692425
  br i1 %8, label %229, label %9

; <label>:9:                                      ; preds = %3
  %10 = mul i64 %7, 56
  %11 = icmp ult i64 %10, 4016
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %9
  %13 = add i64 %10, 16
  %14 = alloca i8, i64 %13, align 16
  %15 = getelementptr inbounds i8, i8* %14, i64 16
  br label %19

; <label>:16:                                     ; preds = %9
  %17 = tail call i8* @mmalloca(i64 %10) #11
  %18 = icmp eq i8* %17, null
  br i1 %18, label %229, label %19

; <label>:19:                                     ; preds = %12, %16
  %20 = phi i8* [ %15, %12 ], [ %17, %16 ]
  %21 = bitcast i8* %20 to %struct.mbchar*
  %22 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %7
  %23 = bitcast %struct.mbchar* %22 to i64*
  %24 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %24) #11
  %25 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 0
  store i8* %1, i8** %25, align 8
  store i8 0, i8* %24, align 8
  %26 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 1
  %27 = bitcast %struct.__mbstate_t* %26 to i64*
  store i64 0, i64* %27, align 4
  %28 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 2
  store i8 0, i8* %28, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %29 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 2
  %30 = load i8, i8* %29, align 8
  %31 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i8 %30, 0
  %34 = icmp ne i32 %32, 0
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %70

; <label>:36:                                     ; preds = %19
  %37 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 4, i64 0
  %38 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %4, i64 0, i32 3, i32 1
  br label %39

; <label>:39:                                     ; preds = %36, %59
  %40 = phi i8 [ %30, %36 ], [ %64, %59 ]
  %41 = phi i64 [ 0, %36 ], [ %63, %59 ]
  %42 = load i8*, i8** %25, align 8
  %43 = icmp eq i8* %42, %37
  br i1 %43, label %44, label %48

; <label>:44:                                     ; preds = %39
  %45 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %41, i32 4, i64 0
  %46 = load i64, i64* %38, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* nonnull %37, i64 %46, i32 8, i1 false) #11
  %47 = load i8, i8* %29, align 8
  br label %48

; <label>:48:                                     ; preds = %39, %44
  %49 = phi i8 [ %47, %44 ], [ %40, %39 ]
  %50 = phi i8* [ %45, %44 ], [ %42, %39 ]
  %51 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %41, i32 0
  store i8* %50, i8** %51, align 8
  %52 = load i64, i64* %38, align 8
  %53 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %41, i32 1
  store i64 %52, i64* %53, align 8
  %54 = icmp eq i8 %49, 0
  %55 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %41, i32 2
  store i8 %49, i8* %55, align 8
  br i1 %54, label %59, label %56

; <label>:56:                                     ; preds = %48
  %57 = load i32, i32* %31, align 4
  %58 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %41, i32 3
  store i32 %57, i32* %58, align 4
  br label %59

; <label>:59:                                     ; preds = %48, %56
  %60 = load i64, i64* %38, align 8
  %61 = load i8*, i8** %25, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %60
  store i8* %62, i8** %25, align 8
  store i8 0, i8* %28, align 4
  %63 = add i64 %41, 1
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %4)
  %64 = load i8, i8* %29, align 8
  %65 = load i32, i32* %31, align 4
  %66 = icmp eq i8 %64, 0
  %67 = icmp ne i32 %65, 0
  %68 = or i1 %66, %67
  br i1 %68, label %39, label %69

; <label>:69:                                     ; preds = %59
  br label %70

; <label>:70:                                     ; preds = %69, %19
  call void @llvm.lifetime.end(i64 64, i8* nonnull %24) #11
  %71 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %7, i32 1
  store i64 1, i64* %71, align 8
  %72 = icmp ugt i64 %7, 2
  br i1 %72, label %73, label %123

; <label>:73:                                     ; preds = %70
  br label %74

; <label>:74:                                     ; preds = %73, %116
  %75 = phi i64 [ %117, %116 ], [ 0, %73 ]
  %76 = phi i64 [ %120, %116 ], [ 2, %73 ]
  %77 = add i64 %76, -1
  %78 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %77, i32 2
  %79 = load i8, i8* %78, align 8
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %77, i32 1
  %82 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %77, i32 0
  %83 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %77, i32 3
  br label %84

; <label>:84:                                     ; preds = %111, %74
  %85 = phi i64 [ %75, %74 ], [ %114, %111 ]
  br i1 %80, label %95, label %86

; <label>:86:                                     ; preds = %84
  %87 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %85, i32 2
  %88 = load i8, i8* %87, align 8
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %95, label %90

; <label>:90:                                     ; preds = %86
  %91 = load i32, i32* %83, align 4
  %92 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %85, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %91, %93
  br i1 %94, label %106, label %109

; <label>:95:                                     ; preds = %86, %84
  %96 = load i64, i64* %81, align 8
  %97 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %85, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %96, %98
  br i1 %99, label %100, label %109

; <label>:100:                                    ; preds = %95
  %101 = load i8*, i8** %82, align 8
  %102 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %85, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = call i32 @memcmp(i8* %101, i8* %103, i64 %96) #15
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %109

; <label>:106:                                    ; preds = %100, %90
  %107 = add i64 %85, 1
  %108 = sub i64 %76, %107
  br label %116

; <label>:109:                                    ; preds = %100, %95, %90
  %110 = icmp eq i64 %85, 0
  br i1 %110, label %115, label %111

; <label>:111:                                    ; preds = %109
  %112 = getelementptr inbounds i64, i64* %23, i64 %85
  %113 = load i64, i64* %112, align 8
  %114 = sub i64 %85, %113
  br label %84

; <label>:115:                                    ; preds = %109
  br label %116

; <label>:116:                                    ; preds = %115, %106
  %117 = phi i64 [ %107, %106 ], [ 0, %115 ]
  %118 = phi i64 [ %108, %106 ], [ %76, %115 ]
  %119 = getelementptr inbounds i64, i64* %23, i64 %76
  store i64 %118, i64* %119, align 8
  %120 = add nuw i64 %76, 1
  %121 = icmp eq i64 %120, %7
  br i1 %121, label %122, label %74

; <label>:122:                                    ; preds = %116
  br label %123

; <label>:123:                                    ; preds = %122, %70
  %124 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %124) #11
  %125 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %125) #11
  store i8* null, i8** %2, align 8
  %126 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 0
  store i8* %0, i8** %126, align 8
  store i8 0, i8* %124, align 8
  %127 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 1
  %128 = bitcast %struct.__mbstate_t* %127 to i64*
  store i64 0, i64* %128, align 4
  %129 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 2
  store i8 0, i8* %129, align 4
  %130 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 3, i32 0
  store i8* %0, i8** %130, align 8
  store i8 0, i8* %125, align 8
  %131 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 1
  %132 = bitcast %struct.__mbstate_t* %131 to i64*
  store i64 0, i64* %132, align 4
  %133 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 2
  store i8 0, i8* %133, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %6)
  %134 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 3, i32 2
  %135 = load i8, i8* %134, align 8
  %136 = icmp ne i8 %135, 0
  %137 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 3, i32 3
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  %140 = and i1 %136, %139
  br i1 %140, label %228, label %141

; <label>:141:                                    ; preds = %123
  %142 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %6, i64 0, i32 3, i32 1
  %143 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 2
  %144 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 3
  %145 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %5, i64 0, i32 3, i32 1
  br label %146

; <label>:146:                                    ; preds = %141, %220
  %147 = phi i32 [ %138, %141 ], [ %224, %220 ]
  %148 = phi i1 [ %136, %141 ], [ %223, %220 ]
  %149 = phi i64 [ 0, %141 ], [ %221, %220 ]
  %150 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %149, i32 2
  %151 = load i8, i8* %150, align 8
  %152 = icmp eq i8 %151, 0
  %153 = xor i1 %148, true
  %154 = or i1 %152, %153
  br i1 %154, label %162, label %155

; <label>:155:                                    ; preds = %146
  %156 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %149, i32 3
  %157 = load i32, i32* %156, align 4
  %158 = icmp eq i32 %157, %147
  br i1 %158, label %159, label %183

; <label>:159:                                    ; preds = %155
  %160 = load i64, i64* %142, align 8
  %161 = load i8*, i8** %130, align 8
  br label %173

; <label>:162:                                    ; preds = %146
  %163 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %149, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = load i64, i64* %142, align 8
  %166 = icmp eq i64 %164, %165
  br i1 %166, label %167, label %183

; <label>:167:                                    ; preds = %162
  %168 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %21, i64 %149, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = load i8*, i8** %130, align 8
  %171 = call i32 @memcmp(i8* %169, i8* %170, i64 %164) #15
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %183

; <label>:173:                                    ; preds = %159, %167
  %174 = phi i8* [ %161, %159 ], [ %170, %167 ]
  %175 = phi i64 [ %160, %159 ], [ %164, %167 ]
  %176 = add i64 %149, 1
  %177 = getelementptr inbounds i8, i8* %174, i64 %175
  store i8* %177, i8** %130, align 8
  store i8 0, i8* %133, align 4
  %178 = icmp eq i64 %176, %7
  br i1 %178, label %179, label %220

; <label>:179:                                    ; preds = %173
  %180 = bitcast i8** %126 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = bitcast i8** %2 to i64*
  store i64 %181, i64* %182, align 8
  br label %228

; <label>:183:                                    ; preds = %167, %162, %155
  %184 = icmp eq i64 %149, 0
  br i1 %184, label %205, label %185

; <label>:185:                                    ; preds = %183
  %186 = getelementptr inbounds i64, i64* %23, i64 %149
  %187 = load i64, i64* %186, align 8
  %188 = sub i64 %149, %187
  %189 = icmp eq i64 %187, 0
  br i1 %189, label %220, label %190

; <label>:190:                                    ; preds = %185
  br label %191

; <label>:191:                                    ; preds = %190, %199
  %192 = phi i64 [ %203, %199 ], [ %187, %190 ]
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %5)
  %193 = load i8, i8* %143, align 8
  %194 = load i32, i32* %144, align 4
  %195 = icmp eq i8 %193, 0
  %196 = icmp ne i32 %194, 0
  %197 = or i1 %195, %196
  br i1 %197, label %199, label %198

; <label>:198:                                    ; preds = %191
  call void @abort() #16
  unreachable

; <label>:199:                                    ; preds = %191
  %200 = load i64, i64* %145, align 8
  %201 = load i8*, i8** %126, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 %200
  store i8* %202, i8** %126, align 8
  store i8 0, i8* %129, align 4
  %203 = add i64 %192, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %219, label %191

; <label>:205:                                    ; preds = %183
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %5)
  %206 = load i8, i8* %143, align 8
  %207 = load i32, i32* %144, align 4
  %208 = icmp eq i8 %206, 0
  %209 = icmp ne i32 %207, 0
  %210 = or i1 %208, %209
  br i1 %210, label %212, label %211

; <label>:211:                                    ; preds = %205
  call void @abort() #16
  unreachable

; <label>:212:                                    ; preds = %205
  %213 = load i64, i64* %145, align 8
  %214 = load i8*, i8** %126, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 %213
  store i8* %215, i8** %126, align 8
  store i8 0, i8* %129, align 4
  %216 = load i64, i64* %142, align 8
  %217 = load i8*, i8** %130, align 8
  %218 = getelementptr inbounds i8, i8* %217, i64 %216
  store i8* %218, i8** %130, align 8
  store i8 0, i8* %133, align 4
  br label %220

; <label>:219:                                    ; preds = %199
  br label %220

; <label>:220:                                    ; preds = %219, %185, %212, %173
  %221 = phi i64 [ %176, %173 ], [ 0, %212 ], [ %188, %185 ], [ %188, %219 ]
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %6)
  %222 = load i8, i8* %134, align 8
  %223 = icmp ne i8 %222, 0
  %224 = load i32, i32* %137, align 4
  %225 = icmp eq i32 %224, 0
  %226 = and i1 %223, %225
  br i1 %226, label %227, label %146

; <label>:227:                                    ; preds = %220
  br label %228

; <label>:228:                                    ; preds = %227, %123, %179
  call void @llvm.lifetime.end(i64 64, i8* nonnull %125) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %124) #11
  call void @freea(i8* nonnull %20) #11
  br label %229

; <label>:229:                                    ; preds = %3, %16, %228
  %230 = phi i1 [ true, %228 ], [ false, %16 ], [ false, %3 ]
  ret i1 %230
}

; Function Attrs: nounwind readonly
declare i64 @strnlen(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @knuth_morris_pratt(i8*, i8* nocapture readonly, i64, i8** nocapture) unnamed_addr #6 {
  %5 = icmp ugt i64 %2, 1152921504606846975
  br i1 %5, label %91, label %6

; <label>:6:                                      ; preds = %4
  %7 = shl i64 %2, 3
  %8 = icmp ult i64 %7, 4016
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %6
  %10 = add i64 %7, 16
  %11 = alloca i8, i64 %10, align 16
  %12 = getelementptr inbounds i8, i8* %11, i64 16
  br label %16

; <label>:13:                                     ; preds = %6
  %14 = tail call i8* @mmalloca(i64 %7) #11
  %15 = icmp eq i8* %14, null
  br i1 %15, label %91, label %16

; <label>:16:                                     ; preds = %9, %13
  %17 = phi i8* [ %12, %9 ], [ %14, %13 ]
  %18 = bitcast i8* %17 to i64*
  %19 = getelementptr inbounds i8, i8* %17, i64 8
  %20 = bitcast i8* %19 to i64*
  store i64 1, i64* %20, align 8
  %21 = icmp ugt i64 %2, 2
  br i1 %21, label %22, label %56

; <label>:22:                                     ; preds = %16
  br label %23

; <label>:23:                                     ; preds = %22, %49
  %24 = phi i64 [ %50, %49 ], [ 0, %22 ]
  %25 = phi i64 [ %53, %49 ], [ 2, %22 ]
  %26 = add i64 %25, -1
  %27 = getelementptr inbounds i8, i8* %1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %24
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %28, %30
  br i1 %31, label %34, label %32

; <label>:32:                                     ; preds = %23
  br label %38

; <label>:33:                                     ; preds = %41
  br label %34

; <label>:34:                                     ; preds = %33, %23
  %35 = phi i64 [ %24, %23 ], [ %44, %33 ]
  %36 = add i64 %35, 1
  %37 = sub i64 %25, %36
  br label %49

; <label>:38:                                     ; preds = %32, %41
  %39 = phi i64 [ %44, %41 ], [ %24, %32 ]
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %48, label %41

; <label>:41:                                     ; preds = %38
  %42 = getelementptr inbounds i64, i64* %18, i64 %39
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %39, %43
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %28, %46
  br i1 %47, label %33, label %38

; <label>:48:                                     ; preds = %38
  br label %49

; <label>:49:                                     ; preds = %48, %34
  %50 = phi i64 [ %36, %34 ], [ 0, %48 ]
  %51 = phi i64 [ %37, %34 ], [ %25, %48 ]
  %52 = getelementptr inbounds i64, i64* %18, i64 %25
  store i64 %51, i64* %52, align 8
  %53 = add nuw i64 %25, 1
  %54 = icmp eq i64 %53, %2
  br i1 %54, label %55, label %23

; <label>:55:                                     ; preds = %49
  br label %56

; <label>:56:                                     ; preds = %55, %16
  store i8* null, i8** %3, align 8
  br label %57

; <label>:57:                                     ; preds = %82, %56
  %58 = phi i64 [ 0, %56 ], [ %83, %82 ]
  %59 = phi i8* [ %0, %56 ], [ %84, %82 ]
  %60 = phi i8* [ %0, %56 ], [ %85, %82 ]
  br label %61

; <label>:61:                                     ; preds = %57, %70
  %62 = phi i64 [ %71, %70 ], [ %58, %57 ]
  %63 = phi i8* [ %72, %70 ], [ %60, %57 ]
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %89, label %66

; <label>:66:                                     ; preds = %61
  %67 = getelementptr inbounds i8, i8* %1, i64 %62
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, %64
  br i1 %69, label %70, label %75

; <label>:70:                                     ; preds = %66
  %71 = add i64 %62, 1
  %72 = getelementptr inbounds i8, i8* %63, i64 1
  %73 = icmp eq i64 %71, %2
  br i1 %73, label %74, label %61

; <label>:74:                                     ; preds = %70
  store i8* %59, i8** %3, align 8
  br label %90

; <label>:75:                                     ; preds = %66
  %76 = icmp eq i64 %62, 0
  br i1 %76, label %86, label %77

; <label>:77:                                     ; preds = %75
  %78 = getelementptr inbounds i64, i64* %18, i64 %62
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds i8, i8* %59, i64 %79
  %81 = sub i64 %62, %79
  br label %82

; <label>:82:                                     ; preds = %77, %86
  %83 = phi i64 [ 0, %86 ], [ %81, %77 ]
  %84 = phi i8* [ %87, %86 ], [ %80, %77 ]
  %85 = phi i8* [ %88, %86 ], [ %63, %77 ]
  br label %57

; <label>:86:                                     ; preds = %75
  %87 = getelementptr inbounds i8, i8* %59, i64 1
  %88 = getelementptr inbounds i8, i8* %63, i64 1
  br label %82

; <label>:89:                                     ; preds = %61
  br label %90

; <label>:90:                                     ; preds = %89, %74
  call void @freea(i8* nonnull %17) #11
  br label %91

; <label>:91:                                     ; preds = %4, %13, %90
  %92 = phi i1 [ true, %90 ], [ false, %13 ], [ false, %4 ]
  ret i1 %92
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbuiter_multi_next(%struct.mbuiter_multi*) local_unnamed_addr #13 {
  %2 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %64

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 0
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 0
  %10 = load i8*, i8** %9, align 8
  br i1 %8, label %13, label %11

; <label>:11:                                     ; preds = %5
  %12 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 1
  br label %36

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %10, align 1
  %15 = zext i8 %14 to i32
  %16 = lshr i32 %15, 5
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([8 x i32]* @is_basic_table to [0 x i32]*), i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %15, 31
  %21 = shl i32 1, %20
  %22 = and i32 %21, %19
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %30, label %24

; <label>:24:                                     ; preds = %13
  %25 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 1
  store i64 1, i64* %25, align 8
  %26 = load i8, i8* %10, align 1
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 2
  store i8 1, i8* %29, align 8
  br label %63

; <label>:30:                                     ; preds = %13
  %31 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 1
  %32 = tail call i32 @mbsinit(%struct.__mbstate_t* %31) #15
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %30
  tail call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.149, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.150, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.mbuiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:35:                                     ; preds = %30
  store i8 1, i8* %6, align 8
  br label %36

; <label>:36:                                     ; preds = %11, %35
  %37 = phi %struct.__mbstate_t* [ %12, %11 ], [ %31, %35 ]
  %38 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 3
  %39 = tail call i64 @__ctype_get_mb_cur_max() #11
  %40 = tail call i64 @strnlen1(i8* %10, i64 %39) #15
  %41 = tail call i64 @rpl_mbrtowc(i32* %38, i8* %10, i64 %40, %struct.__mbstate_t* %37) #11
  %42 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 1
  store i64 %41, i64* %42, align 8
  switch i64 %41, label %58 [
    i64 -1, label %43
    i64 -2, label %45
    i64 0, label %49
  ]

; <label>:43:                                     ; preds = %36
  store i64 1, i64* %42, align 8
  %44 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 2
  store i8 0, i8* %44, align 8
  br label %63

; <label>:45:                                     ; preds = %36
  %46 = load i8*, i8** %9, align 8
  %47 = tail call i64 @strlen(i8* %46) #15
  store i64 %47, i64* %42, align 8
  %48 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 2
  store i8 0, i8* %48, align 8
  br label %63

; <label>:49:                                     ; preds = %36
  store i64 1, i64* %42, align 8
  %50 = load i8*, i8** %9, align 8
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

; <label>:53:                                     ; preds = %49
  tail call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2.151, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.150, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.mbuiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:54:                                     ; preds = %49
  %55 = load i32, i32* %38, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %58, label %57

; <label>:57:                                     ; preds = %54
  tail call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.152, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.150, i64 0, i64 0), i32 179, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.mbuiter_multi_next, i64 0, i64 0)) #16
  unreachable

; <label>:58:                                     ; preds = %36, %54
  %59 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 2
  store i8 1, i8* %59, align 8
  %60 = tail call i32 @mbsinit(%struct.__mbstate_t* %37) #15
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %63, label %62

; <label>:62:                                     ; preds = %58
  store i8 0, i8* %6, align 8
  br label %63

; <label>:63:                                     ; preds = %58, %43, %62, %45, %24
  store i8 1, i8* %2, align 4
  br label %64

; <label>:64:                                     ; preds = %1, %63
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbuiter_multi_reloc(%struct.mbuiter_multi* nocapture, i64) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 %1
  store i8* %5, i8** %3, align 8
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mbuiter_multi_copy(%struct.mbuiter_multi*, %struct.mbuiter_multi* readonly) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 0
  store i8 %4, i8* %6, align 8
  %7 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 1
  br i1 %5, label %13, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 1
  %10 = bitcast %struct.__mbstate_t* %9 to i64*
  %11 = bitcast %struct.__mbstate_t* %7 to i64*
  %12 = load i64, i64* %10, align 4
  store i64 %12, i64* %11, align 4
  br label %15

; <label>:13:                                     ; preds = %2
  %14 = bitcast %struct.__mbstate_t* %7 to i64*
  store i64 0, i64* %14, align 4
  br label %15

; <label>:15:                                     ; preds = %13, %8
  %16 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 2
  %17 = load i8, i8* %16, align 4
  %18 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 2
  store i8 %17, i8* %18, align 4
  %19 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 4, i64 0
  %22 = icmp eq i8* %20, %21
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %15
  %24 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 1
  br label %29

; <label>:25:                                     ; preds = %15
  %26 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 4, i64 0
  %27 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 1
  %28 = load i64, i64* %27, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %20, i64 %28, i32 8, i1 false) #11
  br label %29

; <label>:29:                                     ; preds = %25, %23
  %30 = phi i64* [ %24, %23 ], [ %27, %25 ]
  %31 = phi i8* [ %20, %23 ], [ %26, %25 ]
  %32 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 0
  store i8* %31, i8** %32, align 8
  %33 = load i64, i64* %30, align 8
  %34 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 1
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 2
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 0
  %38 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 2
  store i8 %36, i8* %38, align 8
  br i1 %37, label %43, label %39

; <label>:39:                                     ; preds = %29
  %40 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %1, i64 0, i32 3, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %0, i64 0, i32 3, i32 3
  store i32 %41, i32* %42, align 4
  br label %43

; <label>:43:                                     ; preds = %29, %39
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @mem_cd_iconv(i8*, i64, i8*, i8** nocapture, i64* nocapture) local_unnamed_addr #6 {
  %6 = alloca %union.anon.32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = tail call i64 @iconv(i8* %2, i8** null, i64* null, i8** null, i64* null) #11
  %18 = bitcast %union.anon.32* %6 to i8*
  call void @llvm.lifetime.start(i64 4096, i8* nonnull %18) #11
  %19 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %19) #11
  store i8* %0, i8** %7, align 8
  %20 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %20) #11
  store i64 %1, i64* %8, align 8
  %21 = icmp eq i64 %1, 0
  br i1 %21, label %48, label %22

; <label>:22:                                     ; preds = %5
  %23 = bitcast i8** %9 to i8*
  %24 = bitcast i8** %9 to %union.anon.32**
  %25 = bitcast i64* %10 to i8*
  %26 = bitcast i8** %9 to i64*
  %27 = ptrtoint %union.anon.32* %6 to i64
  br label %31

; <label>:28:                                     ; preds = %43
  %29 = load i64, i64* %8, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %47, label %31

; <label>:31:                                     ; preds = %22, %28
  %32 = phi i64 [ 0, %22 ], [ %45, %28 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23) #11
  store %union.anon.32* %6, %union.anon.32** %24, align 8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %25) #11
  store i64 4096, i64* %10, align 8
  %33 = call i64 @iconv(i8* %2, i8** nonnull %7, i64* nonnull %8, i8** nonnull %9, i64* nonnull %10) #11
  %34 = icmp eq i64 %33, -1
  br i1 %34, label %35, label %39

; <label>:35:                                     ; preds = %31
  %36 = tail call i32* @__errno_location() #1
  %37 = load i32, i32* %36, align 4
  switch i32 %37, label %38 [
    i32 7, label %39
    i32 22, label %43
  ]

; <label>:38:                                     ; preds = %35
  br label %43

; <label>:39:                                     ; preds = %35, %31
  %40 = load i64, i64* %26, align 8
  %41 = sub i64 %32, %27
  %42 = add i64 %41, %40
  br label %43

; <label>:43:                                     ; preds = %35, %39, %38
  %44 = phi i32 [ 0, %39 ], [ 1, %38 ], [ 3, %35 ]
  %45 = phi i64 [ %42, %39 ], [ %32, %38 ], [ %32, %35 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %25) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23) #11
  %46 = trunc i32 %44 to i2
  switch i2 %46, label %64 [
    i2 0, label %28
    i2 -1, label %47
  ]

; <label>:47:                                     ; preds = %28, %43
  br label %48

; <label>:48:                                     ; preds = %47, %5
  %49 = phi i64 [ 0, %5 ], [ %45, %47 ]
  %50 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50) #11
  %51 = bitcast i8** %11 to %union.anon.32**
  store %union.anon.32* %6, %union.anon.32** %51, align 8
  %52 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %52) #11
  store i64 4096, i64* %12, align 8
  %53 = call i64 @iconv(i8* %2, i8** null, i64* null, i8** nonnull %11, i64* nonnull %12) #11
  %54 = icmp eq i64 %53, -1
  br i1 %54, label %61, label %55

; <label>:55:                                     ; preds = %48
  %56 = bitcast i8** %11 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = ptrtoint %union.anon.32* %6 to i64
  %59 = sub i64 %49, %58
  %60 = add i64 %59, %57
  br label %61

; <label>:61:                                     ; preds = %48, %55
  %62 = phi i32 [ 0, %55 ], [ 1, %48 ]
  %63 = phi i64 [ %60, %55 ], [ %49, %48 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %52) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50) #11
  br label %65

; <label>:64:                                     ; preds = %43
  br label %65

; <label>:65:                                     ; preds = %64, %61
  %66 = phi i32 [ %62, %61 ], [ %44, %64 ]
  %67 = phi i64 [ %63, %61 ], [ undef, %64 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19) #11
  call void @llvm.lifetime.end(i64 4096, i8* nonnull %18) #11
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %69, label %123

; <label>:69:                                     ; preds = %65
  %70 = icmp eq i64 %67, 0
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %69
  store i64 0, i64* %4, align 8
  br label %123

; <label>:72:                                     ; preds = %69
  %73 = load i8*, i8** %3, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %78, label %75

; <label>:75:                                     ; preds = %72
  %76 = load i64, i64* %4, align 8
  %77 = icmp ult i64 %76, %67
  br i1 %77, label %78, label %83

; <label>:78:                                     ; preds = %75, %72
  %79 = call noalias i8* @malloc(i64 %67) #11
  %80 = icmp eq i8* %79, null
  br i1 %80, label %81, label %83

; <label>:81:                                     ; preds = %78
  %82 = tail call i32* @__errno_location() #1
  store i32 12, i32* %82, align 4
  br label %123

; <label>:83:                                     ; preds = %75, %78
  %84 = phi i8* [ %79, %78 ], [ %73, %75 ]
  %85 = call i64 @iconv(i8* %2, i8** null, i64* null, i8** null, i64* null) #11
  %86 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %86) #11
  store i8* %0, i8** %13, align 8
  %87 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %87) #11
  store i64 %1, i64* %14, align 8
  %88 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %88) #11
  store i8* %84, i8** %15, align 8
  %89 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %89) #11
  store i64 %67, i64* %16, align 8
  %90 = icmp eq i64 %1, 0
  br i1 %90, label %106, label %91

; <label>:91:                                     ; preds = %83
  br label %92

; <label>:92:                                     ; preds = %91, %102
  %93 = call i64 @iconv(i8* %2, i8** nonnull %13, i64* nonnull %14, i8** nonnull %15, i64* nonnull %16) #11
  %94 = icmp eq i64 %93, -1
  br i1 %94, label %95, label %100

; <label>:95:                                     ; preds = %92
  %96 = tail call i32* @__errno_location() #1
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 22
  %99 = select i1 %98, i3 -3, i3 -2
  br label %100

; <label>:100:                                    ; preds = %92, %95
  %101 = phi i3 [ %99, %95 ], [ 0, %92 ]
  switch i3 %101, label %115 [
    i3 0, label %102
    i3 -3, label %105
  ]

; <label>:102:                                    ; preds = %100
  %103 = load i64, i64* %14, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %92

; <label>:105:                                    ; preds = %102, %100
  br label %106

; <label>:106:                                    ; preds = %105, %83
  %107 = call i64 @iconv(i8* %2, i8** null, i64* null, i8** nonnull %15, i64* nonnull %16) #11
  %108 = icmp eq i64 %107, -1
  br i1 %108, label %109, label %110

; <label>:109:                                    ; preds = %106
  call void @llvm.lifetime.end(i64 8, i8* nonnull %89) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %88) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %87) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %86) #11
  br label %117

; <label>:110:                                    ; preds = %106
  %111 = load i64, i64* %16, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %114

; <label>:113:                                    ; preds = %110
  call void @llvm.lifetime.end(i64 8, i8* nonnull %89) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %88) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %87) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %86) #11
  store i8* %84, i8** %3, align 8
  store i64 %67, i64* %4, align 8
  br label %123

; <label>:114:                                    ; preds = %110
  call void @abort() #16
  unreachable

; <label>:115:                                    ; preds = %100
  call void @llvm.lifetime.end(i64 8, i8* nonnull %89) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %88) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %87) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %86) #11
  %116 = icmp eq i3 %101, -2
  br i1 %116, label %117, label %123

; <label>:117:                                    ; preds = %115, %109
  %118 = load i8*, i8** %3, align 8
  %119 = icmp eq i8* %84, %118
  br i1 %119, label %123, label %120

; <label>:120:                                    ; preds = %117
  %121 = tail call i32* @__errno_location() #1
  %122 = load i32, i32* %121, align 4
  call void @free(i8* %84) #11
  store i32 %122, i32* %121, align 4
  br label %123

; <label>:123:                                    ; preds = %115, %120, %117, %65, %113, %81, %71
  %124 = phi i32 [ 0, %71 ], [ -1, %115 ], [ 0, %113 ], [ -1, %81 ], [ -1, %65 ], [ -1, %117 ], [ -1, %120 ]
  ret i32 %124
}

declare i64 @iconv(i8*, i8**, i64*, i8**, i64*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define i8* @str_cd_iconv(i8*, i8*) local_unnamed_addr #6 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7) #11
  store i8* %0, i8** %3, align 8
  %8 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #11
  %9 = tail call i64 @strlen(i8* %0) #15
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i64 %9, 268435456
  %11 = shl i64 %9, 4
  %12 = select i1 %10, i64 %11, i64 %9
  %13 = add i64 %12, 1
  %14 = tail call noalias i8* @malloc(i64 %13) #11
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %2
  %17 = tail call i32* @__errno_location() #1
  store i32 12, i32* %17, align 4
  br label %104

; <label>:18:                                     ; preds = %2
  %19 = tail call i64 @iconv(i8* %1, i8** null, i64* null, i8** null, i64* null) #11
  %20 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %20) #11
  store i8* %14, i8** %5, align 8
  %21 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21) #11
  store i64 %12, i64* %6, align 8
  %22 = call i64 @iconv(i8* %1, i8** nonnull %3, i64* nonnull %4, i8** nonnull %5, i64* nonnull %6) #11
  %23 = icmp eq i64 %22, -1
  br i1 %23, label %24, label %30

; <label>:24:                                     ; preds = %18
  %25 = tail call i32* @__errno_location() #1
  %26 = bitcast i8** %5 to i64*
  br label %40

; <label>:27:                                     ; preds = %40, %55
  %28 = phi i64 [ %42, %40 ], [ %48, %55 ]
  %29 = phi i8* [ %41, %40 ], [ %52, %55 ]
  br label %30

; <label>:30:                                     ; preds = %27, %18
  %31 = phi i64 [ %13, %18 ], [ %28, %27 ]
  %32 = phi i8* [ %14, %18 ], [ %29, %27 ]
  %33 = call i64 @iconv(i8* %1, i8** null, i64* null, i8** nonnull %5, i64* nonnull %6) #11
  %34 = icmp eq i64 %33, -1
  br i1 %34, label %37, label %35

; <label>:35:                                     ; preds = %30
  %36 = bitcast i8** %5 to i64*
  br label %84

; <label>:37:                                     ; preds = %30
  %38 = tail call i32* @__errno_location() #1
  %39 = bitcast i8** %5 to i64*
  br label %61

; <label>:40:                                     ; preds = %24, %55
  %41 = phi i8* [ %14, %24 ], [ %52, %55 ]
  %42 = phi i64 [ %13, %24 ], [ %48, %55 ]
  %43 = load i32, i32* %25, align 4
  switch i32 %43, label %99 [
    i32 22, label %27
    i32 7, label %44
  ]

; <label>:44:                                     ; preds = %40
  %45 = load i64, i64* %26, align 8
  %46 = ptrtoint i8* %41 to i64
  %47 = sub i64 %45, %46
  %48 = shl i64 %42, 1
  %49 = icmp ugt i64 %48, %42
  br i1 %49, label %51, label %50

; <label>:50:                                     ; preds = %44
  store i32 12, i32* %25, align 4
  br label %100

; <label>:51:                                     ; preds = %44
  %52 = call i8* @realloc(i8* nonnull %41, i64 %48) #11
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %51
  store i32 12, i32* %25, align 4
  br label %100

; <label>:55:                                     ; preds = %51
  %56 = getelementptr inbounds i8, i8* %52, i64 %47
  store i8* %56, i8** %5, align 8
  %57 = add i64 %48, -1
  %58 = sub i64 %57, %47
  store i64 %58, i64* %6, align 8
  %59 = call i64 @iconv(i8* %1, i8** nonnull %3, i64* nonnull %4, i8** nonnull %5, i64* nonnull %6) #11
  %60 = icmp eq i64 %59, -1
  br i1 %60, label %40, label %27

; <label>:61:                                     ; preds = %37, %77
  %62 = phi i8* [ %32, %37 ], [ %74, %77 ]
  %63 = phi i64 [ %31, %37 ], [ %70, %77 ]
  %64 = load i32, i32* %38, align 4
  %65 = icmp eq i32 %64, 7
  br i1 %65, label %66, label %98

; <label>:66:                                     ; preds = %61
  %67 = load i64, i64* %39, align 8
  %68 = ptrtoint i8* %62 to i64
  %69 = sub i64 %67, %68
  %70 = shl i64 %63, 1
  %71 = icmp ugt i64 %70, %63
  br i1 %71, label %73, label %72

; <label>:72:                                     ; preds = %66
  store i32 12, i32* %38, align 4
  br label %100

; <label>:73:                                     ; preds = %66
  %74 = call i8* @realloc(i8* nonnull %62, i64 %70) #11
  %75 = icmp eq i8* %74, null
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %73
  store i32 12, i32* %38, align 4
  br label %100

; <label>:77:                                     ; preds = %73
  %78 = getelementptr inbounds i8, i8* %74, i64 %69
  store i8* %78, i8** %5, align 8
  %79 = add i64 %70, -1
  %80 = sub i64 %79, %69
  store i64 %80, i64* %6, align 8
  %81 = call i64 @iconv(i8* %1, i8** null, i64* null, i8** nonnull %5, i64* nonnull %6) #11
  %82 = icmp eq i64 %81, -1
  br i1 %82, label %61, label %83

; <label>:83:                                     ; preds = %77
  br label %84

; <label>:84:                                     ; preds = %83, %35
  %85 = phi i64* [ %36, %35 ], [ %39, %83 ]
  %86 = phi i64 [ %31, %35 ], [ %70, %83 ]
  %87 = phi i8* [ %32, %35 ], [ %74, %83 ]
  %88 = load i8*, i8** %5, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  store i8* %89, i8** %5, align 8
  store i8 0, i8* %88, align 1
  %90 = load i64, i64* %85, align 8
  %91 = ptrtoint i8* %87 to i64
  %92 = sub i64 %90, %91
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #11
  %93 = icmp ult i64 %92, %86
  br i1 %93, label %94, label %104

; <label>:94:                                     ; preds = %84
  %95 = call i8* @realloc(i8* nonnull %87, i64 %92) #11
  %96 = icmp eq i8* %95, null
  %97 = select i1 %96, i8* %87, i8* %95
  br label %104

; <label>:98:                                     ; preds = %61
  br label %100

; <label>:99:                                     ; preds = %40
  br label %100

; <label>:100:                                    ; preds = %99, %98, %72, %76, %50, %54
  %101 = phi i32* [ %38, %72 ], [ %38, %76 ], [ %25, %50 ], [ %25, %54 ], [ %38, %98 ], [ %25, %99 ]
  %102 = phi i8* [ %62, %72 ], [ %62, %76 ], [ %41, %50 ], [ %41, %54 ], [ %62, %98 ], [ %41, %99 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #11
  %103 = load i32, i32* %101, align 4
  call void @free(i8* nonnull %102) #11
  store i32 %103, i32* %101, align 4
  br label %104

; <label>:104:                                    ; preds = %84, %94, %100, %16
  %105 = phi i8* [ null, %16 ], [ null, %100 ], [ %97, %94 ], [ %87, %84 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7) #11
  ret i8* %105
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @str_iconv(i8*, i8*, i8*) local_unnamed_addr #6 {
  %4 = load i8, i8* %0, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %3
  %7 = tail call i32 @c_strcasecmp(i8* %1, i8* %2) #15
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %6, %3
  %10 = tail call noalias i8* @__strdup(i8* nonnull %0) #11
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %30

; <label>:12:                                     ; preds = %9
  %13 = tail call i32* @__errno_location() #1
  store i32 12, i32* %13, align 4
  br label %30

; <label>:14:                                     ; preds = %6
  %15 = tail call i8* @iconv_open(i8* %2, i8* %1) #11
  %16 = icmp eq i8* %15, inttoptr (i64 -1 to i8*)
  br i1 %16, label %30, label %17

; <label>:17:                                     ; preds = %14
  %18 = tail call i8* @str_cd_iconv(i8* nonnull %0, i8* %15)
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %17
  %21 = tail call i32* @__errno_location() #1
  %22 = load i32, i32* %21, align 4
  %23 = tail call i32 @iconv_close(i8* %15) #11
  store i32 %22, i32* %21, align 4
  br label %30

; <label>:24:                                     ; preds = %17
  %25 = tail call i32 @iconv_close(i8* %15) #11
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %24
  %28 = tail call i32* @__errno_location() #1
  %29 = load i32, i32* %28, align 4
  tail call void @free(i8* nonnull %18) #11
  store i32 %29, i32* %28, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %14, %24, %20, %9, %12
  %31 = phi i8* [ null, %12 ], [ %10, %9 ], [ null, %27 ], [ null, %14 ], [ %18, %24 ], [ null, %20 ]
  ret i8* %31
}

declare i8* @iconv_open(i8*, i8*) local_unnamed_addr #3

declare i32 @iconv_close(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @strnlen1(i8*, i64) local_unnamed_addr #12 {
  %3 = tail call i8* @memchr(i8* %0, i32 0, i64 %1) #15
  %4 = icmp eq i8* %3, null
  %5 = ptrtoint i8* %3 to i64
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 1, %6
  %8 = add i64 %7, %5
  %9 = select i1 %4, i64 %1, i64 %8
  ret i64 %9
}

; Function Attrs: nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fclose(%struct._IO_FILE* nonnull) local_unnamed_addr #6 {
  %2 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #11
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %1
  %5 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  br label %24

; <label>:6:                                      ; preds = %1
  %7 = tail call i32 @__freading(%struct._IO_FILE* nonnull %0) #11
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %6
  %10 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #11
  %11 = tail call i64 @lseek(i32 %10, i64 0, i32 1) #11
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %9, %6
  %14 = tail call i32 @rpl_fflush(%struct._IO_FILE* nonnull %0) #11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %13, %9
  %17 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  br label %24

; <label>:18:                                     ; preds = %13
  %19 = tail call i32* @__errno_location() #1
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %18
  store i32 %20, i32* %19, align 4
  br label %24

; <label>:24:                                     ; preds = %16, %23, %18, %4
  %25 = phi i32 [ %5, %4 ], [ -1, %23 ], [ %21, %18 ], [ %17, %16 ]
  ret i32 %25
}

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__freading(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @lseek(i32, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fflush(%struct._IO_FILE*) local_unnamed_addr #6 {
  %2 = icmp eq %struct._IO_FILE* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = tail call i32 @__freading(%struct._IO_FILE* nonnull %0) #11
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %3, %1
  %7 = tail call i32 @fflush(%struct._IO_FILE* %0)
  br label %17

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 256
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %8
  %14 = tail call i32 @rpl_fseeko(%struct._IO_FILE* nonnull %0, i64 0, i32 1) #11
  br label %15

; <label>:15:                                     ; preds = %8, %13
  %16 = tail call i32 @fflush(%struct._IO_FILE* nonnull %0)
  br label %17

; <label>:17:                                     ; preds = %15, %6
  %18 = phi i32 [ %7, %6 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fseeko(%struct._IO_FILE* nocapture nonnull, i64, i32) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  br i1 %8, label %9, label %28

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 4
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %11, %13
  br i1 %14, label %15, label %28

; <label>:15:                                     ; preds = %9
  %16 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 9
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %15
  %20 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #11
  %21 = tail call i64 @lseek(i32 %20, i64 %1, i32 %2) #11
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, -17
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 21
  store i64 %21, i64* %27, align 8
  br label %30

; <label>:28:                                     ; preds = %15, %9, %3
  %29 = tail call i32 @fseeko(%struct._IO_FILE* nonnull %0, i64 %1, i32 %2)
  br label %30

; <label>:30:                                     ; preds = %23, %19, %28
  %31 = phi i32 [ %29, %28 ], [ 0, %23 ], [ -1, %19 ]
  ret i32 %31
}

; Function Attrs: nounwind
declare i32 @fseeko(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i8* @mmalloca(i64) local_unnamed_addr #6 {
  %2 = icmp ult i64 %0, -16
  br i1 %2, label %3, label %17

; <label>:3:                                      ; preds = %1
  %4 = add i64 %0, 16
  %5 = tail call noalias i8* @malloc(i64 %4) #11
  %6 = icmp eq i8* %5, null
  br i1 %6, label %17, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds i8, i8* %5, i64 16
  %9 = getelementptr inbounds i8, i8* %5, i64 12
  %10 = bitcast i8* %9 to i32*
  store i32 336984906, i32* %10, align 4
  %11 = ptrtoint i8* %8 to i64
  %12 = urem i64 %11, 257
  %13 = getelementptr inbounds [257 x i8*], [257 x i8*]* @mmalloca_results, i64 0, i64 %12
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast i8* %5 to i64*
  store i64 %15, i64* %16, align 8
  store i8* %8, i8** %13, align 8
  br label %17

; <label>:17:                                     ; preds = %3, %1, %7
  %18 = phi i8* [ %8, %7 ], [ null, %1 ], [ null, %3 ]
  ret i8* %18
}

; Function Attrs: nounwind sspstrong uwtable
define void @freea(i8*) local_unnamed_addr #6 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %30, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 -4
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 336984906
  br i1 %7, label %8, label %30

; <label>:8:                                      ; preds = %3
  %9 = ptrtoint i8* %0 to i64
  %10 = urem i64 %9, 257
  %11 = getelementptr inbounds [257 x i8*], [257 x i8*]* @mmalloca_results, i64 0, i64 %10
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %30, label %14

; <label>:14:                                     ; preds = %8
  br label %15

; <label>:15:                                     ; preds = %14, %19
  %16 = phi i8* [ %22, %19 ], [ %12, %14 ]
  %17 = phi i8** [ %21, %19 ], [ %11, %14 ]
  %18 = icmp eq i8* %16, %0
  br i1 %18, label %24, label %19

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds i8, i8* %16, i64 -16
  %21 = bitcast i8* %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %29, label %15

; <label>:24:                                     ; preds = %15
  %25 = getelementptr inbounds i8, i8* %0, i64 -16
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast i8** %17 to i64*
  store i64 %27, i64* %28, align 8
  tail call void @free(i8* %25) #11
  br label %30

; <label>:29:                                     ; preds = %19
  br label %30

; <label>:30:                                     ; preds = %29, %8, %24, %3, %1
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define i32 @mb_width_aux(i32) local_unnamed_addr #13 {
  %2 = tail call i32 @wcwidth(i32 %0) #11
  %3 = icmp sgt i32 %2, -1
  br i1 %3, label %8, label %4

; <label>:4:                                      ; preds = %1
  %5 = tail call i32 @iswcntrl(i32 %0) #11
  %6 = icmp eq i32 %5, 0
  %7 = zext i1 %6 to i32
  br label %8

; <label>:8:                                      ; preds = %1, %4
  %9 = phi i32 [ %7, %4 ], [ %2, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind
declare i32 @wcwidth(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @iswcntrl(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind sspstrong uwtable
define void @mb_copy(%struct.mbchar*, %struct.mbchar* readonly) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 4, i64 0
  %6 = icmp eq i8* %4, %5
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 1
  br label %13

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i64 0, i32 4, i64 0
  %11 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %4, i64 %12, i32 8, i1 false)
  br label %13

; <label>:13:                                     ; preds = %7, %9
  %14 = phi i64* [ %8, %7 ], [ %11, %9 ]
  %15 = phi i8* [ %4, %7 ], [ %10, %9 ]
  %16 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i64 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = load i64, i64* %14, align 8
  %18 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i64 0, i32 1
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 2
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, 0
  %22 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i64 0, i32 2
  store i8 %20, i8* %22, align 8
  br i1 %21, label %27, label %23

; <label>:23:                                     ; preds = %13
  %24 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i64 0, i32 3
  store i32 %25, i32* %26, align 4
  br label %27

; <label>:27:                                     ; preds = %13, %23
  ret void
}

; Function Attrs: inlinehint nounwind readnone sspstrong uwtable
define zeroext i1 @is_basic(i8 signext) local_unnamed_addr #14 {
  %2 = zext i8 %0 to i32
  %3 = lshr i32 %2, 5
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [8 x i32], [8 x i32]* @is_basic_table, i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %2, 31
  %8 = shl i32 1, %7
  %9 = and i32 %6, %8
  %10 = icmp ne i32 %9, 0
  ret i1 %10
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @mbslen(i8* nonnull) local_unnamed_addr #12 {
  %2 = alloca %struct.mbuiter_multi, align 8
  %3 = tail call i64 @__ctype_get_mb_cur_max() #11
  %4 = icmp ugt i64 %3, 1
  br i1 %4, label %5, label %34

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 0
  call void @llvm.lifetime.start(i64 64, i8* nonnull %6) #11
  %7 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 3, i32 0
  store i8* %0, i8** %7, align 8
  store i8 0, i8* %6, align 8
  %8 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 1
  %9 = bitcast %struct.__mbstate_t* %8 to i64*
  store i64 0, i64* %9, align 4
  %10 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 2
  store i8 0, i8* %10, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %2)
  %11 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 3, i32 2
  %12 = load i8, i8* %11, align 8
  %13 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 3, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i8 %12, 0
  %16 = icmp ne i32 %14, 0
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %32

; <label>:18:                                     ; preds = %5
  %19 = getelementptr inbounds %struct.mbuiter_multi, %struct.mbuiter_multi* %2, i64 0, i32 3, i32 1
  br label %20

; <label>:20:                                     ; preds = %18, %20
  %21 = phi i64 [ 0, %18 ], [ %22, %20 ]
  %22 = add i64 %21, 1
  %23 = load i64, i64* %19, align 8
  %24 = load i8*, i8** %7, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %23
  store i8* %25, i8** %7, align 8
  store i8 0, i8* %10, align 4
  call void @mbuiter_multi_next(%struct.mbuiter_multi* nonnull %2)
  %26 = load i8, i8* %11, align 8
  %27 = load i32, i32* %13, align 4
  %28 = icmp eq i8 %26, 0
  %29 = icmp ne i32 %27, 0
  %30 = or i1 %28, %29
  br i1 %30, label %20, label %31

; <label>:31:                                     ; preds = %20
  br label %32

; <label>:32:                                     ; preds = %31, %5
  %33 = phi i64 [ 0, %5 ], [ %22, %31 ]
  call void @llvm.lifetime.end(i64 64, i8* nonnull %6) #11
  br label %36

; <label>:34:                                     ; preds = %1
  %35 = tail call i64 @strlen(i8* nonnull %0) #15
  br label %36

; <label>:36:                                     ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %35, %34 ]
  ret i64 %37
}

attributes #0 = { noreturn nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { inlinehint nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint nounwind readnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind readonly }
attributes #16 = { noreturn nounwind }
attributes #17 = { noreturn }
attributes #18 = { cold }
