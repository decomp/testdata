; ModuleID = 'coreutils-8.27/src/dir.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pending = type { i8*, i8*, i8, %struct.pending* }
%struct.timespec = type { i64, i64 }
%struct.ignore_pattern = type { i8*, %struct.ignore_pattern* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.color_ext_type = type { %struct.bin_str, %struct.bin_str, %struct.color_ext_type* }
%struct.bin_str = type { i64, i8* }
%struct.hash_table = type { %struct.hash_entry*, %struct.hash_entry*, i64, i64, i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*, %struct.hash_entry* }
%struct.hash_tuning = type { float, float, float, float, i8 }
%struct.hash_entry = type { i8*, %struct.hash_entry* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, %union.anon, i64, %union.anon.0, %union.anon.1, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [0 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i8* (i64)* }
%union.anon.1 = type { void (i8*)* }
%struct.tm_zone = type { %struct.tm_zone*, i8, [0 x i8] }
%struct.fileinfo = type { i8*, i8*, %struct.stat, i32, i32, i8*, i8, i8, i32, i8, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.__sigset_t = type { [16 x i64] }
%struct.column_info = type { i8, i64, i64* }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.infomap = type { i8*, i8* }
%struct.userid = type { %union.anon.11, %struct.userid*, [0 x i8] }
%union.anon.11 = type { i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct._cap_struct = type opaque
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.sigaction = type { %union.anon.2, %struct.__sigset_t, i32, void ()* }
%union.anon.2 = type { void (i32)* }
%struct.__mbstate_t = type { i32, %union.anon.11 }
%struct.timezone = type { i32, i32 }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@exit_status = internal unnamed_addr global i32 0, align 4
@print_dir_name = internal unnamed_addr global i1 false, align 1
@pending_dirs = internal unnamed_addr global %struct.pending* null, align 8
@current_time = internal global %struct.timespec zeroinitializer, align 16
@qmark_funny_chars = internal unnamed_addr global i8 0, align 1
@format = internal unnamed_addr global i32 0, align 4
@time_type = internal unnamed_addr global i32 0, align 4
@sort_type = internal unnamed_addr global i32 0, align 4
@sort_reverse = internal unnamed_addr global i1 false, align 1
@numeric_ids = internal unnamed_addr global i1 false, align 1
@print_block_size = internal unnamed_addr global i1 false, align 1
@indicator_style = internal unnamed_addr global i32 0, align 4
@print_inode = internal unnamed_addr global i1 false, align 1
@dereference = internal unnamed_addr global i32 0, align 4
@recursive = internal unnamed_addr global i1 false, align 1
@immediate_dirs = internal unnamed_addr global i1 false, align 1
@ignore_mode = internal unnamed_addr global i32 0, align 4
@ignore_patterns = internal unnamed_addr global %struct.ignore_pattern* null, align 8
@hide_patterns = internal unnamed_addr global %struct.ignore_pattern* null, align 8
@print_scontext = internal unnamed_addr global i1 false, align 1
@.str.92 = private unnamed_addr constant [14 x i8] c"QUOTING_STYLE\00", align 1
@.str.93 = private unnamed_addr constant [65 x i8] c"ignoring invalid value of environment variable QUOTING_STYLE: %s\00", align 1
@line_length = internal unnamed_addr global i64 0, align 8
@.str.58 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@.str.59 = private unnamed_addr constant [59 x i8] c"ignoring invalid width in environment variable COLUMNS: %s\00", align 1
@.str.60 = private unnamed_addr constant [8 x i8] c"TABSIZE\00", align 1
@tabsize = internal unnamed_addr global i64 0, align 8
@.str.61 = private unnamed_addr constant [62 x i8] c"ignoring invalid tab size in environment variable TABSIZE: %s\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\00", align 1
@long_options = internal constant [43 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0), i32 0, i32* null, i32 68 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i32 0, i32* null, i32 134 }, %struct.option { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.99, i32 0, i32 0), i32 0, i32* null, i32 135 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.100, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.101, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.102, i32 0, i32 0), i32 0, i32* null, i32 107 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.103, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.104, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.105, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i32 0, i32 0), i32 1, i32* null, i32 119 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.109, i32 0, i32 0), i32 0, i32* null, i32 65 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.110, i32 0, i32 0), i32 0, i32* null, i32 66 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111, i32 0, i32 0), i32 0, i32* null, i32 70 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i32 0, i32 0), i32 0, i32* null, i32 132 }, %struct.option { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.113, i32 0, i32 0), i32 0, i32* null, i32 140 }, %struct.option { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.114, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.115, i32 0, i32 0), i32 0, i32* null, i32 131 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.116, i32 0, i32 0), i32 1, i32* null, i32 136 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0), i32 1, i32* null, i32 73 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.118, i32 0, i32 0), i32 1, i32* null, i32 137 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.119, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.121, i32 0, i32 0), i32 0, i32* null, i32 81 }, %struct.option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.122, i32 0, i32 0), i32 1, i32* null, i32 138 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.123, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.124, i32 0, i32 0), i32 1, i32* null, i32 133 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i32 0, i32* null, i32 139 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.126, i32 0, i32 0), i32 1, i32* null, i32 141 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.127, i32 0, i32 0), i32 1, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.128, i32 0, i32 0), i32 1, i32* null, i32 142 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.129, i32 0, i32 0), i32 1, i32* null, i32 143 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.130, i32 0, i32 0), i32 2, i32* null, i32 130 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131, i32 0, i32 0), i32 1, i32* null, i32 129 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.133, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16
@print_with_color = internal unnamed_addr global i8 0, align 1
@print_owner = internal unnamed_addr global i1 false, align 1
@human_output_opts = internal global i32 0, align 4
@file_human_output_opts = internal unnamed_addr global i32 0, align 4
@output_block_size = internal global i64 0, align 8
@file_output_block_size = internal unnamed_addr global i64 1, align 8
@print_group = internal unnamed_addr global i1 false, align 1
@optarg = external local_unnamed_addr global i8*, align 8
@.str.64 = private unnamed_addr constant [19 x i8] c"invalid line width\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"*~\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c".*~\00", align 1
@dired = internal unnamed_addr global i1 false, align 1
@.str.67 = private unnamed_addr constant [17 x i8] c"invalid tab size\00", align 1
@print_author = internal unnamed_addr global i1 false, align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@sort_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* null], align 16
@sort_types = internal constant [5 x i32] [i32 -1, i32 4, i32 2, i32 1, i32 3], align 16
@directories_first = internal unnamed_addr global i1 false, align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"--time\00", align 1
@time_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.142, i32 0, i32 0), i8* null], align 16
@time_types = internal constant [5 x i32] [i32 2, i32 2, i32 2, i32 1, i32 1], align 16
@.str.70 = private unnamed_addr constant [9 x i8] c"--format\00", align 1
@format_args = internal constant [8 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.149, i32 0, i32 0), i8* null], align 16
@format_types = internal constant [7 x i32] [i32 0, i32 0, i32 4, i32 3, i32 3, i32 2, i32 1], align 16
@.str.71 = private unnamed_addr constant [9 x i8] c"full-iso\00", align 1
@.str.72 = private unnamed_addr constant [8 x i8] c"--color\00", align 1
@color_args = internal constant [10 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0), i8* null], align 16
@color_types = internal constant [9 x i32] [i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2], align 16
@.str.73 = private unnamed_addr constant [18 x i8] c"--indicator-style\00", align 1
@indicator_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111, i32 0, i32 0), i8* null], align 16
@indicator_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16
@.str.74 = private unnamed_addr constant [16 x i8] c"--quoting-style\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.38 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"vdir\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"ls\00", align 1
@.str.75 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.76 = private unnamed_addr constant [20 x i8] c"Richard M. Stallman\00", align 1
@.str.77 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.78 = private unnamed_addr constant [14 x i8] c"LS_BLOCK_SIZE\00", align 1
@.str.79 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@max_idx = internal unnamed_addr global i64 0, align 8
@align_variable_outer_quotes = internal unnamed_addr global i8 0, align 1
@filename_quoting_options = internal unnamed_addr global %struct.quoting_options* null, align 8
@.str.80 = private unnamed_addr constant [6 x i8] c"*=>@|\00", align 1
@dirname_quoting_options = internal unnamed_addr global %struct.quoting_options* null, align 8
@.str.81 = private unnamed_addr constant [11 x i8] c"TIME_STYLE\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@decode_switches.posix_prefix = internal constant [7 x i8] c"posix-\00", align 1
@.str.83 = private unnamed_addr constant [29 x i8] c"invalid time style format %s\00", align 1
@long_time_format = internal unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160, i32 0, i32 0)], align 16
@time_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i8* null], align 16
@time_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16
@.str.84 = private unnamed_addr constant [11 x i8] c"time style\00", align 1
@.str.85 = private unnamed_addr constant [22 x i8] c"Valid arguments are:\0A\00", align 1
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.86 = private unnamed_addr constant [16 x i8] c"  - [posix-]%s\0A\00", align 1
@.str.161 = private unnamed_addr constant [9 x i8] c"long-iso\00", align 1
@.str.162 = private unnamed_addr constant [4 x i8] c"iso\00", align 1
@.str.87 = private unnamed_addr constant [54 x i8] c"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\0A\00", align 1
@.str.88 = private unnamed_addr constant [24 x i8] c"%Y-%m-%d %H:%M:%S.%N %z\00", align 1
@.str.89 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@.str.90 = private unnamed_addr constant [10 x i8] c"%Y-%m-%d \00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"%m-%d %H:%M\00", align 1
@abformat = internal global [2 x [12 x [128 x i8]]] zeroinitializer, align 16
@.str.163 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.164 = private unnamed_addr constant [9 x i8] c"%.*s%s%s\00", align 1
@use_abformat = internal unnamed_addr global i1 false, align 1
@optind = external local_unnamed_addr global i32, align 4
@.str.165 = private unnamed_addr constant [10 x i8] c"LS_COLORS\00", align 1
@.str.166 = private unnamed_addr constant [10 x i8] c"COLORTERM\00", align 1
@.str.171 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@G_line = internal constant [4173 x i8] c"# Configuration file for dircolors, a utility to help you set the\00# LS_COLORS environment variable used by GNU ls with the --color option.\00# Copyright (C) 1996-2017 Free Software Foundation, Inc.\00# Copying and distribution of this file, with or without modification,\00# are permitted provided the copyright notice and this notice are preserved.\00# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the\00# slackware version of dircolors) are recognized but ignored.\00# Below are TERM entries, which can be a glob patterns, to match\00# against the TERM environment variable to determine if it is colorizable.\00TERM Eterm\00TERM ansi\00TERM *color*\00TERM con[0-9]*x[0-9]*\00TERM cons25\00TERM console\00TERM cygwin\00TERM dtterm\00TERM gnome\00TERM hurd\00TERM jfbterm\00TERM konsole\00TERM kterm\00TERM linux\00TERM linux-c\00TERM mlterm\00TERM putty\00TERM rxvt*\00TERM screen*\00TERM st\00TERM terminator\00TERM tmux*\00TERM vt100\00TERM xterm*\00# Below are the color init strings for the basic file types. A color init\00# string consists of one or more of the following numeric codes:\00# Attribute codes:\00# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed\00# Text color codes:\00# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white\00# Background color codes:\00# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white\00#NORMAL 00 # no color code at all\00#FILE 00 # regular file: use no color at all\00RESET 0 # reset to \22normal\22 color\00DIR 01;34 # directory\00LINK 01;36 # symbolic link. (If you set this to 'target' instead of a\00 # numerical value, the color is as for the file pointed to.)\00MULTIHARDLINK 00 # regular file with more than one link\00FIFO 40;33 # pipe\00SOCK 01;35 # socket\00DOOR 01;35 # door\00BLK 40;33;01 # block device driver\00CHR 40;33;01 # character device driver\00ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat'able file ...\00MISSING 00 # ... and the files they point to\00SETUID 37;41 # file that is setuid (u+s)\00SETGID 30;43 # file that is setgid (g+s)\00CAPABILITY 30;41 # file with capability\00STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writable (+t,o+w)\00OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not sticky\00STICKY 37;44 # dir with the sticky bit set (+t) and not other-writable\00# This is for files with execute permission:\00EXEC 01;32\00# List any file extensions like '.gz' or '.tar' that you would like ls\00# to colorize below. Put the extension, a space, and the color init string.\00# (and any comments you want to add after a '#')\00# If you use DOS-style suffixes, you may want to uncomment the following:\00#.cmd 01;32 # executables (bright green)\00#.exe 01;32\00#.com 01;32\00#.btm 01;32\00#.bat 01;32\00# Or if you want to colorize scripts even if they do not have the\00# executable bit actually set.\00#.sh 01;32\00#.csh 01;32\00 # archives or compressed (bright red)\00.tar 01;31\00.tgz 01;31\00.arc 01;31\00.arj 01;31\00.taz 01;31\00.lha 01;31\00.lz4 01;31\00.lzh 01;31\00.lzma 01;31\00.tlz 01;31\00.txz 01;31\00.tzo 01;31\00.t7z 01;31\00.zip 01;31\00.z 01;31\00.Z 01;31\00.dz 01;31\00.gz 01;31\00.lrz 01;31\00.lz 01;31\00.lzo 01;31\00.xz 01;31\00.zst 01;31\00.tzst 01;31\00.bz2 01;31\00.bz 01;31\00.tbz 01;31\00.tbz2 01;31\00.tz 01;31\00.deb 01;31\00.rpm 01;31\00.jar 01;31\00.war 01;31\00.ear 01;31\00.sar 01;31\00.rar 01;31\00.alz 01;31\00.ace 01;31\00.zoo 01;31\00.cpio 01;31\00.7z 01;31\00.rz 01;31\00.cab 01;31\00.wim 01;31\00.swm 01;31\00.dwm 01;31\00.esd 01;31\00# image formats\00.jpg 01;35\00.jpeg 01;35\00.mjpg 01;35\00.mjpeg 01;35\00.gif 01;35\00.bmp 01;35\00.pbm 01;35\00.pgm 01;35\00.ppm 01;35\00.tga 01;35\00.xbm 01;35\00.xpm 01;35\00.tif 01;35\00.tiff 01;35\00.png 01;35\00.svg 01;35\00.svgz 01;35\00.mng 01;35\00.pcx 01;35\00.mov 01;35\00.mpg 01;35\00.mpeg 01;35\00.m2v 01;35\00.mkv 01;35\00.webm 01;35\00.ogm 01;35\00.mp4 01;35\00.m4v 01;35\00.mp4v 01;35\00.vob 01;35\00.qt 01;35\00.nuv 01;35\00.wmv 01;35\00.asf 01;35\00.rm 01;35\00.rmvb 01;35\00.flc 01;35\00.avi 01;35\00.fli 01;35\00.flv 01;35\00.gl 01;35\00.dl 01;35\00.xcf 01;35\00.xwd 01;35\00.yuv 01;35\00.cgm 01;35\00.emf 01;35\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.ogv 01;35\00.ogx 01;35\00# audio formats\00.aac 00;36\00.au 00;36\00.flac 00;36\00.m4a 00;36\00.mid 00;36\00.midi 00;36\00.mka 00;36\00.mp3 00;36\00.mpc 00;36\00.ogg 00;36\00.ra 00;36\00.wav 00;36\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.oga 00;36\00.opus 00;36\00.spx 00;36\00.xspf 00;36\00", align 16
@.str.172 = private unnamed_addr constant [6 x i8] c"TERM \00", align 1
@.str.167 = private unnamed_addr constant [3 x i8] c"??\00", align 1
@color_buf = internal unnamed_addr global i8* null, align 8
@color_ext_list = internal unnamed_addr global %struct.color_ext_type* null, align 8
@indicator_name = internal unnamed_addr constant [25 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.195, i32 0, i32 0), i8* null], align 16
@color_indicator = internal global [24 x %struct.bin_str] [%struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0) }, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.43, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0) }, %struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i32 0, i32 0) }], align 16
@.str.168 = private unnamed_addr constant [24 x i8] c"unrecognized prefix: %s\00", align 1
@.str.169 = private unnamed_addr constant [52 x i8] c"unparsable value for LS_COLORS environment variable\00", align 1
@.str.170 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@color_symlink_as_referent = internal unnamed_addr global i1 false, align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@check_symlink_color = internal unnamed_addr global i1 false, align 1
@active_dir_set = internal unnamed_addr global %struct.hash_table* null, align 8
@dev_ino_obstack = internal global %struct.obstack zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@localtz = internal unnamed_addr global %struct.tm_zone* null, align 8
@format_needs_stat = internal unnamed_addr global i8 0, align 1
@format_needs_type = internal unnamed_addr global i8 0, align 1
@dired_obstack = internal global %struct.obstack zeroinitializer, align 8
@subdired_obstack = internal global %struct.obstack zeroinitializer, align 8
@cwd_n_alloc = internal unnamed_addr global i64 0, align 8
@cwd_file = internal unnamed_addr global %struct.fileinfo* null, align 8
@cwd_n_used = internal unnamed_addr global i64 0, align 8
@cwd_some_quoted = internal unnamed_addr global i1 false, align 1
@any_has_acl = internal unnamed_addr global i8 0, align 1
@inode_number_width = internal unnamed_addr global i32 0, align 4
@block_size_width = internal unnamed_addr global i32 0, align 4
@nlink_width = internal unnamed_addr global i32 0, align 4
@owner_width = internal unnamed_addr global i32 0, align 4
@group_width = internal unnamed_addr global i32 0, align 4
@author_width = internal unnamed_addr global i32 0, align 4
@scontext_width = internal unnamed_addr global i32 0, align 4
@major_device_number_width = internal unnamed_addr global i32 0, align 4
@minor_device_number_width = internal unnamed_addr global i32 0, align 4
@file_size_width = internal unnamed_addr global i32 0, align 4
@.str.4 = private unnamed_addr constant [2 x i8] c".\00", align 1
@dired_pos = internal unnamed_addr global i64 0, align 8
@.str.42 = private unnamed_addr constant [55 x i8] c"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"src/ls.c\00", align 1
@__PRETTY_FUNCTION__.dev_ino_pop = private unnamed_addr constant [33 x i8] c"struct dev_ino dev_ino_pop(void)\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"found\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1
@.str.196 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.197 = private unnamed_addr constant [40 x i8] c"cannot determine device and inode of %s\00", align 1
@.str.198 = private unnamed_addr constant [41 x i8] c"%s: not listing already-listed directory\00", align 1
@sorted_file = internal unnamed_addr global i8** null, align 8
@print_dir.first = internal unnamed_addr global i1 false, align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.200 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@switch.table = private unnamed_addr constant [14 x i32] [i32 1, i32 2, i32 0, i32 3, i32 0, i32 4, i32 0, i32 5, i32 0, i32 6, i32 0, i32 7, i32 0, i32 8]
@.str.201 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.202 = private unnamed_addr constant [21 x i8] c"closing directory %s\00", align 1
@.str.203 = private unnamed_addr constant [6 x i8] c"total\00", align 1
@used_color = internal unnamed_addr global i1 false, align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\1B[\00", align 1
@caught_signals = internal global %struct.__sigset_t zeroinitializer, align 8
@stop_signal_count = internal global i32 0, align 4
@interrupt_signal = internal global i32 0, align 4
@.str.8 = private unnamed_addr constant [10 x i8] c"//DIRED//\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"//SUBDIRED//\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"//DIRED-OPTIONS// --quoting-style=%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"hash_get_n_entries (active_dir_set) == 0\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c" %lu\00", align 1
@signal_setup.sig = internal unnamed_addr constant [12 x i32] [i32 20, i32 14, i32 1, i32 2, i32 13, i32 3, i32 15, i32 29, i32 27, i32 26, i32 24, i32 25], align 16
@column_info = internal unnamed_addr global %struct.column_info* null, align 8
@filetype_letter = internal unnamed_addr constant [11 x i8] c"?pcdb-lswd\00", align 1
@.str.213 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.212 = private unnamed_addr constant [5 x i8] c"%*s \00", align 1
@.str.215 = private unnamed_addr constant [8 x i8] c"%s %*s \00", align 1
@.str.216 = private unnamed_addr constant [10 x i8] c"%*s, %*s \00", align 1
@long_time_expected_width.width = internal unnamed_addr global i32 -1, align 4
@.str.217 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@get_color_indicator.filetype_indicator = internal unnamed_addr constant [10 x i32] [i32 13, i32 8, i32 11, i32 6, i32 10, i32 5, i32 7, i32 9, i32 5, i32 6], align 16
@.str.218 = private unnamed_addr constant [6 x i8] c"%*lu \00", align 1
@init_column_info.column_info_alloc = internal unnamed_addr global i64 0, align 8
@sorted_file_alloc = internal unnamed_addr global i64 0, align 8
@failed_strcoll = internal global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@.str.210 = private unnamed_addr constant [26 x i8] c"sort_type != sort_version\00", align 1
@__PRETTY_FUNCTION__.sort_files = private unnamed_addr constant [22 x i8] c"void sort_files(void)\00", align 1
@sort_functions = internal unnamed_addr constant [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]] [[2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_name, i32 (i8*, i8*)* @xstrcoll_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_name, i32 (i8*, i8*)* @rev_xstrcoll_df_name]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_name, i32 (i8*, i8*)* @strcmp_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_name, i32 (i8*, i8*)* @rev_strcmp_df_name]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_extension, i32 (i8*, i8*)* @xstrcoll_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_extension, i32 (i8*, i8*)* @rev_xstrcoll_df_extension]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_extension, i32 (i8*, i8*)* @strcmp_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_extension, i32 (i8*, i8*)* @rev_strcmp_df_extension]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_size, i32 (i8*, i8*)* @xstrcoll_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_size, i32 (i8*, i8*)* @rev_xstrcoll_df_size]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_size, i32 (i8*, i8*)* @strcmp_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_size, i32 (i8*, i8*)* @rev_strcmp_df_size]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_version, i32 (i8*, i8*)* @xstrcoll_df_version], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_version, i32 (i8*, i8*)* @rev_xstrcoll_df_version]], [2 x [2 x i32 (i8*, i8*)*]] zeroinitializer], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_mtime, i32 (i8*, i8*)* @xstrcoll_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_mtime, i32 (i8*, i8*)* @rev_xstrcoll_df_mtime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_mtime, i32 (i8*, i8*)* @strcmp_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_mtime, i32 (i8*, i8*)* @rev_strcmp_df_mtime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_ctime, i32 (i8*, i8*)* @xstrcoll_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_ctime, i32 (i8*, i8*)* @rev_xstrcoll_df_ctime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_ctime, i32 (i8*, i8*)* @strcmp_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_ctime, i32 (i8*, i8*)* @rev_strcmp_df_ctime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_atime, i32 (i8*, i8*)* @xstrcoll_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_atime, i32 (i8*, i8*)* @rev_xstrcoll_df_atime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_atime, i32 (i8*, i8*)* @strcmp_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_atime, i32 (i8*, i8*)* @rev_strcmp_df_atime]]]], align 16
@.str.205 = private unnamed_addr constant [17 x i8] c"cannot access %s\00", align 1
@has_capability_cache.unsupported_device = internal unnamed_addr global i64 0, align 8
@getfilecon_cache.unsupported_device = internal unnamed_addr global i64 0, align 8
@UNKNOWN_SECURITY_CONTEXT = internal global [2 x i8] c"?\00", align 1
@file_has_acl_cache.unsupported_device = internal unnamed_addr global i64 0, align 8
@.str.208 = private unnamed_addr constant [29 x i8] c"cannot read symbolic link %s\00", align 1
@.str.209 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.43 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"01;34\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"01;36\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"01;35\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"01;33\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"01;32\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"37;41\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"30;43\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"37;44\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"34;42\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"30;42\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"30;41\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c"\1B[K\00", align 1
@.str.173 = private unnamed_addr constant [3 x i8] c"lc\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"rc\00", align 1
@.str.175 = private unnamed_addr constant [3 x i8] c"ec\00", align 1
@.str.176 = private unnamed_addr constant [3 x i8] c"rs\00", align 1
@.str.154 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.177 = private unnamed_addr constant [3 x i8] c"fi\00", align 1
@.str.178 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.179 = private unnamed_addr constant [3 x i8] c"ln\00", align 1
@.str.180 = private unnamed_addr constant [3 x i8] c"pi\00", align 1
@.str.181 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.182 = private unnamed_addr constant [3 x i8] c"bd\00", align 1
@.str.183 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.184 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.185 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@.str.186 = private unnamed_addr constant [3 x i8] c"ex\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@.str.188 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.189 = private unnamed_addr constant [3 x i8] c"sg\00", align 1
@.str.190 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.191 = private unnamed_addr constant [3 x i8] c"ow\00", align 1
@.str.192 = private unnamed_addr constant [3 x i8] c"tw\00", align 1
@.str.193 = private unnamed_addr constant [3 x i8] c"ca\00", align 1
@.str.194 = private unnamed_addr constant [3 x i8] c"mh\00", align 1
@.str.195 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.159 = private unnamed_addr constant [10 x i8] c"%b %e  %Y\00", align 1
@.str.160 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [FILE]...\0A\00", align 1
@.str.14 = private unnamed_addr constant [144 x i8] c"List information about the FILEs (the current directory by default).\0ASort entries alphabetically if none of -cftuvSUX nor --sort is specified.\0A\00", align 1
@.str.219 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.15 = private unnamed_addr constant [271 x i8] c"  -a, --all                  do not ignore entries starting with .\0A  -A, --almost-all           do not list implied . and ..\0A      --author               with -l, print the author of each file\0A  -b, --escape               print C-style escapes for nongraphic characters\0A\00", align 1
@.str.16 = private unnamed_addr constant [582 x i8] c"      --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,\0A                               '--block-size=M' prints sizes in units of\0A                               1,048,576 bytes; see SIZE format below\0A  -B, --ignore-backups       do not list implied entries ending with ~\0A  -c                         with -lt: sort by, and show, ctime (time of last\0A                               modification of file status information);\0A                               with -l: show ctime and sort by name;\0A                               otherwise: sort by ctime, newest first\0A\00", align 1
@.str.17 = private unnamed_addr constant [367 x i8] c"  -C                         list entries by columns\0A      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\0A                               if omitted), 'auto', or 'never'; more info below\0A  -d, --directory            list directories themselves, not their contents\0A  -D, --dired                generate output designed for Emacs' dired mode\0A\00", align 1
@.str.18 = private unnamed_addr constant [419 x i8] c"  -f                         do not sort, enable -aU, disable -ls --color\0A  -F, --classify             append indicator (one of */=>@|) to entries\0A      --file-type            likewise, except do not append '*'\0A      --format=WORD          across -x, commas -m, horizontal -x, long -l,\0A                               single-column -1, verbose -l, vertical -C\0A      --full-time            like -l --time-style=full-iso\0A\00", align 1
@.str.19 = private unnamed_addr constant [61 x i8] c"  -g                         like -l, but do not list owner\0A\00", align 1
@.str.20 = private unnamed_addr constant [245 x i8] c"      --group-directories-first\0A                             group directories before files;\0A                               can be augmented with a --sort option, but any\0A                               use of --sort=none (-U) disables grouping\0A\00", align 1
@.str.21 = private unnamed_addr constant [269 x i8] c"  -G, --no-group             in a long listing, don't print group names\0A  -h, --human-readable       with -l and/or -s, print human readable sizes\0A                               (e.g., 1K 234M 2G)\0A      --si                   likewise, but use powers of 1000 not 1024\0A\00", align 1
@.str.22 = private unnamed_addr constant [422 x i8] c"  -H, --dereference-command-line\0A                             follow symbolic links listed on the command line\0A      --dereference-command-line-symlink-to-dir\0A                             follow each command line symbolic link\0A                               that points to a directory\0A      --hide=PATTERN         do not list implied entries matching shell PATTERN\0A                               (overridden by -a or -A)\0A\00", align 1
@.str.23 = private unnamed_addr constant [426 x i8] c"      --indicator-style=WORD  append indicator with style WORD to entry names:\0A                               none (default), slash (-p),\0A                               file-type (--file-type), classify (-F)\0A  -i, --inode                print the index number of each file\0A  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\0A  -k, --kibibytes            default to 1024-byte blocks for disk usage\0A\00", align 1
@.str.24 = private unnamed_addr constant [359 x i8] c"  -l                         use a long listing format\0A  -L, --dereference          when showing file information for a symbolic\0A                               link, show information for the file the link\0A                               references rather than for the link itself\0A  -m                         fill width with a comma separated list of entries\0A\00", align 1
@.str.25 = private unnamed_addr constant [303 x i8] c"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\0A  -N, --literal              print entry names without quoting\0A  -o                         like -l, but do not list group information\0A  -p, --indicator-style=slash\0A                             append / indicator to directories\0A\00", align 1
@.str.26 = private unnamed_addr constant [507 x i8] c"  -q, --hide-control-chars   print ? instead of nongraphic characters\0A      --show-control-chars   show nongraphic characters as-is (the default,\0A                               unless program is 'ls' and output is a terminal)\0A  -Q, --quote-name           enclose entry names in double quotes\0A      --quoting-style=WORD   use quoting style WORD for entry names:\0A                               literal, locale, shell, shell-always,\0A                               shell-escape, shell-escape-always, c, escape\0A\00", align 1
@.str.27 = private unnamed_addr constant [197 x i8] c"  -r, --reverse              reverse order while sorting\0A  -R, --recursive            list subdirectories recursively\0A  -s, --size                 print the allocated size of each file, in blocks\0A\00", align 1
@.str.28 = private unnamed_addr constant [519 x i8] c"  -S                         sort by file size, largest first\0A      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\0A                               time (-t), version (-v), extension (-X)\0A      --time=WORD            with -l, show time as WORD instead of default\0A                               modification time: atime or access or use (-u);\0A                               ctime or status (-c); also use specified time\0A                               as sort key if --sort=time (newest first)\0A\00", align 1
@.str.29 = private unnamed_addr constant [531 x i8] c"      --time-style=STYLE     with -l, show times using style STYLE:\0A                               full-iso, long-iso, iso, locale, or +FORMAT;\0A                               FORMAT is interpreted like in 'date'; if FORMAT\0A                               is FORMAT1<newline>FORMAT2, then FORMAT1 applies\0A                               to non-recent files and FORMAT2 to recent files;\0A                               if STYLE is prefixed with 'posix-', STYLE\0A                               takes effect only outside the POSIX locale\0A\00", align 1
@.str.30 = private unnamed_addr constant [142 x i8] c"  -t                         sort by modification time, newest first\0A  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\0A\00", align 1
@.str.31 = private unnamed_addr constant [372 x i8] c"  -u                         with -lt: sort by, and show, access time;\0A                               with -l: show access time and sort by name;\0A                               otherwise: sort by access time, newest first\0A  -U                         do not sort; list entries in directory order\0A  -v                         natural sort of (version) numbers within text\0A\00", align 1
@.str.32 = private unnamed_addr constant [363 x i8] c"  -w, --width=COLS           set output width to COLS.  0 means no limit\0A  -x                         list entries by lines instead of by columns\0A  -X                         sort alphabetically by entry extension\0A  -Z, --context              print any security context of each file\0A  -1                         list one file per line.  Avoid '\5Cn' with -q or -b\0A\00", align 1
@.str.33 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.34 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.220 = private unnamed_addr constant [153 x i8] c"\0AThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\0AUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\0A\00", align 1
@.str.35 = private unnamed_addr constant [286 x i8] c"\0AUsing color to distinguish file types is disabled both by default and\0Awith --color=never.  With --color=auto, ls emits color codes only when\0Astandard output is connected to a terminal.  The LS_COLORS environment\0Avariable can change the settings.  Use the dircolors command to set it.\0A\00", align 1
@.str.36 = private unnamed_addr constant [152 x i8] c"\0AExit status:\0A 0  if OK,\0A 1  if minor problems (e.g., cannot access subdirectory),\0A 2  if serious trouble (e.g., cannot access command-line argument).\0A\00", align 1
@emit_ancillary_info.infomap = internal unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.222, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.223, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.221 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.229 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.230 = private unnamed_addr constant [39 x i8] c"http://www.gnu.org/software/coreutils/\00", align 1
@.str.231 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.232 = private unnamed_addr constant [69 x i8] c"Report %s translation bugs to <http://translationproject.org/team/>\0A\00", align 1
@.str.224 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.226 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.227 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.228 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.233 = private unnamed_addr constant [31 x i8] c"Full documentation at: <%s%s>\0A\00", align 1
@.str.234 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.235 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.222 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.223 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.225 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.136 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.158 = private unnamed_addr constant [6 x i8] c"slash\00", align 1
@.str.112 = private unnamed_addr constant [10 x i8] c"file-type\00", align 1
@.str.111 = private unnamed_addr constant [9 x i8] c"classify\00", align 1
@.str.150 = private unnamed_addr constant [7 x i8] c"always\00", align 1
@.str.151 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.152 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.153 = private unnamed_addr constant [6 x i8] c"never\00", align 1
@.str.155 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"tty\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"if-tty\00", align 1
@.str.143 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.144 = private unnamed_addr constant [5 x i8] c"long\00", align 1
@.str.145 = private unnamed_addr constant [7 x i8] c"commas\00", align 1
@.str.146 = private unnamed_addr constant [11 x i8] c"horizontal\00", align 1
@.str.147 = private unnamed_addr constant [7 x i8] c"across\00", align 1
@.str.148 = private unnamed_addr constant [9 x i8] c"vertical\00", align 1
@.str.149 = private unnamed_addr constant [14 x i8] c"single-column\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"atime\00", align 1
@.str.139 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@.str.140 = private unnamed_addr constant [4 x i8] c"use\00", align 1
@.str.141 = private unnamed_addr constant [6 x i8] c"ctime\00", align 1
@.str.142 = private unnamed_addr constant [7 x i8] c"status\00", align 1
@.str.128 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.137 = private unnamed_addr constant [10 x i8] c"extension\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.95 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"directory\00", align 1
@.str.97 = private unnamed_addr constant [6 x i8] c"dired\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"full-time\00", align 1
@.str.99 = private unnamed_addr constant [24 x i8] c"group-directories-first\00", align 1
@.str.100 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.101 = private unnamed_addr constant [6 x i8] c"inode\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"kibibytes\00", align 1
@.str.103 = private unnamed_addr constant [16 x i8] c"numeric-uid-gid\00", align 1
@.str.104 = private unnamed_addr constant [9 x i8] c"no-group\00", align 1
@.str.105 = private unnamed_addr constant [19 x i8] c"hide-control-chars\00", align 1
@.str.106 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.109 = private unnamed_addr constant [11 x i8] c"almost-all\00", align 1
@.str.110 = private unnamed_addr constant [15 x i8] c"ignore-backups\00", align 1
@.str.113 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@.str.114 = private unnamed_addr constant [25 x i8] c"dereference-command-line\00", align 1
@.str.115 = private unnamed_addr constant [40 x i8] c"dereference-command-line-symlink-to-dir\00", align 1
@.str.116 = private unnamed_addr constant [5 x i8] c"hide\00", align 1
@.str.117 = private unnamed_addr constant [7 x i8] c"ignore\00", align 1
@.str.118 = private unnamed_addr constant [16 x i8] c"indicator-style\00", align 1
@.str.119 = private unnamed_addr constant [12 x i8] c"dereference\00", align 1
@.str.120 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.121 = private unnamed_addr constant [11 x i8] c"quote-name\00", align 1
@.str.122 = private unnamed_addr constant [14 x i8] c"quoting-style\00", align 1
@.str.123 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.124 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"show-control-chars\00", align 1
@.str.126 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.127 = private unnamed_addr constant [8 x i8] c"tabsize\00", align 1
@.str.129 = private unnamed_addr constant [11 x i8] c"time-style\00", align 1
@.str.130 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"block-size\00", align 1
@.str.132 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.133 = private unnamed_addr constant [7 x i8] c"author\00", align 1
@.str.134 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@ls_mode = local_unnamed_addr global i32 2, align 4
@Version = local_unnamed_addr global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.204, i64 0, i64 0), align 8
@.str.204 = private unnamed_addr constant [5 x i8] c"8.27\00", align 1
@argmatch_die = local_unnamed_addr global void ()* @__argmatch_die, align 8
@.str.214 = private unnamed_addr constant [27 x i8] c"invalid argument %s for %s\00", align 1
@.str.1.215 = private unnamed_addr constant [29 x i8] c"ambiguous argument %s for %s\00", align 1
@.str.2.216 = private unnamed_addr constant [21 x i8] c"Valid arguments are:\00", align 1
@.str.3.217 = private unnamed_addr constant [8 x i8] c"\0A  - %s\00", align 1
@.str.4.218 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@file_name = internal unnamed_addr global i8* null, align 8
@ignore_EPIPE = internal unnamed_addr global i8 0, align 1
@.str.236 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.1.237 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.238 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = global i32 1, align 4
@.str.247 = private unnamed_addr constant [24 x i8] c"system.posix_acl_access\00", align 1
@.str.1.248 = private unnamed_addr constant [25 x i8] c"system.posix_acl_default\00", align 1
@switch.table.249 = private unnamed_addr constant [12 x i8] c"pc?d?b?-?l?s"
@.str.1.262 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.265 = private unnamed_addr constant [24 x i8] c"# entries:         %lu\0A\00", align 1
@.str.1.266 = private unnamed_addr constant [24 x i8] c"# buckets:         %lu\0A\00", align 1
@.str.2.267 = private unnamed_addr constant [33 x i8] c"# buckets used:    %lu (%.2f%%)\0A\00", align 1
@.str.3.268 = private unnamed_addr constant [24 x i8] c"max bucket length: %lu\0A\00", align 1
@default_tuning = internal constant %struct.hash_tuning { float 0.000000e+00, float 1.000000e+00, float 0x3FE99999A0000000, float 0x3FF69FBE80000000, i8 0 }, align 4
@.str.279 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.280 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.281 = private unnamed_addr constant [6 x i8] c"%.0Lf\00", align 1
@.str.3.282 = private unnamed_addr constant [6 x i8] c"%.1Lf\00", align 1
@power_letter = internal unnamed_addr constant [9 x i8] c"\00KMGTPEZY", align 1
@.str.4.285 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@.str.5.286 = private unnamed_addr constant [10 x i8] c"BLOCKSIZE\00", align 1
@.str.9.287 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@block_size_args = internal constant [3 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7.289, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8.290, i32 0, i32 0), i8* null], align 16
@block_size_opts = internal constant [2 x i32] [i32 176, i32 144], align 4
@.str.6.288 = private unnamed_addr constant [18 x i8] c"eEgGkKmMpPtTyYzZ0\00", align 1
@.str.7.289 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.8.290 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@user_alist = internal unnamed_addr global %struct.userid* null, align 8
@.str.293 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@nouser_alist = internal unnamed_addr global %struct.userid* null, align 8
@group_alist = internal unnamed_addr global %struct.userid* null, align 8
@nogroup_alist = internal unnamed_addr global %struct.userid* null, align 8
@program_name = local_unnamed_addr global i8* null, align 8
@.str.312 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.313 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.314 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external local_unnamed_addr global i8*, align 8
@program_invocation_name = external local_unnamed_addr global i8*, align 8
@quoting_style_args = constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.318, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.319, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.320, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.321, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.322, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.323, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.324, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.325, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.326, i32 0, i32 0), i8* null], align 16
@.str.317 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.318 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.319 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.320 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.321 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.322 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.323 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.324 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.325 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.326 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@quote_quoting_options = global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@.str.11.339 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.340 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.10.341 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.14.342 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.343 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.17.344 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.345 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal unnamed_addr global %struct.bin_str* @slotvec0, align 8
@nslots = internal unnamed_addr global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@slotvec0 = internal global %struct.bin_str { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8
@.str.360 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4.361 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@.str.1.362 = private unnamed_addr constant [9 x i8] c"%m/%d/%y\00", align 1
@.str.2.363 = private unnamed_addr constant [9 x i8] c"%Y-%m-%d\00", align 1
@.str.3.364 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str.365 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.366 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.367 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.368 = private unnamed_addr constant [203 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00", align 1
@.str.4.369 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.5.370 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.6.371 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.7.372 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.8.373 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.9.374 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.10.375 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.11.376 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.12.377 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.13.378 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.14.381 = private unnamed_addr constant [21 x i8] c"\0AReport bugs to: %s\0A\00", align 1
@.str.15.382 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.16.383 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.17.384 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.18.385 = private unnamed_addr constant [39 x i8] c"http://www.gnu.org/software/coreutils/\00", align 1
@.str.19.386 = private unnamed_addr constant [64 x i8] c"General help using GNU software: <http://www.gnu.org/gethelp/>\0A\00", align 1
@version_etc_copyright = constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16
@.str.1.399 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.400 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.403 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.406 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.407 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@switch.table.410 = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.412, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.413, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.413, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.414, i64 0, i64 0)]
@.str.411 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.3.412 = private unnamed_addr constant [29 x i8] c"%s%s argument '%s' too large\00", align 1
@.str.2.413 = private unnamed_addr constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00", align 1
@.str.1.414 = private unnamed_addr constant [27 x i8] c"invalid %s%s argument '%s'\00", align 1
@.str.417 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.418 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoumax = private unnamed_addr constant [79 x i8] c"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\00", align 1
@obstack_alloc_failed_handler = local_unnamed_addr global void ()* @print_and_abort, align 8
@.str.1.423 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.424 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.433 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str.1.434 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.443 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@charset_aliases = internal global i8* null, align 8
@.str.3.444 = private unnamed_addr constant [16 x i8] c"CHARSETALIASDIR\00", align 1
@.str.4.445 = private unnamed_addr constant [15 x i8] c"/usr/local/lib\00", align 1
@.str.2.446 = private unnamed_addr constant [14 x i8] c"charset.alias\00", align 1
@.str.5.447 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6.448 = private unnamed_addr constant [10 x i8] c"%50s %50s\00", align 1
@.str.1.449 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@__mon_yday = internal unnamed_addr constant [2 x [13 x i16]] [[13 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334, i16 365], [13 x i16] [i16 0, i16 31, i16 60, i16 91, i16 121, i16 152, i16 182, i16 213, i16 244, i16 274, i16 305, i16 335, i16 366]], align 16
@localtime_offset = internal global i64 0, align 8

; Function Attrs: nounwind sspstrong uwtable
define i32 @main(i32, i8**) local_unnamed_addr #0 {
  %3 = alloca %struct.stat, align 8
  %4 = alloca [652 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [3 x i8], align 1
  %8 = alloca i64, align 8
  %9 = alloca [12 x [128 x i8]], align 16
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.winsize, align 2
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca <2 x i64>, align 16
  %16 = load i8*, i8** %1, align 8
  tail call void @set_program_name(i8* %16) #13
  %17 = tail call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #13
  %18 = tail call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #13
  %19 = tail call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #13
  store volatile i32 2, i32* @exit_failure, align 4
  %20 = tail call i32 @atexit(void ()* nonnull @close_stdout) #13
  store i32 0, i32* @exit_status, align 4
  store i1 true, i1* @print_dir_name, align 1
  store %struct.pending* null, %struct.pending** @pending_dirs, align 8
  store <2 x i64> <i64 -9223372036854775808, i64 -1>, <2 x i64>* bitcast (%struct.timespec* @current_time to <2 x i64>*), align 16
  store i8 0, i8* @qmark_funny_chars, align 1
  %21 = load i32, i32* @ls_mode, align 4
  switch i32 %21, label %31 [
    i32 2, label %22
    i32 3, label %23
    i32 1, label %24
  ]

; <label>:22:                                     ; preds = %2
  store i32 2, i32* @format, align 4
  tail call void @set_quoting_style(%struct.quoting_options* null, i32 7) #13
  br label %32

; <label>:23:                                     ; preds = %2
  store i32 0, i32* @format, align 4
  tail call void @set_quoting_style(%struct.quoting_options* null, i32 7) #13
  br label %32

; <label>:24:                                     ; preds = %2
  %25 = tail call i32 @isatty(i32 1) #13
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %24
  store i32 2, i32* @format, align 4
  tail call void @set_quoting_style(%struct.quoting_options* null, i32 3) #13
  br label %29

; <label>:28:                                     ; preds = %24
  store i32 1, i32* @format, align 4
  br label %29

; <label>:29:                                     ; preds = %28, %27
  %30 = phi i8 [ 0, %28 ], [ 1, %27 ]
  store i8 %30, i8* @qmark_funny_chars, align 1
  br label %32

; <label>:31:                                     ; preds = %2
  tail call void @abort() #15
  unreachable

; <label>:32:                                     ; preds = %29, %23, %22
  store i32 0, i32* @time_type, align 4
  store i32 0, i32* @sort_type, align 4
  store i1 false, i1* @sort_reverse, align 1
  store i1 false, i1* @numeric_ids, align 1
  store i1 false, i1* @print_block_size, align 1
  store i32 0, i32* @indicator_style, align 4
  store i1 false, i1* @print_inode, align 1
  store i32 1, i32* @dereference, align 4
  store i1 false, i1* @recursive, align 1
  store i1 false, i1* @immediate_dirs, align 1
  store i32 0, i32* @ignore_mode, align 4
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @ignore_patterns, align 8
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @hide_patterns, align 8
  store i1 false, i1* @print_scontext, align 1
  %33 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.92, i64 0, i64 0)) #13
  %34 = icmp eq i8* %33, null
  br i1 %34, label %47, label %35

; <label>:35:                                     ; preds = %32
  %36 = tail call i64 @argmatch(i8* nonnull %33, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4) #16
  %37 = trunc i64 %36 to i32
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %44

; <label>:39:                                     ; preds = %35
  %40 = shl i64 %36, 32
  %41 = ashr exact i64 %40, 32
  %42 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %41
  %43 = load i32, i32* %42, align 4
  tail call void @set_quoting_style(%struct.quoting_options* null, i32 %43) #13
  br label %47

; <label>:44:                                     ; preds = %35
  %45 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.93, i64 0, i64 0), i32 5) #13
  %46 = tail call i8* @quote(i8* nonnull %33) #13
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %45, i8* %46) #13
  br label %47

; <label>:47:                                     ; preds = %44, %39, %32
  store i64 80, i64* @line_length, align 8
  %48 = tail call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i64 0, i64 0)) #13
  %49 = icmp eq i8* %48, null
  br i1 %49, label %63, label %50

; <label>:50:                                     ; preds = %47
  %51 = load i8, i8* %48, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %63, label %53

; <label>:53:                                     ; preds = %50
  %54 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54) #13
  %55 = call i32 @xstrtoumax(i8* nonnull %48, i8** null, i32 0, i64* nonnull %11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #13
  switch i32 %55, label %60 [
    i32 0, label %56
    i32 1, label %58
  ]

; <label>:56:                                     ; preds = %53
  %57 = load i64, i64* %11, align 8
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi i64 [ %57, %56 ], [ -1, %53 ]
  store i64 %59, i64* @line_length, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54) #13
  br label %63

; <label>:60:                                     ; preds = %53
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54) #13
  %61 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.59, i64 0, i64 0), i32 5) #13
  %62 = call i8* @quote(i8* nonnull %48) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %61, i8* %62) #13
  br label %63

; <label>:63:                                     ; preds = %60, %58, %50, %47
  %64 = bitcast %struct.winsize* %12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %64) #13
  %65 = call i32 (i32, i64, ...) @ioctl(i32 1, i64 21523, %struct.winsize* nonnull %12) #13
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %73, label %67

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %struct.winsize, %struct.winsize* %12, i64 0, i32 1
  %69 = load i16, i16* %68, align 2
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %73, label %71

; <label>:71:                                     ; preds = %67
  %72 = zext i16 %69 to i64
  store i64 %72, i64* @line_length, align 8
  br label %73

; <label>:73:                                     ; preds = %71, %67, %63
  call void @llvm.lifetime.end(i64 8, i8* nonnull %64) #13
  %74 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i64 0, i64 0)) #13
  store i64 8, i64* @tabsize, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %86, label %76

; <label>:76:                                     ; preds = %73
  %77 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %77) #13
  %78 = call i32 @xstrtoul(i8* nonnull %74, i8** null, i32 0, i64* nonnull %13, i8* null) #13
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

; <label>:80:                                     ; preds = %76
  %81 = load i64, i64* %13, align 8
  store i64 %81, i64* @tabsize, align 8
  br label %85

; <label>:82:                                     ; preds = %76
  %83 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.61, i64 0, i64 0), i32 5) #13
  %84 = call i8* @quote(i8* nonnull %74) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %83, i8* %84) #13
  br label %85

; <label>:85:                                     ; preds = %82, %80
  call void @llvm.lifetime.end(i64 8, i8* nonnull %77) #13
  br label %86

; <label>:86:                                     ; preds = %85, %73
  %87 = bitcast i32* %14 to i8*
  %88 = bitcast i64* %10 to i8*
  br label %89

; <label>:89:                                     ; preds = %256, %86
  %90 = phi i8 [ %257, %256 ], [ 0, %86 ]
  %91 = phi i8 [ %258, %256 ], [ 0, %86 ]
  %92 = phi i8* [ %259, %256 ], [ null, %86 ]
  call void @llvm.lifetime.start(i64 4, i8* nonnull %87) #13
  store i32 -1, i32* %14, align 4
  %93 = call i32 @getopt_long(i32 %0, i8** %1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.62, i64 0, i64 0), %struct.option* getelementptr inbounds ([43 x %struct.option], [43 x %struct.option]* @long_options, i64 0, i64 0), i32* nonnull %14) #13
  switch i32 %93, label %255 [
    i32 -1, label %260
    i32 97, label %94
    i32 98, label %95
    i32 99, label %96
    i32 100, label %97
    i32 102, label %98
    i32 132, label %106
    i32 103, label %107
    i32 104, label %108
    i32 105, label %109
    i32 107, label %256
    i32 108, label %110
    i32 109, label %111
    i32 110, label %112
    i32 111, label %113
    i32 112, label %114
    i32 113, label %115
    i32 114, label %116
    i32 115, label %117
    i32 116, label %118
    i32 117, label %119
    i32 118, label %120
    i32 119, label %121
    i32 120, label %132
    i32 65, label %133
    i32 66, label %137
    i32 67, label %148
    i32 68, label %149
    i32 70, label %150
    i32 71, label %151
    i32 72, label %152
    i32 131, label %153
    i32 73, label %154
    i32 76, label %161
    i32 78, label %162
    i32 81, label %163
    i32 82, label %164
    i32 83, label %165
    i32 84, label %166
    i32 85, label %170
    i32 88, label %171
    i32 49, label %172
    i32 128, label %176
    i32 136, label %177
    i32 141, label %184
    i32 135, label %190
    i32 142, label %191
    i32 133, label %197
    i32 134, label %203
    i32 130, label %204
    i32 137, label %219
    i32 138, label %225
    i32 143, label %231
    i32 139, label %233
    i32 129, label %234
    i32 140, label %244
    i32 90, label %245
    i32 -130, label %246
    i32 -131, label %247
  ]

; <label>:94:                                     ; preds = %89
  store i32 2, i32* @ignore_mode, align 4
  br label %256

; <label>:95:                                     ; preds = %89
  call void @set_quoting_style(%struct.quoting_options* null, i32 7) #13
  br label %256

; <label>:96:                                     ; preds = %89
  store i32 1, i32* @time_type, align 4
  br label %256

; <label>:97:                                     ; preds = %89
  store i1 true, i1* @immediate_dirs, align 1
  br label %256

; <label>:98:                                     ; preds = %89
  store i32 2, i32* @ignore_mode, align 4
  store i32 -1, i32* @sort_type, align 4
  %99 = load i32, i32* @format, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %105

; <label>:101:                                    ; preds = %98
  %102 = call i32 @isatty(i32 1) #13
  %103 = icmp ne i32 %102, 0
  %104 = select i1 %103, i32 2, i32 1
  store i32 %104, i32* @format, align 4
  br label %105

; <label>:105:                                    ; preds = %101, %98
  store i1 false, i1* @print_block_size, align 1
  store i8 0, i8* @print_with_color, align 1
  br label %256

; <label>:106:                                    ; preds = %89
  store i32 2, i32* @indicator_style, align 4
  br label %256

; <label>:107:                                    ; preds = %89
  store i32 0, i32* @format, align 4
  store i1 true, i1* @print_owner, align 1
  br label %256

; <label>:108:                                    ; preds = %89
  store i32 176, i32* @human_output_opts, align 4
  store i32 176, i32* @file_human_output_opts, align 4
  store i64 1, i64* @output_block_size, align 8
  store i64 1, i64* @file_output_block_size, align 8
  br label %256

; <label>:109:                                    ; preds = %89
  store i1 true, i1* @print_inode, align 1
  br label %256

; <label>:110:                                    ; preds = %89
  store i32 0, i32* @format, align 4
  br label %256

; <label>:111:                                    ; preds = %89
  store i32 4, i32* @format, align 4
  br label %256

; <label>:112:                                    ; preds = %89
  store i1 true, i1* @numeric_ids, align 1
  store i32 0, i32* @format, align 4
  br label %256

; <label>:113:                                    ; preds = %89
  store i32 0, i32* @format, align 4
  store i1 true, i1* @print_group, align 1
  br label %256

; <label>:114:                                    ; preds = %89
  store i32 1, i32* @indicator_style, align 4
  br label %256

; <label>:115:                                    ; preds = %89
  store i8 1, i8* @qmark_funny_chars, align 1
  br label %256

; <label>:116:                                    ; preds = %89
  store i1 true, i1* @sort_reverse, align 1
  br label %256

; <label>:117:                                    ; preds = %89
  store i1 true, i1* @print_block_size, align 1
  br label %256

; <label>:118:                                    ; preds = %89
  store i32 4, i32* @sort_type, align 4
  br label %256

; <label>:119:                                    ; preds = %89
  store i32 2, i32* @time_type, align 4
  br label %256

; <label>:120:                                    ; preds = %89
  store i32 3, i32* @sort_type, align 4
  br label %256

; <label>:121:                                    ; preds = %89
  %122 = load i8*, i8** @optarg, align 8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %88) #13
  %123 = call i32 @xstrtoumax(i8* %122, i8** null, i32 0, i64* nonnull %10, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #13
  switch i32 %123, label %128 [
    i32 0, label %124
    i32 1, label %126
  ]

; <label>:124:                                    ; preds = %121
  %125 = load i64, i64* %10, align 8
  br label %126

; <label>:126:                                    ; preds = %124, %121
  %127 = phi i64 [ %125, %124 ], [ -1, %121 ]
  store i64 %127, i64* @line_length, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %88) #13
  br label %256

; <label>:128:                                    ; preds = %121
  call void @llvm.lifetime.end(i64 8, i8* nonnull %88) #13
  %129 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.64, i64 0, i64 0), i32 5) #13
  %130 = load i8*, i8** @optarg, align 8
  %131 = call i8* @quote(i8* %130) #13
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i64 0, i64 0), i8* %129, i8* %131) #13
  unreachable

; <label>:132:                                    ; preds = %89
  store i32 3, i32* @format, align 4
  br label %256

; <label>:133:                                    ; preds = %89
  %134 = load i32, i32* @ignore_mode, align 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %256

; <label>:136:                                    ; preds = %133
  store i32 1, i32* @ignore_mode, align 4
  br label %256

; <label>:137:                                    ; preds = %89
  %138 = call noalias i8* @xmalloc(i64 16) #13
  %139 = bitcast i8* %138 to i8**
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i64 0, i64 0), i8** %139, align 8
  %140 = load i64, i64* bitcast (%struct.ignore_pattern** @ignore_patterns to i64*), align 8
  %141 = getelementptr inbounds i8, i8* %138, i64 8
  %142 = bitcast i8* %141 to i64*
  store i64 %140, i64* %142, align 8
  store i8* %138, i8** bitcast (%struct.ignore_pattern** @ignore_patterns to i8**), align 8
  %143 = call noalias i8* @xmalloc(i64 16) #13
  %144 = bitcast i8* %143 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0), i8** %144, align 8
  %145 = load i64, i64* bitcast (%struct.ignore_pattern** @ignore_patterns to i64*), align 8
  %146 = getelementptr inbounds i8, i8* %143, i64 8
  %147 = bitcast i8* %146 to i64*
  store i64 %145, i64* %147, align 8
  store i8* %143, i8** bitcast (%struct.ignore_pattern** @ignore_patterns to i8**), align 8
  br label %256

; <label>:148:                                    ; preds = %89
  store i32 2, i32* @format, align 4
  br label %256

; <label>:149:                                    ; preds = %89
  store i1 true, i1* @dired, align 1
  br label %256

; <label>:150:                                    ; preds = %89
  store i32 3, i32* @indicator_style, align 4
  br label %256

; <label>:151:                                    ; preds = %89
  store i1 true, i1* @print_group, align 1
  br label %256

; <label>:152:                                    ; preds = %89
  store i32 3, i32* @dereference, align 4
  br label %256

; <label>:153:                                    ; preds = %89
  store i32 4, i32* @dereference, align 4
  br label %256

; <label>:154:                                    ; preds = %89
  %155 = load i64, i64* bitcast (i8** @optarg to i64*), align 8
  %156 = call noalias i8* @xmalloc(i64 16) #13
  %157 = bitcast i8* %156 to i64*
  store i64 %155, i64* %157, align 8
  %158 = load i64, i64* bitcast (%struct.ignore_pattern** @ignore_patterns to i64*), align 8
  %159 = getelementptr inbounds i8, i8* %156, i64 8
  %160 = bitcast i8* %159 to i64*
  store i64 %158, i64* %160, align 8
  store i8* %156, i8** bitcast (%struct.ignore_pattern** @ignore_patterns to i8**), align 8
  br label %256

; <label>:161:                                    ; preds = %89
  store i32 5, i32* @dereference, align 4
  br label %256

; <label>:162:                                    ; preds = %89
  call void @set_quoting_style(%struct.quoting_options* null, i32 0) #13
  br label %256

; <label>:163:                                    ; preds = %89
  call void @set_quoting_style(%struct.quoting_options* null, i32 5) #13
  br label %256

; <label>:164:                                    ; preds = %89
  store i1 true, i1* @recursive, align 1
  br label %256

; <label>:165:                                    ; preds = %89
  store i32 2, i32* @sort_type, align 4
  br label %256

; <label>:166:                                    ; preds = %89
  %167 = load i8*, i8** @optarg, align 8
  %168 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.67, i64 0, i64 0), i32 5) #13
  %169 = call i64 @xnumtoumax(i8* %167, i32 0, i64 0, i64 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %168, i32 2) #13
  store i64 %169, i64* @tabsize, align 8
  br label %256

; <label>:170:                                    ; preds = %89
  store i32 -1, i32* @sort_type, align 4
  br label %256

; <label>:171:                                    ; preds = %89
  store i32 1, i32* @sort_type, align 4
  br label %256

; <label>:172:                                    ; preds = %89
  %173 = load i32, i32* @format, align 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %256, label %175

; <label>:175:                                    ; preds = %172
  store i32 1, i32* @format, align 4
  br label %256

; <label>:176:                                    ; preds = %89
  store i1 true, i1* @print_author, align 1
  br label %256

; <label>:177:                                    ; preds = %89
  %178 = call noalias i8* @xmalloc(i64 16) #13
  %179 = load i64, i64* bitcast (i8** @optarg to i64*), align 8
  %180 = bitcast i8* %178 to i64*
  store i64 %179, i64* %180, align 8
  %181 = load i64, i64* bitcast (%struct.ignore_pattern** @hide_patterns to i64*), align 8
  %182 = getelementptr inbounds i8, i8* %178, i64 8
  %183 = bitcast i8* %182 to i64*
  store i64 %181, i64* %183, align 8
  store i8* %178, i8** bitcast (%struct.ignore_pattern** @hide_patterns to i8**), align 8
  br label %256

; <label>:184:                                    ; preds = %89
  %185 = load i8*, i8** @optarg, align 8
  %186 = load void ()*, void ()** @argmatch_die, align 8
  %187 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0), i8* %185, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @sort_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @sort_types to i8*), i64 4, void ()* %186) #13
  %188 = getelementptr inbounds [5 x i32], [5 x i32]* @sort_types, i64 0, i64 %187
  %189 = load i32, i32* %188, align 4
  store i32 %189, i32* @sort_type, align 4
  br label %256

; <label>:190:                                    ; preds = %89
  store i1 true, i1* @directories_first, align 1
  br label %256

; <label>:191:                                    ; preds = %89
  %192 = load i8*, i8** @optarg, align 8
  %193 = load void ()*, void ()** @argmatch_die, align 8
  %194 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i64 0, i64 0), i8* %192, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @time_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @time_types to i8*), i64 4, void ()* %193) #13
  %195 = getelementptr inbounds [5 x i32], [5 x i32]* @time_types, i64 0, i64 %194
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* @time_type, align 4
  br label %256

; <label>:197:                                    ; preds = %89
  %198 = load i8*, i8** @optarg, align 8
  %199 = load void ()*, void ()** @argmatch_die, align 8
  %200 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.70, i64 0, i64 0), i8* %198, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @format_args, i64 0, i64 0), i8* bitcast ([7 x i32]* @format_types to i8*), i64 4, void ()* %199) #13
  %201 = getelementptr inbounds [7 x i32], [7 x i32]* @format_types, i64 0, i64 %200
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* @format, align 4
  br label %256

; <label>:203:                                    ; preds = %89
  store i32 0, i32* @format, align 4
  br label %256

; <label>:204:                                    ; preds = %89
  %205 = load i8*, i8** @optarg, align 8
  %206 = icmp eq i8* %205, null
  br i1 %206, label %213, label %207

; <label>:207:                                    ; preds = %204
  %208 = load void ()*, void ()** @argmatch_die, align 8
  %209 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i64 0, i64 0), i8* nonnull %205, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @color_args, i64 0, i64 0), i8* bitcast ([9 x i32]* @color_types to i8*), i64 4, void ()* %208) #13
  %210 = getelementptr inbounds [9 x i32], [9 x i32]* @color_types, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  switch i32 %211, label %212 [
    i32 1, label %213
    i32 2, label %214
  ]

; <label>:212:                                    ; preds = %207
  store i8 0, i8* @print_with_color, align 1
  br label %256

; <label>:213:                                    ; preds = %207, %204
  store i8 1, i8* @print_with_color, align 1
  br label %218

; <label>:214:                                    ; preds = %207
  %215 = call i32 @isatty(i32 1) #13
  %216 = icmp ne i32 %215, 0
  %217 = zext i1 %216 to i8
  store i8 %217, i8* @print_with_color, align 1
  br i1 %216, label %218, label %256

; <label>:218:                                    ; preds = %214, %213
  store i64 0, i64* @tabsize, align 8
  br label %256

; <label>:219:                                    ; preds = %89
  %220 = load i8*, i8** @optarg, align 8
  %221 = load void ()*, void ()** @argmatch_die, align 8
  %222 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i64 0, i64 0), i8* %220, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @indicator_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @indicator_style_types to i8*), i64 4, void ()* %221) #13
  %223 = getelementptr inbounds [4 x i32], [4 x i32]* @indicator_style_types, i64 0, i64 %222
  %224 = load i32, i32* %223, align 4
  store i32 %224, i32* @indicator_style, align 4
  br label %256

; <label>:225:                                    ; preds = %89
  %226 = load i8*, i8** @optarg, align 8
  %227 = load void ()*, void ()** @argmatch_die, align 8
  %228 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.74, i64 0, i64 0), i8* %226, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4, void ()* %227) #13
  %229 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %228
  %230 = load i32, i32* %229, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 %230) #13
  br label %256

; <label>:231:                                    ; preds = %89
  %232 = load i8*, i8** @optarg, align 8
  br label %256

; <label>:233:                                    ; preds = %89
  store i8 0, i8* @qmark_funny_chars, align 1
  br label %256

; <label>:234:                                    ; preds = %89
  %235 = load i8*, i8** @optarg, align 8
  %236 = call i32 @human_options(i8* %235, i32* nonnull @human_output_opts, i64* nonnull @output_block_size) #13
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %241, label %238

; <label>:238:                                    ; preds = %234
  %239 = load i32, i32* %14, align 4
  %240 = load i8*, i8** @optarg, align 8
  call void @xstrtol_fatal(i32 %236, i32 %239, i8 signext 0, %struct.option* getelementptr inbounds ([43 x %struct.option], [43 x %struct.option]* @long_options, i64 0, i64 0), i8* %240) #15
  unreachable

; <label>:241:                                    ; preds = %234
  %242 = load i32, i32* @human_output_opts, align 4
  store i32 %242, i32* @file_human_output_opts, align 4
  %243 = load i64, i64* @output_block_size, align 8
  store i64 %243, i64* @file_output_block_size, align 8
  br label %256

; <label>:244:                                    ; preds = %89
  store i32 144, i32* @human_output_opts, align 4
  store i32 144, i32* @file_human_output_opts, align 4
  store i64 1, i64* @output_block_size, align 8
  store i64 1, i64* @file_output_block_size, align 8
  br label %256

; <label>:245:                                    ; preds = %89
  store i1 true, i1* @print_scontext, align 1
  br label %256

; <label>:246:                                    ; preds = %89
  call void @usage(i32 0) #15
  unreachable

; <label>:247:                                    ; preds = %89
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %249 = load i32, i32* @ls_mode, align 4
  %250 = icmp eq i32 %249, 1
  %251 = icmp eq i32 %249, 2
  %252 = select i1 %251, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0)
  %253 = select i1 %250, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0), i8* %252
  %254 = load i8*, i8** @Version, align 8
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %248, i8* %253, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.75, i64 0, i64 0), i8* %254, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.77, i64 0, i64 0), i8* null) #13
  call void @exit(i32 0) #15
  unreachable

; <label>:255:                                    ; preds = %89
  call void @usage(i32 2) #15
  unreachable

; <label>:256:                                    ; preds = %245, %244, %241, %233, %231, %225, %219, %218, %214, %212, %203, %197, %191, %190, %184, %177, %176, %175, %172, %171, %170, %166, %165, %164, %163, %162, %161, %154, %153, %152, %151, %150, %149, %148, %137, %136, %133, %132, %126, %120, %119, %118, %117, %116, %115, %114, %113, %112, %111, %110, %109, %108, %107, %106, %105, %97, %96, %95, %94, %89
  %257 = phi i8 [ %90, %245 ], [ %90, %244 ], [ %90, %241 ], [ %90, %233 ], [ %90, %231 ], [ %90, %225 ], [ %90, %219 ], [ %90, %203 ], [ %90, %197 ], [ %90, %191 ], [ %90, %190 ], [ %90, %184 ], [ %90, %177 ], [ %90, %176 ], [ %90, %175 ], [ %90, %172 ], [ %90, %171 ], [ %90, %170 ], [ %90, %166 ], [ %90, %165 ], [ %90, %164 ], [ %90, %163 ], [ %90, %162 ], [ %90, %161 ], [ %90, %154 ], [ %90, %153 ], [ %90, %152 ], [ %90, %151 ], [ %90, %150 ], [ %90, %149 ], [ %90, %148 ], [ %90, %137 ], [ %90, %136 ], [ %90, %133 ], [ %90, %132 ], [ %90, %120 ], [ %90, %119 ], [ %90, %118 ], [ %90, %117 ], [ %90, %116 ], [ %90, %115 ], [ %90, %114 ], [ %90, %113 ], [ %90, %112 ], [ %90, %111 ], [ %90, %110 ], [ %90, %109 ], [ %90, %108 ], [ %90, %107 ], [ %90, %106 ], [ %90, %105 ], [ %90, %97 ], [ %90, %96 ], [ %90, %95 ], [ %90, %94 ], [ 1, %89 ], [ %90, %218 ], [ %90, %214 ], [ %90, %126 ], [ %90, %212 ]
  %258 = phi i8 [ %91, %245 ], [ %91, %244 ], [ %91, %241 ], [ %91, %233 ], [ %91, %231 ], [ %91, %225 ], [ %91, %219 ], [ %91, %203 ], [ %91, %197 ], [ %91, %191 ], [ %91, %190 ], [ 1, %184 ], [ %91, %177 ], [ %91, %176 ], [ %91, %175 ], [ %91, %172 ], [ 1, %171 ], [ 1, %170 ], [ %91, %166 ], [ 1, %165 ], [ %91, %164 ], [ %91, %163 ], [ %91, %162 ], [ %91, %161 ], [ %91, %154 ], [ %91, %153 ], [ %91, %152 ], [ %91, %151 ], [ %91, %150 ], [ %91, %149 ], [ %91, %148 ], [ %91, %137 ], [ %91, %136 ], [ %91, %133 ], [ %91, %132 ], [ 1, %120 ], [ %91, %119 ], [ 1, %118 ], [ %91, %117 ], [ %91, %116 ], [ %91, %115 ], [ %91, %114 ], [ %91, %113 ], [ %91, %112 ], [ %91, %111 ], [ %91, %110 ], [ %91, %109 ], [ %91, %108 ], [ %91, %107 ], [ %91, %106 ], [ 1, %105 ], [ %91, %97 ], [ %91, %96 ], [ %91, %95 ], [ %91, %94 ], [ %91, %89 ], [ %91, %218 ], [ %91, %214 ], [ %91, %126 ], [ %91, %212 ]
  %259 = phi i8* [ %92, %245 ], [ %92, %244 ], [ %92, %241 ], [ %92, %233 ], [ %232, %231 ], [ %92, %225 ], [ %92, %219 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i64 0, i64 0), %203 ], [ %92, %197 ], [ %92, %191 ], [ %92, %190 ], [ %92, %184 ], [ %92, %177 ], [ %92, %176 ], [ %92, %175 ], [ %92, %172 ], [ %92, %171 ], [ %92, %170 ], [ %92, %166 ], [ %92, %165 ], [ %92, %164 ], [ %92, %163 ], [ %92, %162 ], [ %92, %161 ], [ %92, %154 ], [ %92, %153 ], [ %92, %152 ], [ %92, %151 ], [ %92, %150 ], [ %92, %149 ], [ %92, %148 ], [ %92, %137 ], [ %92, %136 ], [ %92, %133 ], [ %92, %132 ], [ %92, %120 ], [ %92, %119 ], [ %92, %118 ], [ %92, %117 ], [ %92, %116 ], [ %92, %115 ], [ %92, %114 ], [ %92, %113 ], [ %92, %112 ], [ %92, %111 ], [ %92, %110 ], [ %92, %109 ], [ %92, %108 ], [ %92, %107 ], [ %92, %106 ], [ %92, %105 ], [ %92, %97 ], [ %92, %96 ], [ %92, %95 ], [ %92, %94 ], [ %92, %89 ], [ %92, %218 ], [ %92, %214 ], [ %92, %126 ], [ %92, %212 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %87) #13
  br label %89

; <label>:260:                                    ; preds = %89
  call void @llvm.lifetime.end(i64 4, i8* nonnull %87) #13
  %261 = load i64, i64* @output_block_size, align 8
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %277

; <label>:263:                                    ; preds = %260
  %264 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.78, i64 0, i64 0)) #13
  %265 = call i32 @human_options(i8* %264, i32* nonnull @human_output_opts, i64* nonnull @output_block_size) #13
  %266 = icmp eq i8* %264, null
  br i1 %266, label %267, label %270

; <label>:267:                                    ; preds = %263
  %268 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.79, i64 0, i64 0)) #13
  %269 = icmp eq i8* %268, null
  br i1 %269, label %273, label %270

; <label>:270:                                    ; preds = %267, %263
  %271 = load i32, i32* @human_output_opts, align 4
  store i32 %271, i32* @file_human_output_opts, align 4
  %272 = load i64, i64* @output_block_size, align 8
  store i64 %272, i64* @file_output_block_size, align 8
  br label %273

; <label>:273:                                    ; preds = %270, %267
  %274 = and i8 %90, 1
  %275 = icmp eq i8 %274, 0
  br i1 %275, label %277, label %276

; <label>:276:                                    ; preds = %273
  store i32 0, i32* @human_output_opts, align 4
  store i64 1024, i64* @output_block_size, align 8
  br label %277

; <label>:277:                                    ; preds = %276, %273, %260
  %278 = load i64, i64* @line_length, align 8
  %279 = udiv i64 %278, 3
  %280 = urem i64 %278, 3
  %281 = icmp ne i64 %280, 0
  %282 = zext i1 %281 to i64
  %283 = add nuw i64 %282, %279
  store i64 %283, i64* @max_idx, align 8
  %284 = call i32 @get_quoting_style(%struct.quoting_options* null) #13
  %285 = load i32, i32* @format, align 4
  switch i32 %285, label %286 [
    i32 4, label %296
    i32 1, label %296
  ]

; <label>:286:                                    ; preds = %277
  %287 = load i64, i64* @line_length, align 8
  %288 = icmp ne i64 %287, 0
  %289 = icmp eq i32 %285, 0
  %290 = or i1 %289, %288
  br i1 %290, label %291, label %296

; <label>:291:                                    ; preds = %286
  %292 = or i32 %284, 2
  %293 = icmp eq i32 %292, 3
  %294 = icmp eq i32 %284, 6
  %295 = or i1 %294, %293
  br label %296

; <label>:296:                                    ; preds = %291, %286, %277, %277
  %297 = phi i1 [ false, %277 ], [ false, %286 ], [ false, %277 ], [ %295, %291 ]
  %298 = zext i1 %297 to i8
  store i8 %298, i8* @align_variable_outer_quotes, align 1
  %299 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null) #13
  store %struct.quoting_options* %299, %struct.quoting_options** @filename_quoting_options, align 8
  %300 = icmp eq i32 %284, 7
  br i1 %300, label %301, label %303

; <label>:301:                                    ; preds = %296
  %302 = call i32 @set_char_quoting(%struct.quoting_options* %299, i8 signext 32, i32 1) #13
  br label %303

; <label>:303:                                    ; preds = %301, %296
  %304 = load i32, i32* @indicator_style, align 4
  %305 = icmp ugt i32 %304, 1
  br i1 %305, label %306, label %322

; <label>:306:                                    ; preds = %303
  %307 = add i32 %304, -2
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.80, i64 0, i64 %308
  %310 = icmp eq i32 %307, 5
  br i1 %310, label %322, label %311

; <label>:311:                                    ; preds = %306
  %312 = load i8, i8* %309, align 1
  br label %313

; <label>:313:                                    ; preds = %313, %311
  %314 = phi i8 [ %319, %313 ], [ %312, %311 ]
  %315 = phi i8* [ %318, %313 ], [ %309, %311 ]
  %316 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %317 = call i32 @set_char_quoting(%struct.quoting_options* %316, i8 signext %314, i32 1) #13
  %318 = getelementptr inbounds i8, i8* %315, i64 1
  %319 = load i8, i8* %318, align 1
  %320 = icmp eq i8 %319, 0
  br i1 %320, label %321, label %313

; <label>:321:                                    ; preds = %313
  br label %322

; <label>:322:                                    ; preds = %321, %306, %303
  %323 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null) #13
  store %struct.quoting_options* %323, %struct.quoting_options** @dirname_quoting_options, align 8
  %324 = call i32 @set_char_quoting(%struct.quoting_options* %323, i8 signext 58, i32 1) #13
  %325 = load i1, i1* @dired, align 1
  %326 = load i32, i32* @format, align 4
  %327 = icmp ne i32 %326, 0
  %328 = and i1 %325, %327
  br i1 %328, label %329, label %330

; <label>:329:                                    ; preds = %322
  store i1 false, i1* @dired, align 1
  br label %330

; <label>:330:                                    ; preds = %329, %322
  %331 = load i32, i32* @time_type, align 4
  %332 = add i32 %331, -1
  %333 = icmp ult i32 %332, 2
  br i1 %333, label %334, label %339

; <label>:334:                                    ; preds = %330
  %335 = and i8 %91, 1
  %336 = icmp eq i8 %335, 0
  %337 = and i1 %336, %327
  br i1 %337, label %338, label %339

; <label>:338:                                    ; preds = %334
  store i32 4, i32* @sort_type, align 4
  br label %522

; <label>:339:                                    ; preds = %334, %330
  %340 = icmp eq i32 %326, 0
  br i1 %340, label %341, label %522

; <label>:341:                                    ; preds = %339
  %342 = icmp eq i8* %92, null
  br i1 %342, label %343, label %347

; <label>:343:                                    ; preds = %341
  %344 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i64 0, i64 0)) #13
  %345 = icmp eq i8* %344, null
  %346 = select i1 %345, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0), i8* %344
  br label %347

; <label>:347:                                    ; preds = %343, %341
  %348 = phi i8* [ %346, %343 ], [ %92, %341 ]
  %349 = call i32 @strncmp(i8* %348, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @decode_switches.posix_prefix, i64 0, i64 0), i64 6) #16
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %360

; <label>:351:                                    ; preds = %347
  br label %352

; <label>:352:                                    ; preds = %351, %355
  %353 = phi i8* [ %356, %355 ], [ %348, %351 ]
  %354 = call zeroext i1 @hard_locale(i32 2) #13
  br i1 %354, label %355, label %521

; <label>:355:                                    ; preds = %352
  %356 = getelementptr inbounds i8, i8* %353, i64 6
  %357 = call i32 @strncmp(i8* %356, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @decode_switches.posix_prefix, i64 0, i64 0), i64 6) #16
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %352, label %359

; <label>:359:                                    ; preds = %355
  br label %360

; <label>:360:                                    ; preds = %359, %347
  %361 = phi i8* [ %348, %347 ], [ %356, %359 ]
  %362 = load i8, i8* %361, align 1
  %363 = icmp eq i8 %362, 43
  br i1 %363, label %364, label %378

; <label>:364:                                    ; preds = %360
  %365 = getelementptr inbounds i8, i8* %361, i64 1
  %366 = call i8* @strchr(i8* %365, i32 10) #13
  %367 = icmp eq i8* %366, null
  br i1 %367, label %376, label %368

; <label>:368:                                    ; preds = %364
  %369 = getelementptr inbounds i8, i8* %366, i64 1
  %370 = call i8* @strchr(i8* %369, i32 10) #13
  %371 = icmp eq i8* %370, null
  br i1 %371, label %375, label %372

; <label>:372:                                    ; preds = %368
  %373 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.83, i64 0, i64 0), i32 5) #13
  %374 = call i8* @quote(i8* %365) #13
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %373, i8* %374) #13
  unreachable

; <label>:375:                                    ; preds = %368
  store i8 0, i8* %366, align 1
  br label %376

; <label>:376:                                    ; preds = %375, %364
  %377 = phi i8* [ %369, %375 ], [ %365, %364 ]
  store i8* %365, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  store i8* %377, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  br label %407

; <label>:378:                                    ; preds = %360
  %379 = call i64 @argmatch(i8* nonnull %361, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @time_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @time_style_types to i8*), i64 4) #16
  %380 = icmp slt i64 %379, 0
  br i1 %380, label %381, label %396

; <label>:381:                                    ; preds = %378
  call void @argmatch_invalid(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i64 0, i64 0), i8* nonnull %361, i64 %379) #13
  %382 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.85, i64 0, i64 0), i32 5) #13
  %383 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %384 = call i32 @fputs_unlocked(i8* %382, %struct._IO_FILE* %383) #13
  %385 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %386 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %385, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i64 0, i64 0)) #13
  %387 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %388 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %387, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i64 0, i64 0)) #13
  %389 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %390 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %389, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i64 0, i64 0), i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.162, i64 0, i64 0)) #13
  %391 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %392 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %391, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0)) #13
  %393 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.87, i64 0, i64 0), i32 5) #13
  %394 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %395 = call i32 @fputs_unlocked(i8* %393, %struct._IO_FILE* %394) #13
  call void @usage(i32 2) #15
  unreachable

; <label>:396:                                    ; preds = %378
  switch i64 %379, label %407 [
    i64 0, label %397
    i64 1, label %398
    i64 2, label %399
    i64 3, label %400
  ]

; <label>:397:                                    ; preds = %396
  store <2 x i8*> <i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.88, i64 0, i64 0)>, <2 x i8*>* bitcast ([2 x i8*]* @long_time_format to <2 x i8*>*), align 16
  br label %407

; <label>:398:                                    ; preds = %396
  store <2 x i8*> <i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89, i64 0, i64 0)>, <2 x i8*>* bitcast ([2 x i8*]* @long_time_format to <2 x i8*>*), align 16
  br label %407

; <label>:399:                                    ; preds = %396
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i64 0, i64 0)>, <2 x i8*>* bitcast ([2 x i8*]* @long_time_format to <2 x i8*>*), align 16
  br label %407

; <label>:400:                                    ; preds = %396
  %401 = call zeroext i1 @hard_locale(i32 2) #13
  br i1 %401, label %402, label %407

; <label>:402:                                    ; preds = %400
  %403 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  %404 = call i8* @dcgettext(i8* null, i8* %403, i32 2) #13
  store i8* %404, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  %405 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  %406 = call i8* @dcgettext(i8* null, i8* %405, i32 2) #13
  store i8* %406, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  br label %407

; <label>:407:                                    ; preds = %402, %400, %399, %398, %397, %396, %376
  %408 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  br label %409

; <label>:409:                                    ; preds = %417, %407
  %410 = phi i8* [ %408, %407 ], [ %419, %417 ]
  %411 = load i8, i8* %410, align 1
  switch i8 %411, label %417 [
    i8 0, label %420
    i8 37, label %412
  ]

; <label>:412:                                    ; preds = %409
  %413 = getelementptr inbounds i8, i8* %410, i64 1
  %414 = load i8, i8* %413, align 1
  %415 = sext i8 %414 to i32
  switch i32 %415, label %417 [
    i32 98, label %420
    i32 37, label %416
  ]

; <label>:416:                                    ; preds = %412
  br label %417

; <label>:417:                                    ; preds = %416, %412, %409
  %418 = phi i8* [ %410, %412 ], [ %413, %416 ], [ %410, %409 ]
  %419 = getelementptr inbounds i8, i8* %418, i64 1
  br label %409

; <label>:420:                                    ; preds = %412, %409
  %421 = phi i8* [ %410, %412 ], [ null, %409 ]
  %422 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  br label %506

; <label>:423:                                    ; preds = %516, %513
  %424 = phi i1 [ false, %513 ], [ true, %516 ]
  %425 = phi i1 [ %514, %513 ], [ false, %516 ]
  %426 = phi i8* [ %507, %513 ], [ null, %516 ]
  %427 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %9, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1536, i8* nonnull %427) #13
  %428 = bitcast i64* %8 to i8*
  br label %429

; <label>:429:                                    ; preds = %449, %423
  %430 = phi i64 [ 5, %423 ], [ %446, %449 ]
  br label %431

; <label>:431:                                    ; preds = %443, %429
  %432 = phi i64 [ 0, %429 ], [ %447, %443 ]
  %433 = phi i64 [ 0, %429 ], [ %446, %443 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %428) #13
  store i64 %430, i64* %8, align 8
  %434 = add nuw nsw i64 %432, 131086
  %435 = trunc i64 %434 to i32
  %436 = call i8* @nl_langinfo(i32 %435) #13
  %437 = call i8* @strchr(i8* %436, i32 37) #13
  %438 = icmp eq i8* %437, null
  br i1 %438, label %439, label %459

; <label>:439:                                    ; preds = %431
  %440 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %9, i64 0, i64 %432, i64 0
  %441 = call i64 @mbsalign(i8* %436, i8* %440, i64 128, i64* nonnull %8, i32 0, i32 0) #13
  %442 = icmp ult i64 %441, 128
  br i1 %442, label %443, label %459

; <label>:443:                                    ; preds = %439
  %444 = load i64, i64* %8, align 8
  %445 = icmp ugt i64 %433, %444
  %446 = select i1 %445, i64 %433, i64 %444
  call void @llvm.lifetime.end(i64 8, i8* nonnull %428) #13
  %447 = add nuw nsw i64 %432, 1
  %448 = icmp slt i64 %447, 12
  br i1 %448, label %431, label %449

; <label>:449:                                    ; preds = %443
  %450 = icmp ugt i64 %430, %446
  br i1 %450, label %429, label %451

; <label>:451:                                    ; preds = %449
  %452 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  %453 = ptrtoint i8* %421 to i64
  %454 = ptrtoint i8* %452 to i64
  %455 = sub i64 %453, %454
  %456 = icmp slt i64 %455, 129
  %457 = trunc i64 %455 to i32
  %458 = getelementptr inbounds i8, i8* %421, i64 2
  br label %462

; <label>:459:                                    ; preds = %439, %431
  call void @llvm.lifetime.end(i64 8, i8* nonnull %428) #13
  br label %487

; <label>:460:                                    ; preds = %473
  %461 = icmp slt i64 %476, 12
  br i1 %461, label %462, label %477

; <label>:462:                                    ; preds = %460, %451
  %463 = phi i64 [ 0, %451 ], [ %476, %460 ]
  %464 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 0, i64 %463, i64 0
  br i1 %425, label %465, label %468

; <label>:465:                                    ; preds = %462
  %466 = call i64 @llvm.objectsize.i64.p0i8(i8* %464, i1 false) #13
  %467 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %464, i64 128, i32 1, i64 %466, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i64 0, i64 0), i8* %452) #13
  br label %473

; <label>:468:                                    ; preds = %462
  br i1 %456, label %469, label %486

; <label>:469:                                    ; preds = %468
  %470 = call i64 @llvm.objectsize.i64.p0i8(i8* %464, i1 false) #13
  %471 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %9, i64 0, i64 %463, i64 0
  %472 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %464, i64 128, i32 1, i64 %470, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.164, i64 0, i64 0), i32 %457, i8* %452, i8* %471, i8* %458) #13
  br label %473

; <label>:473:                                    ; preds = %469, %465
  %474 = phi i32 [ %472, %469 ], [ %467, %465 ]
  %475 = icmp ult i32 %474, 128
  %476 = add nuw nsw i64 %463, 1
  br i1 %475, label %460, label %486

; <label>:477:                                    ; preds = %460
  %478 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  %479 = ptrtoint i8* %426 to i64
  %480 = ptrtoint i8* %478 to i64
  %481 = sub i64 %479, %480
  %482 = icmp slt i64 %481, 129
  %483 = trunc i64 %481 to i32
  %484 = getelementptr inbounds i8, i8* %426, i64 2
  br label %488

; <label>:485:                                    ; preds = %491, %499
  br label %487

; <label>:486:                                    ; preds = %468, %473
  br label %487

; <label>:487:                                    ; preds = %486, %485, %505, %459
  call void @llvm.lifetime.end(i64 1536, i8* nonnull %427) #13
  br label %522

; <label>:488:                                    ; preds = %503, %477
  %489 = phi i64 [ 0, %477 ], [ %502, %503 ]
  %490 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 1, i64 %489, i64 0
  br i1 %424, label %496, label %491

; <label>:491:                                    ; preds = %488
  br i1 %482, label %492, label %485

; <label>:492:                                    ; preds = %491
  %493 = call i64 @llvm.objectsize.i64.p0i8(i8* %490, i1 false) #13
  %494 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %9, i64 0, i64 %489, i64 0
  %495 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %490, i64 128, i32 1, i64 %493, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.164, i64 0, i64 0), i32 %483, i8* %478, i8* %494, i8* %484) #13
  br label %499

; <label>:496:                                    ; preds = %488
  %497 = call i64 @llvm.objectsize.i64.p0i8(i8* %490, i1 false) #13
  %498 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %490, i64 128, i32 1, i64 %497, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i64 0, i64 0), i8* %478) #13
  br label %499

; <label>:499:                                    ; preds = %496, %492
  %500 = phi i32 [ %495, %492 ], [ %498, %496 ]
  %501 = icmp ult i32 %500, 128
  %502 = add nuw nsw i64 %489, 1
  br i1 %501, label %503, label %485

; <label>:503:                                    ; preds = %499
  %504 = icmp slt i64 %502, 12
  br i1 %504, label %488, label %505

; <label>:505:                                    ; preds = %503
  store i1 true, i1* @use_abformat, align 1
  br label %487

; <label>:506:                                    ; preds = %518, %420
  %507 = phi i8* [ %422, %420 ], [ %520, %518 ]
  %508 = load i8, i8* %507, align 1
  switch i8 %508, label %518 [
    i8 0, label %516
    i8 37, label %509
  ]

; <label>:509:                                    ; preds = %506
  %510 = getelementptr inbounds i8, i8* %507, i64 1
  %511 = load i8, i8* %510, align 1
  %512 = sext i8 %511 to i32
  switch i32 %512, label %518 [
    i32 98, label %513
    i32 37, label %515
  ]

; <label>:513:                                    ; preds = %509
  %514 = icmp eq i8* %421, null
  br label %423

; <label>:515:                                    ; preds = %509
  br label %518

; <label>:516:                                    ; preds = %506
  %517 = icmp eq i8* %421, null
  br i1 %517, label %522, label %423

; <label>:518:                                    ; preds = %515, %509, %506
  %519 = phi i8* [ %507, %509 ], [ %510, %515 ], [ %507, %506 ]
  %520 = getelementptr inbounds i8, i8* %519, i64 1
  br label %506

; <label>:521:                                    ; preds = %352
  br label %522

; <label>:522:                                    ; preds = %521, %338, %339, %487, %516
  %523 = load i32, i32* @optind, align 4
  %524 = load i8, i8* @print_with_color, align 1
  %525 = icmp eq i8 %524, 0
  br i1 %525, label %703, label %526

; <label>:526:                                    ; preds = %522
  %527 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %527) #13
  %528 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %528) #13
  %529 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %529) #13
  %530 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.165, i64 0, i64 0)) #13
  store i8* %530, i8** %5, align 8
  %531 = icmp eq i8* %530, null
  br i1 %531, label %535, label %532

; <label>:532:                                    ; preds = %526
  %533 = load i8, i8* %530, align 1
  %534 = icmp eq i8 %533, 0
  br i1 %534, label %535, label %565

; <label>:535:                                    ; preds = %532, %526
  %536 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i64 0, i64 0)) #13
  %537 = icmp eq i8* %536, null
  br i1 %537, label %541, label %538

; <label>:538:                                    ; preds = %535
  %539 = load i8, i8* %536, align 1
  %540 = icmp eq i8 %539, 0
  br i1 %540, label %541, label %665

; <label>:541:                                    ; preds = %538, %535
  %542 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171, i64 0, i64 0)) #13
  %543 = icmp eq i8* %542, null
  br i1 %543, label %564, label %544

; <label>:544:                                    ; preds = %541
  %545 = load i8, i8* %542, align 1
  %546 = icmp eq i8 %545, 0
  br i1 %546, label %564, label %547

; <label>:547:                                    ; preds = %544
  br label %548

; <label>:548:                                    ; preds = %547, %556
  %549 = phi i8* [ %559, %556 ], [ getelementptr inbounds ([4173 x i8], [4173 x i8]* @G_line, i64 0, i64 0), %547 ]
  %550 = call i32 @strncmp(i8* %549, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.172, i64 0, i64 0), i64 5) #16
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %556

; <label>:552:                                    ; preds = %548
  %553 = getelementptr inbounds i8, i8* %549, i64 5
  %554 = call i32 @fnmatch(i8* %553, i8* nonnull %542, i32 0) #13
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %664, label %556

; <label>:556:                                    ; preds = %552, %548
  %557 = call i64 @strlen(i8* %549) #16
  %558 = add i64 %557, 1
  %559 = getelementptr inbounds i8, i8* %549, i64 %558
  %560 = ptrtoint i8* %559 to i64
  %561 = sub i64 %560, ptrtoint ([4173 x i8]* @G_line to i64)
  %562 = icmp ult i64 %561, 4173
  br i1 %562, label %548, label %563

; <label>:563:                                    ; preds = %556
  br label %564

; <label>:564:                                    ; preds = %563, %544, %541
  store i8 0, i8* @print_with_color, align 1
  br label %665

; <label>:565:                                    ; preds = %532
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %529, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.167, i64 0, i64 0), i64 3, i32 1, i1 false) #13
  %566 = call noalias i8* @xstrdup(i8* nonnull %530) #13
  store i8* %566, i8** @color_buf, align 8
  store i8* %566, i8** %6, align 8
  %567 = bitcast i8** %6 to i64*
  %568 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 1
  br label %569

; <label>:569:                                    ; preds = %579, %565
  %570 = phi i32 [ 1, %565 ], [ %580, %579 ]
  %571 = phi %struct.color_ext_type* [ null, %565 ], [ %581, %579 ]
  %572 = trunc i32 %570 to i3
  switch i3 %572, label %640 [
    i3 1, label %573
    i3 2, label %597
    i3 3, label %603
    i3 -4, label %628
    i3 -2, label %641
  ]

; <label>:573:                                    ; preds = %569
  %574 = load i8*, i8** %5, align 8
  %575 = load i8, i8* %574, align 1
  %576 = sext i8 %575 to i32
  switch i32 %576, label %595 [
    i32 58, label %577
    i32 42, label %582
    i32 0, label %655
  ]

; <label>:577:                                    ; preds = %573
  %578 = getelementptr inbounds i8, i8* %574, i64 1
  store i8* %578, i8** %5, align 8
  br label %579

; <label>:579:                                    ; preds = %577, %582, %595, %597, %601, %603, %618, %625, %628, %633
  %580 = phi i32 [ %639, %633 ], [ 6, %625 ], [ 6, %603 ], [ 3, %601 ], [ 2, %595 ], [ %594, %582 ], [ 1, %577 ], [ 6, %597 ], [ 6, %628 ], [ 1, %618 ]
  %581 = phi %struct.color_ext_type* [ %571, %633 ], [ %571, %625 ], [ %571, %603 ], [ %571, %601 ], [ %571, %595 ], [ %584, %582 ], [ %571, %577 ], [ %571, %597 ], [ %571, %628 ], [ %571, %618 ]
  br label %569

; <label>:582:                                    ; preds = %573
  %583 = call noalias i8* @xmalloc(i64 40) #13
  %584 = bitcast i8* %583 to %struct.color_ext_type*
  %585 = load i64, i64* bitcast (%struct.color_ext_type** @color_ext_list to i64*), align 8
  %586 = getelementptr inbounds i8, i8* %583, i64 32
  %587 = bitcast i8* %586 to i64*
  store i64 %585, i64* %587, align 8
  store i8* %583, i8** bitcast (%struct.color_ext_type** @color_ext_list to i8**), align 8
  %588 = getelementptr inbounds i8, i8* %574, i64 1
  store i8* %588, i8** %5, align 8
  %589 = load i64, i64* %567, align 8
  %590 = getelementptr inbounds i8, i8* %583, i64 8
  %591 = bitcast i8* %590 to i64*
  store i64 %589, i64* %591, align 8
  %592 = bitcast i8* %583 to i64*
  %593 = call fastcc zeroext i1 @get_funky_string(i8** nonnull %6, i8** nonnull %5, i1 zeroext true, i64* %592) #13
  %594 = select i1 %593, i32 4, i32 6
  br label %579

; <label>:595:                                    ; preds = %573
  %596 = getelementptr inbounds i8, i8* %574, i64 1
  store i8* %596, i8** %5, align 8
  store i8 %575, i8* %529, align 1
  br label %579

; <label>:597:                                    ; preds = %569
  %598 = load i8*, i8** %5, align 8
  %599 = load i8, i8* %598, align 1
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %579, label %601

; <label>:601:                                    ; preds = %597
  %602 = getelementptr inbounds i8, i8* %598, i64 1
  store i8* %602, i8** %5, align 8
  store i8 %599, i8* %568, align 1
  br label %579

; <label>:603:                                    ; preds = %569
  %604 = load i8*, i8** %5, align 8
  %605 = getelementptr inbounds i8, i8* %604, i64 1
  store i8* %605, i8** %5, align 8
  %606 = load i8, i8* %604, align 1
  %607 = icmp eq i8 %606, 61
  br i1 %607, label %608, label %579

; <label>:608:                                    ; preds = %603
  br label %611

; <label>:609:                                    ; preds = %611
  %610 = icmp eq i64 %617, 24
  br i1 %610, label %624, label %611

; <label>:611:                                    ; preds = %608, %609
  %612 = phi i64 [ %617, %609 ], [ 0, %608 ]
  %613 = getelementptr inbounds [25 x i8*], [25 x i8*]* @indicator_name, i64 0, i64 %612
  %614 = load i8*, i8** %613, align 8
  %615 = call i32 @strcmp(i8* nonnull %529, i8* %614) #13
  %616 = icmp eq i32 %615, 0
  %617 = add nuw nsw i64 %612, 1
  br i1 %616, label %618, label %609

; <label>:618:                                    ; preds = %611
  %619 = load i64, i64* %567, align 8
  %620 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %612, i32 1
  %621 = bitcast i8** %620 to i64*
  store i64 %619, i64* %621, align 8
  %622 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %612, i32 0
  %623 = call fastcc zeroext i1 @get_funky_string(i8** nonnull %6, i8** nonnull %5, i1 zeroext false, i64* %622) #13
  br i1 %623, label %579, label %625

; <label>:624:                                    ; preds = %609
  br label %625

; <label>:625:                                    ; preds = %624, %618
  %626 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.168, i64 0, i64 0), i32 5) #13
  %627 = call i8* @quote(i8* nonnull %529) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %626, i8* %627) #13
  br label %579

; <label>:628:                                    ; preds = %569
  %629 = load i8*, i8** %5, align 8
  %630 = getelementptr inbounds i8, i8* %629, i64 1
  store i8* %630, i8** %5, align 8
  %631 = load i8, i8* %629, align 1
  %632 = icmp eq i8 %631, 61
  br i1 %632, label %633, label %579

; <label>:633:                                    ; preds = %628
  %634 = load i64, i64* %567, align 8
  %635 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %571, i64 0, i32 1, i32 1
  %636 = bitcast i8** %635 to i64*
  store i64 %634, i64* %636, align 8
  %637 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %571, i64 0, i32 1, i32 0
  %638 = call fastcc zeroext i1 @get_funky_string(i8** nonnull %6, i8** nonnull %5, i1 zeroext false, i64* %637) #13
  %639 = select i1 %638, i32 1, i32 6
  br label %579

; <label>:640:                                    ; preds = %569
  call void @abort() #15
  unreachable

; <label>:641:                                    ; preds = %569
  %642 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.169, i64 0, i64 0), i32 5) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %642) #13
  %643 = load i8*, i8** @color_buf, align 8
  call void @free(i8* %643) #13
  %644 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8
  %645 = icmp eq %struct.color_ext_type* %644, null
  br i1 %645, label %654, label %646

; <label>:646:                                    ; preds = %641
  br label %647

; <label>:647:                                    ; preds = %646, %647
  %648 = phi %struct.color_ext_type* [ %651, %647 ], [ %644, %646 ]
  %649 = bitcast %struct.color_ext_type* %648 to i8*
  %650 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %648, i64 0, i32 2
  %651 = load %struct.color_ext_type*, %struct.color_ext_type** %650, align 8
  call void @free(i8* %649) #13
  %652 = icmp eq %struct.color_ext_type* %651, null
  br i1 %652, label %653, label %647

; <label>:653:                                    ; preds = %647
  br label %654

; <label>:654:                                    ; preds = %653, %641
  store i8 0, i8* @print_with_color, align 1
  br label %656

; <label>:655:                                    ; preds = %573
  br label %656

; <label>:656:                                    ; preds = %655, %654
  %657 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 0), align 16
  %658 = icmp eq i64 %657, 6
  br i1 %658, label %659, label %665

; <label>:659:                                    ; preds = %656
  %660 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 1), align 8
  %661 = call i32 @strncmp(i8* %660, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i64 0, i64 0), i64 6) #16
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %663, label %665

; <label>:663:                                    ; preds = %659
  store i1 true, i1* @color_symlink_as_referent, align 1
  br label %665

; <label>:664:                                    ; preds = %552
  br label %665

; <label>:665:                                    ; preds = %664, %663, %659, %656, %564, %538
  call void @llvm.lifetime.end(i64 3, i8* nonnull %529) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %528) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %527) #13
  %666 = load i8, i8* @print_with_color, align 1
  %667 = icmp eq i8 %666, 0
  br i1 %667, label %703, label %668

; <label>:668:                                    ; preds = %665
  %669 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 13, i32 0), align 16
  %670 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 13, i32 1), align 8
  switch i64 %669, label %702 [
    i64 0, label %677
    i64 1, label %671
    i64 2, label %674
  ]

; <label>:671:                                    ; preds = %668
  %672 = load i8, i8* %670, align 1
  %673 = icmp eq i8 %672, 48
  br i1 %673, label %677, label %702

; <label>:674:                                    ; preds = %668
  %675 = call i32 @strncmp(i8* %670, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %677, label %702

; <label>:677:                                    ; preds = %674, %668, %671
  %678 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 0), align 16
  %679 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 1), align 8
  switch i64 %678, label %686 [
    i64 0, label %688
    i64 1, label %680
    i64 2, label %683
  ]

; <label>:680:                                    ; preds = %677
  %681 = load i8, i8* %679, align 1
  %682 = icmp eq i8 %681, 48
  br i1 %682, label %688, label %686

; <label>:683:                                    ; preds = %677
  %684 = call i32 @strncmp(i8* %679, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %688, label %686

; <label>:686:                                    ; preds = %683, %680, %677
  %687 = load i1, i1* @color_symlink_as_referent, align 1
  br i1 %687, label %702, label %688

; <label>:688:                                    ; preds = %683, %677, %680, %686
  %689 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 12, i32 0), align 16
  %690 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 12, i32 1), align 8
  switch i64 %689, label %697 [
    i64 0, label %703
    i64 1, label %691
    i64 2, label %694
  ]

; <label>:691:                                    ; preds = %688
  %692 = load i8, i8* %690, align 1
  %693 = icmp eq i8 %692, 48
  br i1 %693, label %703, label %697

; <label>:694:                                    ; preds = %688
  %695 = call i32 @strncmp(i8* %690, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %696 = icmp ne i32 %695, 0
  br label %697

; <label>:697:                                    ; preds = %688, %691, %694
  %698 = phi i1 [ %696, %694 ], [ true, %691 ], [ true, %688 ]
  %699 = load i32, i32* @format, align 4
  %700 = icmp eq i32 %699, 0
  %701 = and i1 %698, %700
  br i1 %701, label %702, label %703

; <label>:702:                                    ; preds = %674, %671, %668, %697, %686
  store i1 true, i1* @check_symlink_color, align 1
  br label %703

; <label>:703:                                    ; preds = %688, %691, %522, %665, %697, %702
  %704 = load i32, i32* @dereference, align 4
  %705 = icmp eq i32 %704, 1
  br i1 %705, label %706, label %715

; <label>:706:                                    ; preds = %703
  %707 = load i1, i1* @immediate_dirs, align 1
  %708 = load i32, i32* @indicator_style, align 4
  %709 = icmp eq i32 %708, 3
  %710 = or i1 %707, %709
  %711 = load i32, i32* @format, align 4
  %712 = icmp eq i32 %711, 0
  %713 = or i1 %710, %712
  %714 = select i1 %713, i32 2, i32 4
  store i32 %714, i32* @dereference, align 4
  br label %715

; <label>:715:                                    ; preds = %706, %703
  %716 = load i1, i1* @recursive, align 1
  br i1 %716, label %717, label %723

; <label>:717:                                    ; preds = %715
  %718 = call %struct.hash_table* @hash_initialize(i64 30, %struct.hash_tuning* null, i64 (i8*, i64)* nonnull @dev_ino_hash, i1 (i8*, i8*)* nonnull @dev_ino_compare, void (i8*)* nonnull @dev_ino_free) #13
  store %struct.hash_table* %718, %struct.hash_table** @active_dir_set, align 8
  %719 = icmp eq %struct.hash_table* %718, null
  br i1 %719, label %720, label %721

; <label>:720:                                    ; preds = %717
  call void @xalloc_die() #15
  unreachable

; <label>:721:                                    ; preds = %717
  %722 = call i32 @_obstack_begin(%struct.obstack* nonnull @dev_ino_obstack, i64 0, i64 0, i8* (i64)* nonnull @malloc, void (i8*)* nonnull @free) #13
  br label %723

; <label>:723:                                    ; preds = %721, %715
  %724 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #13
  %725 = call %struct.tm_zone* @tzalloc(i8* %724) #13
  store %struct.tm_zone* %725, %struct.tm_zone** @localtz, align 8
  %726 = load i32, i32* @format, align 4
  %727 = icmp eq i32 %726, 0
  br i1 %727, label %730, label %728

; <label>:728:                                    ; preds = %723
  %729 = load i32, i32* @sort_type, align 4
  switch i32 %729, label %731 [
    i32 4, label %730
    i32 2, label %730
  ]

; <label>:730:                                    ; preds = %728, %728, %723
  store i8 1, i8* @format_needs_stat, align 1
  br label %746

; <label>:731:                                    ; preds = %728
  %732 = load i1, i1* @print_scontext, align 1
  %733 = load i1, i1* @print_block_size, align 1
  %734 = or i1 %732, %733
  %735 = zext i1 %734 to i8
  store i8 %735, i8* @format_needs_stat, align 1
  br i1 %734, label %746, label %736

; <label>:736:                                    ; preds = %731
  %737 = load i1, i1* @recursive, align 1
  br i1 %737, label %746, label %738

; <label>:738:                                    ; preds = %736
  %739 = load i8, i8* @print_with_color, align 1
  %740 = icmp ne i8 %739, 0
  %741 = load i32, i32* @indicator_style, align 4
  %742 = icmp ne i32 %741, 0
  %743 = or i1 %740, %742
  %744 = load i1, i1* @directories_first, align 1
  %745 = or i1 %744, %743
  br label %746

; <label>:746:                                    ; preds = %730, %738, %736, %731
  %747 = phi i1 [ false, %731 ], [ true, %736 ], [ %745, %738 ], [ false, %730 ]
  %748 = zext i1 %747 to i8
  store i8 %748, i8* @format_needs_type, align 1
  %749 = load i1, i1* @dired, align 1
  br i1 %749, label %750, label %753

; <label>:750:                                    ; preds = %746
  %751 = call i32 @_obstack_begin(%struct.obstack* nonnull @dired_obstack, i64 0, i64 0, i8* (i64)* nonnull @malloc, void (i8*)* nonnull @free) #13
  %752 = call i32 @_obstack_begin(%struct.obstack* nonnull @subdired_obstack, i64 0, i64 0, i8* (i64)* nonnull @malloc, void (i8*)* nonnull @free) #13
  br label %753

; <label>:753:                                    ; preds = %746, %750
  store i64 100, i64* @cwd_n_alloc, align 8
  %754 = call noalias i8* @xmalloc(i64 19200) #13
  store i8* %754, i8** bitcast (%struct.fileinfo** @cwd_file to i8**), align 8
  store i64 0, i64* @cwd_n_used, align 8
  store i1 false, i1* @cwd_some_quoted, align 1
  store i8 0, i8* @any_has_acl, align 1
  store i32 0, i32* @inode_number_width, align 4
  store i32 0, i32* @block_size_width, align 4
  store i32 0, i32* @nlink_width, align 4
  store i32 0, i32* @owner_width, align 4
  store i32 0, i32* @group_width, align 4
  store i32 0, i32* @author_width, align 4
  store i32 0, i32* @scontext_width, align 4
  store i32 0, i32* @major_device_number_width, align 4
  store i32 0, i32* @minor_device_number_width, align 4
  store i32 0, i32* @file_size_width, align 4
  %755 = sub nsw i32 %0, %523
  %756 = icmp slt i32 %755, 1
  br i1 %756, label %760, label %757

; <label>:757:                                    ; preds = %753
  %758 = sext i32 %523 to i64
  %759 = sext i32 %0 to i64
  br label %774

; <label>:760:                                    ; preds = %753
  %761 = load i1, i1* @immediate_dirs, align 1
  br i1 %761, label %762, label %764

; <label>:762:                                    ; preds = %760
  %763 = call fastcc i64 @gobble_file(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 3, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  br label %782

; <label>:764:                                    ; preds = %760
  %765 = call noalias i8* @xmalloc(i64 32) #13
  %766 = getelementptr inbounds i8, i8* %765, i64 8
  %767 = bitcast i8* %766 to i8**
  store i8* null, i8** %767, align 8
  %768 = call noalias i8* @xstrdup(i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #13
  %769 = bitcast i8* %765 to i8**
  store i8* %768, i8** %769, align 8
  %770 = getelementptr inbounds i8, i8* %765, i64 16
  store i8 1, i8* %770, align 8
  %771 = load i64, i64* bitcast (%struct.pending** @pending_dirs to i64*), align 8
  %772 = getelementptr inbounds i8, i8* %765, i64 24
  %773 = bitcast i8* %772 to i64*
  store i64 %771, i64* %773, align 8
  store i8* %765, i8** bitcast (%struct.pending** @pending_dirs to i8**), align 8
  br label %782

; <label>:774:                                    ; preds = %757, %774
  %775 = phi i64 [ %758, %757 ], [ %776, %774 ]
  %776 = add nsw i64 %775, 1
  %777 = getelementptr inbounds i8*, i8** %1, i64 %775
  %778 = load i8*, i8** %777, align 8
  %779 = call fastcc i64 @gobble_file(i8* %778, i32 0, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %780 = icmp slt i64 %776, %759
  br i1 %780, label %774, label %781

; <label>:781:                                    ; preds = %774
  br label %782

; <label>:782:                                    ; preds = %781, %762, %764
  %783 = load i64, i64* @cwd_n_used, align 8
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %808, label %785

; <label>:785:                                    ; preds = %782
  call fastcc void @sort_files()
  %786 = load i1, i1* @immediate_dirs, align 1
  br i1 %786, label %788, label %787

; <label>:787:                                    ; preds = %785
  call fastcc void @extract_dirs_from_files(i8* null, i1 zeroext true)
  br label %788

; <label>:788:                                    ; preds = %785, %787
  %789 = load i64, i64* @cwd_n_used, align 8
  %790 = icmp eq i64 %789, 0
  br i1 %790, label %808, label %791

; <label>:791:                                    ; preds = %788
  call fastcc void @print_current_files()
  %792 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %793 = icmp eq %struct.pending* %792, null
  br i1 %793, label %1178, label %794

; <label>:794:                                    ; preds = %791
  %795 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %796 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %795, i64 0, i32 5
  %797 = load i8*, i8** %796, align 8
  %798 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %795, i64 0, i32 6
  %799 = load i8*, i8** %798, align 8
  %800 = icmp ult i8* %797, %799
  br i1 %800, label %803, label %801

; <label>:801:                                    ; preds = %794
  %802 = call i32 @__overflow(%struct._IO_FILE* %795, i32 10) #13
  br label %805

; <label>:803:                                    ; preds = %794
  %804 = getelementptr inbounds i8, i8* %797, i64 1
  store i8* %804, i8** %796, align 8
  store i8 10, i8* %797, align 1
  br label %805

; <label>:805:                                    ; preds = %801, %803
  %806 = load i64, i64* @dired_pos, align 8
  %807 = add i64 %806, 1
  store i64 %807, i64* @dired_pos, align 8
  br label %818

; <label>:808:                                    ; preds = %782, %788
  %809 = icmp slt i32 %755, 2
  %810 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %811 = icmp ne %struct.pending* %810, null
  %812 = and i1 %809, %811
  br i1 %812, label %813, label %820

; <label>:813:                                    ; preds = %808
  %814 = getelementptr inbounds %struct.pending, %struct.pending* %810, i64 0, i32 3
  %815 = load %struct.pending*, %struct.pending** %814, align 8
  %816 = icmp eq %struct.pending* %815, null
  br i1 %816, label %817, label %818

; <label>:817:                                    ; preds = %813
  store i1 false, i1* @print_dir_name, align 1
  br label %818

; <label>:818:                                    ; preds = %848, %1174, %813, %817, %805
  %819 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  br label %820

; <label>:820:                                    ; preds = %818, %808
  %821 = phi %struct.pending* [ %819, %818 ], [ %810, %808 ]
  %822 = icmp eq %struct.pending* %821, null
  br i1 %822, label %1178, label %823

; <label>:823:                                    ; preds = %820
  %824 = getelementptr inbounds %struct.pending, %struct.pending* %821, i64 0, i32 3
  %825 = bitcast %struct.pending** %824 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* bitcast (%struct.pending** @pending_dirs to i64*), align 8
  %827 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %828 = icmp ne %struct.hash_table* %827, null
  %829 = getelementptr inbounds %struct.pending, %struct.pending* %821, i64 0, i32 0
  %830 = load i8*, i8** %829, align 8
  %831 = icmp eq i8* %830, null
  %832 = and i1 %828, %831
  br i1 %832, label %833, label %853

; <label>:833:                                    ; preds = %823
  %834 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %834) #13
  %835 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 3), align 8
  %836 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 2) to i64*), align 8
  %837 = ptrtoint i8* %835 to i64
  %838 = sub i64 %837, %836
  %839 = icmp ugt i64 %838, 15
  br i1 %839, label %841, label %840

; <label>:840:                                    ; preds = %833
  call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1013, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__PRETTY_FUNCTION__.dev_ino_pop, i64 0, i64 0)) #15
  unreachable

; <label>:841:                                    ; preds = %833
  %842 = getelementptr inbounds i8, i8* %835, i64 -16
  store i8* %842, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 3), align 8
  %843 = bitcast i8* %842 to <2 x i64>*
  %844 = load <2 x i64>, <2 x i64>* %843, align 8
  store <2 x i64> %844, <2 x i64>* %15, align 16
  %845 = call i8* @hash_delete(%struct.hash_table* nonnull %827, i8* nonnull %834) #13
  %846 = icmp eq i8* %845, null
  br i1 %846, label %847, label %848

; <label>:847:                                    ; preds = %841
  call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1563, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #15
  unreachable

; <label>:848:                                    ; preds = %841
  call void @free(i8* nonnull %845) #13
  %849 = load i8*, i8** %829, align 8
  call void @free(i8* %849) #13
  %850 = getelementptr inbounds %struct.pending, %struct.pending* %821, i64 0, i32 1
  %851 = load i8*, i8** %850, align 8
  call void @free(i8* %851) #13
  %852 = bitcast %struct.pending* %821 to i8*
  call void @free(i8* %852) #13
  call void @llvm.lifetime.end(i64 16, i8* nonnull %834) #13
  br label %818

; <label>:853:                                    ; preds = %823
  %854 = getelementptr inbounds %struct.pending, %struct.pending* %821, i64 0, i32 1
  %855 = load i8*, i8** %854, align 8
  %856 = getelementptr inbounds %struct.pending, %struct.pending* %821, i64 0, i32 2
  %857 = load i8, i8* %856, align 8
  %858 = icmp ne i8 %857, 0
  %859 = tail call i32* @__errno_location() #1
  store i32 0, i32* %859, align 4
  %860 = call %struct.__dirstream* @opendir(i8* %830) #13
  %861 = icmp eq %struct.__dirstream* %860, null
  br i1 %861, label %862, label %871

; <label>:862:                                    ; preds = %853
  %863 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.196, i64 0, i64 0), i32 5) #13
  %864 = load i32, i32* %859, align 4
  %865 = call i8* @quotearg_style(i32 4, i8* %830) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %864, i8* %863, i8* %865) #13
  br i1 %858, label %869, label %866

; <label>:866:                                    ; preds = %862
  %867 = load i32, i32* @exit_status, align 4
  %868 = icmp eq i32 %867, 0
  br i1 %868, label %869, label %1174

; <label>:869:                                    ; preds = %866, %862
  %870 = phi i32 [ 1, %866 ], [ 2, %862 ]
  store i32 %870, i32* @exit_status, align 4
  br label %1174

; <label>:871:                                    ; preds = %853
  %872 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %873 = icmp eq %struct.hash_table* %872, null
  br i1 %873, label %931, label %874

; <label>:874:                                    ; preds = %871
  %875 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %875) #13
  %876 = call i32 @dirfd(%struct.__dirstream* nonnull %860) #13
  %877 = icmp sgt i32 %876, -1
  br i1 %877, label %878, label %880

; <label>:878:                                    ; preds = %874
  %879 = call i32 @__fxstat(i32 1, i32 %876, %struct.stat* nonnull %3) #13
  br label %882

; <label>:880:                                    ; preds = %874
  %881 = call i32 @__xstat(i32 1, i8* nonnull %830, %struct.stat* nonnull %3) #13
  br label %882

; <label>:882:                                    ; preds = %880, %878
  %883 = phi i32 [ %879, %878 ], [ %881, %880 ]
  %884 = icmp slt i32 %883, 0
  br i1 %884, label %885, label %896

; <label>:885:                                    ; preds = %882
  %886 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.197, i64 0, i64 0), i32 5) #13
  %887 = load i32, i32* %859, align 4
  %888 = call i8* @quotearg_style(i32 4, i8* %830) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %887, i8* %886, i8* %888) #13
  br i1 %858, label %892, label %889

; <label>:889:                                    ; preds = %885
  %890 = load i32, i32* @exit_status, align 4
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %892, label %894

; <label>:892:                                    ; preds = %889, %885
  %893 = phi i32 [ 1, %889 ], [ 2, %885 ]
  store i32 %893, i32* @exit_status, align 4
  br label %894

; <label>:894:                                    ; preds = %892, %889
  %895 = call i32 @closedir(%struct.__dirstream* nonnull %860) #13
  call void @llvm.lifetime.end(i64 144, i8* nonnull %875) #13
  br label %1174

; <label>:896:                                    ; preds = %882
  %897 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 0
  %898 = load i64, i64* %897, align 8
  %899 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 1
  %900 = load i64, i64* %899, align 8
  %901 = call noalias i8* @xmalloc(i64 16) #13
  %902 = bitcast i8* %901 to i64*
  store i64 %900, i64* %902, align 8
  %903 = getelementptr inbounds i8, i8* %901, i64 8
  %904 = bitcast i8* %903 to i64*
  store i64 %898, i64* %904, align 8
  %905 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %906 = call i8* @hash_insert(%struct.hash_table* %905, i8* %901) #13
  %907 = icmp eq i8* %906, null
  br i1 %907, label %908, label %909

; <label>:908:                                    ; preds = %896
  call void @xalloc_die() #15
  unreachable

; <label>:909:                                    ; preds = %896
  %910 = icmp eq i8* %906, %901
  br i1 %910, label %915, label %911

; <label>:911:                                    ; preds = %909
  call void @free(i8* %901) #13
  %912 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.198, i64 0, i64 0), i32 5) #13
  %913 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %830) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %912, i8* %913) #13
  %914 = call i32 @closedir(%struct.__dirstream* nonnull %860) #13
  store i32 2, i32* @exit_status, align 4
  call void @llvm.lifetime.end(i64 144, i8* nonnull %875) #13
  br label %1174

; <label>:915:                                    ; preds = %909
  %916 = load i64, i64* %897, align 8
  %917 = load i64, i64* %899, align 8
  %918 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 4) to i64*), align 8
  %919 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 3) to i64*), align 8
  %920 = sub i64 %918, %919
  %921 = icmp ult i64 %920, 16
  %922 = inttoptr i64 %919 to i8*
  br i1 %921, label %923, label %925

; <label>:923:                                    ; preds = %915
  call void @_obstack_newchunk(%struct.obstack* nonnull @dev_ino_obstack, i64 16) #13
  %924 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 3), align 8
  br label %925

; <label>:925:                                    ; preds = %923, %915
  %926 = phi i8* [ %924, %923 ], [ %922, %915 ]
  %927 = getelementptr inbounds i8, i8* %926, i64 16
  store i8* %927, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i64 0, i32 3), align 8
  %928 = getelementptr inbounds i8, i8* %926, i64 8
  %929 = bitcast i8* %928 to i64*
  store i64 %916, i64* %929, align 8
  %930 = bitcast i8* %926 to i64*
  store i64 %917, i64* %930, align 8
  call void @llvm.lifetime.end(i64 144, i8* nonnull %875) #13
  br label %931

; <label>:931:                                    ; preds = %925, %871
  %932 = load i64, i64* @cwd_n_used, align 8
  %933 = icmp eq i64 %932, 0
  br i1 %933, label %949, label %934

; <label>:934:                                    ; preds = %931
  br label %935

; <label>:935:                                    ; preds = %934, %935
  %936 = phi i64 [ %945, %935 ], [ 0, %934 ]
  %937 = load i8**, i8*** @sorted_file, align 8
  %938 = getelementptr inbounds i8*, i8** %937, i64 %936
  %939 = bitcast i8** %938 to %struct.fileinfo**
  %940 = load %struct.fileinfo*, %struct.fileinfo** %939, align 8
  %941 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %940, i64 0, i32 0
  %942 = load i8*, i8** %941, align 8
  call void @free(i8* %942) #13
  %943 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %940, i64 0, i32 1
  %944 = load i8*, i8** %943, align 8
  call void @free(i8* %944) #13
  %945 = add i64 %936, 1
  %946 = load i64, i64* @cwd_n_used, align 8
  %947 = icmp ult i64 %945, %946
  br i1 %947, label %935, label %948

; <label>:948:                                    ; preds = %935
  br label %949

; <label>:949:                                    ; preds = %948, %931
  store i64 0, i64* @cwd_n_used, align 8
  store i1 false, i1* @cwd_some_quoted, align 1
  store i8 0, i8* @any_has_acl, align 1
  store i32 0, i32* @inode_number_width, align 4
  store i32 0, i32* @block_size_width, align 4
  store i32 0, i32* @nlink_width, align 4
  store i32 0, i32* @owner_width, align 4
  store i32 0, i32* @group_width, align 4
  store i32 0, i32* @author_width, align 4
  store i32 0, i32* @scontext_width, align 4
  store i32 0, i32* @major_device_number_width, align 4
  store i32 0, i32* @minor_device_number_width, align 4
  store i32 0, i32* @file_size_width, align 4
  %950 = load i1, i1* @recursive, align 1
  br i1 %950, label %953, label %951

; <label>:951:                                    ; preds = %949
  %952 = load i1, i1* @print_dir_name, align 1
  br i1 %952, label %953, label %985

; <label>:953:                                    ; preds = %951, %949
  %954 = load i1, i1* @print_dir.first, align 1
  br i1 %954, label %955, label %969

; <label>:955:                                    ; preds = %953
  %956 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %957 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %956, i64 0, i32 5
  %958 = load i8*, i8** %957, align 8
  %959 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %956, i64 0, i32 6
  %960 = load i8*, i8** %959, align 8
  %961 = icmp ult i8* %958, %960
  br i1 %961, label %964, label %962

; <label>:962:                                    ; preds = %955
  %963 = call i32 @__overflow(%struct._IO_FILE* %956, i32 10) #13
  br label %966

; <label>:964:                                    ; preds = %955
  %965 = getelementptr inbounds i8, i8* %958, i64 1
  store i8* %965, i8** %957, align 8
  store i8 10, i8* %958, align 1
  br label %966

; <label>:966:                                    ; preds = %964, %962
  %967 = load i64, i64* @dired_pos, align 8
  %968 = add i64 %967, 1
  store i64 %968, i64* @dired_pos, align 8
  br label %969

; <label>:969:                                    ; preds = %966, %953
  store i1 true, i1* @print_dir.first, align 1
  %970 = load i1, i1* @dired, align 1
  br i1 %970, label %971, label %976

; <label>:971:                                    ; preds = %969
  %972 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %973 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i64 0, i64 0), %struct._IO_FILE* %972) #13
  %974 = load i64, i64* @dired_pos, align 8
  %975 = add i64 %974, 2
  store i64 %975, i64* @dired_pos, align 8
  br label %976

; <label>:976:                                    ; preds = %971, %969
  %977 = icmp ne i8* %855, null
  %978 = select i1 %977, i8* %855, i8* %830
  %979 = load %struct.quoting_options*, %struct.quoting_options** @dirname_quoting_options, align 8
  %980 = call fastcc i64 @quote_name(i8* %978, %struct.quoting_options* %979, i32 -1, %struct.bin_str* null, i1 zeroext true, %struct.obstack* nonnull @subdired_obstack) #13
  %981 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %982 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i64 0, i64 0), %struct._IO_FILE* %981) #13
  %983 = load i64, i64* @dired_pos, align 8
  %984 = add i64 %983, 2
  store i64 %984, i64* @dired_pos, align 8
  br label %985

; <label>:985:                                    ; preds = %951, %976
  br label %986

; <label>:986:                                    ; preds = %985, %1097
  %987 = phi i64 [ %1098, %1097 ], [ 0, %985 ]
  store i32 0, i32* %859, align 4
  %988 = call %struct.dirent* @readdir(%struct.__dirstream* nonnull %860) #13
  %989 = icmp eq %struct.dirent* %988, null
  br i1 %989, label %1080, label %990

; <label>:990:                                    ; preds = %986
  %991 = getelementptr inbounds %struct.dirent, %struct.dirent* %988, i64 0, i32 4, i64 0
  %992 = load i32, i32* @ignore_mode, align 4
  %993 = icmp eq i32 %992, 2
  br i1 %993, label %1024, label %994

; <label>:994:                                    ; preds = %990
  %995 = load i8, i8* %991, align 1
  %996 = icmp eq i8 %995, 46
  br i1 %996, label %997, label %1007

; <label>:997:                                    ; preds = %994
  %998 = icmp eq i32 %992, 0
  br i1 %998, label %1097, label %999

; <label>:999:                                    ; preds = %997
  %1000 = getelementptr inbounds %struct.dirent, %struct.dirent* %988, i64 0, i32 4, i64 1
  %1001 = load i8, i8* %1000, align 1
  %1002 = icmp eq i8 %1001, 46
  %1003 = select i1 %1002, i64 2, i64 1
  %1004 = getelementptr inbounds %struct.dirent, %struct.dirent* %988, i64 0, i32 4, i64 %1003
  %1005 = load i8, i8* %1004, align 1
  %1006 = icmp eq i8 %1005, 0
  br i1 %1006, label %1097, label %1007

; <label>:1007:                                   ; preds = %999, %994
  %1008 = icmp eq i32 %992, 0
  br i1 %1008, label %1009, label %1024

; <label>:1009:                                   ; preds = %1007
  %1010 = load %struct.ignore_pattern*, %struct.ignore_pattern** @hide_patterns, align 8
  %1011 = icmp eq %struct.ignore_pattern* %1010, null
  br i1 %1011, label %1024, label %1012

; <label>:1012:                                   ; preds = %1009
  br label %1013

; <label>:1013:                                   ; preds = %1012, %1019
  %1014 = phi %struct.ignore_pattern* [ %1021, %1019 ], [ %1010, %1012 ]
  %1015 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %1014, i64 0, i32 0
  %1016 = load i8*, i8** %1015, align 8
  %1017 = call i32 @fnmatch(i8* %1016, i8* %991, i32 4) #13
  %1018 = icmp eq i32 %1017, 0
  br i1 %1018, label %1096, label %1019

; <label>:1019:                                   ; preds = %1013
  %1020 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %1014, i64 0, i32 1
  %1021 = load %struct.ignore_pattern*, %struct.ignore_pattern** %1020, align 8
  %1022 = icmp eq %struct.ignore_pattern* %1021, null
  br i1 %1022, label %1023, label %1013

; <label>:1023:                                   ; preds = %1019
  br label %1024

; <label>:1024:                                   ; preds = %1023, %1009, %1007, %990
  %1025 = load %struct.ignore_pattern*, %struct.ignore_pattern** @ignore_patterns, align 8
  %1026 = icmp eq %struct.ignore_pattern* %1025, null
  br i1 %1026, label %1039, label %1027

; <label>:1027:                                   ; preds = %1024
  br label %1028

; <label>:1028:                                   ; preds = %1027, %1034
  %1029 = phi %struct.ignore_pattern* [ %1036, %1034 ], [ %1025, %1027 ]
  %1030 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %1029, i64 0, i32 0
  %1031 = load i8*, i8** %1030, align 8
  %1032 = call i32 @fnmatch(i8* %1031, i8* %991, i32 4) #13
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1095, label %1034

; <label>:1034:                                   ; preds = %1028
  %1035 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %1029, i64 0, i32 1
  %1036 = load %struct.ignore_pattern*, %struct.ignore_pattern** %1035, align 8
  %1037 = icmp eq %struct.ignore_pattern* %1036, null
  br i1 %1037, label %1038, label %1028

; <label>:1038:                                   ; preds = %1034
  br label %1039

; <label>:1039:                                   ; preds = %1038, %1024
  %1040 = getelementptr inbounds %struct.dirent, %struct.dirent* %988, i64 0, i32 3
  %1041 = load i8, i8* %1040, align 2
  %1042 = add i8 %1041, -1
  %1043 = icmp ult i8 %1042, 14
  br i1 %1043, label %1044, label %1048

; <label>:1044:                                   ; preds = %1039
  %1045 = sext i8 %1042 to i64
  %1046 = getelementptr inbounds [14 x i32], [14 x i32]* @switch.table, i64 0, i64 %1045
  %1047 = load i32, i32* %1046, align 4
  br label %1048

; <label>:1048:                                   ; preds = %1044, %1039
  %1049 = phi i32 [ 0, %1039 ], [ %1047, %1044 ]
  %1050 = call fastcc i64 @gobble_file(i8* nonnull %991, i32 %1049, i1 zeroext false, i8* %830) #13
  %1051 = add i64 %1050, %987
  %1052 = load i32, i32* @format, align 4
  %1053 = icmp eq i32 %1052, 1
  %1054 = load i32, i32* @sort_type, align 4
  %1055 = icmp eq i32 %1054, -1
  %1056 = and i1 %1053, %1055
  br i1 %1056, label %1057, label %1097

; <label>:1057:                                   ; preds = %1048
  %1058 = load i1, i1* @print_block_size, align 1
  br i1 %1058, label %1097, label %1059

; <label>:1059:                                   ; preds = %1057
  %1060 = load i1, i1* @recursive, align 1
  br i1 %1060, label %1097, label %1061

; <label>:1061:                                   ; preds = %1059
  call fastcc void @sort_files() #13
  call fastcc void @print_current_files() #13
  %1062 = load i64, i64* @cwd_n_used, align 8
  %1063 = icmp eq i64 %1062, 0
  br i1 %1063, label %1079, label %1064

; <label>:1064:                                   ; preds = %1061
  br label %1065

; <label>:1065:                                   ; preds = %1064, %1065
  %1066 = phi i64 [ %1075, %1065 ], [ 0, %1064 ]
  %1067 = load i8**, i8*** @sorted_file, align 8
  %1068 = getelementptr inbounds i8*, i8** %1067, i64 %1066
  %1069 = bitcast i8** %1068 to %struct.fileinfo**
  %1070 = load %struct.fileinfo*, %struct.fileinfo** %1069, align 8
  %1071 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1070, i64 0, i32 0
  %1072 = load i8*, i8** %1071, align 8
  call void @free(i8* %1072) #13
  %1073 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1070, i64 0, i32 1
  %1074 = load i8*, i8** %1073, align 8
  call void @free(i8* %1074) #13
  %1075 = add i64 %1066, 1
  %1076 = load i64, i64* @cwd_n_used, align 8
  %1077 = icmp ult i64 %1075, %1076
  br i1 %1077, label %1065, label %1078

; <label>:1078:                                   ; preds = %1065
  br label %1079

; <label>:1079:                                   ; preds = %1078, %1061
  store i64 0, i64* @cwd_n_used, align 8
  store i1 false, i1* @cwd_some_quoted, align 1
  store i8 0, i8* @any_has_acl, align 1
  store i32 0, i32* @inode_number_width, align 4
  store i32 0, i32* @block_size_width, align 4
  store i32 0, i32* @nlink_width, align 4
  store i32 0, i32* @owner_width, align 4
  store i32 0, i32* @group_width, align 4
  store i32 0, i32* @author_width, align 4
  store i32 0, i32* @scontext_width, align 4
  store i32 0, i32* @major_device_number_width, align 4
  store i32 0, i32* @minor_device_number_width, align 4
  store i32 0, i32* @file_size_width, align 4
  br label %1097

; <label>:1080:                                   ; preds = %986
  %1081 = load i32, i32* %859, align 4
  %1082 = icmp eq i32 %1081, 0
  br i1 %1082, label %1099, label %1083

; <label>:1083:                                   ; preds = %1080
  %1084 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.201, i64 0, i64 0), i32 5) #13
  %1085 = load i32, i32* %859, align 4
  %1086 = call i8* @quotearg_style(i32 4, i8* %830) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1085, i8* %1084, i8* %1086) #13
  br i1 %858, label %1090, label %1087

; <label>:1087:                                   ; preds = %1083
  %1088 = load i32, i32* @exit_status, align 4
  %1089 = icmp eq i32 %1088, 0
  br i1 %1089, label %1090, label %1092

; <label>:1090:                                   ; preds = %1087, %1083
  %1091 = phi i32 [ 1, %1087 ], [ 2, %1083 ]
  store i32 %1091, i32* @exit_status, align 4
  br label %1092

; <label>:1092:                                   ; preds = %1090, %1087
  %1093 = load i32, i32* %859, align 4
  %1094 = icmp eq i32 %1093, 75
  br i1 %1094, label %1097, label %1099

; <label>:1095:                                   ; preds = %1028
  br label %1097

; <label>:1096:                                   ; preds = %1013
  br label %1097

; <label>:1097:                                   ; preds = %1096, %1095, %1092, %1079, %1059, %1057, %1048, %999, %997
  %1098 = phi i64 [ %987, %1092 ], [ %1051, %1079 ], [ %1051, %1059 ], [ %1051, %1057 ], [ %1051, %1048 ], [ %987, %999 ], [ %987, %997 ], [ %987, %1095 ], [ %987, %1096 ]
  call fastcc void @process_signals() #13
  br label %986

; <label>:1099:                                   ; preds = %1092, %1080
  %1100 = call i32 @closedir(%struct.__dirstream* nonnull %860) #13
  %1101 = icmp eq i32 %1100, 0
  br i1 %1101, label %1111, label %1102

; <label>:1102:                                   ; preds = %1099
  %1103 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.202, i64 0, i64 0), i32 5) #13
  %1104 = load i32, i32* %859, align 4
  %1105 = call i8* @quotearg_style(i32 4, i8* %830) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1104, i8* %1103, i8* %1105) #13
  br i1 %858, label %1109, label %1106

; <label>:1106:                                   ; preds = %1102
  %1107 = load i32, i32* @exit_status, align 4
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1109, label %1111

; <label>:1109:                                   ; preds = %1106, %1102
  %1110 = phi i32 [ 1, %1106 ], [ 2, %1102 ]
  store i32 %1110, i32* @exit_status, align 4
  br label %1111

; <label>:1111:                                   ; preds = %1109, %1106, %1099
  call fastcc void @sort_files() #13
  %1112 = load i1, i1* @recursive, align 1
  br i1 %1112, label %1113, label %1114

; <label>:1113:                                   ; preds = %1111
  call fastcc void @extract_dirs_from_files(i8* %830, i1 zeroext false) #13
  br label %1114

; <label>:1114:                                   ; preds = %1113, %1111
  %1115 = load i32, i32* @format, align 4
  %1116 = icmp eq i32 %1115, 0
  br i1 %1116, label %1119, label %1117

; <label>:1117:                                   ; preds = %1114
  %1118 = load i1, i1* @print_block_size, align 1
  br i1 %1118, label %1119, label %1170

; <label>:1119:                                   ; preds = %1117, %1114
  %1120 = getelementptr inbounds [652 x i8], [652 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 652, i8* nonnull %1120) #13
  %1121 = load i1, i1* @dired, align 1
  br i1 %1121, label %1122, label %1127

; <label>:1122:                                   ; preds = %1119
  %1123 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1124 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i64 0, i64 0), %struct._IO_FILE* %1123) #13
  %1125 = load i64, i64* @dired_pos, align 8
  %1126 = add i64 %1125, 2
  store i64 %1126, i64* @dired_pos, align 8
  br label %1127

; <label>:1127:                                   ; preds = %1122, %1119
  %1128 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.203, i64 0, i64 0), i32 5) #13
  %1129 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1130 = call i32 @fputs_unlocked(i8* %1128, %struct._IO_FILE* %1129) #13
  %1131 = call i64 @strlen(i8* %1128) #16
  %1132 = load i64, i64* @dired_pos, align 8
  %1133 = add i64 %1132, %1131
  store i64 %1133, i64* @dired_pos, align 8
  %1134 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1135 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %1134, i64 0, i32 5
  %1136 = load i8*, i8** %1135, align 8
  %1137 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %1134, i64 0, i32 6
  %1138 = load i8*, i8** %1137, align 8
  %1139 = icmp ult i8* %1136, %1138
  br i1 %1139, label %1143, label %1140

; <label>:1140:                                   ; preds = %1127
  %1141 = call i32 @__overflow(%struct._IO_FILE* %1134, i32 32) #13
  %1142 = load i64, i64* @dired_pos, align 8
  br label %1145

; <label>:1143:                                   ; preds = %1127
  %1144 = getelementptr inbounds i8, i8* %1136, i64 1
  store i8* %1144, i8** %1135, align 8
  store i8 32, i8* %1136, align 1
  br label %1145

; <label>:1145:                                   ; preds = %1143, %1140
  %1146 = phi i64 [ %1142, %1140 ], [ %1133, %1143 ]
  %1147 = add i64 %1146, 1
  store i64 %1147, i64* @dired_pos, align 8
  %1148 = load i32, i32* @human_output_opts, align 4
  %1149 = load i64, i64* @output_block_size, align 8
  %1150 = call i8* @human_readable(i64 %987, i8* nonnull %1120, i32 %1148, i64 512, i64 %1149) #13
  %1151 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1152 = call i32 @fputs_unlocked(i8* %1150, %struct._IO_FILE* %1151) #13
  %1153 = call i64 @strlen(i8* %1150) #16
  %1154 = load i64, i64* @dired_pos, align 8
  %1155 = add i64 %1154, %1153
  store i64 %1155, i64* @dired_pos, align 8
  %1156 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1157 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %1156, i64 0, i32 5
  %1158 = load i8*, i8** %1157, align 8
  %1159 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %1156, i64 0, i32 6
  %1160 = load i8*, i8** %1159, align 8
  %1161 = icmp ult i8* %1158, %1160
  br i1 %1161, label %1165, label %1162

; <label>:1162:                                   ; preds = %1145
  %1163 = call i32 @__overflow(%struct._IO_FILE* %1156, i32 10) #13
  %1164 = load i64, i64* @dired_pos, align 8
  br label %1167

; <label>:1165:                                   ; preds = %1145
  %1166 = getelementptr inbounds i8, i8* %1158, i64 1
  store i8* %1166, i8** %1157, align 8
  store i8 10, i8* %1158, align 1
  br label %1167

; <label>:1167:                                   ; preds = %1165, %1162
  %1168 = phi i64 [ %1164, %1162 ], [ %1155, %1165 ]
  %1169 = add i64 %1168, 1
  store i64 %1169, i64* @dired_pos, align 8
  call void @llvm.lifetime.end(i64 652, i8* nonnull %1120) #13
  br label %1170

; <label>:1170:                                   ; preds = %1167, %1117
  %1171 = load i64, i64* @cwd_n_used, align 8
  %1172 = icmp eq i64 %1171, 0
  br i1 %1172, label %1174, label %1173

; <label>:1173:                                   ; preds = %1170
  call fastcc void @print_current_files() #13
  br label %1174

; <label>:1174:                                   ; preds = %866, %869, %894, %911, %1170, %1173
  %1175 = load i8*, i8** %829, align 8
  call void @free(i8* %1175) #13
  %1176 = load i8*, i8** %854, align 8
  call void @free(i8* %1176) #13
  %1177 = bitcast %struct.pending* %821 to i8*
  call void @free(i8* %1177) #13
  store i1 true, i1* @print_dir_name, align 1
  br label %818

; <label>:1178:                                   ; preds = %791, %820
  %1179 = load i8, i8* @print_with_color, align 1
  %1180 = icmp eq i8 %1179, 0
  br i1 %1180, label %1293, label %1181

; <label>:1181:                                   ; preds = %1178
  %1182 = load i1, i1* @used_color, align 1
  br i1 %1182, label %1183, label %1293

; <label>:1183:                                   ; preds = %1181
  %1184 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %1185 = icmp eq i64 %1184, 2
  br i1 %1185, label %1186, label %1197

; <label>:1186:                                   ; preds = %1183
  %1187 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %1188 = call i32 @memcmp(i8* %1187, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2) #16
  %1189 = icmp eq i32 %1188, 0
  %1190 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %1191 = icmp eq i64 %1190, 1
  %1192 = and i1 %1189, %1191
  br i1 %1192, label %1193, label %1197

; <label>:1193:                                   ; preds = %1186
  %1194 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %1195 = load i8, i8* %1194, align 1
  %1196 = icmp eq i8 %1195, 109
  br i1 %1196, label %1216, label %1197

; <label>:1197:                                   ; preds = %1193, %1186, %1183
  %1198 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %1199 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1200 = call i64 @fwrite_unlocked(i8* %1198, i64 %1184, i64 1, %struct._IO_FILE* %1199) #13
  %1201 = load i1, i1* @used_color, align 1
  br i1 %1201, label %1211, label %1202

; <label>:1202:                                   ; preds = %1197
  store i1 true, i1* @used_color, align 1
  %1203 = call i32 @tcgetpgrp(i32 1) #13
  %1204 = icmp sgt i32 %1203, -1
  br i1 %1204, label %1205, label %1206

; <label>:1205:                                   ; preds = %1202
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %1206

; <label>:1206:                                   ; preds = %1205, %1202
  %1207 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %1208 = icmp eq i8* %1207, null
  br i1 %1208, label %1210, label %1209

; <label>:1209:                                   ; preds = %1206
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %1211

; <label>:1210:                                   ; preds = %1206
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %1211

; <label>:1211:                                   ; preds = %1210, %1209, %1197
  %1212 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %1213 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %1214 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1215 = call i64 @fwrite_unlocked(i8* %1212, i64 %1213, i64 1, %struct._IO_FILE* %1214) #13
  br label %1216

; <label>:1216:                                   ; preds = %1211, %1193
  %1217 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1218 = call i32 @fflush_unlocked(%struct._IO_FILE* %1217) #13
  %1219 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 20) #13
  %1220 = icmp eq i32 %1219, 0
  br i1 %1220, label %1223, label %1221

; <label>:1221:                                   ; preds = %1216
  %1222 = call void (i32)* @signal(i32 20, void (i32)* null) #13
  br label %1223

; <label>:1223:                                   ; preds = %1221, %1216
  %1224 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 14) #13
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1228, label %1226

; <label>:1226:                                   ; preds = %1223
  %1227 = call void (i32)* @signal(i32 14, void (i32)* null) #13
  br label %1228

; <label>:1228:                                   ; preds = %1226, %1223
  %1229 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 1) #13
  %1230 = icmp eq i32 %1229, 0
  br i1 %1230, label %1233, label %1231

; <label>:1231:                                   ; preds = %1228
  %1232 = call void (i32)* @signal(i32 1, void (i32)* null) #13
  br label %1233

; <label>:1233:                                   ; preds = %1231, %1228
  %1234 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 2) #13
  %1235 = icmp eq i32 %1234, 0
  br i1 %1235, label %1238, label %1236

; <label>:1236:                                   ; preds = %1233
  %1237 = call void (i32)* @signal(i32 2, void (i32)* null) #13
  br label %1238

; <label>:1238:                                   ; preds = %1236, %1233
  %1239 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 13) #13
  %1240 = icmp eq i32 %1239, 0
  br i1 %1240, label %1243, label %1241

; <label>:1241:                                   ; preds = %1238
  %1242 = call void (i32)* @signal(i32 13, void (i32)* null) #13
  br label %1243

; <label>:1243:                                   ; preds = %1241, %1238
  %1244 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 3) #13
  %1245 = icmp eq i32 %1244, 0
  br i1 %1245, label %1248, label %1246

; <label>:1246:                                   ; preds = %1243
  %1247 = call void (i32)* @signal(i32 3, void (i32)* null) #13
  br label %1248

; <label>:1248:                                   ; preds = %1246, %1243
  %1249 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 15) #13
  %1250 = icmp eq i32 %1249, 0
  br i1 %1250, label %1253, label %1251

; <label>:1251:                                   ; preds = %1248
  %1252 = call void (i32)* @signal(i32 15, void (i32)* null) #13
  br label %1253

; <label>:1253:                                   ; preds = %1251, %1248
  %1254 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 29) #13
  %1255 = icmp eq i32 %1254, 0
  br i1 %1255, label %1258, label %1256

; <label>:1256:                                   ; preds = %1253
  %1257 = call void (i32)* @signal(i32 29, void (i32)* null) #13
  br label %1258

; <label>:1258:                                   ; preds = %1256, %1253
  %1259 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 27) #13
  %1260 = icmp eq i32 %1259, 0
  br i1 %1260, label %1263, label %1261

; <label>:1261:                                   ; preds = %1258
  %1262 = call void (i32)* @signal(i32 27, void (i32)* null) #13
  br label %1263

; <label>:1263:                                   ; preds = %1261, %1258
  %1264 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 26) #13
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1268, label %1266

; <label>:1266:                                   ; preds = %1263
  %1267 = call void (i32)* @signal(i32 26, void (i32)* null) #13
  br label %1268

; <label>:1268:                                   ; preds = %1266, %1263
  %1269 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 24) #13
  %1270 = icmp eq i32 %1269, 0
  br i1 %1270, label %1273, label %1271

; <label>:1271:                                   ; preds = %1268
  %1272 = call void (i32)* @signal(i32 24, void (i32)* null) #13
  br label %1273

; <label>:1273:                                   ; preds = %1271, %1268
  %1274 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 25) #13
  %1275 = icmp eq i32 %1274, 0
  br i1 %1275, label %1278, label %1276

; <label>:1276:                                   ; preds = %1273
  %1277 = call void (i32)* @signal(i32 25, void (i32)* null) #13
  br label %1278

; <label>:1278:                                   ; preds = %1273, %1276
  %1279 = load volatile i32, i32* @stop_signal_count, align 4
  %1280 = icmp eq i32 %1279, 0
  br i1 %1280, label %1288, label %1281

; <label>:1281:                                   ; preds = %1278
  br label %1282

; <label>:1282:                                   ; preds = %1281, %1282
  %1283 = phi i32 [ %1285, %1282 ], [ %1279, %1281 ]
  %1284 = call i32 @raise(i32 19) #13
  %1285 = add nsw i32 %1283, -1
  %1286 = icmp eq i32 %1285, 0
  br i1 %1286, label %1287, label %1282

; <label>:1287:                                   ; preds = %1282
  br label %1288

; <label>:1288:                                   ; preds = %1287, %1278
  %1289 = load volatile i32, i32* @interrupt_signal, align 4
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1293, label %1291

; <label>:1291:                                   ; preds = %1288
  %1292 = call i32 @raise(i32 %1289) #13
  br label %1293

; <label>:1293:                                   ; preds = %1291, %1288, %1178, %1181
  %1294 = load i1, i1* @dired, align 1
  br i1 %1294, label %1295, label %1302

; <label>:1295:                                   ; preds = %1293
  call fastcc void @dired_dump_obstack(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), %struct.obstack* nonnull @dired_obstack)
  call fastcc void @dired_dump_obstack(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), %struct.obstack* nonnull @subdired_obstack)
  %1296 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %1297 = call i32 @get_quoting_style(%struct.quoting_options* %1296) #13
  %1298 = zext i32 %1297 to i64
  %1299 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([11 x i8*]* @quoting_style_args to [0 x i8*]*), i64 0, i64 %1298
  %1300 = load i8*, i8** %1299, align 8
  %1301 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %1300) #13
  br label %1302

; <label>:1302:                                   ; preds = %1295, %1293
  %1303 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %1304 = icmp eq %struct.hash_table* %1303, null
  br i1 %1304, label %1310, label %1305

; <label>:1305:                                   ; preds = %1302
  %1306 = call i64 @hash_get_n_entries(%struct.hash_table* nonnull %1303) #16
  %1307 = icmp eq i64 %1306, 0
  br i1 %1307, label %1309, label %1308

; <label>:1308:                                   ; preds = %1305
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1615, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #15
  unreachable

; <label>:1309:                                   ; preds = %1305
  call void @hash_free(%struct.hash_table* nonnull %1303) #13
  br label %1310

; <label>:1310:                                   ; preds = %1302, %1309
  %1311 = load i32, i32* @exit_status, align 4
  ret i32 %1311
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @setlocale(i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @bindtextdomain(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @textdomain(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @atexit(void ()*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @isatty(i32) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind
declare i8* @dcgettext(i8*, i8*, i32) local_unnamed_addr #2

declare void @error(i32, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #6

; Function Attrs: nounwind
declare i32 @ioctl(i32, i64, ...) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define void @usage(i32) local_unnamed_addr #7 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %8, label %3

; <label>:3:                                      ; preds = %1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0), i32 5) #13
  %6 = load i8*, i8** @program_name, align 8
  %7 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %4, i32 1, i8* %5, i8* %6) #13
  br label %133

; <label>:8:                                      ; preds = %1
  %9 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0), i32 5) #13
  %10 = load i8*, i8** @program_name, align 8
  %11 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %9, i8* %10) #13
  %12 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.14, i64 0, i64 0), i32 5) #13
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %14 = tail call i32 @fputs_unlocked(i8* %12, %struct._IO_FILE* %13) #13
  %15 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.219, i64 0, i64 0), i32 5) #13
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %17 = tail call i32 @fputs_unlocked(i8* %15, %struct._IO_FILE* %16) #13
  %18 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.15, i64 0, i64 0), i32 5) #13
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %20 = tail call i32 @fputs_unlocked(i8* %18, %struct._IO_FILE* %19) #13
  %21 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([582 x i8], [582 x i8]* @.str.16, i64 0, i64 0), i32 5) #13
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %23 = tail call i32 @fputs_unlocked(i8* %21, %struct._IO_FILE* %22) #13
  %24 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([367 x i8], [367 x i8]* @.str.17, i64 0, i64 0), i32 5) #13
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %26 = tail call i32 @fputs_unlocked(i8* %24, %struct._IO_FILE* %25) #13
  %27 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([419 x i8], [419 x i8]* @.str.18, i64 0, i64 0), i32 5) #13
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %29 = tail call i32 @fputs_unlocked(i8* %27, %struct._IO_FILE* %28) #13
  %30 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.19, i64 0, i64 0), i32 5) #13
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %32 = tail call i32 @fputs_unlocked(i8* %30, %struct._IO_FILE* %31) #13
  %33 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.20, i64 0, i64 0), i32 5) #13
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %35 = tail call i32 @fputs_unlocked(i8* %33, %struct._IO_FILE* %34) #13
  %36 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([269 x i8], [269 x i8]* @.str.21, i64 0, i64 0), i32 5) #13
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %38 = tail call i32 @fputs_unlocked(i8* %36, %struct._IO_FILE* %37) #13
  %39 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([422 x i8], [422 x i8]* @.str.22, i64 0, i64 0), i32 5) #13
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %41 = tail call i32 @fputs_unlocked(i8* %39, %struct._IO_FILE* %40) #13
  %42 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([426 x i8], [426 x i8]* @.str.23, i64 0, i64 0), i32 5) #13
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %44 = tail call i32 @fputs_unlocked(i8* %42, %struct._IO_FILE* %43) #13
  %45 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @.str.24, i64 0, i64 0), i32 5) #13
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %47 = tail call i32 @fputs_unlocked(i8* %45, %struct._IO_FILE* %46) #13
  %48 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.25, i64 0, i64 0), i32 5) #13
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %50 = tail call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49) #13
  %51 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([507 x i8], [507 x i8]* @.str.26, i64 0, i64 0), i32 5) #13
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %53 = tail call i32 @fputs_unlocked(i8* %51, %struct._IO_FILE* %52) #13
  %54 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.27, i64 0, i64 0), i32 5) #13
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %56 = tail call i32 @fputs_unlocked(i8* %54, %struct._IO_FILE* %55) #13
  %57 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([519 x i8], [519 x i8]* @.str.28, i64 0, i64 0), i32 5) #13
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %59 = tail call i32 @fputs_unlocked(i8* %57, %struct._IO_FILE* %58) #13
  %60 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([531 x i8], [531 x i8]* @.str.29, i64 0, i64 0), i32 5) #13
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %62 = tail call i32 @fputs_unlocked(i8* %60, %struct._IO_FILE* %61) #13
  %63 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.30, i64 0, i64 0), i32 5) #13
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %65 = tail call i32 @fputs_unlocked(i8* %63, %struct._IO_FILE* %64) #13
  %66 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([372 x i8], [372 x i8]* @.str.31, i64 0, i64 0), i32 5) #13
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %68 = tail call i32 @fputs_unlocked(i8* %66, %struct._IO_FILE* %67) #13
  %69 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([363 x i8], [363 x i8]* @.str.32, i64 0, i64 0), i32 5) #13
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %71 = tail call i32 @fputs_unlocked(i8* %69, %struct._IO_FILE* %70) #13
  %72 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.33, i64 0, i64 0), i32 5) #13
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %74 = tail call i32 @fputs_unlocked(i8* %72, %struct._IO_FILE* %73) #13
  %75 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.34, i64 0, i64 0), i32 5) #13
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %77 = tail call i32 @fputs_unlocked(i8* %75, %struct._IO_FILE* %76) #13
  %78 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.220, i64 0, i64 0), i32 5) #13
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %80 = tail call i32 @fputs_unlocked(i8* %78, %struct._IO_FILE* %79) #13
  %81 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([286 x i8], [286 x i8]* @.str.35, i64 0, i64 0), i32 5) #13
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %83 = tail call i32 @fputs_unlocked(i8* %81, %struct._IO_FILE* %82) #13
  %84 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.36, i64 0, i64 0), i32 5) #13
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %86 = tail call i32 @fputs_unlocked(i8* %84, %struct._IO_FILE* %85) #13
  %87 = load i32, i32* @ls_mode, align 4
  %88 = icmp eq i32 %87, 1
  %89 = icmp eq i32 %87, 2
  %90 = select i1 %89, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0)
  %91 = select i1 %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0), i8* %90
  %92 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.221, i64 0, i64 0)) #13
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %97, label %94

; <label>:94:                                     ; preds = %8
  %95 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #13
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %113

; <label>:97:                                     ; preds = %122, %119, %116, %113, %94, %8
  %98 = phi %struct.infomap* [ getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 0), %8 ], [ getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 1), %94 ], [ getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 2), %113 ], [ getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 3), %116 ], [ getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 4), %119 ], [ %125, %122 ]
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i64 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  %102 = select i1 %101, i8* %91, i8* %100
  %103 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.229, i64 0, i64 0), i32 5) #13
  %104 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %103, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.230, i64 0, i64 0)) #13
  %105 = tail call i8* @setlocale(i32 5, i8* null) #13
  %106 = icmp eq i8* %105, null
  br i1 %106, label %126, label %107

; <label>:107:                                    ; preds = %97
  %108 = tail call i32 @strncmp(i8* nonnull %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.231, i64 0, i64 0), i64 3) #16
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %126, label %110

; <label>:110:                                    ; preds = %107
  %111 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.232, i64 0, i64 0), i32 5) #13
  %112 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %111, i8* %91) #13
  br label %126

; <label>:113:                                    ; preds = %94
  %114 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.224, i64 0, i64 0)) #13
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %97, label %116

; <label>:116:                                    ; preds = %113
  %117 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.226, i64 0, i64 0)) #13
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %97, label %119

; <label>:119:                                    ; preds = %116
  %120 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.227, i64 0, i64 0)) #13
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %97, label %122

; <label>:122:                                    ; preds = %119
  %123 = tail call i32 @strcmp(i8* %91, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i64 0, i64 0)) #13
  %124 = icmp eq i32 %123, 0
  %125 = select i1 %124, %struct.infomap* getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 5), %struct.infomap* getelementptr inbounds ([7 x %struct.infomap], [7 x %struct.infomap]* @emit_ancillary_info.infomap, i64 0, i64 6)
  br label %97

; <label>:126:                                    ; preds = %97, %107, %110
  %127 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.233, i64 0, i64 0), i32 5) #13
  %128 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %127, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.230, i64 0, i64 0), i8* %91) #13
  %129 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.234, i64 0, i64 0), i32 5) #13
  %130 = icmp eq i8* %102, %91
  %131 = select i1 %130, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.235, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %132 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %129, i8* %102, i8* %131) #13
  br label %133

; <label>:133:                                    ; preds = %126, %3
  tail call void @exit(i32 %0) #15
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #4

declare i32 @fputs_unlocked(i8*, %struct._IO_FILE*) local_unnamed_addr #5

declare i32 @__fprintf_chk(%struct._IO_FILE*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @nl_langinfo(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1) #1

declare i32 @__snprintf_chk(i8*, i64, i32, i64, i8*, ...) local_unnamed_addr #5

declare i32 @fnmatch(i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @get_funky_string(i8** nocapture, i8** nocapture, i1 zeroext, i64* nocapture) unnamed_addr #0 {
  %5 = load i8*, i8** %1, align 8
  %6 = load i8*, i8** %0, align 8
  br label %7

; <label>:7:                                      ; preds = %93, %4
  %8 = phi i8* [ %6, %4 ], [ %94, %93 ]
  %9 = phi i8* [ %5, %4 ], [ %95, %93 ]
  %10 = phi i32 [ 0, %4 ], [ %96, %93 ]
  %11 = phi i64 [ 0, %4 ], [ %97, %93 ]
  %12 = phi i8 [ 0, %4 ], [ %98, %93 ]
  switch i32 %10, label %106 [
    i32 0, label %13
    i32 1, label %25
    i32 2, label %44
    i32 3, label %56
    i32 4, label %77
  ]

; <label>:13:                                     ; preds = %7
  %14 = load i8, i8* %9, align 1
  %15 = sext i8 %14 to i32
  switch i32 %15, label %21 [
    i32 58, label %107
    i32 0, label %107
    i32 92, label %16
    i32 94, label %18
    i32 61, label %20
  ]

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds i8, i8* %9, i64 1
  br label %93

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds i8, i8* %9, i64 1
  br label %93

; <label>:20:                                     ; preds = %13
  br i1 %2, label %107, label %21

; <label>:21:                                     ; preds = %20, %13
  %22 = getelementptr inbounds i8, i8* %9, i64 1
  %23 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %14, i8* %8, align 1
  %24 = add i64 %11, 1
  br label %93

; <label>:25:                                     ; preds = %7
  %26 = load i8, i8* %9, align 1
  %27 = sext i8 %26 to i32
  switch i32 %27, label %39 [
    i32 48, label %28
    i32 49, label %28
    i32 50, label %28
    i32 51, label %28
    i32 52, label %28
    i32 53, label %28
    i32 54, label %28
    i32 55, label %28
    i32 120, label %87
    i32 88, label %87
    i32 97, label %40
    i32 98, label %30
    i32 101, label %31
    i32 102, label %32
    i32 110, label %33
    i32 114, label %34
    i32 116, label %35
    i32 118, label %36
    i32 63, label %37
    i32 95, label %38
    i32 0, label %99
  ]

; <label>:28:                                     ; preds = %25, %25, %25, %25, %25, %25, %25, %25
  %29 = add i8 %26, -48
  br label %87

; <label>:30:                                     ; preds = %25
  br label %40

; <label>:31:                                     ; preds = %25
  br label %40

; <label>:32:                                     ; preds = %25
  br label %40

; <label>:33:                                     ; preds = %25
  br label %40

; <label>:34:                                     ; preds = %25
  br label %40

; <label>:35:                                     ; preds = %25
  br label %40

; <label>:36:                                     ; preds = %25
  br label %40

; <label>:37:                                     ; preds = %25
  br label %40

; <label>:38:                                     ; preds = %25
  br label %40

; <label>:39:                                     ; preds = %25
  br label %40

; <label>:40:                                     ; preds = %25, %39, %38, %37, %36, %35, %34, %33, %32, %31, %30
  %41 = phi i8 [ 8, %30 ], [ 27, %31 ], [ 12, %32 ], [ 10, %33 ], [ 13, %34 ], [ 9, %35 ], [ 11, %36 ], [ 127, %37 ], [ 32, %38 ], [ %26, %39 ], [ 7, %25 ]
  %42 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %41, i8* %8, align 1
  %43 = add i64 %11, 1
  br label %87

; <label>:44:                                     ; preds = %7
  %45 = load i8, i8* %9, align 1
  %46 = and i8 %45, -8
  %47 = icmp eq i8 %46, 48
  br i1 %47, label %51, label %48

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %12, i8* %8, align 1
  %50 = add i64 %11, 1
  br label %93

; <label>:51:                                     ; preds = %44
  %52 = shl i8 %12, 3
  %53 = getelementptr inbounds i8, i8* %9, i64 1
  %54 = add i8 %52, -48
  %55 = add i8 %54, %45
  br label %93

; <label>:56:                                     ; preds = %7
  %57 = load i8, i8* %9, align 1
  %58 = sext i8 %57 to i32
  switch i32 %58, label %74 [
    i32 48, label %59
    i32 49, label %59
    i32 50, label %59
    i32 51, label %59
    i32 52, label %59
    i32 53, label %59
    i32 54, label %59
    i32 55, label %59
    i32 56, label %59
    i32 57, label %59
    i32 97, label %64
    i32 98, label %64
    i32 99, label %64
    i32 100, label %64
    i32 101, label %64
    i32 102, label %64
    i32 65, label %69
    i32 66, label %69
    i32 67, label %69
    i32 68, label %69
    i32 69, label %69
    i32 70, label %69
  ]

; <label>:59:                                     ; preds = %56, %56, %56, %56, %56, %56, %56, %56, %56, %56
  %60 = shl i8 %12, 4
  %61 = getelementptr inbounds i8, i8* %9, i64 1
  %62 = add i8 %60, -48
  %63 = add i8 %62, %57
  br label %93

; <label>:64:                                     ; preds = %56, %56, %56, %56, %56, %56
  %65 = shl i8 %12, 4
  %66 = getelementptr inbounds i8, i8* %9, i64 1
  %67 = add i8 %65, -87
  %68 = add i8 %67, %57
  br label %93

; <label>:69:                                     ; preds = %56, %56, %56, %56, %56, %56
  %70 = shl i8 %12, 4
  %71 = getelementptr inbounds i8, i8* %9, i64 1
  %72 = add i8 %70, -55
  %73 = add i8 %72, %57
  br label %93

; <label>:74:                                     ; preds = %56
  %75 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %12, i8* %8, align 1
  %76 = add i64 %11, 1
  br label %93

; <label>:77:                                     ; preds = %7
  %78 = load i8, i8* %9, align 1
  %79 = icmp slt i8 %78, 64
  %80 = icmp eq i8 %78, 127
  %81 = or i1 %79, %80
  br i1 %81, label %101, label %82

; <label>:82:                                     ; preds = %77
  %83 = getelementptr inbounds i8, i8* %9, i64 1
  %84 = and i8 %78, 31
  %85 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %84, i8* %8, align 1
  %86 = add i64 %11, 1
  br label %93

; <label>:87:                                     ; preds = %40, %28, %25, %25
  %88 = phi i8 [ 0, %25 ], [ 0, %25 ], [ %29, %28 ], [ %41, %40 ]
  %89 = phi i64 [ %11, %25 ], [ %11, %25 ], [ %11, %28 ], [ %43, %40 ]
  %90 = phi i32 [ 3, %25 ], [ 3, %25 ], [ 2, %28 ], [ 0, %40 ]
  %91 = phi i8* [ %8, %25 ], [ %8, %25 ], [ %8, %28 ], [ %42, %40 ]
  %92 = getelementptr inbounds i8, i8* %9, i64 1
  br label %93

; <label>:93:                                     ; preds = %87, %82, %103, %74, %69, %64, %59, %48, %51, %21, %18, %16
  %94 = phi i8* [ %91, %87 ], [ %8, %16 ], [ %8, %18 ], [ %23, %21 ], [ %8, %51 ], [ %49, %48 ], [ %8, %59 ], [ %8, %64 ], [ %8, %69 ], [ %75, %74 ], [ %104, %103 ], [ %85, %82 ]
  %95 = phi i8* [ %92, %87 ], [ %17, %16 ], [ %19, %18 ], [ %22, %21 ], [ %53, %51 ], [ %9, %48 ], [ %61, %59 ], [ %66, %64 ], [ %71, %69 ], [ %9, %74 ], [ %9, %103 ], [ %83, %82 ]
  %96 = phi i32 [ %90, %87 ], [ 1, %16 ], [ 4, %18 ], [ 0, %21 ], [ 2, %51 ], [ 0, %48 ], [ 3, %59 ], [ 3, %64 ], [ 3, %69 ], [ 0, %74 ], [ 0, %103 ], [ 0, %82 ]
  %97 = phi i64 [ %89, %87 ], [ %11, %16 ], [ %11, %18 ], [ %24, %21 ], [ %11, %51 ], [ %50, %48 ], [ %11, %59 ], [ %11, %64 ], [ %11, %69 ], [ %76, %74 ], [ %105, %103 ], [ %86, %82 ]
  %98 = phi i8 [ %88, %87 ], [ %12, %16 ], [ %12, %18 ], [ %12, %21 ], [ %55, %51 ], [ %12, %48 ], [ %63, %59 ], [ %68, %64 ], [ %73, %69 ], [ %12, %74 ], [ %12, %103 ], [ %12, %82 ]
  br label %7

; <label>:99:                                     ; preds = %25
  %100 = getelementptr inbounds i8, i8* %9, i64 1
  br label %109

; <label>:101:                                    ; preds = %77
  %102 = icmp eq i8 %78, 63
  br i1 %102, label %103, label %107

; <label>:103:                                    ; preds = %101
  %104 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 127, i8* %8, align 1
  %105 = add i64 %11, 1
  br label %93

; <label>:106:                                    ; preds = %7
  tail call void @abort() #15
  unreachable

; <label>:107:                                    ; preds = %13, %13, %20, %101
  %108 = phi i1 [ false, %101 ], [ true, %20 ], [ true, %13 ], [ true, %13 ]
  br label %109

; <label>:109:                                    ; preds = %107, %99
  %110 = phi i8* [ %100, %99 ], [ %9, %107 ]
  %111 = phi i1 [ false, %99 ], [ %108, %107 ]
  store i8* %8, i8** %0, align 8
  store i8* %110, i8** %1, align 8
  store i64 %11, i64* %3, align 8
  ret i1 %111
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) #2

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i64 @dev_ino_hash(i8* nocapture readonly, i64) #8 {
  %3 = bitcast i8* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = urem i64 %4, %1
  ret i64 %5
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal zeroext i1 @dev_ino_compare(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast i8* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %16

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %11, %14
  br label %16

; <label>:16:                                     ; preds = %8, %2
  %17 = phi i1 [ false, %2 ], [ %15, %8 ]
  ret i1 %17
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @dev_ino_free(i8* nocapture) #0 {
  tail call void @free(i8* %0) #13
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @gobble_file(i8*, i32, i1 zeroext, i8* readonly) unnamed_addr #0 {
  %5 = alloca [21 x i8], align 16
  %6 = alloca [2 x i8], align 1
  %7 = alloca %struct.stat, align 8
  %8 = alloca [652 x i8], align 16
  %9 = alloca [21 x i8], align 16
  %10 = alloca [21 x i8], align 16
  %11 = alloca [652 x i8], align 16
  %12 = alloca [21 x i8], align 16
  %13 = xor i1 %2, true
  %14 = load i64, i64* @cwd_n_used, align 8
  %15 = load i64, i64* @cwd_n_alloc, align 8
  %16 = icmp eq i64 %14, %15
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %4
  %18 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  br label %30

; <label>:19:                                     ; preds = %4
  %20 = icmp ugt i64 %14, 24019198012642645
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %19
  tail call void @xalloc_die() #15
  unreachable

; <label>:22:                                     ; preds = %19
  %23 = load i8*, i8** bitcast (%struct.fileinfo** @cwd_file to i8**), align 8
  %24 = mul i64 %14, 384
  %25 = tail call i8* @xrealloc(i8* %23, i64 %24) #13
  store i8* %25, i8** bitcast (%struct.fileinfo** @cwd_file to i8**), align 8
  %26 = load i64, i64* @cwd_n_alloc, align 8
  %27 = shl i64 %26, 1
  store i64 %27, i64* @cwd_n_alloc, align 8
  %28 = bitcast i8* %25 to %struct.fileinfo*
  %29 = load i64, i64* @cwd_n_used, align 8
  br label %30

; <label>:30:                                     ; preds = %17, %22
  %31 = phi i64 [ %14, %17 ], [ %29, %22 ]
  %32 = phi %struct.fileinfo* [ %18, %17 ], [ %28, %22 ]
  %33 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31
  %34 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2
  %35 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 1
  %36 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 3
  %37 = bitcast %struct.fileinfo* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 192, i32 8, i1 false)
  store i32 %1, i32* %36, align 8
  %38 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 10
  store i32 -1, i32* %38, align 4
  %39 = load i1, i1* @cwd_some_quoted, align 1
  %40 = load i8, i8* @align_variable_outer_quotes, align 1
  %41 = icmp eq i8 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %56, label %43

; <label>:43:                                     ; preds = %30
  %44 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start(i64 2, i8* nonnull %44) #13
  %45 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %46 = call i64 @quotearg_buffer(i8* nonnull %44, i64 2, i8* %0, i64 -1, %struct.quoting_options* %45) #13
  %47 = load i8, i8* %0, align 1
  %48 = load i8, i8* %44, align 1
  %49 = icmp eq i8 %47, %48
  br i1 %49, label %51, label %50

; <label>:50:                                     ; preds = %43
  call void @llvm.lifetime.end(i64 2, i8* nonnull %44) #13
  store i32 1, i32* %38, align 4
  br label %55

; <label>:51:                                     ; preds = %43
  %52 = call i64 @strlen(i8* nonnull %0) #16
  %53 = icmp ne i64 %52, %46
  call void @llvm.lifetime.end(i64 2, i8* nonnull %44) #13
  %54 = zext i1 %53 to i32
  store i32 %54, i32* %38, align 4
  br i1 %53, label %55, label %56

; <label>:55:                                     ; preds = %50, %51
  store i1 true, i1* @cwd_some_quoted, align 1
  br label %56

; <label>:56:                                     ; preds = %51, %55, %30
  %57 = load i8, i8* @format_needs_stat, align 1
  %58 = icmp eq i8 %57, 0
  %59 = and i1 %58, %13
  br i1 %59, label %60, label %155

; <label>:60:                                     ; preds = %56
  %61 = icmp ne i32 %1, 3
  %62 = load i8, i8* @print_with_color, align 1
  %63 = icmp eq i8 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %92, label %65

; <label>:65:                                     ; preds = %60
  %66 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 19, i32 0), align 16
  %67 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 19, i32 1), align 8
  switch i64 %66, label %155 [
    i64 0, label %74
    i64 1, label %68
    i64 2, label %71
  ]

; <label>:68:                                     ; preds = %65
  %69 = load i8, i8* %67, align 1
  %70 = icmp eq i8 %69, 48
  br i1 %70, label %74, label %155

; <label>:71:                                     ; preds = %65
  %72 = call i32 @strncmp(i8* %67, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %155

; <label>:74:                                     ; preds = %71, %65, %68
  %75 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 18, i32 0), align 16
  %76 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 18, i32 1), align 8
  switch i64 %75, label %155 [
    i64 0, label %83
    i64 1, label %77
    i64 2, label %80
  ]

; <label>:77:                                     ; preds = %74
  %78 = load i8, i8* %76, align 1
  %79 = icmp eq i8 %78, 48
  br i1 %79, label %83, label %155

; <label>:80:                                     ; preds = %74
  %81 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %155

; <label>:83:                                     ; preds = %80, %74, %77
  %84 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 20, i32 0), align 16
  %85 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 20, i32 1), align 8
  switch i64 %84, label %155 [
    i64 0, label %92
    i64 1, label %86
    i64 2, label %89
  ]

; <label>:86:                                     ; preds = %83
  %87 = load i8, i8* %85, align 1
  %88 = icmp eq i8 %87, 48
  br i1 %88, label %92, label %155

; <label>:89:                                     ; preds = %83
  %90 = call i32 @strncmp(i8* %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %155

; <label>:92:                                     ; preds = %89, %83, %86, %60
  %93 = load i1, i1* @print_inode, align 1
  %94 = xor i1 %93, true
  %95 = load i8, i8* @format_needs_type, align 1
  %96 = icmp eq i8 %95, 0
  %97 = and i1 %96, %94
  br i1 %97, label %108, label %98

; <label>:98:                                     ; preds = %92
  switch i32 %1, label %107 [
    i32 6, label %99
    i32 0, label %99
  ]

; <label>:99:                                     ; preds = %98, %98
  %100 = load i32, i32* @dereference, align 4
  %101 = icmp eq i32 %100, 5
  br i1 %101, label %155, label %102

; <label>:102:                                    ; preds = %99
  %103 = load i1, i1* @color_symlink_as_referent, align 1
  %104 = load i1, i1* @check_symlink_color, align 1
  %105 = or i1 %104, %93
  %106 = or i1 %103, %105
  br i1 %106, label %155, label %109

; <label>:107:                                    ; preds = %98
  br i1 %93, label %155, label %109

; <label>:108:                                    ; preds = %92
  br i1 %93, label %155, label %109

; <label>:109:                                    ; preds = %102, %107, %108
  br i1 %96, label %600, label %110

; <label>:110:                                    ; preds = %109
  %111 = icmp eq i32 %1, 0
  %112 = or i1 %111, %2
  br i1 %112, label %155, label %113

; <label>:113:                                    ; preds = %110
  %114 = icmp eq i32 %1, 5
  br i1 %114, label %115, label %600

; <label>:115:                                    ; preds = %113
  %116 = load i32, i32* @indicator_style, align 4
  %117 = icmp eq i32 %116, 3
  br i1 %117, label %155, label %118

; <label>:118:                                    ; preds = %115
  br i1 %63, label %600, label %119

; <label>:119:                                    ; preds = %118
  %120 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 0), align 16
  %121 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 1), align 8
  switch i64 %120, label %155 [
    i64 0, label %128
    i64 1, label %122
    i64 2, label %125
  ]

; <label>:122:                                    ; preds = %119
  %123 = load i8, i8* %121, align 1
  %124 = icmp eq i8 %123, 48
  br i1 %124, label %128, label %155

; <label>:125:                                    ; preds = %119
  %126 = call i32 @strncmp(i8* %121, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %155

; <label>:128:                                    ; preds = %125, %119, %122
  %129 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 16, i32 0), align 16
  %130 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 16, i32 1), align 8
  switch i64 %129, label %155 [
    i64 0, label %137
    i64 1, label %131
    i64 2, label %134
  ]

; <label>:131:                                    ; preds = %128
  %132 = load i8, i8* %130, align 1
  %133 = icmp eq i8 %132, 48
  br i1 %133, label %137, label %155

; <label>:134:                                    ; preds = %128
  %135 = call i32 @strncmp(i8* %130, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %155

; <label>:137:                                    ; preds = %134, %128, %131
  %138 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 17, i32 0), align 16
  %139 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 17, i32 1), align 8
  switch i64 %138, label %155 [
    i64 0, label %146
    i64 1, label %140
    i64 2, label %143
  ]

; <label>:140:                                    ; preds = %137
  %141 = load i8, i8* %139, align 1
  %142 = icmp eq i8 %141, 48
  br i1 %142, label %146, label %155

; <label>:143:                                    ; preds = %137
  %144 = call i32 @strncmp(i8* %139, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %155

; <label>:146:                                    ; preds = %143, %137, %140
  %147 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 0), align 16
  %148 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 1), align 8
  switch i64 %147, label %155 [
    i64 0, label %600
    i64 1, label %149
    i64 2, label %152
  ]

; <label>:149:                                    ; preds = %146
  %150 = load i8, i8* %148, align 1
  %151 = icmp eq i8 %150, 48
  br i1 %151, label %600, label %155

; <label>:152:                                    ; preds = %146
  %153 = call i32 @strncmp(i8* %148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %600, label %155

; <label>:155:                                    ; preds = %152, %143, %134, %125, %89, %80, %71, %149, %146, %140, %137, %131, %128, %122, %119, %86, %83, %77, %74, %68, %65, %107, %110, %56, %108, %115, %102, %99
  %156 = load i8, i8* %0, align 1
  %157 = icmp eq i8 %156, 47
  br i1 %157, label %205, label %158

; <label>:158:                                    ; preds = %155
  %159 = load i8, i8* %3, align 1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %205, label %161

; <label>:161:                                    ; preds = %158
  %162 = call i64 @strlen(i8* nonnull %0) #16
  %163 = call i64 @strlen(i8* nonnull %3) #16
  %164 = add i64 %162, 2
  %165 = add i64 %164, %163
  %166 = alloca i8, i64 %165, align 16
  %167 = icmp eq i8 %159, 46
  br i1 %167, label %168, label %172

; <label>:168:                                    ; preds = %161
  %169 = getelementptr inbounds i8, i8* %3, i64 1
  %170 = load i8, i8* %169, align 1
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %189, label %172

; <label>:172:                                    ; preds = %168, %161
  %173 = phi i8 [ %159, %161 ], [ 46, %168 ]
  br label %174

; <label>:174:                                    ; preds = %172, %174
  %175 = phi i8 [ %180, %174 ], [ %173, %172 ]
  %176 = phi i8* [ %178, %174 ], [ %3, %172 ]
  %177 = phi i8* [ %179, %174 ], [ %166, %172 ]
  %178 = getelementptr inbounds i8, i8* %176, i64 1
  %179 = getelementptr inbounds i8, i8* %177, i64 1
  store i8 %175, i8* %177, align 1
  %180 = load i8, i8* %178, align 1
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %174

; <label>:182:                                    ; preds = %174
  %183 = icmp ugt i8* %178, %3
  br i1 %183, label %184, label %189

; <label>:184:                                    ; preds = %182
  %185 = load i8, i8* %176, align 1
  %186 = icmp eq i8 %185, 47
  br i1 %186, label %189, label %187

; <label>:187:                                    ; preds = %184
  %188 = getelementptr inbounds i8, i8* %177, i64 2
  store i8 47, i8* %179, align 1
  br label %189

; <label>:189:                                    ; preds = %187, %184, %182, %168
  %190 = phi i8* [ %166, %168 ], [ %179, %182 ], [ %179, %184 ], [ %188, %187 ]
  %191 = load i8, i8* %0, align 1
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %203, label %193

; <label>:193:                                    ; preds = %189
  br label %194

; <label>:194:                                    ; preds = %193, %194
  %195 = phi i8 [ %200, %194 ], [ %191, %193 ]
  %196 = phi i8* [ %198, %194 ], [ %0, %193 ]
  %197 = phi i8* [ %199, %194 ], [ %190, %193 ]
  %198 = getelementptr inbounds i8, i8* %196, i64 1
  %199 = getelementptr inbounds i8, i8* %197, i64 1
  store i8 %195, i8* %197, align 1
  %200 = load i8, i8* %198, align 1
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %202, label %194

; <label>:202:                                    ; preds = %194
  br label %203

; <label>:203:                                    ; preds = %202, %189
  %204 = phi i8* [ %190, %189 ], [ %199, %202 ]
  store i8 0, i8* %204, align 1
  br label %205

; <label>:205:                                    ; preds = %155, %158, %203
  %206 = phi i8* [ %166, %203 ], [ %0, %158 ], [ %0, %155 ]
  %207 = load i32, i32* @dereference, align 4
  switch i32 %207, label %226 [
    i32 5, label %208
    i32 3, label %210
    i32 4, label %210
  ]

; <label>:208:                                    ; preds = %205
  %209 = call i32 @__xstat(i32 1, i8* nonnull %206, %struct.stat* nonnull %34) #13
  br label %228

; <label>:210:                                    ; preds = %205, %205
  br i1 %2, label %211, label %226

; <label>:211:                                    ; preds = %210
  %212 = call i32 @__xstat(i32 1, i8* nonnull %206, %struct.stat* nonnull %34) #13
  %213 = load i32, i32* @dereference, align 4
  %214 = icmp eq i32 %213, 3
  br i1 %214, label %228, label %215

; <label>:215:                                    ; preds = %211
  %216 = icmp slt i32 %212, 0
  br i1 %216, label %222, label %217

; <label>:217:                                    ; preds = %215
  %218 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 3
  %219 = load i32, i32* %218, align 8
  %220 = and i32 %219, 61440
  %221 = icmp eq i32 %220, 16384
  br i1 %221, label %228, label %226

; <label>:222:                                    ; preds = %215
  %223 = tail call i32* @__errno_location() #1
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 2
  br i1 %225, label %226, label %231

; <label>:226:                                    ; preds = %217, %210, %222, %205
  %227 = call i32 @__lxstat(i32 1, i8* nonnull %206, %struct.stat* nonnull %34) #13
  br label %228

; <label>:228:                                    ; preds = %217, %211, %226, %208
  %229 = phi i32 [ %227, %226 ], [ %209, %208 ], [ %212, %211 ], [ %212, %217 ]
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %246, label %231

; <label>:231:                                    ; preds = %222, %228
  %232 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.205, i64 0, i64 0), i32 5) #13
  %233 = tail call i32* @__errno_location() #1
  %234 = load i32, i32* %233, align 4
  %235 = call i8* @quotearg_style(i32 4, i8* %206) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %234, i8* %232, i8* %235) #13
  br i1 %2, label %236, label %237

; <label>:236:                                    ; preds = %231
  store i32 2, i32* @exit_status, align 4
  br label %618

; <label>:237:                                    ; preds = %231
  %238 = load i32, i32* @exit_status, align 4
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

; <label>:240:                                    ; preds = %237
  store i32 1, i32* @exit_status, align 4
  br label %241

; <label>:241:                                    ; preds = %237, %240
  %242 = call noalias i8* @xstrdup(i8* %0) #13
  %243 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %33, i64 0, i32 0
  store i8* %242, i8** %243, align 8
  %244 = load i64, i64* @cwd_n_used, align 8
  %245 = add i64 %244, 1
  store i64 %245, i64* @cwd_n_used, align 8
  br label %618

; <label>:246:                                    ; preds = %228
  %247 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 6
  store i8 1, i8* %247, align 8
  %248 = icmp eq i32 %1, 5
  br i1 %248, label %257, label %249

; <label>:249:                                    ; preds = %246
  %250 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 3
  %251 = load i32, i32* %250, align 8
  %252 = and i32 %251, 61440
  %253 = icmp ne i32 %252, 32768
  %254 = load i8, i8* @print_with_color, align 1
  %255 = icmp eq i8 %254, 0
  %256 = or i1 %253, %255
  br i1 %256, label %296, label %260

; <label>:257:                                    ; preds = %246
  %258 = load i8, i8* @print_with_color, align 1
  %259 = icmp eq i8 %258, 0
  br i1 %259, label %296, label %260

; <label>:260:                                    ; preds = %249, %257
  %261 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 0), align 16
  %262 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 1), align 8
  switch i64 %261, label %269 [
    i64 0, label %296
    i64 1, label %263
    i64 2, label %266
  ]

; <label>:263:                                    ; preds = %260
  %264 = load i8, i8* %262, align 1
  %265 = icmp eq i8 %264, 48
  br i1 %265, label %296, label %269

; <label>:266:                                    ; preds = %260
  %267 = call i32 @strncmp(i8* %262, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %296, label %269

; <label>:269:                                    ; preds = %266, %263, %260
  %270 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 0
  %271 = load i64, i64* %270, align 8
  %272 = load i64, i64* @has_capability_cache.unsupported_device, align 8
  %273 = icmp eq i64 %271, %272
  br i1 %273, label %274, label %276

; <label>:274:                                    ; preds = %269
  %275 = tail call i32* @__errno_location() #1
  store i32 95, i32* %275, align 4
  br label %293

; <label>:276:                                    ; preds = %269
  %277 = call %struct._cap_struct* @cap_get_file(i8* %206) #13
  %278 = icmp eq %struct._cap_struct* %277, null
  br i1 %278, label %288, label %279

; <label>:279:                                    ; preds = %276
  %280 = call i8* @cap_to_text(%struct._cap_struct* nonnull %277, i64* null) #13
  %281 = bitcast %struct._cap_struct* %277 to i8*
  %282 = call i32 @cap_free(i8* %281) #13
  %283 = icmp eq i8* %280, null
  br i1 %283, label %288, label %284

; <label>:284:                                    ; preds = %279
  %285 = load i8, i8* %280, align 1
  %286 = icmp eq i8 %285, 0
  %287 = call i32 @cap_free(i8* nonnull %280) #13
  br i1 %286, label %288, label %293

; <label>:288:                                    ; preds = %284, %279, %276
  %289 = tail call i32* @__errno_location() #1
  %290 = load i32, i32* %289, align 4
  switch i32 %290, label %293 [
    i32 38, label %291
    i32 22, label %291
    i32 95, label %291
  ]

; <label>:291:                                    ; preds = %288, %288, %288
  %292 = load i64, i64* %270, align 8
  store i64 %292, i64* @has_capability_cache.unsupported_device, align 8
  br label %293

; <label>:293:                                    ; preds = %274, %284, %288, %291
  %294 = phi i8 [ 0, %274 ], [ 0, %291 ], [ 1, %284 ], [ 0, %288 ]
  %295 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 9
  store i8 %294, i8* %295, align 8
  br label %296

; <label>:296:                                    ; preds = %266, %260, %263, %249, %257, %293
  %297 = load i32, i32* @format, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %301, label %299

; <label>:299:                                    ; preds = %296
  %300 = load i1, i1* @print_scontext, align 1
  br i1 %300, label %301, label %342

; <label>:301:                                    ; preds = %299, %296
  %302 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 0
  %303 = load i64, i64* %302, align 8
  %304 = load i64, i64* @getfilecon_cache.unsupported_device, align 8
  %305 = icmp eq i64 %303, %304
  %306 = tail call i32* @__errno_location() #1
  store i32 95, i32* %306, align 4
  br i1 %305, label %308, label %307

; <label>:307:                                    ; preds = %301
  store i64 %303, i64* @getfilecon_cache.unsupported_device, align 8
  br label %308

; <label>:308:                                    ; preds = %307, %301
  %309 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 5
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @UNKNOWN_SECURITY_CONTEXT, i64 0, i64 0), i8** %309, align 8
  %310 = icmp eq i32 %297, 0
  br i1 %310, label %311, label %328

; <label>:311:                                    ; preds = %308
  %312 = getelementptr inbounds %struct.stat, %struct.stat* %34, i64 0, i32 0
  %313 = load i64, i64* @file_has_acl_cache.unsupported_device, align 8
  %314 = icmp eq i64 %303, %313
  br i1 %314, label %315, label %316

; <label>:315:                                    ; preds = %311
  store i32 95, i32* %306, align 4
  br label %323

; <label>:316:                                    ; preds = %311
  store i32 0, i32* %306, align 4
  %317 = call i32 @file_has_acl(i8* %206, %struct.stat* nonnull %34) #13
  %318 = icmp slt i32 %317, 1
  br i1 %318, label %319, label %323

; <label>:319:                                    ; preds = %316
  %320 = load i32, i32* %306, align 4
  switch i32 %320, label %323 [
    i32 38, label %321
    i32 22, label %321
    i32 95, label %321
  ]

; <label>:321:                                    ; preds = %319, %319, %319
  %322 = load i64, i64* %312, align 8
  store i64 %322, i64* @file_has_acl_cache.unsupported_device, align 8
  br label %323

; <label>:323:                                    ; preds = %315, %316, %319, %321
  %324 = phi i32 [ 0, %315 ], [ %317, %321 ], [ %317, %316 ], [ %317, %319 ]
  %325 = lshr i32 %324, 31
  %326 = icmp sgt i32 %324, 0
  %327 = zext i1 %326 to i8
  br label %328

; <label>:328:                                    ; preds = %323, %308
  %329 = phi i8 [ %327, %323 ], [ 0, %308 ]
  %330 = phi i32 [ %325, %323 ], [ 0, %308 ]
  %331 = icmp eq i8 %329, 0
  %332 = select i1 %331, i32 0, i32 2
  %333 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 8
  store i32 %332, i32* %333, align 4
  %334 = xor i1 %331, true
  %335 = zext i1 %334 to i8
  %336 = load i8, i8* @any_has_acl, align 1
  %337 = or i8 %336, %335
  store i8 %337, i8* @any_has_acl, align 1
  %338 = icmp eq i32 %330, 0
  br i1 %338, label %342, label %339

; <label>:339:                                    ; preds = %328
  %340 = load i32, i32* %306, align 4
  %341 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %206) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %340, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i64 0, i64 0), i8* %341) #13
  br label %342

; <label>:342:                                    ; preds = %339, %328, %299
  %343 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 3
  %344 = load i32, i32* %343, align 8
  %345 = and i32 %344, 61440
  %346 = icmp eq i32 %345, 40960
  br i1 %346, label %347, label %423

; <label>:347:                                    ; preds = %342
  %348 = load i32, i32* @format, align 4
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %352, label %350

; <label>:350:                                    ; preds = %347
  %351 = load i1, i1* @check_symlink_color, align 1
  br i1 %351, label %352, label %423

; <label>:352:                                    ; preds = %350, %347
  %353 = bitcast %struct.stat* %7 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %353) #13
  %354 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 8
  %355 = load i64, i64* %354, align 8
  %356 = call i8* @areadlink_with_size(i8* %206, i64 %355) #13
  %357 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 1
  store i8* %356, i8** %357, align 8
  %358 = icmp eq i8* %356, null
  br i1 %358, label %359, label %372

; <label>:359:                                    ; preds = %352
  %360 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.208, i64 0, i64 0), i32 5) #13
  %361 = tail call i32* @__errno_location() #1
  %362 = load i32, i32* %361, align 4
  %363 = call i8* @quotearg_style(i32 4, i8* %206) #13
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %362, i8* %360, i8* %363) #13
  br i1 %2, label %367, label %364

; <label>:364:                                    ; preds = %359
  %365 = load i32, i32* @exit_status, align 4
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %367, label %369

; <label>:367:                                    ; preds = %364, %359
  %368 = phi i32 [ 1, %364 ], [ 2, %359 ]
  store i32 %368, i32* @exit_status, align 4
  br label %369

; <label>:369:                                    ; preds = %364, %367
  %370 = load i8*, i8** %357, align 8
  %371 = icmp eq i8* %370, null
  br i1 %371, label %420, label %372

; <label>:372:                                    ; preds = %352, %369
  %373 = phi i8* [ %370, %369 ], [ %356, %352 ]
  %374 = load i8, i8* %373, align 1
  %375 = icmp eq i8 %374, 47
  br i1 %375, label %376, label %378

; <label>:376:                                    ; preds = %372
  %377 = call noalias i8* @xstrdup(i8* nonnull %373) #13
  br label %397

; <label>:378:                                    ; preds = %372
  %379 = call i64 @dir_len(i8* %206) #16
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %383

; <label>:381:                                    ; preds = %378
  %382 = call noalias i8* @xstrdup(i8* nonnull %373) #13
  br label %397

; <label>:383:                                    ; preds = %378
  %384 = call i64 @strlen(i8* nonnull %373) #16
  %385 = add i64 %379, 2
  %386 = add i64 %385, %384
  %387 = call noalias i8* @xmalloc(i64 %386) #13
  %388 = add i64 %379, -1
  %389 = getelementptr inbounds i8, i8* %206, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = icmp ne i8 %390, 47
  %392 = zext i1 %391 to i64
  %393 = add i64 %392, %379
  %394 = call i8* @stpncpy(i8* %387, i8* %206, i64 %393) #13
  %395 = call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %394, i1 false) #13
  %396 = call i8* @__stpcpy_chk(i8* nonnull %394, i8* nonnull %373, i64 %395) #13
  br label %397

; <label>:397:                                    ; preds = %376, %381, %383
  %398 = phi i8* [ %377, %376 ], [ %382, %381 ], [ %387, %383 ]
  %399 = icmp eq i8* %398, null
  br i1 %399, label %420, label %400

; <label>:400:                                    ; preds = %397
  %401 = load i32, i32* @indicator_style, align 4
  %402 = icmp ugt i32 %401, 1
  br i1 %402, label %405, label %403

; <label>:403:                                    ; preds = %400
  %404 = load i1, i1* @check_symlink_color, align 1
  br i1 %404, label %405, label %420

; <label>:405:                                    ; preds = %403, %400
  %406 = call i32 @__xstat(i32 1, i8* nonnull %398, %struct.stat* nonnull %7) #13
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %420

; <label>:408:                                    ; preds = %405
  %409 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 7
  store i8 1, i8* %409, align 1
  %410 = load i32, i32* @format, align 4
  %411 = getelementptr inbounds %struct.stat, %struct.stat* %7, i64 0, i32 3
  %412 = load i32, i32* %411, align 8
  %413 = icmp ne i32 %410, 0
  %414 = and i1 %413, %2
  %415 = and i32 %412, 61440
  %416 = icmp eq i32 %415, 16384
  %417 = and i1 %414, %416
  br i1 %417, label %420, label %418

; <label>:418:                                    ; preds = %408
  %419 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 4
  store i32 %412, i32* %419, align 4
  br label %420

; <label>:420:                                    ; preds = %408, %369, %397, %418, %405, %403
  %421 = phi i8* [ null, %397 ], [ %398, %418 ], [ %398, %405 ], [ %398, %403 ], [ null, %369 ], [ %398, %408 ]
  call void @free(i8* %421) #13
  call void @llvm.lifetime.end(i64 144, i8* nonnull %353) #13
  %422 = load i32, i32* %343, align 8
  br label %423

; <label>:423:                                    ; preds = %420, %350, %342
  %424 = phi i32 [ %422, %420 ], [ %344, %350 ], [ %344, %342 ]
  %425 = trunc i32 %424 to i16
  %426 = and i16 %425, -4096
  switch i16 %426, label %431 [
    i16 -24576, label %432
    i16 16384, label %427
  ]

; <label>:427:                                    ; preds = %423
  br i1 %2, label %428, label %430

; <label>:428:                                    ; preds = %427
  %429 = load i1, i1* @immediate_dirs, align 1
  br i1 %429, label %430, label %432

; <label>:430:                                    ; preds = %428, %427
  br label %432

; <label>:431:                                    ; preds = %423
  br label %432

; <label>:432:                                    ; preds = %428, %423, %431, %430
  %433 = phi i32 [ 6, %423 ], [ 5, %431 ], [ 3, %430 ], [ 9, %428 ]
  store i32 %433, i32* %36, align 8
  %434 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 10
  %435 = load i64, i64* %434, align 8
  %436 = load i32, i32* @format, align 4
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %440, label %438

; <label>:438:                                    ; preds = %432
  %439 = load i1, i1* @print_block_size, align 1
  br i1 %439, label %440, label %524

; <label>:440:                                    ; preds = %438, %432
  %441 = getelementptr inbounds [652 x i8], [652 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start(i64 652, i8* nonnull %441) #13
  %442 = load i32, i32* @human_output_opts, align 4
  %443 = load i64, i64* @output_block_size, align 8
  %444 = call i8* @human_readable(i64 %435, i8* nonnull %441, i32 %442, i64 512, i64 %443) #13
  %445 = call i32 @gnu_mbswidth(i8* %444, i32 0) #13
  %446 = load i32, i32* @block_size_width, align 4
  %447 = icmp slt i32 %446, %445
  br i1 %447, label %448, label %449

; <label>:448:                                    ; preds = %440
  store i32 %445, i32* @block_size_width, align 4
  br label %449

; <label>:449:                                    ; preds = %440, %448
  call void @llvm.lifetime.end(i64 652, i8* nonnull %441) #13
  %450 = load i32, i32* @format, align 4
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %524

; <label>:452:                                    ; preds = %449
  %453 = load i1, i1* @print_owner, align 1
  br i1 %453, label %476, label %454

; <label>:454:                                    ; preds = %452
  %455 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 4
  %456 = load i32, i32* %455, align 4
  %457 = load i1, i1* @numeric_ids, align 1
  br i1 %457, label %465, label %458

; <label>:458:                                    ; preds = %454
  %459 = call i8* @getuser(i32 %456) #13
  %460 = icmp eq i8* %459, null
  br i1 %460, label %465, label %461

; <label>:461:                                    ; preds = %458
  %462 = call i32 @gnu_mbswidth(i8* nonnull %459, i32 0) #13
  %463 = icmp sgt i32 %462, 0
  %464 = select i1 %463, i32 %462, i32 0
  br label %471

; <label>:465:                                    ; preds = %458, %454
  %466 = zext i32 %456 to i64
  %467 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %467) #13
  %468 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* nonnull %467, i32 1, i64 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.209, i64 0, i64 0), i64 %466) #13
  %469 = call i64 @strlen(i8* nonnull %467) #16
  %470 = trunc i64 %469 to i32
  call void @llvm.lifetime.end(i64 21, i8* nonnull %467) #13
  br label %471

; <label>:471:                                    ; preds = %461, %465
  %472 = phi i32 [ %464, %461 ], [ %470, %465 ]
  %473 = load i32, i32* @owner_width, align 4
  %474 = icmp slt i32 %473, %472
  br i1 %474, label %475, label %476

; <label>:475:                                    ; preds = %471
  store i32 %472, i32* @owner_width, align 4
  br label %476

; <label>:476:                                    ; preds = %471, %475, %452
  %477 = load i1, i1* @print_group, align 1
  br i1 %477, label %500, label %478

; <label>:478:                                    ; preds = %476
  %479 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 5
  %480 = load i32, i32* %479, align 8
  %481 = load i1, i1* @numeric_ids, align 1
  br i1 %481, label %489, label %482

; <label>:482:                                    ; preds = %478
  %483 = call i8* @getgroup(i32 %480) #13
  %484 = icmp eq i8* %483, null
  br i1 %484, label %489, label %485

; <label>:485:                                    ; preds = %482
  %486 = call i32 @gnu_mbswidth(i8* nonnull %483, i32 0) #13
  %487 = icmp sgt i32 %486, 0
  %488 = select i1 %487, i32 %486, i32 0
  br label %495

; <label>:489:                                    ; preds = %482, %478
  %490 = zext i32 %480 to i64
  %491 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %491) #13
  %492 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* nonnull %491, i32 1, i64 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.209, i64 0, i64 0), i64 %490) #13
  %493 = call i64 @strlen(i8* nonnull %491) #16
  %494 = trunc i64 %493 to i32
  call void @llvm.lifetime.end(i64 21, i8* nonnull %491) #13
  br label %495

; <label>:495:                                    ; preds = %485, %489
  %496 = phi i32 [ %488, %485 ], [ %494, %489 ]
  %497 = load i32, i32* @group_width, align 4
  %498 = icmp slt i32 %497, %496
  br i1 %498, label %499, label %500

; <label>:499:                                    ; preds = %495
  store i32 %496, i32* @group_width, align 4
  br label %500

; <label>:500:                                    ; preds = %495, %499, %476
  %501 = load i1, i1* @print_author, align 1
  br i1 %501, label %502, label %524

; <label>:502:                                    ; preds = %500
  %503 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 4
  %504 = load i32, i32* %503, align 4
  %505 = load i1, i1* @numeric_ids, align 1
  br i1 %505, label %513, label %506

; <label>:506:                                    ; preds = %502
  %507 = call i8* @getuser(i32 %504) #13
  %508 = icmp eq i8* %507, null
  br i1 %508, label %513, label %509

; <label>:509:                                    ; preds = %506
  %510 = call i32 @gnu_mbswidth(i8* nonnull %507, i32 0) #13
  %511 = icmp sgt i32 %510, 0
  %512 = select i1 %511, i32 %510, i32 0
  br label %519

; <label>:513:                                    ; preds = %506, %502
  %514 = zext i32 %504 to i64
  %515 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %515) #13
  %516 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* nonnull %515, i32 1, i64 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.209, i64 0, i64 0), i64 %514) #13
  %517 = call i64 @strlen(i8* nonnull %515) #16
  %518 = trunc i64 %517 to i32
  call void @llvm.lifetime.end(i64 21, i8* nonnull %515) #13
  br label %519

; <label>:519:                                    ; preds = %509, %513
  %520 = phi i32 [ %512, %509 ], [ %518, %513 ]
  %521 = load i32, i32* @author_width, align 4
  %522 = icmp slt i32 %521, %520
  br i1 %522, label %523, label %524

; <label>:523:                                    ; preds = %519
  store i32 %520, i32* @author_width, align 4
  br label %524

; <label>:524:                                    ; preds = %438, %519, %523, %500, %449
  %525 = load i1, i1* @print_scontext, align 1
  br i1 %525, label %526, label %534

; <label>:526:                                    ; preds = %524
  %527 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 5
  %528 = load i8*, i8** %527, align 8
  %529 = call i64 @strlen(i8* %528) #16
  %530 = trunc i64 %529 to i32
  %531 = load i32, i32* @scontext_width, align 4
  %532 = icmp slt i32 %531, %530
  br i1 %532, label %533, label %534

; <label>:533:                                    ; preds = %526
  store i32 %530, i32* @scontext_width, align 4
  br label %534

; <label>:534:                                    ; preds = %526, %533, %524
  %535 = load i32, i32* @format, align 4
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %537, label %600

; <label>:537:                                    ; preds = %534
  %538 = getelementptr inbounds [21 x i8], [21 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %538) #13
  %539 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 2
  %540 = load i64, i64* %539, align 8
  %541 = call i8* @umaxtostr(i64 %540, i8* nonnull %538) #13
  %542 = call i64 @strlen(i8* %541) #16
  %543 = trunc i64 %542 to i32
  %544 = load i32, i32* @nlink_width, align 4
  %545 = icmp slt i32 %544, %543
  br i1 %545, label %546, label %547

; <label>:546:                                    ; preds = %537
  store i32 %543, i32* @nlink_width, align 4
  br label %547

; <label>:547:                                    ; preds = %546, %537
  %548 = load i32, i32* %343, align 8
  %549 = trunc i32 %548 to i16
  %550 = and i16 %549, -4096
  switch i16 %550, label %587 [
    i16 8192, label %551
    i16 24576, label %551
  ]

; <label>:551:                                    ; preds = %547, %547
  %552 = getelementptr inbounds [21 x i8], [21 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %552) #13
  %553 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 7
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 8
  %556 = and i64 %555, 4095
  %557 = lshr i64 %554, 32
  %558 = and i64 %557, 4294963200
  %559 = or i64 %556, %558
  %560 = call i8* @umaxtostr(i64 %559, i8* nonnull %552) #13
  %561 = call i64 @strlen(i8* %560) #16
  %562 = trunc i64 %561 to i32
  %563 = load i32, i32* @major_device_number_width, align 4
  %564 = icmp slt i32 %563, %562
  br i1 %564, label %565, label %566

; <label>:565:                                    ; preds = %551
  store i32 %562, i32* @major_device_number_width, align 4
  br label %566

; <label>:566:                                    ; preds = %565, %551
  %567 = load i64, i64* %553, align 8
  %568 = and i64 %567, 255
  %569 = lshr i64 %567, 12
  %570 = and i64 %569, 4294967040
  %571 = or i64 %570, %568
  %572 = call i8* @umaxtostr(i64 %571, i8* nonnull %552) #13
  %573 = call i64 @strlen(i8* %572) #16
  %574 = trunc i64 %573 to i32
  %575 = load i32, i32* @minor_device_number_width, align 4
  %576 = icmp slt i32 %575, %574
  br i1 %576, label %577, label %578

; <label>:577:                                    ; preds = %566
  store i32 %574, i32* @minor_device_number_width, align 4
  br label %578

; <label>:578:                                    ; preds = %577, %566
  %579 = phi i32 [ %574, %577 ], [ %575, %566 ]
  %580 = load i32, i32* @major_device_number_width, align 4
  %581 = add nsw i32 %580, 2
  %582 = add nsw i32 %581, %579
  %583 = load i32, i32* @file_size_width, align 4
  %584 = icmp slt i32 %583, %582
  br i1 %584, label %585, label %586

; <label>:585:                                    ; preds = %578
  store i32 %582, i32* @file_size_width, align 4
  br label %586

; <label>:586:                                    ; preds = %585, %578
  call void @llvm.lifetime.end(i64 21, i8* nonnull %552) #13
  br label %599

; <label>:587:                                    ; preds = %547
  %588 = getelementptr inbounds [652 x i8], [652 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start(i64 652, i8* nonnull %588) #13
  %589 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i64 %31, i32 2, i32 8
  %590 = load i64, i64* %589, align 8
  %591 = load i32, i32* @file_human_output_opts, align 4
  %592 = load i64, i64* @file_output_block_size, align 8
  %593 = call i8* @human_readable(i64 %590, i8* nonnull %588, i32 %591, i64 1, i64 %592) #13
  %594 = call i32 @gnu_mbswidth(i8* %593, i32 0) #13
  %595 = load i32, i32* @file_size_width, align 4
  %596 = icmp slt i32 %595, %594
  br i1 %596, label %597, label %598

; <label>:597:                                    ; preds = %587
  store i32 %594, i32* @file_size_width, align 4
  br label %598

; <label>:598:                                    ; preds = %597, %587
  call void @llvm.lifetime.end(i64 652, i8* nonnull %588) #13
  br label %599

; <label>:599:                                    ; preds = %598, %586
  call void @llvm.lifetime.end(i64 21, i8* nonnull %538) #13
  br label %600

; <label>:600:                                    ; preds = %152, %534, %599, %146, %149, %118, %109, %113
  %601 = phi i64 [ 0, %152 ], [ 0, %118 ], [ 0, %113 ], [ 0, %109 ], [ 0, %149 ], [ 0, %146 ], [ %435, %599 ], [ %435, %534 ]
  %602 = load i1, i1* @print_inode, align 1
  br i1 %602, label %603, label %613

; <label>:603:                                    ; preds = %600
  %604 = getelementptr inbounds [21 x i8], [21 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %604) #13
  %605 = load i64, i64* %35, align 8
  %606 = call i8* @umaxtostr(i64 %605, i8* nonnull %604) #13
  %607 = call i64 @strlen(i8* %606) #16
  %608 = trunc i64 %607 to i32
  %609 = load i32, i32* @inode_number_width, align 4
  %610 = icmp slt i32 %609, %608
  br i1 %610, label %611, label %612

; <label>:611:                                    ; preds = %603
  store i32 %608, i32* @inode_number_width, align 4
  br label %612

; <label>:612:                                    ; preds = %611, %603
  call void @llvm.lifetime.end(i64 21, i8* nonnull %604) #13
  br label %613

; <label>:613:                                    ; preds = %612, %600
  %614 = call noalias i8* @xstrdup(i8* %0) #13
  %615 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %33, i64 0, i32 0
  store i8* %614, i8** %615, align 8
  %616 = load i64, i64* @cwd_n_used, align 8
  %617 = add i64 %616, 1
  store i64 %617, i64* @cwd_n_used, align 8
  br label %618

; <label>:618:                                    ; preds = %241, %236, %613
  %619 = phi i64 [ %601, %613 ], [ 0, %236 ], [ 0, %241 ]
  ret i64 %619
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @sort_files() unnamed_addr #0 {
  %1 = load i64, i64* @sorted_file_alloc, align 8
  %2 = load i64, i64* @cwd_n_used, align 8
  %3 = lshr i64 %2, 1
  %4 = add i64 %3, %2
  %5 = icmp ult i64 %1, %4
  br i1 %5, label %6, label %16

; <label>:6:                                      ; preds = %0
  %7 = load i8*, i8** bitcast (i8*** @sorted_file to i8**), align 8
  call void @free(i8* %7) #13
  %8 = load i64, i64* @cwd_n_used, align 8
  %9 = icmp ugt i64 %8, 384307168202282325
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %6
  call void @xalloc_die() #15
  unreachable

; <label>:11:                                     ; preds = %6
  %12 = mul i64 %8, 24
  %13 = call noalias i8* @xmalloc(i64 %12) #13
  store i8* %13, i8** bitcast (i8*** @sorted_file to i8**), align 8
  %14 = load i64, i64* @cwd_n_used, align 8
  %15 = mul i64 %14, 3
  store i64 %15, i64* @sorted_file_alloc, align 8
  br label %16

; <label>:16:                                     ; preds = %11, %0
  %17 = phi i64 [ %14, %11 ], [ %2, %0 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %58, label %19

; <label>:19:                                     ; preds = %16
  %20 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  %21 = load i8**, i8*** @sorted_file, align 8
  %22 = icmp ult i64 %17, 4
  br i1 %22, label %48, label %23

; <label>:23:                                     ; preds = %19
  %24 = and i64 %17, -4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %48, label %26

; <label>:26:                                     ; preds = %23
  br label %27

; <label>:27:                                     ; preds = %26, %27
  %28 = phi i64 [ %44, %27 ], [ 0, %26 ]
  %29 = or i64 %28, 1
  %30 = or i64 %28, 2
  %31 = or i64 %28, 3
  %32 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i64 %28
  %33 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i64 %29
  %34 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i64 %30
  %35 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i64 %31
  %36 = insertelement <2 x %struct.fileinfo*> undef, %struct.fileinfo* %32, i32 0
  %37 = insertelement <2 x %struct.fileinfo*> %36, %struct.fileinfo* %33, i32 1
  %38 = insertelement <2 x %struct.fileinfo*> undef, %struct.fileinfo* %34, i32 0
  %39 = insertelement <2 x %struct.fileinfo*> %38, %struct.fileinfo* %35, i32 1
  %40 = getelementptr inbounds i8*, i8** %21, i64 %28
  %41 = bitcast i8** %40 to <2 x %struct.fileinfo*>*
  store <2 x %struct.fileinfo*> %37, <2 x %struct.fileinfo*>* %41, align 8
  %42 = getelementptr i8*, i8** %40, i64 2
  %43 = bitcast i8** %42 to <2 x %struct.fileinfo*>*
  store <2 x %struct.fileinfo*> %39, <2 x %struct.fileinfo*>* %43, align 8
  %44 = add i64 %28, 4
  %45 = icmp eq i64 %44, %24
  br i1 %45, label %46, label %27

; <label>:46:                                     ; preds = %27
  %47 = icmp eq i64 %17, %24
  br i1 %47, label %58, label %48

; <label>:48:                                     ; preds = %46, %23, %19
  %49 = phi i64 [ 0, %23 ], [ 0, %19 ], [ %24, %46 ]
  br label %50

; <label>:50:                                     ; preds = %48, %50
  %51 = phi i64 [ %55, %50 ], [ %49, %48 ]
  %52 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i64 %51
  %53 = getelementptr inbounds i8*, i8** %21, i64 %51
  %54 = bitcast i8** %53 to %struct.fileinfo**
  store %struct.fileinfo* %52, %struct.fileinfo** %54, align 8
  %55 = add nuw i64 %51, 1
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %50

; <label>:57:                                     ; preds = %50
  br label %58

; <label>:58:                                     ; preds = %57, %46, %16
  %59 = load i32, i32* @sort_type, align 4
  %60 = icmp eq i32 %59, -1
  br i1 %60, label %129, label %61

; <label>:61:                                     ; preds = %58
  %62 = call i32 @_setjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @failed_strcoll, i64 0, i64 0)) #17
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %67

; <label>:64:                                     ; preds = %61
  %65 = load i64, i64* @cwd_n_used, align 8
  %66 = load i32, i32* @sort_type, align 4
  br label %113

; <label>:67:                                     ; preds = %61
  %68 = load i32, i32* @sort_type, align 4
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %67
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.210, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 3745, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__PRETTY_FUNCTION__.sort_files, i64 0, i64 0)) #15
  unreachable

; <label>:71:                                     ; preds = %67
  %72 = load i64, i64* @cwd_n_used, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %113, label %74

; <label>:74:                                     ; preds = %71
  %75 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  %76 = load i8**, i8*** @sorted_file, align 8
  %77 = icmp ult i64 %72, 4
  br i1 %77, label %103, label %78

; <label>:78:                                     ; preds = %74
  %79 = and i64 %72, -4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %103, label %81

; <label>:81:                                     ; preds = %78
  br label %82

; <label>:82:                                     ; preds = %81, %82
  %83 = phi i64 [ %99, %82 ], [ 0, %81 ]
  %84 = or i64 %83, 1
  %85 = or i64 %83, 2
  %86 = or i64 %83, 3
  %87 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i64 %83
  %88 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i64 %84
  %89 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i64 %85
  %90 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i64 %86
  %91 = insertelement <2 x %struct.fileinfo*> undef, %struct.fileinfo* %87, i32 0
  %92 = insertelement <2 x %struct.fileinfo*> %91, %struct.fileinfo* %88, i32 1
  %93 = insertelement <2 x %struct.fileinfo*> undef, %struct.fileinfo* %89, i32 0
  %94 = insertelement <2 x %struct.fileinfo*> %93, %struct.fileinfo* %90, i32 1
  %95 = getelementptr inbounds i8*, i8** %76, i64 %83
  %96 = bitcast i8** %95 to <2 x %struct.fileinfo*>*
  store <2 x %struct.fileinfo*> %92, <2 x %struct.fileinfo*>* %96, align 8
  %97 = getelementptr i8*, i8** %95, i64 2
  %98 = bitcast i8** %97 to <2 x %struct.fileinfo*>*
  store <2 x %struct.fileinfo*> %94, <2 x %struct.fileinfo*>* %98, align 8
  %99 = add i64 %83, 4
  %100 = icmp eq i64 %99, %79
  br i1 %100, label %101, label %82

; <label>:101:                                    ; preds = %82
  %102 = icmp eq i64 %72, %79
  br i1 %102, label %113, label %103

; <label>:103:                                    ; preds = %101, %78, %74
  %104 = phi i64 [ 0, %78 ], [ 0, %74 ], [ %79, %101 ]
  br label %105

; <label>:105:                                    ; preds = %103, %105
  %106 = phi i64 [ %110, %105 ], [ %104, %103 ]
  %107 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i64 %106
  %108 = getelementptr inbounds i8*, i8** %76, i64 %106
  %109 = bitcast i8** %108 to %struct.fileinfo**
  store %struct.fileinfo* %107, %struct.fileinfo** %109, align 8
  %110 = add nuw i64 %106, 1
  %111 = icmp eq i64 %110, %72
  br i1 %111, label %112, label %105

; <label>:112:                                    ; preds = %105
  br label %113

; <label>:113:                                    ; preds = %112, %101, %64, %71
  %114 = phi i32 [ %66, %64 ], [ %68, %71 ], [ %68, %101 ], [ %68, %112 ]
  %115 = phi i64 [ %65, %64 ], [ 0, %71 ], [ %72, %101 ], [ %72, %112 ]
  %116 = phi i64 [ 0, %64 ], [ 1, %71 ], [ 1, %101 ], [ 1, %112 ]
  %117 = load i8**, i8*** @sorted_file, align 8
  %118 = icmp eq i32 %114, 4
  %119 = load i32, i32* @time_type, align 4
  %120 = select i1 %118, i32 %119, i32 0
  %121 = add i32 %120, %114
  %122 = zext i32 %121 to i64
  %123 = load i1, i1* @sort_reverse, align 1
  %124 = zext i1 %123 to i64
  %125 = load i1, i1* @directories_first, align 1
  %126 = zext i1 %125 to i64
  %127 = getelementptr inbounds [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]], [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]]* @sort_functions, i64 0, i64 %122, i64 %116, i64 %124, i64 %126
  %128 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %127, align 8
  call void @mpsort(i8** %117, i64 %115, i32 (i8*, i8*)* %128) #13
  br label %129

; <label>:129:                                    ; preds = %58, %113
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @extract_dirs_from_files(i8*, i1 zeroext) unnamed_addr #0 {
  %3 = icmp ne i8* %0, null
  %4 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %5 = icmp ne %struct.hash_table* %4, null
  %6 = and i1 %3, %5
  br i1 %6, label %7, label %17

; <label>:7:                                      ; preds = %2
  %8 = tail call noalias i8* @xmalloc(i64 32) #13
  %9 = tail call noalias i8* @xstrdup(i8* nonnull %0) #13
  %10 = getelementptr inbounds i8, i8* %8, i64 8
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = bitcast i8* %8 to i8**
  store i8* null, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %8, i64 16
  store i8 0, i8* %13, align 8
  %14 = load i64, i64* bitcast (%struct.pending** @pending_dirs to i64*), align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 24
  %16 = bitcast i8* %15 to i64*
  store i64 %14, i64* %16, align 8
  store i8* %8, i8** bitcast (%struct.pending** @pending_dirs to i8**), align 8
  br label %17

; <label>:17:                                     ; preds = %7, %2
  %18 = load i64, i64* @cwd_n_used, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %180, label %20

; <label>:20:                                     ; preds = %17
  %21 = zext i1 %1 to i8
  br label %54

; <label>:22:                                     ; preds = %126
  %23 = load i64, i64* @cwd_n_used, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %180, label %25

; <label>:25:                                     ; preds = %22
  %26 = load i8**, i8*** @sorted_file, align 8
  %27 = add i64 %23, -1
  %28 = and i64 %23, 3
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %48, label %30

; <label>:30:                                     ; preds = %25
  br label %31

; <label>:31:                                     ; preds = %31, %30
  %32 = phi i64 [ 0, %30 ], [ %44, %31 ]
  %33 = phi i64 [ 0, %30 ], [ %43, %31 ]
  %34 = phi i64 [ %28, %30 ], [ %45, %31 ]
  %35 = getelementptr inbounds i8*, i8** %26, i64 %32
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds i8*, i8** %26, i64 %33
  store i8* %36, i8** %37, align 8
  %38 = getelementptr inbounds i8, i8* %36, i64 160
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = icmp ne i32 %40, 9
  %42 = zext i1 %41 to i64
  %43 = add i64 %42, %33
  %44 = add nuw i64 %32, 1
  %45 = add i64 %34, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %31

; <label>:47:                                     ; preds = %31
  br label %48

; <label>:48:                                     ; preds = %25, %47
  %49 = phi i64 [ 0, %25 ], [ %44, %47 ]
  %50 = phi i64 [ 0, %25 ], [ %43, %47 ]
  %51 = phi i64 [ undef, %25 ], [ %43, %47 ]
  %52 = icmp ult i64 %27, 3
  br i1 %52, label %178, label %53

; <label>:53:                                     ; preds = %48
  br label %133

; <label>:54:                                     ; preds = %20, %126
  %55 = phi i64 [ %18, %20 ], [ %56, %126 ]
  %56 = add i64 %55, -1
  %57 = load i8**, i8*** @sorted_file, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 %56
  %59 = bitcast i8** %58 to %struct.fileinfo**
  %60 = load %struct.fileinfo*, %struct.fileinfo** %59, align 8
  %61 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 3
  %62 = load i32, i32* %61, align 8
  switch i32 %62, label %126 [
    i32 9, label %63
    i32 3, label %63
  ]

; <label>:63:                                     ; preds = %54, %54
  %64 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 0
  %65 = load i8*, i8** %64, align 8
  br i1 %3, label %66, label %80

; <label>:66:                                     ; preds = %63
  %67 = tail call i8* @last_component(i8* %65) #16
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 46
  br i1 %69, label %70, label %77

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds i8, i8* %67, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 46
  %74 = select i1 %73, i64 2, i64 1
  %75 = getelementptr inbounds i8, i8* %67, i64 %74
  %76 = load i8, i8* %75, align 1
  switch i8 %76, label %77 [
    i8 47, label %126
    i8 0, label %126
  ]

; <label>:77:                                     ; preds = %70, %66
  %78 = load i8, i8* %65, align 1
  %79 = icmp eq i8 %78, 47
  br i1 %79, label %80, label %101

; <label>:80:                                     ; preds = %63, %77
  %81 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = tail call noalias i8* @xmalloc(i64 32) #13
  %84 = icmp eq i8* %82, null
  br i1 %84, label %87, label %85

; <label>:85:                                     ; preds = %80
  %86 = tail call noalias i8* @xstrdup(i8* nonnull %82) #13
  br label %87

; <label>:87:                                     ; preds = %85, %80
  %88 = phi i8* [ %86, %85 ], [ null, %80 ]
  %89 = getelementptr inbounds i8, i8* %83, i64 8
  %90 = bitcast i8* %89 to i8**
  store i8* %88, i8** %90, align 8
  %91 = icmp eq i8* %65, null
  br i1 %91, label %94, label %92

; <label>:92:                                     ; preds = %87
  %93 = tail call noalias i8* @xstrdup(i8* nonnull %65) #13
  br label %94

; <label>:94:                                     ; preds = %87, %92
  %95 = phi i8* [ %93, %92 ], [ null, %87 ]
  %96 = bitcast i8* %83 to i8**
  store i8* %95, i8** %96, align 8
  %97 = getelementptr inbounds i8, i8* %83, i64 16
  store i8 %21, i8* %97, align 8
  %98 = load i64, i64* bitcast (%struct.pending** @pending_dirs to i64*), align 8
  %99 = getelementptr inbounds i8, i8* %83, i64 24
  %100 = bitcast i8* %99 to i64*
  store i64 %98, i64* %100, align 8
  store i8* %83, i8** bitcast (%struct.pending** @pending_dirs to i8**), align 8
  br label %123

; <label>:101:                                    ; preds = %77
  %102 = tail call i8* @file_name_concat(i8* nonnull %0, i8* nonnull %65, i8** null) #13
  %103 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 1
  %104 = load i8*, i8** %103, align 8
  %105 = tail call noalias i8* @xmalloc(i64 32) #13
  %106 = icmp eq i8* %104, null
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %101
  %108 = tail call noalias i8* @xstrdup(i8* nonnull %104) #13
  br label %109

; <label>:109:                                    ; preds = %107, %101
  %110 = phi i8* [ %108, %107 ], [ null, %101 ]
  %111 = getelementptr inbounds i8, i8* %105, i64 8
  %112 = bitcast i8* %111 to i8**
  store i8* %110, i8** %112, align 8
  %113 = icmp eq i8* %102, null
  br i1 %113, label %116, label %114

; <label>:114:                                    ; preds = %109
  %115 = tail call noalias i8* @xstrdup(i8* nonnull %102) #13
  br label %116

; <label>:116:                                    ; preds = %109, %114
  %117 = phi i8* [ %115, %114 ], [ null, %109 ]
  %118 = bitcast i8* %105 to i8**
  store i8* %117, i8** %118, align 8
  %119 = getelementptr inbounds i8, i8* %105, i64 16
  store i8 %21, i8* %119, align 8
  %120 = load i64, i64* bitcast (%struct.pending** @pending_dirs to i64*), align 8
  %121 = getelementptr inbounds i8, i8* %105, i64 24
  %122 = bitcast i8* %121 to i64*
  store i64 %120, i64* %122, align 8
  store i8* %105, i8** bitcast (%struct.pending** @pending_dirs to i8**), align 8
  tail call void @free(i8* %102) #13
  br label %123

; <label>:123:                                    ; preds = %116, %94
  %124 = load i32, i32* %61, align 8
  %125 = icmp eq i32 %124, 9
  br i1 %125, label %128, label %126

; <label>:126:                                    ; preds = %123, %128, %54, %70, %70
  %127 = icmp eq i64 %56, 0
  br i1 %127, label %22, label %54

; <label>:128:                                    ; preds = %123
  %129 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 0
  %130 = load i8*, i8** %129, align 8
  tail call void @free(i8* %130) #13
  %131 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 0, i32 1
  %132 = load i8*, i8** %131, align 8
  tail call void @free(i8* %132) #13
  br label %126

; <label>:133:                                    ; preds = %133, %53
  %134 = phi i64 [ %49, %53 ], [ %175, %133 ]
  %135 = phi i64 [ %50, %53 ], [ %174, %133 ]
  %136 = getelementptr inbounds i8*, i8** %26, i64 %134
  %137 = load i8*, i8** %136, align 8
  %138 = getelementptr inbounds i8*, i8** %26, i64 %135
  store i8* %137, i8** %138, align 8
  %139 = getelementptr inbounds i8, i8* %137, i64 160
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 8
  %142 = icmp ne i32 %141, 9
  %143 = zext i1 %142 to i64
  %144 = add i64 %143, %135
  %145 = add nuw i64 %134, 1
  %146 = getelementptr inbounds i8*, i8** %26, i64 %145
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds i8*, i8** %26, i64 %144
  store i8* %147, i8** %148, align 8
  %149 = getelementptr inbounds i8, i8* %147, i64 160
  %150 = bitcast i8* %149 to i32*
  %151 = load i32, i32* %150, align 8
  %152 = icmp ne i32 %151, 9
  %153 = zext i1 %152 to i64
  %154 = add i64 %153, %144
  %155 = add i64 %134, 2
  %156 = getelementptr inbounds i8*, i8** %26, i64 %155
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds i8*, i8** %26, i64 %154
  store i8* %157, i8** %158, align 8
  %159 = getelementptr inbounds i8, i8* %157, i64 160
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 8
  %162 = icmp ne i32 %161, 9
  %163 = zext i1 %162 to i64
  %164 = add i64 %163, %154
  %165 = add i64 %134, 3
  %166 = getelementptr inbounds i8*, i8** %26, i64 %165
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr inbounds i8*, i8** %26, i64 %164
  store i8* %167, i8** %168, align 8
  %169 = getelementptr inbounds i8, i8* %167, i64 160
  %170 = bitcast i8* %169 to i32*
  %171 = load i32, i32* %170, align 8
  %172 = icmp ne i32 %171, 9
  %173 = zext i1 %172 to i64
  %174 = add i64 %173, %164
  %175 = add i64 %134, 4
  %176 = icmp ult i64 %175, %23
  br i1 %176, label %133, label %177

; <label>:177:                                    ; preds = %133
  br label %178

; <label>:178:                                    ; preds = %48, %177
  %179 = phi i64 [ %51, %48 ], [ %174, %177 ]
  br label %180

; <label>:180:                                    ; preds = %178, %17, %22
  %181 = phi i64 [ 0, %22 ], [ 0, %17 ], [ %179, %178 ]
  store i64 %181, i64* @cwd_n_used, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_current_files() unnamed_addr #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.tm, align 8
  %3 = alloca [1001 x i8], align 16
  %4 = alloca [12 x i8], align 1
  %5 = alloca [3643 x i8], align 16
  %6 = alloca %struct.timespec, align 8
  %7 = alloca %struct.tm, align 8
  %8 = alloca [21 x i8], align 16
  %9 = alloca [652 x i8], align 16
  %10 = alloca [21 x i8], align 16
  %11 = alloca [21 x i8], align 16
  %12 = alloca [21 x i8], align 16
  %13 = alloca [652 x i8], align 16
  %14 = alloca [21 x i8], align 16
  %15 = load i32, i32* @format, align 4
  switch i32 %15, label %858 [
    i32 1, label %42
    i32 2, label %66
    i32 3, label %177
    i32 4, label %285
    i32 0, label %16
  ]

; <label>:16:                                     ; preds = %0
  %17 = load i64, i64* @cwd_n_used, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %858, label %19

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0
  %21 = getelementptr inbounds [3643 x i8], [3643 x i8]* %5, i64 0, i64 0
  %22 = bitcast %struct.timespec* %6 to i8*
  %23 = bitcast %struct.tm* %7 to i8*
  %24 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 1
  %25 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 11
  %26 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 10
  %27 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i64 0, i32 0
  %28 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i64 0, i32 1
  %29 = getelementptr inbounds [21 x i8], [21 x i8]* %8, i64 0, i64 0
  %30 = getelementptr inbounds [652 x i8], [652 x i8]* %9, i64 0, i64 0
  %31 = getelementptr inbounds [21 x i8], [21 x i8]* %10, i64 0, i64 0
  %32 = ptrtoint [3643 x i8]* %5 to i64
  %33 = getelementptr inbounds [652 x i8], [652 x i8]* %13, i64 0, i64 0
  %34 = getelementptr inbounds [21 x i8], [21 x i8]* %14, i64 0, i64 0
  %35 = bitcast i64* %1 to i8*
  %36 = bitcast %struct.tm* %2 to i8*
  %37 = getelementptr inbounds [1001 x i8], [1001 x i8]* %3, i64 0, i64 0
  %38 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 4
  %39 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 4
  %40 = getelementptr inbounds [21 x i8], [21 x i8]* %11, i64 0, i64 0
  %41 = getelementptr inbounds [21 x i8], [21 x i8]* %12, i64 0, i64 0
  br label %286

; <label>:42:                                     ; preds = %0
  %43 = load i64, i64* @cwd_n_used, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %858, label %45

; <label>:45:                                     ; preds = %42
  br label %46

; <label>:46:                                     ; preds = %45, %62
  %47 = phi i64 [ %63, %62 ], [ 0, %45 ]
  %48 = load i8**, i8*** @sorted_file, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 %47
  %50 = bitcast i8** %49 to %struct.fileinfo**
  %51 = load %struct.fileinfo*, %struct.fileinfo** %50, align 8
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %51, i64 0)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %53 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %52, i64 0, i32 5
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %52, i64 0, i32 6
  %56 = load i8*, i8** %55, align 8
  %57 = icmp ult i8* %54, %56
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %46
  %59 = tail call i32 @__overflow(%struct._IO_FILE* %52, i32 10) #13
  br label %62

; <label>:60:                                     ; preds = %46
  %61 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %61, i8** %53, align 8
  store i8 10, i8* %54, align 1
  br label %62

; <label>:62:                                     ; preds = %58, %60
  %63 = add i64 %47, 1
  %64 = load i64, i64* @cwd_n_used, align 8
  %65 = icmp ult i64 %63, %64
  br i1 %65, label %46, label %855

; <label>:66:                                     ; preds = %0
  %67 = load i64, i64* @line_length, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

; <label>:69:                                     ; preds = %66
  tail call fastcc void @print_with_separator(i8 signext 32)
  br label %858

; <label>:70:                                     ; preds = %66
  %71 = tail call fastcc i64 @calculate_columns(i1 zeroext true) #13
  %72 = load i64, i64* @cwd_n_used, align 8
  %73 = udiv i64 %72, %71
  %74 = urem i64 %72, %71
  %75 = icmp ne i64 %74, 0
  %76 = zext i1 %75 to i64
  %77 = add i64 %76, %73
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %858, label %79

; <label>:79:                                     ; preds = %70
  %80 = add i64 %71, -1
  %81 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %82 = getelementptr inbounds %struct.column_info, %struct.column_info* %81, i64 %80, i32 2
  br label %83

; <label>:83:                                     ; preds = %174, %79
  %84 = phi i64 [ 0, %79 ], [ %175, %174 ]
  %85 = load i8**, i8*** @sorted_file, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 %84
  %87 = bitcast i8** %86 to %struct.fileinfo**
  %88 = load %struct.fileinfo*, %struct.fileinfo** %87, align 8
  %89 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %88) #13
  %90 = load i64*, i64** %82, align 8
  %91 = load i64, i64* %90, align 8
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %88, i64 0) #13
  %92 = add i64 %84, %77
  %93 = load i64, i64* @cwd_n_used, align 8
  %94 = icmp ult i64 %92, %93
  br i1 %94, label %95, label %163

; <label>:95:                                     ; preds = %83
  br label %96

; <label>:96:                                     ; preds = %95, %107
  %97 = phi i64 [ %117, %107 ], [ %92, %95 ]
  %98 = phi i64 [ %116, %107 ], [ %91, %95 ]
  %99 = phi i64 [ %114, %107 ], [ 1, %95 ]
  %100 = phi i64 [ %112, %107 ], [ %89, %95 ]
  %101 = phi i64 [ %103, %107 ], [ 0, %95 ]
  %102 = add i64 %101, %100
  %103 = add i64 %101, %98
  %104 = icmp ult i64 %102, %103
  br i1 %104, label %105, label %107

; <label>:105:                                    ; preds = %96
  br label %120

; <label>:106:                                    ; preds = %159
  br label %107

; <label>:107:                                    ; preds = %106, %96
  %108 = load i8**, i8*** @sorted_file, align 8
  %109 = getelementptr inbounds i8*, i8** %108, i64 %97
  %110 = bitcast i8** %109 to %struct.fileinfo**
  %111 = load %struct.fileinfo*, %struct.fileinfo** %110, align 8
  %112 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %111) #13
  %113 = load i64*, i64** %82, align 8
  %114 = add i64 %99, 1
  %115 = getelementptr inbounds i64, i64* %113, i64 %99
  %116 = load i64, i64* %115, align 8
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %111, i64 %103) #13
  %117 = add i64 %97, %77
  %118 = load i64, i64* @cwd_n_used, align 8
  %119 = icmp ult i64 %117, %118
  br i1 %119, label %96, label %162

; <label>:120:                                    ; preds = %105, %159
  %121 = phi i64 [ %160, %159 ], [ %102, %105 ]
  %122 = load i64, i64* @tabsize, align 8
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %146, label %124

; <label>:124:                                    ; preds = %120
  %125 = udiv i64 %103, %122
  %126 = add i64 %121, 1
  %127 = udiv i64 %126, %122
  %128 = icmp ugt i64 %125, %127
  br i1 %128, label %129, label %146

; <label>:129:                                    ; preds = %124
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %131 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %130, i64 0, i32 5
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %130, i64 0, i32 6
  %134 = load i8*, i8** %133, align 8
  %135 = icmp ult i8* %132, %134
  br i1 %135, label %139, label %136

; <label>:136:                                    ; preds = %129
  %137 = tail call i32 @__overflow(%struct._IO_FILE* %130, i32 9) #13
  %138 = load i64, i64* @tabsize, align 8
  br label %141

; <label>:139:                                    ; preds = %129
  %140 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %140, i8** %131, align 8
  store i8 9, i8* %132, align 1
  br label %141

; <label>:141:                                    ; preds = %139, %136
  %142 = phi i64 [ %138, %136 ], [ %122, %139 ]
  %143 = urem i64 %121, %142
  %144 = add i64 %142, %121
  %145 = sub i64 %144, %143
  br label %159

; <label>:146:                                    ; preds = %124, %120
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %148 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %147, i64 0, i32 5
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %147, i64 0, i32 6
  %151 = load i8*, i8** %150, align 8
  %152 = icmp ult i8* %149, %151
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %146
  %154 = tail call i32 @__overflow(%struct._IO_FILE* %147, i32 32) #13
  br label %157

; <label>:155:                                    ; preds = %146
  %156 = getelementptr inbounds i8, i8* %149, i64 1
  store i8* %156, i8** %148, align 8
  store i8 32, i8* %149, align 1
  br label %157

; <label>:157:                                    ; preds = %155, %153
  %158 = add i64 %121, 1
  br label %159

; <label>:159:                                    ; preds = %157, %141
  %160 = phi i64 [ %145, %141 ], [ %158, %157 ]
  %161 = icmp ult i64 %160, %103
  br i1 %161, label %120, label %106

; <label>:162:                                    ; preds = %107
  br label %163

; <label>:163:                                    ; preds = %162, %83
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %165 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %164, i64 0, i32 5
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %164, i64 0, i32 6
  %168 = load i8*, i8** %167, align 8
  %169 = icmp ult i8* %166, %168
  br i1 %169, label %172, label %170

; <label>:170:                                    ; preds = %163
  %171 = tail call i32 @__overflow(%struct._IO_FILE* %164, i32 10) #13
  br label %174

; <label>:172:                                    ; preds = %163
  %173 = getelementptr inbounds i8, i8* %166, i64 1
  store i8* %173, i8** %165, align 8
  store i8 10, i8* %166, align 1
  br label %174

; <label>:174:                                    ; preds = %172, %170
  %175 = add nuw i64 %84, 1
  %176 = icmp ult i64 %175, %77
  br i1 %176, label %83, label %856

; <label>:177:                                    ; preds = %0
  %178 = load i64, i64* @line_length, align 8
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %181

; <label>:180:                                    ; preds = %177
  tail call fastcc void @print_with_separator(i8 signext 32)
  br label %858

; <label>:181:                                    ; preds = %177
  %182 = tail call fastcc i64 @calculate_columns(i1 zeroext false) #13
  %183 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %184 = add i64 %182, -1
  %185 = load %struct.fileinfo**, %struct.fileinfo*** bitcast (i8*** @sorted_file to %struct.fileinfo***), align 8
  %186 = load %struct.fileinfo*, %struct.fileinfo** %185, align 8
  %187 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %186) #13
  %188 = getelementptr inbounds %struct.column_info, %struct.column_info* %183, i64 %184, i32 2
  %189 = load i64*, i64** %188, align 8
  %190 = load i64, i64* %189, align 8
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %186, i64 0) #13
  %191 = load i64, i64* @cwd_n_used, align 8
  %192 = icmp ugt i64 %191, 1
  br i1 %192, label %193, label %274

; <label>:193:                                    ; preds = %181
  br label %194

; <label>:194:                                    ; preds = %193, %260
  %195 = phi i64 [ %270, %260 ], [ 1, %193 ]
  %196 = phi i64 [ %269, %260 ], [ %190, %193 ]
  %197 = phi i64 [ %266, %260 ], [ %187, %193 ]
  %198 = phi i64 [ %261, %260 ], [ 0, %193 ]
  %199 = urem i64 %195, %182
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %212

; <label>:201:                                    ; preds = %194
  %202 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %203 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %202, i64 0, i32 5
  %204 = load i8*, i8** %203, align 8
  %205 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %202, i64 0, i32 6
  %206 = load i8*, i8** %205, align 8
  %207 = icmp ult i8* %204, %206
  br i1 %207, label %210, label %208

; <label>:208:                                    ; preds = %201
  %209 = tail call i32 @__overflow(%struct._IO_FILE* %202, i32 10) #13
  br label %260

; <label>:210:                                    ; preds = %201
  %211 = getelementptr inbounds i8, i8* %204, i64 1
  store i8* %211, i8** %203, align 8
  store i8 10, i8* %204, align 1
  br label %260

; <label>:212:                                    ; preds = %194
  %213 = add i64 %198, %197
  %214 = add i64 %198, %196
  %215 = icmp ult i64 %213, %214
  br i1 %215, label %216, label %260

; <label>:216:                                    ; preds = %212
  br label %217

; <label>:217:                                    ; preds = %216, %256
  %218 = phi i64 [ %257, %256 ], [ %213, %216 ]
  %219 = load i64, i64* @tabsize, align 8
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %243, label %221

; <label>:221:                                    ; preds = %217
  %222 = udiv i64 %214, %219
  %223 = add i64 %218, 1
  %224 = udiv i64 %223, %219
  %225 = icmp ugt i64 %222, %224
  br i1 %225, label %226, label %243

; <label>:226:                                    ; preds = %221
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %228 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %227, i64 0, i32 5
  %229 = load i8*, i8** %228, align 8
  %230 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %227, i64 0, i32 6
  %231 = load i8*, i8** %230, align 8
  %232 = icmp ult i8* %229, %231
  br i1 %232, label %236, label %233

; <label>:233:                                    ; preds = %226
  %234 = tail call i32 @__overflow(%struct._IO_FILE* %227, i32 9) #13
  %235 = load i64, i64* @tabsize, align 8
  br label %238

; <label>:236:                                    ; preds = %226
  %237 = getelementptr inbounds i8, i8* %229, i64 1
  store i8* %237, i8** %228, align 8
  store i8 9, i8* %229, align 1
  br label %238

; <label>:238:                                    ; preds = %236, %233
  %239 = phi i64 [ %235, %233 ], [ %219, %236 ]
  %240 = urem i64 %218, %239
  %241 = add i64 %239, %218
  %242 = sub i64 %241, %240
  br label %256

; <label>:243:                                    ; preds = %221, %217
  %244 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %245 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %244, i64 0, i32 5
  %246 = load i8*, i8** %245, align 8
  %247 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %244, i64 0, i32 6
  %248 = load i8*, i8** %247, align 8
  %249 = icmp ult i8* %246, %248
  br i1 %249, label %252, label %250

; <label>:250:                                    ; preds = %243
  %251 = tail call i32 @__overflow(%struct._IO_FILE* %244, i32 32) #13
  br label %254

; <label>:252:                                    ; preds = %243
  %253 = getelementptr inbounds i8, i8* %246, i64 1
  store i8* %253, i8** %245, align 8
  store i8 32, i8* %246, align 1
  br label %254

; <label>:254:                                    ; preds = %252, %250
  %255 = add i64 %218, 1
  br label %256

; <label>:256:                                    ; preds = %254, %238
  %257 = phi i64 [ %242, %238 ], [ %255, %254 ]
  %258 = icmp ult i64 %257, %214
  br i1 %258, label %217, label %259

; <label>:259:                                    ; preds = %256
  br label %260

; <label>:260:                                    ; preds = %259, %212, %210, %208
  %261 = phi i64 [ 0, %208 ], [ 0, %210 ], [ %214, %212 ], [ %214, %259 ]
  %262 = load i8**, i8*** @sorted_file, align 8
  %263 = getelementptr inbounds i8*, i8** %262, i64 %195
  %264 = bitcast i8** %263 to %struct.fileinfo**
  %265 = load %struct.fileinfo*, %struct.fileinfo** %264, align 8
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %265, i64 %261) #13
  %266 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %265) #13
  %267 = load i64*, i64** %188, align 8
  %268 = getelementptr inbounds i64, i64* %267, i64 %199
  %269 = load i64, i64* %268, align 8
  %270 = add i64 %195, 1
  %271 = load i64, i64* @cwd_n_used, align 8
  %272 = icmp ult i64 %270, %271
  br i1 %272, label %194, label %273

; <label>:273:                                    ; preds = %260
  br label %274

; <label>:274:                                    ; preds = %273, %181
  %275 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %276 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %275, i64 0, i32 5
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %275, i64 0, i32 6
  %279 = load i8*, i8** %278, align 8
  %280 = icmp ult i8* %277, %279
  br i1 %280, label %283, label %281

; <label>:281:                                    ; preds = %274
  %282 = tail call i32 @__overflow(%struct._IO_FILE* %275, i32 10) #13
  br label %858

; <label>:283:                                    ; preds = %274
  %284 = getelementptr inbounds i8, i8* %277, i64 1
  store i8* %284, i8** %276, align 8
  store i8 10, i8* %277, align 1
  br label %858

; <label>:285:                                    ; preds = %0
  tail call fastcc void @print_with_separator(i8 signext 44)
  br label %858

; <label>:286:                                    ; preds = %19, %849
  %287 = phi i64 [ 0, %19 ], [ %852, %849 ]
  %288 = load i8, i8* @print_with_color, align 1
  %289 = icmp eq i8 %288, 0
  br i1 %289, label %345, label %290

; <label>:290:                                    ; preds = %286
  %291 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %292 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  switch i64 %291, label %299 [
    i64 0, label %345
    i64 1, label %293
    i64 2, label %296
  ]

; <label>:293:                                    ; preds = %290
  %294 = load i8, i8* %292, align 1
  %295 = icmp eq i8 %294, 48
  br i1 %295, label %345, label %299

; <label>:296:                                    ; preds = %290
  %297 = call i32 @strncmp(i8* %292, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %345, label %299

; <label>:299:                                    ; preds = %296, %293, %290
  %300 = load i1, i1* @used_color, align 1
  br i1 %300, label %310, label %301

; <label>:301:                                    ; preds = %299
  store i1 true, i1* @used_color, align 1
  %302 = call i32 @tcgetpgrp(i32 1) #13
  %303 = icmp sgt i32 %302, -1
  br i1 %303, label %304, label %305

; <label>:304:                                    ; preds = %301
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %305

; <label>:305:                                    ; preds = %304, %301
  %306 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %307 = icmp eq i8* %306, null
  br i1 %307, label %309, label %308

; <label>:308:                                    ; preds = %305
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %310

; <label>:309:                                    ; preds = %305
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %310

; <label>:310:                                    ; preds = %309, %308, %299
  %311 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %312 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %313 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %314 = call i64 @fwrite_unlocked(i8* %311, i64 %312, i64 1, %struct._IO_FILE* %313) #13
  %315 = load i1, i1* @used_color, align 1
  br i1 %315, label %325, label %316

; <label>:316:                                    ; preds = %310
  store i1 true, i1* @used_color, align 1
  %317 = call i32 @tcgetpgrp(i32 1) #13
  %318 = icmp sgt i32 %317, -1
  br i1 %318, label %319, label %320

; <label>:319:                                    ; preds = %316
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %320

; <label>:320:                                    ; preds = %319, %316
  %321 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %322 = icmp eq i8* %321, null
  br i1 %322, label %324, label %323

; <label>:323:                                    ; preds = %320
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %325

; <label>:324:                                    ; preds = %320
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %325

; <label>:325:                                    ; preds = %324, %323, %310
  %326 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  %327 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %328 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %329 = call i64 @fwrite_unlocked(i8* %326, i64 %327, i64 1, %struct._IO_FILE* %328) #13
  %330 = load i1, i1* @used_color, align 1
  br i1 %330, label %340, label %331

; <label>:331:                                    ; preds = %325
  store i1 true, i1* @used_color, align 1
  %332 = call i32 @tcgetpgrp(i32 1) #13
  %333 = icmp sgt i32 %332, -1
  br i1 %333, label %334, label %335

; <label>:334:                                    ; preds = %331
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %335

; <label>:335:                                    ; preds = %334, %331
  %336 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %337 = icmp eq i8* %336, null
  br i1 %337, label %339, label %338

; <label>:338:                                    ; preds = %335
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %340

; <label>:339:                                    ; preds = %335
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %340

; <label>:340:                                    ; preds = %339, %338, %325
  %341 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %342 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %343 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %344 = call i64 @fwrite_unlocked(i8* %341, i64 %342, i64 1, %struct._IO_FILE* %343) #13
  br label %345

; <label>:345:                                    ; preds = %286, %290, %293, %296, %340
  %346 = load i8**, i8*** @sorted_file, align 8
  %347 = getelementptr inbounds i8*, i8** %346, i64 %287
  %348 = bitcast i8** %347 to %struct.fileinfo**
  %349 = load %struct.fileinfo*, %struct.fileinfo** %348, align 8
  call void @llvm.lifetime.start(i64 12, i8* nonnull %20) #13
  call void @llvm.lifetime.start(i64 3643, i8* nonnull %21) #13
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22) #13
  call void @llvm.lifetime.start(i64 56, i8* nonnull %23) #13
  %350 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 6
  %351 = load i8, i8* %350, align 8
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %355, label %353

; <label>:353:                                    ; preds = %345
  %354 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2
  call void @filemodestring(%struct.stat* %354, i8* nonnull %20) #13
  br label %361

; <label>:355:                                    ; preds = %345
  %356 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 3
  %357 = load i32, i32* %356, align 8
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [11 x i8], [11 x i8]* @filetype_letter, i64 0, i64 %358
  %360 = load i8, i8* %359, align 1
  store i8 %360, i8* %20, align 1
  call void @llvm.memset.p0i8.i64(i8* %24, i8 63, i64 10, i32 1, i1 false) #13
  store i8 0, i8* %25, align 1
  br label %361

; <label>:361:                                    ; preds = %355, %353
  %362 = load i8, i8* @any_has_acl, align 1
  %363 = icmp eq i8 %362, 0
  br i1 %363, label %368, label %364

; <label>:364:                                    ; preds = %361
  %365 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 8
  %366 = load i32, i32* %365, align 4
  switch i32 %366, label %370 [
    i32 1, label %368
    i32 2, label %367
  ]

; <label>:367:                                    ; preds = %364
  br label %368

; <label>:368:                                    ; preds = %367, %364, %361
  %369 = phi i8 [ 46, %364 ], [ 0, %361 ], [ 43, %367 ]
  store i8 %369, i8* %26, align 1
  br label %370

; <label>:370:                                    ; preds = %368, %364
  %371 = load i32, i32* @time_type, align 4
  switch i32 %371, label %381 [
    i32 1, label %372
    i32 0, label %375
    i32 2, label %378
  ]

; <label>:372:                                    ; preds = %370
  %373 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 13, i32 0
  %374 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 13, i32 1
  br label %382

; <label>:375:                                    ; preds = %370
  %376 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 12, i32 0
  %377 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 12, i32 1
  br label %382

; <label>:378:                                    ; preds = %370
  %379 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 11, i32 0
  %380 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 11, i32 1
  br label %382

; <label>:381:                                    ; preds = %370
  call void @abort() #15
  unreachable

; <label>:382:                                    ; preds = %378, %375, %372
  %383 = phi i64* [ %380, %378 ], [ %377, %375 ], [ %374, %372 ]
  %384 = phi i64* [ %379, %378 ], [ %376, %375 ], [ %373, %372 ]
  %385 = load i64, i64* %384, align 8
  %386 = load i64, i64* %383, align 8
  store i64 %385, i64* %27, align 8
  store i64 %386, i64* %28, align 8
  %387 = load i1, i1* @print_inode, align 1
  br i1 %387, label %388, label %403

; <label>:388:                                    ; preds = %382
  call void @llvm.lifetime.start(i64 21, i8* nonnull %29) #13
  %389 = load i32, i32* @inode_number_width, align 4
  %390 = load i8, i8* %350, align 8
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %398, label %392

; <label>:392:                                    ; preds = %388
  %393 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 1
  %394 = load i64, i64* %393, align 8
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %398, label %396

; <label>:396:                                    ; preds = %392
  %397 = call i8* @umaxtostr(i64 %394, i8* nonnull %29) #13
  br label %398

; <label>:398:                                    ; preds = %396, %392, %388
  %399 = phi i8* [ %397, %396 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %392 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %388 ]
  %400 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* nonnull %21, i32 1, i64 3643, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.212, i64 0, i64 0), i32 %389, i8* %399) #13
  %401 = call i64 @strlen(i8* nonnull %21) #16
  %402 = getelementptr inbounds [3643 x i8], [3643 x i8]* %5, i64 0, i64 %401
  call void @llvm.lifetime.end(i64 21, i8* nonnull %29) #13
  br label %403

; <label>:403:                                    ; preds = %398, %382
  %404 = phi i8* [ %402, %398 ], [ %21, %382 ]
  %405 = load i1, i1* @print_block_size, align 1
  br i1 %405, label %406, label %449

; <label>:406:                                    ; preds = %403
  call void @llvm.lifetime.start(i64 652, i8* nonnull %30) #13
  %407 = load i8, i8* %350, align 8
  %408 = icmp eq i8 %407, 0
  br i1 %408, label %415, label %409

; <label>:409:                                    ; preds = %406
  %410 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 10
  %411 = load i64, i64* %410, align 8
  %412 = load i32, i32* @human_output_opts, align 4
  %413 = load i64, i64* @output_block_size, align 8
  %414 = call i8* @human_readable(i64 %411, i8* nonnull %30, i32 %412, i64 512, i64 %413) #13
  br label %415

; <label>:415:                                    ; preds = %409, %406
  %416 = phi i8* [ %414, %409 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %406 ]
  %417 = load i32, i32* @block_size_width, align 4
  %418 = call i32 @gnu_mbswidth(i8* %416, i32 0) #13
  %419 = icmp sgt i32 %417, %418
  br i1 %419, label %420, label %439

; <label>:420:                                    ; preds = %415
  %421 = xor i32 %417, -1
  %422 = add i32 %418, %421
  %423 = icmp sgt i32 %422, -2
  %424 = select i1 %423, i32 %422, i32 -2
  %425 = add i32 %417, 1
  %426 = sub i32 %425, %418
  %427 = add i32 %426, %424
  %428 = zext i32 %427 to i64
  %429 = add nuw nsw i64 %428, 1
  call void @llvm.memset.p0i8.i64(i8* %404, i8 32, i64 %429, i32 1, i1 false) #13
  %430 = add i32 %418, -1
  %431 = sub i32 %430, %417
  %432 = icmp sgt i32 %431, -2
  %433 = select i1 %432, i32 %431, i32 -2
  %434 = add i32 %425, %433
  %435 = sub i32 %434, %418
  %436 = zext i32 %435 to i64
  %437 = getelementptr i8, i8* %404, i64 1
  %438 = getelementptr i8, i8* %437, i64 %436
  br label %439

; <label>:439:                                    ; preds = %420, %415
  %440 = phi i8* [ %404, %415 ], [ %438, %420 ]
  br label %441

; <label>:441:                                    ; preds = %439, %441
  %442 = phi i8* [ %444, %441 ], [ %416, %439 ]
  %443 = phi i8* [ %446, %441 ], [ %440, %439 ]
  %444 = getelementptr inbounds i8, i8* %442, i64 1
  %445 = load i8, i8* %442, align 1
  %446 = getelementptr inbounds i8, i8* %443, i64 1
  store i8 %445, i8* %443, align 1
  %447 = icmp eq i8 %445, 0
  br i1 %447, label %448, label %441

; <label>:448:                                    ; preds = %441
  store i8 32, i8* %443, align 1
  call void @llvm.lifetime.end(i64 652, i8* nonnull %30) #13
  br label %449

; <label>:449:                                    ; preds = %448, %403
  %450 = phi i8* [ %446, %448 ], [ %404, %403 ]
  call void @llvm.lifetime.start(i64 21, i8* nonnull %31) #13
  %451 = call i64 @llvm.objectsize.i64.p0i8(i8* %450, i1 false) #13
  %452 = load i32, i32* @nlink_width, align 4
  %453 = load i8, i8* %350, align 8
  %454 = icmp eq i8 %453, 0
  br i1 %454, label %459, label %455

; <label>:455:                                    ; preds = %449
  %456 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 2
  %457 = load i64, i64* %456, align 8
  %458 = call i8* @umaxtostr(i64 %457, i8* nonnull %31) #13
  br label %459

; <label>:459:                                    ; preds = %455, %449
  %460 = phi i8* [ %458, %455 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %449 ]
  %461 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %450, i32 1, i64 %451, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.215, i64 0, i64 0), i8* nonnull %20, i32 %452, i8* %460) #13
  call void @llvm.lifetime.end(i64 21, i8* nonnull %31) #13
  %462 = call i64 @strlen(i8* %450) #16
  %463 = getelementptr inbounds i8, i8* %450, i64 %462
  %464 = load i1, i1* @dired, align 1
  br i1 %464, label %465, label %470

; <label>:465:                                    ; preds = %459
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %467 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i64 0, i64 0), %struct._IO_FILE* %466) #13
  %468 = load i64, i64* @dired_pos, align 8
  %469 = add i64 %468, 2
  store i64 %469, i64* @dired_pos, align 8
  br label %470

; <label>:470:                                    ; preds = %465, %459
  %471 = load i1, i1* @print_owner, align 1
  br i1 %471, label %472, label %478

; <label>:472:                                    ; preds = %470
  %473 = load i1, i1* @print_group, align 1
  br i1 %473, label %474, label %478

; <label>:474:                                    ; preds = %472
  %475 = load i1, i1* @print_author, align 1
  br i1 %475, label %478, label %476

; <label>:476:                                    ; preds = %474
  %477 = load i1, i1* @print_scontext, align 1
  br i1 %477, label %478, label %535

; <label>:478:                                    ; preds = %476, %474, %472, %470
  %479 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %480 = call i32 @fputs_unlocked(i8* nonnull %21, %struct._IO_FILE* %479) #13
  %481 = ptrtoint i8* %463 to i64
  %482 = sub i64 %481, %32
  %483 = load i64, i64* @dired_pos, align 8
  %484 = add i64 %482, %483
  store i64 %484, i64* @dired_pos, align 8
  %485 = load i1, i1* @print_owner, align 1
  br i1 %485, label %499, label %486

; <label>:486:                                    ; preds = %478
  %487 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 4
  %488 = load i32, i32* %487, align 4
  %489 = load i32, i32* @owner_width, align 4
  %490 = load i8, i8* %350, align 8
  %491 = icmp eq i8 %490, 0
  br i1 %491, label %496, label %492

; <label>:492:                                    ; preds = %486
  %493 = load i1, i1* @numeric_ids, align 1
  br i1 %493, label %496, label %494

; <label>:494:                                    ; preds = %492
  %495 = call i8* @getuser(i32 %488) #13
  br label %496

; <label>:496:                                    ; preds = %494, %492, %486
  %497 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %486 ], [ %495, %494 ], [ null, %492 ]
  %498 = zext i32 %488 to i64
  call fastcc void @format_user_or_group(i8* %497, i64 %498, i32 %489) #13
  br label %499

; <label>:499:                                    ; preds = %496, %478
  %500 = load i1, i1* @print_group, align 1
  br i1 %500, label %514, label %501

; <label>:501:                                    ; preds = %499
  %502 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 5
  %503 = load i32, i32* %502, align 8
  %504 = load i32, i32* @group_width, align 4
  %505 = load i8, i8* %350, align 8
  %506 = icmp eq i8 %505, 0
  br i1 %506, label %511, label %507

; <label>:507:                                    ; preds = %501
  %508 = load i1, i1* @numeric_ids, align 1
  br i1 %508, label %511, label %509

; <label>:509:                                    ; preds = %507
  %510 = call i8* @getgroup(i32 %503) #13
  br label %511

; <label>:511:                                    ; preds = %509, %507, %501
  %512 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %501 ], [ %510, %509 ], [ null, %507 ]
  %513 = zext i32 %503 to i64
  call fastcc void @format_user_or_group(i8* %512, i64 %513, i32 %504) #13
  br label %514

; <label>:514:                                    ; preds = %511, %499
  %515 = load i1, i1* @print_author, align 1
  br i1 %515, label %516, label %529

; <label>:516:                                    ; preds = %514
  %517 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 4
  %518 = load i32, i32* %517, align 4
  %519 = load i32, i32* @author_width, align 4
  %520 = load i8, i8* %350, align 8
  %521 = icmp eq i8 %520, 0
  br i1 %521, label %526, label %522

; <label>:522:                                    ; preds = %516
  %523 = load i1, i1* @numeric_ids, align 1
  br i1 %523, label %526, label %524

; <label>:524:                                    ; preds = %522
  %525 = call i8* @getuser(i32 %518) #13
  br label %526

; <label>:526:                                    ; preds = %524, %522, %516
  %527 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %516 ], [ %525, %524 ], [ null, %522 ]
  %528 = zext i32 %518 to i64
  call fastcc void @format_user_or_group(i8* %527, i64 %528, i32 %519) #13
  br label %529

; <label>:529:                                    ; preds = %526, %514
  %530 = load i1, i1* @print_scontext, align 1
  br i1 %530, label %531, label %535

; <label>:531:                                    ; preds = %529
  %532 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 5
  %533 = load i8*, i8** %532, align 8
  %534 = load i32, i32* @scontext_width, align 4
  call fastcc void @format_user_or_group(i8* %533, i64 0, i32 %534) #13
  br label %535

; <label>:535:                                    ; preds = %531, %529, %476
  %536 = phi i8* [ %463, %476 ], [ %21, %531 ], [ %21, %529 ]
  %537 = load i8, i8* %350, align 8
  %538 = icmp eq i8 %537, 0
  br i1 %538, label %539, label %540

; <label>:539:                                    ; preds = %535
  call void @llvm.lifetime.start(i64 652, i8* nonnull %33) #13
  br label %582

; <label>:540:                                    ; preds = %535
  %541 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 3
  %542 = load i32, i32* %541, align 8
  %543 = trunc i32 %542 to i16
  %544 = and i16 %543, -4096
  switch i16 %544, label %576 [
    i16 8192, label %545
    i16 24576, label %545
  ]

; <label>:545:                                    ; preds = %540, %540
  call void @llvm.lifetime.start(i64 21, i8* nonnull %40) #13
  call void @llvm.lifetime.start(i64 21, i8* nonnull %41) #13
  %546 = load i32, i32* @file_size_width, align 4
  %547 = load i32, i32* @major_device_number_width, align 4
  %548 = load i32, i32* @minor_device_number_width, align 4
  %549 = add i32 %546, -2
  %550 = sub i32 %549, %547
  %551 = sub i32 %550, %548
  %552 = call i64 @llvm.objectsize.i64.p0i8(i8* %536, i1 false) #13
  %553 = icmp sgt i32 %551, 0
  %554 = select i1 %553, i32 %551, i32 0
  %555 = add nsw i32 %554, %547
  %556 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 7
  %557 = load i64, i64* %556, align 8
  %558 = lshr i64 %557, 8
  %559 = and i64 %558, 4095
  %560 = lshr i64 %557, 32
  %561 = and i64 %560, 4294963200
  %562 = or i64 %559, %561
  %563 = call i8* @umaxtostr(i64 %562, i8* nonnull %40) #13
  %564 = load i32, i32* @minor_device_number_width, align 4
  %565 = load i64, i64* %556, align 8
  %566 = and i64 %565, 255
  %567 = lshr i64 %565, 12
  %568 = and i64 %567, 4294967040
  %569 = or i64 %568, %566
  %570 = call i8* @umaxtostr(i64 %569, i8* nonnull %41) #13
  %571 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %536, i32 1, i64 %552, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.216, i64 0, i64 0), i32 %555, i8* %563, i32 %564, i8* %570) #13
  %572 = load i32, i32* @file_size_width, align 4
  %573 = add nsw i32 %572, 1
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i8, i8* %536, i64 %574
  call void @llvm.lifetime.end(i64 21, i8* nonnull %41) #13
  call void @llvm.lifetime.end(i64 21, i8* nonnull %40) #13
  br label %616

; <label>:576:                                    ; preds = %540
  call void @llvm.lifetime.start(i64 652, i8* nonnull %33) #13
  %577 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 8
  %578 = load i64, i64* %577, align 8
  %579 = load i32, i32* @file_human_output_opts, align 4
  %580 = load i64, i64* @file_output_block_size, align 8
  %581 = call i8* @human_readable(i64 %578, i8* nonnull %33, i32 %579, i64 1, i64 %580) #13
  br label %582

; <label>:582:                                    ; preds = %576, %539
  %583 = phi i8* [ %581, %576 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %539 ]
  %584 = load i32, i32* @file_size_width, align 4
  %585 = call i32 @gnu_mbswidth(i8* %583, i32 0) #13
  %586 = icmp sgt i32 %584, %585
  br i1 %586, label %587, label %606

; <label>:587:                                    ; preds = %582
  %588 = xor i32 %584, -1
  %589 = add i32 %585, %588
  %590 = icmp sgt i32 %589, -2
  %591 = select i1 %590, i32 %589, i32 -2
  %592 = add i32 %584, 1
  %593 = sub i32 %592, %585
  %594 = add i32 %593, %591
  %595 = zext i32 %594 to i64
  %596 = add nuw nsw i64 %595, 1
  call void @llvm.memset.p0i8.i64(i8* %536, i8 32, i64 %596, i32 1, i1 false) #13
  %597 = add i32 %585, -1
  %598 = sub i32 %597, %584
  %599 = icmp sgt i32 %598, -2
  %600 = select i1 %599, i32 %598, i32 -2
  %601 = add i32 %592, %600
  %602 = sub i32 %601, %585
  %603 = zext i32 %602 to i64
  %604 = getelementptr i8, i8* %536, i64 1
  %605 = getelementptr i8, i8* %604, i64 %603
  br label %606

; <label>:606:                                    ; preds = %587, %582
  %607 = phi i8* [ %536, %582 ], [ %605, %587 ]
  br label %608

; <label>:608:                                    ; preds = %606, %608
  %609 = phi i8* [ %611, %608 ], [ %583, %606 ]
  %610 = phi i8* [ %613, %608 ], [ %607, %606 ]
  %611 = getelementptr inbounds i8, i8* %609, i64 1
  %612 = load i8, i8* %609, align 1
  %613 = getelementptr inbounds i8, i8* %610, i64 1
  store i8 %612, i8* %610, align 1
  %614 = icmp eq i8 %612, 0
  br i1 %614, label %615, label %608

; <label>:615:                                    ; preds = %608
  store i8 32, i8* %610, align 1
  call void @llvm.lifetime.end(i64 652, i8* nonnull %33) #13
  br label %616

; <label>:616:                                    ; preds = %615, %545
  %617 = phi i8* [ %575, %545 ], [ %613, %615 ]
  store i8 1, i8* %617, align 1
  %618 = load i8, i8* %350, align 8
  %619 = icmp eq i8 %618, 0
  br i1 %619, label %688, label %620

; <label>:620:                                    ; preds = %616
  %621 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %622 = call %struct.tm* @localtime_rz(%struct.tm_zone* %621, i64* nonnull %27, %struct.tm* nonnull %7) #13
  %623 = icmp eq %struct.tm* %622, null
  br i1 %623, label %681, label %624

; <label>:624:                                    ; preds = %620
  %625 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @current_time, i64 0, i32 0), align 16
  %626 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @current_time, i64 0, i32 1), align 8
  %627 = load i64, i64* %27, align 8
  %628 = load i64, i64* %28, align 8
  %629 = icmp slt i64 %625, %627
  br i1 %629, label %636, label %630

; <label>:630:                                    ; preds = %624
  %631 = icmp sgt i64 %625, %627
  br i1 %631, label %641, label %632

; <label>:632:                                    ; preds = %630
  %633 = sub nsw i64 %626, %628
  %634 = trunc i64 %633 to i32
  %635 = icmp slt i32 %634, 0
  br i1 %635, label %636, label %641

; <label>:636:                                    ; preds = %632, %624
  call void @gettime(%struct.timespec* nonnull @current_time) #13
  %637 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @current_time, i64 0, i32 0), align 16
  %638 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @current_time, i64 0, i32 1), align 8
  %639 = load i64, i64* %27, align 8
  %640 = load i64, i64* %28, align 8
  br label %641

; <label>:641:                                    ; preds = %636, %632, %630
  %642 = phi i64 [ %628, %630 ], [ %640, %636 ], [ %628, %632 ]
  %643 = phi i64 [ %627, %630 ], [ %639, %636 ], [ %627, %632 ]
  %644 = phi i64 [ %626, %630 ], [ %638, %636 ], [ %626, %632 ]
  %645 = phi i64 [ %625, %630 ], [ %637, %636 ], [ %625, %632 ]
  %646 = add nsw i64 %645, -15778476
  %647 = icmp slt i64 %646, %643
  br i1 %647, label %654, label %648

; <label>:648:                                    ; preds = %641
  %649 = icmp sgt i64 %646, %643
  br i1 %649, label %664, label %650

; <label>:650:                                    ; preds = %648
  %651 = sub nsw i64 %644, %642
  %652 = trunc i64 %651 to i32
  %653 = icmp slt i32 %652, 0
  br i1 %653, label %654, label %664

; <label>:654:                                    ; preds = %650, %641
  %655 = icmp slt i64 %643, %645
  br i1 %655, label %661, label %656

; <label>:656:                                    ; preds = %654
  %657 = icmp sgt i64 %643, %645
  br i1 %657, label %661, label %658

; <label>:658:                                    ; preds = %656
  %659 = sub nsw i64 %642, %644
  %660 = trunc i64 %659 to i32
  br label %661

; <label>:661:                                    ; preds = %658, %656, %654
  %662 = phi i32 [ -1, %654 ], [ %660, %658 ], [ 1, %656 ]
  %663 = icmp slt i32 %662, 0
  br label %664

; <label>:664:                                    ; preds = %661, %650, %648
  %665 = phi i1 [ false, %650 ], [ %663, %661 ], [ false, %648 ]
  %666 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %667 = trunc i64 %642 to i32
  %668 = load i1, i1* @use_abformat, align 1
  %669 = zext i1 %665 to i64
  br i1 %668, label %670, label %674

; <label>:670:                                    ; preds = %664
  %671 = load i32, i32* %39, align 8
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 %669, i64 %672, i64 0
  br label %677

; <label>:674:                                    ; preds = %664
  %675 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %669
  %676 = load i8*, i8** %675, align 8
  br label %677

; <label>:677:                                    ; preds = %674, %670
  %678 = phi i8* [ %673, %670 ], [ %676, %674 ]
  %679 = call i64 @nstrftime(i8* %617, i64 1001, i8* %678, %struct.tm* nonnull %7, %struct.tm_zone* %666, i32 %667) #13
  %680 = icmp eq i64 %679, 0
  br i1 %680, label %681, label %684

; <label>:681:                                    ; preds = %677, %620
  %682 = load i8, i8* %617, align 1
  %683 = icmp eq i8 %682, 0
  br i1 %683, label %684, label %688

; <label>:684:                                    ; preds = %681, %677
  %685 = phi i64 [ 0, %681 ], [ %679, %677 ]
  %686 = getelementptr inbounds i8, i8* %617, i64 %685
  %687 = getelementptr inbounds i8, i8* %686, i64 1
  store i8 32, i8* %686, align 1
  store i8 0, i8* %687, align 1
  br label %731

; <label>:688:                                    ; preds = %681, %616
  call void @llvm.lifetime.start(i64 21, i8* nonnull %34) #13
  %689 = call i64 @llvm.objectsize.i64.p0i8(i8* %617, i1 false) #13
  %690 = load i32, i32* @long_time_expected_width.width, align 4
  %691 = icmp slt i32 %690, 0
  br i1 %691, label %692, label %719

; <label>:692:                                    ; preds = %688
  call void @llvm.lifetime.start(i64 8, i8* nonnull %35) #13
  store i64 0, i64* %1, align 8
  call void @llvm.lifetime.start(i64 56, i8* nonnull %36) #13
  call void @llvm.lifetime.start(i64 1001, i8* nonnull %37) #13
  %693 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %694 = call %struct.tm* @localtime_rz(%struct.tm_zone* %693, i64* nonnull %1, %struct.tm* nonnull %2) #13
  %695 = icmp eq %struct.tm* %694, null
  br i1 %695, label %711, label %696

; <label>:696:                                    ; preds = %692
  %697 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %698 = load i1, i1* @use_abformat, align 1
  br i1 %698, label %699, label %703

; <label>:699:                                    ; preds = %696
  %700 = load i32, i32* %38, align 8
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 0, i64 %701, i64 0
  br label %705

; <label>:703:                                    ; preds = %696
  %704 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  br label %705

; <label>:705:                                    ; preds = %703, %699
  %706 = phi i8* [ %702, %699 ], [ %704, %703 ]
  %707 = call i64 @nstrftime(i8* nonnull %37, i64 1001, i8* %706, %struct.tm* nonnull %2, %struct.tm_zone* %697, i32 0) #13
  %708 = icmp eq i64 %707, 0
  br i1 %708, label %711, label %709

; <label>:709:                                    ; preds = %705
  %710 = call i32 @mbsnwidth(i8* nonnull %37, i64 %707, i32 0) #13
  store i32 %710, i32* @long_time_expected_width.width, align 4
  br label %713

; <label>:711:                                    ; preds = %705, %692
  %712 = load i32, i32* @long_time_expected_width.width, align 4
  br label %713

; <label>:713:                                    ; preds = %711, %709
  %714 = phi i32 [ %712, %711 ], [ %710, %709 ]
  %715 = icmp slt i32 %714, 0
  br i1 %715, label %716, label %717

; <label>:716:                                    ; preds = %713
  store i32 0, i32* @long_time_expected_width.width, align 4
  br label %717

; <label>:717:                                    ; preds = %716, %713
  %718 = phi i32 [ 0, %716 ], [ %714, %713 ]
  call void @llvm.lifetime.end(i64 1001, i8* nonnull %37) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %36) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %35) #13
  br label %719

; <label>:719:                                    ; preds = %717, %688
  %720 = phi i32 [ %718, %717 ], [ %690, %688 ]
  %721 = load i8, i8* %350, align 8
  %722 = icmp eq i8 %721, 0
  br i1 %722, label %726, label %723

; <label>:723:                                    ; preds = %719
  %724 = load i64, i64* %27, align 8
  %725 = call i8* @imaxtostr(i64 %724, i8* nonnull %34) #13
  br label %726

; <label>:726:                                    ; preds = %723, %719
  %727 = phi i8* [ %725, %723 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %719 ]
  %728 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %617, i32 1, i64 %689, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.212, i64 0, i64 0), i32 %720, i8* %727) #13
  %729 = call i64 @strlen(i8* %617) #16
  %730 = getelementptr inbounds i8, i8* %617, i64 %729
  call void @llvm.lifetime.end(i64 21, i8* nonnull %34) #13
  br label %731

; <label>:731:                                    ; preds = %726, %684
  %732 = phi i8* [ %687, %684 ], [ %730, %726 ]
  %733 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %734 = call i32 @fputs_unlocked(i8* nonnull %21, %struct._IO_FILE* %733) #13
  %735 = ptrtoint i8* %732 to i64
  %736 = sub i64 %735, %32
  %737 = load i64, i64* @dired_pos, align 8
  %738 = add i64 %737, %736
  store i64 %738, i64* @dired_pos, align 8
  %739 = call fastcc i64 @print_name_with_quoting(%struct.fileinfo* nonnull %349, i1 zeroext false, %struct.obstack* nonnull @dired_obstack, i64 %736) #13
  %740 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 3
  %741 = load i32, i32* %740, align 8
  %742 = icmp eq i32 %741, 6
  br i1 %742, label %743, label %788

; <label>:743:                                    ; preds = %731
  %744 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 1
  %745 = load i8*, i8** %744, align 8
  %746 = icmp eq i8* %745, null
  br i1 %746, label %838, label %747

; <label>:747:                                    ; preds = %743
  %748 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %749 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.217, i64 0, i64 0), %struct._IO_FILE* %748) #13
  %750 = load i64, i64* @dired_pos, align 8
  %751 = add i64 %750, 4
  store i64 %751, i64* @dired_pos, align 8
  %752 = add i64 %736, 4
  %753 = add i64 %752, %739
  %754 = call fastcc i64 @print_name_with_quoting(%struct.fileinfo* nonnull %349, i1 zeroext true, %struct.obstack* null, i64 %753) #13
  %755 = load i32, i32* @indicator_style, align 4
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %838, label %757

; <label>:757:                                    ; preds = %747
  %758 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 4
  %759 = load i32, i32* %758, align 4
  %760 = trunc i32 %759 to i16
  %761 = and i16 %760, -4096
  switch i16 %761, label %767 [
    i16 -32768, label %762
    i16 16384, label %772
  ]

; <label>:762:                                    ; preds = %757
  %763 = icmp ne i32 %755, 3
  %764 = and i32 %759, 73
  %765 = icmp eq i32 %764, 0
  %766 = or i1 %763, %765
  br i1 %766, label %838, label %772

; <label>:767:                                    ; preds = %757
  %768 = icmp eq i32 %755, 1
  br i1 %768, label %838, label %769

; <label>:769:                                    ; preds = %767
  switch i16 %761, label %838 [
    i16 -24576, label %772
    i16 4096, label %770
    i16 -16384, label %771
  ]

; <label>:770:                                    ; preds = %769
  br label %772

; <label>:771:                                    ; preds = %769
  br label %772

; <label>:772:                                    ; preds = %771, %770, %769, %762, %757
  %773 = phi i8 [ 61, %771 ], [ 124, %770 ], [ 47, %757 ], [ 64, %769 ], [ 42, %762 ]
  %774 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %775 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %774, i64 0, i32 5
  %776 = load i8*, i8** %775, align 8
  %777 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %774, i64 0, i32 6
  %778 = load i8*, i8** %777, align 8
  %779 = icmp ult i8* %776, %778
  br i1 %779, label %783, label %780

; <label>:780:                                    ; preds = %772
  %781 = zext i8 %773 to i32
  %782 = call i32 @__overflow(%struct._IO_FILE* %774, i32 %781) #13
  br label %785

; <label>:783:                                    ; preds = %772
  %784 = getelementptr inbounds i8, i8* %776, i64 1
  store i8* %784, i8** %775, align 8
  store i8 %773, i8* %776, align 1
  br label %785

; <label>:785:                                    ; preds = %783, %780
  %786 = load i64, i64* @dired_pos, align 8
  %787 = add i64 %786, 1
  store i64 %787, i64* @dired_pos, align 8
  br label %838

; <label>:788:                                    ; preds = %731
  %789 = load i32, i32* @indicator_style, align 4
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %838, label %791

; <label>:791:                                    ; preds = %788
  %792 = load i8, i8* %350, align 8
  %793 = icmp ne i8 %792, 0
  %794 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %349, i64 0, i32 2, i32 3
  %795 = load i32, i32* %794, align 8
  br i1 %793, label %796, label %799

; <label>:796:                                    ; preds = %791
  %797 = trunc i32 %795 to i16
  %798 = and i16 %797, -4096
  switch i16 %798, label %805 [
    i16 -32768, label %800
    i16 16384, label %822
  ]

; <label>:799:                                    ; preds = %791
  switch i32 %741, label %805 [
    i32 5, label %838
    i32 9, label %822
    i32 3, label %822
  ]

; <label>:800:                                    ; preds = %796
  %801 = icmp ne i32 %789, 3
  %802 = and i32 %795, 73
  %803 = icmp eq i32 %802, 0
  %804 = or i1 %801, %803
  br i1 %804, label %838, label %822

; <label>:805:                                    ; preds = %799, %796
  %806 = icmp eq i32 %789, 1
  br i1 %806, label %838, label %807

; <label>:807:                                    ; preds = %805
  br i1 %793, label %808, label %811

; <label>:808:                                    ; preds = %807
  %809 = trunc i32 %795 to i16
  %810 = and i16 %809, -4096
  switch i16 %810, label %838 [
    i16 -24576, label %822
    i16 4096, label %814
    i16 -16384, label %815
  ]

; <label>:811:                                    ; preds = %807
  %812 = add i32 %741, -1
  %813 = icmp ult i32 %812, 7
  br i1 %813, label %816, label %838

; <label>:814:                                    ; preds = %808
  br label %822

; <label>:815:                                    ; preds = %808
  br label %822

; <label>:816:                                    ; preds = %811
  %817 = zext i32 %812 to i56
  %818 = shl nuw nsw i56 %817, 3
  %819 = lshr i56 17240342323527804, %818
  %820 = trunc i56 %819 to i8
  %821 = icmp eq i8 %820, 0
  br i1 %821, label %838, label %822

; <label>:822:                                    ; preds = %816, %815, %814, %808, %800, %799, %799, %796
  %823 = phi i8 [ %820, %816 ], [ 61, %815 ], [ 124, %814 ], [ 47, %796 ], [ 47, %799 ], [ 47, %799 ], [ 64, %808 ], [ 42, %800 ]
  %824 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %825 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %824, i64 0, i32 5
  %826 = load i8*, i8** %825, align 8
  %827 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %824, i64 0, i32 6
  %828 = load i8*, i8** %827, align 8
  %829 = icmp ult i8* %826, %828
  br i1 %829, label %833, label %830

; <label>:830:                                    ; preds = %822
  %831 = zext i8 %823 to i32
  %832 = call i32 @__overflow(%struct._IO_FILE* %824, i32 %831) #13
  br label %835

; <label>:833:                                    ; preds = %822
  %834 = getelementptr inbounds i8, i8* %826, i64 1
  store i8* %834, i8** %825, align 8
  store i8 %823, i8* %826, align 1
  br label %835

; <label>:835:                                    ; preds = %833, %830
  %836 = load i64, i64* @dired_pos, align 8
  %837 = add i64 %836, 1
  store i64 %837, i64* @dired_pos, align 8
  br label %838

; <label>:838:                                    ; preds = %743, %747, %762, %767, %769, %785, %788, %799, %800, %805, %808, %811, %816, %835
  call void @llvm.lifetime.end(i64 56, i8* nonnull %23) #13
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22) #13
  call void @llvm.lifetime.end(i64 3643, i8* nonnull %21) #13
  call void @llvm.lifetime.end(i64 12, i8* nonnull %20) #13
  %839 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %840 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %839, i64 0, i32 5
  %841 = load i8*, i8** %840, align 8
  %842 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %839, i64 0, i32 6
  %843 = load i8*, i8** %842, align 8
  %844 = icmp ult i8* %841, %843
  br i1 %844, label %847, label %845

; <label>:845:                                    ; preds = %838
  %846 = call i32 @__overflow(%struct._IO_FILE* %839, i32 10) #13
  br label %849

; <label>:847:                                    ; preds = %838
  %848 = getelementptr inbounds i8, i8* %841, i64 1
  store i8* %848, i8** %840, align 8
  store i8 10, i8* %841, align 1
  br label %849

; <label>:849:                                    ; preds = %845, %847
  %850 = load i64, i64* @dired_pos, align 8
  %851 = add i64 %850, 1
  store i64 %851, i64* @dired_pos, align 8
  %852 = add i64 %287, 1
  %853 = load i64, i64* @cwd_n_used, align 8
  %854 = icmp ult i64 %852, %853
  br i1 %854, label %286, label %857

; <label>:855:                                    ; preds = %62
  br label %858

; <label>:856:                                    ; preds = %174
  br label %858

; <label>:857:                                    ; preds = %849
  br label %858

; <label>:858:                                    ; preds = %857, %856, %855, %42, %16, %283, %281, %70, %180, %69, %0, %285
  ret void
}

declare i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #9

; Function Attrs: nounwind
declare noalias %struct.__dirstream* @opendir(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @dirfd(%struct.__dirstream*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @closedir(%struct.__dirstream* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @quote_name(i8*, %struct.quoting_options*, i32, %struct.bin_str* readonly, i1 zeroext, %struct.obstack*) unnamed_addr #0 {
  %7 = alloca [8192 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i8, align 1
  %10 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start(i64 8192, i8* nonnull %10) #13
  %11 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #13
  store i8* %10, i8** %8, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %9) #13
  %12 = call fastcc i64 @quote_name_buf(i8** nonnull %8, i8* %0, %struct.quoting_options* %1, i32 %2, i64* null, i8* nonnull %9)
  %13 = load i8, i8* %9, align 1
  %14 = icmp eq i8 %13, 0
  %15 = xor i1 %4, true
  %16 = or i1 %14, %15
  br i1 %16, label %31, label %17

; <label>:17:                                     ; preds = %6
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %19 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %18, i64 0, i32 5
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %18, i64 0, i32 6
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ult i8* %20, %22
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %17
  %25 = call i32 @__overflow(%struct._IO_FILE* %18, i32 32) #13
  br label %28

; <label>:26:                                     ; preds = %17
  %27 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %27, i8** %19, align 8
  store i8 32, i8* %20, align 1
  br label %28

; <label>:28:                                     ; preds = %24, %26
  %29 = load i64, i64* @dired_pos, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* @dired_pos, align 8
  br label %31

; <label>:31:                                     ; preds = %6, %28
  %32 = icmp eq %struct.bin_str* %3, null
  br i1 %32, label %594, label %33

; <label>:33:                                     ; preds = %31
  %34 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %35 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  switch i64 %34, label %42 [
    i64 0, label %369
    i64 1, label %36
    i64 2, label %39
  ]

; <label>:36:                                     ; preds = %33
  %37 = load i8, i8* %35, align 1
  %38 = icmp eq i8 %37, 48
  br i1 %38, label %369, label %42

; <label>:39:                                     ; preds = %33
  %40 = call i32 @strncmp(i8* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %369, label %42

; <label>:42:                                     ; preds = %39, %36, %33
  %43 = load i1, i1* @used_color, align 1
  br i1 %43, label %290, label %44

; <label>:44:                                     ; preds = %42
  store i1 true, i1* @used_color, align 1
  %45 = call i32 @tcgetpgrp(i32 1) #13
  %46 = icmp sgt i32 %45, -1
  br i1 %46, label %47, label %48

; <label>:47:                                     ; preds = %44
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %48

; <label>:48:                                     ; preds = %47, %44
  %49 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %50 = icmp eq i8* %49, null
  %51 = load i1, i1* @used_color, align 1
  br i1 %50, label %113, label %52

; <label>:52:                                     ; preds = %48
  br i1 %51, label %108, label %53

; <label>:53:                                     ; preds = %52
  store i1 true, i1* @used_color, align 1
  %54 = call i32 @tcgetpgrp(i32 1) #13
  %55 = icmp sgt i32 %54, -1
  br i1 %55, label %56, label %57

; <label>:56:                                     ; preds = %53
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %57

; <label>:57:                                     ; preds = %56, %53
  %58 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %59 = icmp eq i8* %58, null
  %60 = load i1, i1* @used_color, align 1
  br i1 %59, label %73, label %61

; <label>:61:                                     ; preds = %57
  br i1 %60, label %68, label %62

; <label>:62:                                     ; preds = %61
  store i1 true, i1* @used_color, align 1
  %63 = call i32 @tcgetpgrp(i32 1) #13
  %64 = icmp sgt i32 %63, -1
  br i1 %64, label %65, label %66

; <label>:65:                                     ; preds = %62
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %66

; <label>:66:                                     ; preds = %65, %62
  call fastcc void @prep_non_filename_text() #13
  %67 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %68

; <label>:68:                                     ; preds = %61, %66
  %69 = phi i8* [ %58, %61 ], [ %67, %66 ]
  %70 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %72 = call i64 @fwrite_unlocked(i8* %69, i64 %70, i64 1, %struct._IO_FILE* %71) #13
  br label %106

; <label>:73:                                     ; preds = %57
  br i1 %60, label %79, label %74

; <label>:74:                                     ; preds = %73
  store i1 true, i1* @used_color, align 1
  %75 = call i32 @tcgetpgrp(i32 1) #13
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %78

; <label>:77:                                     ; preds = %74
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %78

; <label>:78:                                     ; preds = %77, %74
  call fastcc void @prep_non_filename_text() #13
  br label %79

; <label>:79:                                     ; preds = %73, %78
  %80 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %81 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %83 = call i64 @fwrite_unlocked(i8* %80, i64 %81, i64 1, %struct._IO_FILE* %82) #13
  %84 = load i1, i1* @used_color, align 1
  br i1 %84, label %90, label %85

; <label>:85:                                     ; preds = %79
  store i1 true, i1* @used_color, align 1
  %86 = call i32 @tcgetpgrp(i32 1) #13
  %87 = icmp sgt i32 %86, -1
  br i1 %87, label %88, label %89

; <label>:88:                                     ; preds = %85
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %89

; <label>:89:                                     ; preds = %88, %85
  call fastcc void @prep_non_filename_text() #13
  br label %90

; <label>:90:                                     ; preds = %79, %89
  %91 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %92 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %94 = call i64 @fwrite_unlocked(i8* %91, i64 %92, i64 1, %struct._IO_FILE* %93) #13
  %95 = load i1, i1* @used_color, align 1
  br i1 %95, label %101, label %96

; <label>:96:                                     ; preds = %90
  store i1 true, i1* @used_color, align 1
  %97 = call i32 @tcgetpgrp(i32 1) #13
  %98 = icmp sgt i32 %97, -1
  br i1 %98, label %99, label %100

; <label>:99:                                     ; preds = %96
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %100

; <label>:100:                                    ; preds = %99, %96
  call fastcc void @prep_non_filename_text() #13
  br label %101

; <label>:101:                                    ; preds = %90, %100
  %102 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %103 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %105 = call i64 @fwrite_unlocked(i8* %102, i64 %103, i64 1, %struct._IO_FILE* %104) #13
  br label %106

; <label>:106:                                    ; preds = %68, %101
  %107 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %108

; <label>:108:                                    ; preds = %106, %52
  %109 = phi i8* [ %49, %52 ], [ %107, %106 ]
  %110 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %112 = call i64 @fwrite_unlocked(i8* %109, i64 %110, i64 1, %struct._IO_FILE* %111) #13
  br label %290

; <label>:113:                                    ; preds = %48
  br i1 %51, label %167, label %114

; <label>:114:                                    ; preds = %113
  store i1 true, i1* @used_color, align 1
  %115 = call i32 @tcgetpgrp(i32 1) #13
  %116 = icmp sgt i32 %115, -1
  br i1 %116, label %117, label %118

; <label>:117:                                    ; preds = %114
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %118

; <label>:118:                                    ; preds = %117, %114
  %119 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %120 = icmp eq i8* %119, null
  %121 = load i1, i1* @used_color, align 1
  br i1 %120, label %134, label %122

; <label>:122:                                    ; preds = %118
  br i1 %121, label %129, label %123

; <label>:123:                                    ; preds = %122
  store i1 true, i1* @used_color, align 1
  %124 = call i32 @tcgetpgrp(i32 1) #13
  %125 = icmp sgt i32 %124, -1
  br i1 %125, label %126, label %127

; <label>:126:                                    ; preds = %123
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %127

; <label>:127:                                    ; preds = %126, %123
  call fastcc void @prep_non_filename_text() #13
  %128 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %129

; <label>:129:                                    ; preds = %122, %127
  %130 = phi i8* [ %119, %122 ], [ %128, %127 ]
  %131 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %133 = call i64 @fwrite_unlocked(i8* %130, i64 %131, i64 1, %struct._IO_FILE* %132) #13
  br label %167

; <label>:134:                                    ; preds = %118
  br i1 %121, label %140, label %135

; <label>:135:                                    ; preds = %134
  store i1 true, i1* @used_color, align 1
  %136 = call i32 @tcgetpgrp(i32 1) #13
  %137 = icmp sgt i32 %136, -1
  br i1 %137, label %138, label %139

; <label>:138:                                    ; preds = %135
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %139

; <label>:139:                                    ; preds = %138, %135
  call fastcc void @prep_non_filename_text() #13
  br label %140

; <label>:140:                                    ; preds = %134, %139
  %141 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %142 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %144 = call i64 @fwrite_unlocked(i8* %141, i64 %142, i64 1, %struct._IO_FILE* %143) #13
  %145 = load i1, i1* @used_color, align 1
  br i1 %145, label %151, label %146

; <label>:146:                                    ; preds = %140
  store i1 true, i1* @used_color, align 1
  %147 = call i32 @tcgetpgrp(i32 1) #13
  %148 = icmp sgt i32 %147, -1
  br i1 %148, label %149, label %150

; <label>:149:                                    ; preds = %146
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %150

; <label>:150:                                    ; preds = %149, %146
  call fastcc void @prep_non_filename_text() #13
  br label %151

; <label>:151:                                    ; preds = %140, %150
  %152 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %153 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %155 = call i64 @fwrite_unlocked(i8* %152, i64 %153, i64 1, %struct._IO_FILE* %154) #13
  %156 = load i1, i1* @used_color, align 1
  br i1 %156, label %162, label %157

; <label>:157:                                    ; preds = %151
  store i1 true, i1* @used_color, align 1
  %158 = call i32 @tcgetpgrp(i32 1) #13
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %157
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %161

; <label>:161:                                    ; preds = %160, %157
  call fastcc void @prep_non_filename_text() #13
  br label %162

; <label>:162:                                    ; preds = %151, %161
  %163 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %164 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %166 = call i64 @fwrite_unlocked(i8* %163, i64 %164, i64 1, %struct._IO_FILE* %165) #13
  br label %167

; <label>:167:                                    ; preds = %162, %129, %113
  %168 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %169 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %171 = call i64 @fwrite_unlocked(i8* %168, i64 %169, i64 1, %struct._IO_FILE* %170) #13
  %172 = load i1, i1* @used_color, align 1
  br i1 %172, label %226, label %173

; <label>:173:                                    ; preds = %167
  store i1 true, i1* @used_color, align 1
  %174 = call i32 @tcgetpgrp(i32 1) #13
  %175 = icmp sgt i32 %174, -1
  br i1 %175, label %176, label %177

; <label>:176:                                    ; preds = %173
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %177

; <label>:177:                                    ; preds = %176, %173
  %178 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %179 = icmp eq i8* %178, null
  %180 = load i1, i1* @used_color, align 1
  br i1 %179, label %193, label %181

; <label>:181:                                    ; preds = %177
  br i1 %180, label %188, label %182

; <label>:182:                                    ; preds = %181
  store i1 true, i1* @used_color, align 1
  %183 = call i32 @tcgetpgrp(i32 1) #13
  %184 = icmp sgt i32 %183, -1
  br i1 %184, label %185, label %186

; <label>:185:                                    ; preds = %182
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %186

; <label>:186:                                    ; preds = %185, %182
  call fastcc void @prep_non_filename_text() #13
  %187 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %188

; <label>:188:                                    ; preds = %181, %186
  %189 = phi i8* [ %178, %181 ], [ %187, %186 ]
  %190 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %192 = call i64 @fwrite_unlocked(i8* %189, i64 %190, i64 1, %struct._IO_FILE* %191) #13
  br label %226

; <label>:193:                                    ; preds = %177
  br i1 %180, label %199, label %194

; <label>:194:                                    ; preds = %193
  store i1 true, i1* @used_color, align 1
  %195 = call i32 @tcgetpgrp(i32 1) #13
  %196 = icmp sgt i32 %195, -1
  br i1 %196, label %197, label %198

; <label>:197:                                    ; preds = %194
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %198

; <label>:198:                                    ; preds = %197, %194
  call fastcc void @prep_non_filename_text() #13
  br label %199

; <label>:199:                                    ; preds = %193, %198
  %200 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %201 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %202 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %203 = call i64 @fwrite_unlocked(i8* %200, i64 %201, i64 1, %struct._IO_FILE* %202) #13
  %204 = load i1, i1* @used_color, align 1
  br i1 %204, label %210, label %205

; <label>:205:                                    ; preds = %199
  store i1 true, i1* @used_color, align 1
  %206 = call i32 @tcgetpgrp(i32 1) #13
  %207 = icmp sgt i32 %206, -1
  br i1 %207, label %208, label %209

; <label>:208:                                    ; preds = %205
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %209

; <label>:209:                                    ; preds = %208, %205
  call fastcc void @prep_non_filename_text() #13
  br label %210

; <label>:210:                                    ; preds = %199, %209
  %211 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %212 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %214 = call i64 @fwrite_unlocked(i8* %211, i64 %212, i64 1, %struct._IO_FILE* %213) #13
  %215 = load i1, i1* @used_color, align 1
  br i1 %215, label %221, label %216

; <label>:216:                                    ; preds = %210
  store i1 true, i1* @used_color, align 1
  %217 = call i32 @tcgetpgrp(i32 1) #13
  %218 = icmp sgt i32 %217, -1
  br i1 %218, label %219, label %220

; <label>:219:                                    ; preds = %216
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %220

; <label>:220:                                    ; preds = %219, %216
  call fastcc void @prep_non_filename_text() #13
  br label %221

; <label>:221:                                    ; preds = %210, %220
  %222 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %223 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %224 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %225 = call i64 @fwrite_unlocked(i8* %222, i64 %223, i64 1, %struct._IO_FILE* %224) #13
  br label %226

; <label>:226:                                    ; preds = %221, %188, %167
  %227 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %228 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %230 = call i64 @fwrite_unlocked(i8* %227, i64 %228, i64 1, %struct._IO_FILE* %229) #13
  %231 = load i1, i1* @used_color, align 1
  br i1 %231, label %285, label %232

; <label>:232:                                    ; preds = %226
  store i1 true, i1* @used_color, align 1
  %233 = call i32 @tcgetpgrp(i32 1) #13
  %234 = icmp sgt i32 %233, -1
  br i1 %234, label %235, label %236

; <label>:235:                                    ; preds = %232
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %236

; <label>:236:                                    ; preds = %235, %232
  %237 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %238 = icmp eq i8* %237, null
  %239 = load i1, i1* @used_color, align 1
  br i1 %238, label %252, label %240

; <label>:240:                                    ; preds = %236
  br i1 %239, label %247, label %241

; <label>:241:                                    ; preds = %240
  store i1 true, i1* @used_color, align 1
  %242 = call i32 @tcgetpgrp(i32 1) #13
  %243 = icmp sgt i32 %242, -1
  br i1 %243, label %244, label %245

; <label>:244:                                    ; preds = %241
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %245

; <label>:245:                                    ; preds = %244, %241
  call fastcc void @prep_non_filename_text() #13
  %246 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %247

; <label>:247:                                    ; preds = %240, %245
  %248 = phi i8* [ %237, %240 ], [ %246, %245 ]
  %249 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %250 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %251 = call i64 @fwrite_unlocked(i8* %248, i64 %249, i64 1, %struct._IO_FILE* %250) #13
  br label %285

; <label>:252:                                    ; preds = %236
  br i1 %239, label %258, label %253

; <label>:253:                                    ; preds = %252
  store i1 true, i1* @used_color, align 1
  %254 = call i32 @tcgetpgrp(i32 1) #13
  %255 = icmp sgt i32 %254, -1
  br i1 %255, label %256, label %257

; <label>:256:                                    ; preds = %253
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %257

; <label>:257:                                    ; preds = %256, %253
  call fastcc void @prep_non_filename_text() #13
  br label %258

; <label>:258:                                    ; preds = %252, %257
  %259 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %260 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %261 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %262 = call i64 @fwrite_unlocked(i8* %259, i64 %260, i64 1, %struct._IO_FILE* %261) #13
  %263 = load i1, i1* @used_color, align 1
  br i1 %263, label %269, label %264

; <label>:264:                                    ; preds = %258
  store i1 true, i1* @used_color, align 1
  %265 = call i32 @tcgetpgrp(i32 1) #13
  %266 = icmp sgt i32 %265, -1
  br i1 %266, label %267, label %268

; <label>:267:                                    ; preds = %264
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %268

; <label>:268:                                    ; preds = %267, %264
  call fastcc void @prep_non_filename_text() #13
  br label %269

; <label>:269:                                    ; preds = %258, %268
  %270 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %271 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %272 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %273 = call i64 @fwrite_unlocked(i8* %270, i64 %271, i64 1, %struct._IO_FILE* %272) #13
  %274 = load i1, i1* @used_color, align 1
  br i1 %274, label %280, label %275

; <label>:275:                                    ; preds = %269
  store i1 true, i1* @used_color, align 1
  %276 = call i32 @tcgetpgrp(i32 1) #13
  %277 = icmp sgt i32 %276, -1
  br i1 %277, label %278, label %279

; <label>:278:                                    ; preds = %275
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %279

; <label>:279:                                    ; preds = %278, %275
  call fastcc void @prep_non_filename_text() #13
  br label %280

; <label>:280:                                    ; preds = %269, %279
  %281 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %282 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %283 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %284 = call i64 @fwrite_unlocked(i8* %281, i64 %282, i64 1, %struct._IO_FILE* %283) #13
  br label %285

; <label>:285:                                    ; preds = %280, %247, %226
  %286 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %287 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %289 = call i64 @fwrite_unlocked(i8* %286, i64 %287, i64 1, %struct._IO_FILE* %288) #13
  br label %290

; <label>:290:                                    ; preds = %285, %108, %42
  %291 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %292 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %293 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %294 = call i64 @fwrite_unlocked(i8* %291, i64 %292, i64 1, %struct._IO_FILE* %293) #13
  %295 = load i1, i1* @used_color, align 1
  br i1 %295, label %364, label %296

; <label>:296:                                    ; preds = %290
  store i1 true, i1* @used_color, align 1
  %297 = call i32 @tcgetpgrp(i32 1) #13
  %298 = icmp sgt i32 %297, -1
  br i1 %298, label %299, label %300

; <label>:299:                                    ; preds = %296
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %300

; <label>:300:                                    ; preds = %299, %296
  %301 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %302 = icmp eq i8* %301, null
  %303 = load i1, i1* @used_color, align 1
  br i1 %302, label %319, label %304

; <label>:304:                                    ; preds = %300
  br i1 %303, label %314, label %305

; <label>:305:                                    ; preds = %304
  store i1 true, i1* @used_color, align 1
  %306 = call i32 @tcgetpgrp(i32 1) #13
  %307 = icmp sgt i32 %306, -1
  br i1 %307, label %308, label %309

; <label>:308:                                    ; preds = %305
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %309

; <label>:309:                                    ; preds = %308, %305
  %310 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %311 = icmp eq i8* %310, null
  br i1 %311, label %313, label %312

; <label>:312:                                    ; preds = %309
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %314

; <label>:313:                                    ; preds = %309
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %314

; <label>:314:                                    ; preds = %313, %312, %304
  %315 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %316 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %317 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %318 = call i64 @fwrite_unlocked(i8* %315, i64 %316, i64 1, %struct._IO_FILE* %317) #13
  br label %364

; <label>:319:                                    ; preds = %300
  br i1 %303, label %329, label %320

; <label>:320:                                    ; preds = %319
  store i1 true, i1* @used_color, align 1
  %321 = call i32 @tcgetpgrp(i32 1) #13
  %322 = icmp sgt i32 %321, -1
  br i1 %322, label %323, label %324

; <label>:323:                                    ; preds = %320
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %324

; <label>:324:                                    ; preds = %323, %320
  %325 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

; <label>:327:                                    ; preds = %324
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %329

; <label>:328:                                    ; preds = %324
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %329

; <label>:329:                                    ; preds = %328, %327, %319
  %330 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %331 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %332 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %333 = call i64 @fwrite_unlocked(i8* %330, i64 %331, i64 1, %struct._IO_FILE* %332) #13
  %334 = load i1, i1* @used_color, align 1
  br i1 %334, label %344, label %335

; <label>:335:                                    ; preds = %329
  store i1 true, i1* @used_color, align 1
  %336 = call i32 @tcgetpgrp(i32 1) #13
  %337 = icmp sgt i32 %336, -1
  br i1 %337, label %338, label %339

; <label>:338:                                    ; preds = %335
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %339

; <label>:339:                                    ; preds = %338, %335
  %340 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %341 = icmp eq i8* %340, null
  br i1 %341, label %343, label %342

; <label>:342:                                    ; preds = %339
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %344

; <label>:343:                                    ; preds = %339
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %344

; <label>:344:                                    ; preds = %343, %342, %329
  %345 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %346 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %347 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %348 = call i64 @fwrite_unlocked(i8* %345, i64 %346, i64 1, %struct._IO_FILE* %347) #13
  %349 = load i1, i1* @used_color, align 1
  br i1 %349, label %359, label %350

; <label>:350:                                    ; preds = %344
  store i1 true, i1* @used_color, align 1
  %351 = call i32 @tcgetpgrp(i32 1) #13
  %352 = icmp sgt i32 %351, -1
  br i1 %352, label %353, label %354

; <label>:353:                                    ; preds = %350
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %354

; <label>:354:                                    ; preds = %353, %350
  %355 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %356 = icmp eq i8* %355, null
  br i1 %356, label %358, label %357

; <label>:357:                                    ; preds = %354
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %359

; <label>:358:                                    ; preds = %354
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %359

; <label>:359:                                    ; preds = %358, %357, %344
  %360 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %361 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %362 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %363 = call i64 @fwrite_unlocked(i8* %360, i64 %361, i64 1, %struct._IO_FILE* %362) #13
  br label %364

; <label>:364:                                    ; preds = %359, %314, %290
  %365 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %366 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %367 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %368 = call i64 @fwrite_unlocked(i8* %365, i64 %366, i64 1, %struct._IO_FILE* %367) #13
  br label %369

; <label>:369:                                    ; preds = %364, %39, %36, %33
  %370 = load i1, i1* @used_color, align 1
  br i1 %370, label %439, label %371

; <label>:371:                                    ; preds = %369
  store i1 true, i1* @used_color, align 1
  %372 = call i32 @tcgetpgrp(i32 1) #13
  %373 = icmp sgt i32 %372, -1
  br i1 %373, label %374, label %375

; <label>:374:                                    ; preds = %371
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %375

; <label>:375:                                    ; preds = %374, %371
  %376 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %377 = icmp eq i8* %376, null
  %378 = load i1, i1* @used_color, align 1
  br i1 %377, label %394, label %379

; <label>:379:                                    ; preds = %375
  br i1 %378, label %389, label %380

; <label>:380:                                    ; preds = %379
  store i1 true, i1* @used_color, align 1
  %381 = call i32 @tcgetpgrp(i32 1) #13
  %382 = icmp sgt i32 %381, -1
  br i1 %382, label %383, label %384

; <label>:383:                                    ; preds = %380
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %384

; <label>:384:                                    ; preds = %383, %380
  %385 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %386 = icmp eq i8* %385, null
  br i1 %386, label %388, label %387

; <label>:387:                                    ; preds = %384
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %389

; <label>:388:                                    ; preds = %384
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %389

; <label>:389:                                    ; preds = %388, %387, %379
  %390 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %391 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %392 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %393 = call i64 @fwrite_unlocked(i8* %390, i64 %391, i64 1, %struct._IO_FILE* %392) #13
  br label %439

; <label>:394:                                    ; preds = %375
  br i1 %378, label %404, label %395

; <label>:395:                                    ; preds = %394
  store i1 true, i1* @used_color, align 1
  %396 = call i32 @tcgetpgrp(i32 1) #13
  %397 = icmp sgt i32 %396, -1
  br i1 %397, label %398, label %399

; <label>:398:                                    ; preds = %395
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %399

; <label>:399:                                    ; preds = %398, %395
  %400 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %401 = icmp eq i8* %400, null
  br i1 %401, label %403, label %402

; <label>:402:                                    ; preds = %399
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %404

; <label>:403:                                    ; preds = %399
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %404

; <label>:404:                                    ; preds = %403, %402, %394
  %405 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %406 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %407 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %408 = call i64 @fwrite_unlocked(i8* %405, i64 %406, i64 1, %struct._IO_FILE* %407) #13
  %409 = load i1, i1* @used_color, align 1
  br i1 %409, label %419, label %410

; <label>:410:                                    ; preds = %404
  store i1 true, i1* @used_color, align 1
  %411 = call i32 @tcgetpgrp(i32 1) #13
  %412 = icmp sgt i32 %411, -1
  br i1 %412, label %413, label %414

; <label>:413:                                    ; preds = %410
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %414

; <label>:414:                                    ; preds = %413, %410
  %415 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %416 = icmp eq i8* %415, null
  br i1 %416, label %418, label %417

; <label>:417:                                    ; preds = %414
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %419

; <label>:418:                                    ; preds = %414
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %419

; <label>:419:                                    ; preds = %418, %417, %404
  %420 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %421 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %422 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %423 = call i64 @fwrite_unlocked(i8* %420, i64 %421, i64 1, %struct._IO_FILE* %422) #13
  %424 = load i1, i1* @used_color, align 1
  br i1 %424, label %434, label %425

; <label>:425:                                    ; preds = %419
  store i1 true, i1* @used_color, align 1
  %426 = call i32 @tcgetpgrp(i32 1) #13
  %427 = icmp sgt i32 %426, -1
  br i1 %427, label %428, label %429

; <label>:428:                                    ; preds = %425
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %429

; <label>:429:                                    ; preds = %428, %425
  %430 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %431 = icmp eq i8* %430, null
  br i1 %431, label %433, label %432

; <label>:432:                                    ; preds = %429
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %434

; <label>:433:                                    ; preds = %429
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %434

; <label>:434:                                    ; preds = %433, %432, %419
  %435 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %436 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %437 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %438 = call i64 @fwrite_unlocked(i8* %435, i64 %436, i64 1, %struct._IO_FILE* %437) #13
  br label %439

; <label>:439:                                    ; preds = %434, %389, %369
  %440 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %441 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %442 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %443 = call i64 @fwrite_unlocked(i8* %440, i64 %441, i64 1, %struct._IO_FILE* %442) #13
  %444 = load i1, i1* @used_color, align 1
  br i1 %444, label %513, label %445

; <label>:445:                                    ; preds = %439
  store i1 true, i1* @used_color, align 1
  %446 = call i32 @tcgetpgrp(i32 1) #13
  %447 = icmp sgt i32 %446, -1
  br i1 %447, label %448, label %449

; <label>:448:                                    ; preds = %445
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %449

; <label>:449:                                    ; preds = %448, %445
  %450 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %451 = icmp eq i8* %450, null
  %452 = load i1, i1* @used_color, align 1
  br i1 %451, label %468, label %453

; <label>:453:                                    ; preds = %449
  br i1 %452, label %463, label %454

; <label>:454:                                    ; preds = %453
  store i1 true, i1* @used_color, align 1
  %455 = call i32 @tcgetpgrp(i32 1) #13
  %456 = icmp sgt i32 %455, -1
  br i1 %456, label %457, label %458

; <label>:457:                                    ; preds = %454
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %458

; <label>:458:                                    ; preds = %457, %454
  %459 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %460 = icmp eq i8* %459, null
  br i1 %460, label %462, label %461

; <label>:461:                                    ; preds = %458
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %463

; <label>:462:                                    ; preds = %458
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %463

; <label>:463:                                    ; preds = %462, %461, %453
  %464 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %465 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %467 = call i64 @fwrite_unlocked(i8* %464, i64 %465, i64 1, %struct._IO_FILE* %466) #13
  br label %513

; <label>:468:                                    ; preds = %449
  br i1 %452, label %478, label %469

; <label>:469:                                    ; preds = %468
  store i1 true, i1* @used_color, align 1
  %470 = call i32 @tcgetpgrp(i32 1) #13
  %471 = icmp sgt i32 %470, -1
  br i1 %471, label %472, label %473

; <label>:472:                                    ; preds = %469
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %473

; <label>:473:                                    ; preds = %472, %469
  %474 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %475 = icmp eq i8* %474, null
  br i1 %475, label %477, label %476

; <label>:476:                                    ; preds = %473
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %478

; <label>:477:                                    ; preds = %473
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %478

; <label>:478:                                    ; preds = %477, %476, %468
  %479 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %480 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %481 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %482 = call i64 @fwrite_unlocked(i8* %479, i64 %480, i64 1, %struct._IO_FILE* %481) #13
  %483 = load i1, i1* @used_color, align 1
  br i1 %483, label %493, label %484

; <label>:484:                                    ; preds = %478
  store i1 true, i1* @used_color, align 1
  %485 = call i32 @tcgetpgrp(i32 1) #13
  %486 = icmp sgt i32 %485, -1
  br i1 %486, label %487, label %488

; <label>:487:                                    ; preds = %484
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %488

; <label>:488:                                    ; preds = %487, %484
  %489 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %490 = icmp eq i8* %489, null
  br i1 %490, label %492, label %491

; <label>:491:                                    ; preds = %488
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %493

; <label>:492:                                    ; preds = %488
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %493

; <label>:493:                                    ; preds = %492, %491, %478
  %494 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %495 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %496 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %497 = call i64 @fwrite_unlocked(i8* %494, i64 %495, i64 1, %struct._IO_FILE* %496) #13
  %498 = load i1, i1* @used_color, align 1
  br i1 %498, label %508, label %499

; <label>:499:                                    ; preds = %493
  store i1 true, i1* @used_color, align 1
  %500 = call i32 @tcgetpgrp(i32 1) #13
  %501 = icmp sgt i32 %500, -1
  br i1 %501, label %502, label %503

; <label>:502:                                    ; preds = %499
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %503

; <label>:503:                                    ; preds = %502, %499
  %504 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %505 = icmp eq i8* %504, null
  br i1 %505, label %507, label %506

; <label>:506:                                    ; preds = %503
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %508

; <label>:507:                                    ; preds = %503
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %508

; <label>:508:                                    ; preds = %507, %506, %493
  %509 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %510 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %512 = call i64 @fwrite_unlocked(i8* %509, i64 %510, i64 1, %struct._IO_FILE* %511) #13
  br label %513

; <label>:513:                                    ; preds = %508, %463, %439
  %514 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %3, i64 0, i32 1
  %515 = load i8*, i8** %514, align 8
  %516 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %3, i64 0, i32 0
  %517 = load i64, i64* %516, align 8
  %518 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %519 = call i64 @fwrite_unlocked(i8* %515, i64 %517, i64 1, %struct._IO_FILE* %518) #13
  %520 = load i1, i1* @used_color, align 1
  br i1 %520, label %589, label %521

; <label>:521:                                    ; preds = %513
  store i1 true, i1* @used_color, align 1
  %522 = call i32 @tcgetpgrp(i32 1) #13
  %523 = icmp sgt i32 %522, -1
  br i1 %523, label %524, label %525

; <label>:524:                                    ; preds = %521
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %525

; <label>:525:                                    ; preds = %524, %521
  %526 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %527 = icmp eq i8* %526, null
  %528 = load i1, i1* @used_color, align 1
  br i1 %527, label %544, label %529

; <label>:529:                                    ; preds = %525
  br i1 %528, label %539, label %530

; <label>:530:                                    ; preds = %529
  store i1 true, i1* @used_color, align 1
  %531 = call i32 @tcgetpgrp(i32 1) #13
  %532 = icmp sgt i32 %531, -1
  br i1 %532, label %533, label %534

; <label>:533:                                    ; preds = %530
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %534

; <label>:534:                                    ; preds = %533, %530
  %535 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %536 = icmp eq i8* %535, null
  br i1 %536, label %538, label %537

; <label>:537:                                    ; preds = %534
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %539

; <label>:538:                                    ; preds = %534
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %539

; <label>:539:                                    ; preds = %538, %537, %529
  %540 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %541 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %542 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %543 = call i64 @fwrite_unlocked(i8* %540, i64 %541, i64 1, %struct._IO_FILE* %542) #13
  br label %589

; <label>:544:                                    ; preds = %525
  br i1 %528, label %554, label %545

; <label>:545:                                    ; preds = %544
  store i1 true, i1* @used_color, align 1
  %546 = call i32 @tcgetpgrp(i32 1) #13
  %547 = icmp sgt i32 %546, -1
  br i1 %547, label %548, label %549

; <label>:548:                                    ; preds = %545
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %549

; <label>:549:                                    ; preds = %548, %545
  %550 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %551 = icmp eq i8* %550, null
  br i1 %551, label %553, label %552

; <label>:552:                                    ; preds = %549
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %554

; <label>:553:                                    ; preds = %549
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %554

; <label>:554:                                    ; preds = %553, %552, %544
  %555 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %556 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %557 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %558 = call i64 @fwrite_unlocked(i8* %555, i64 %556, i64 1, %struct._IO_FILE* %557) #13
  %559 = load i1, i1* @used_color, align 1
  br i1 %559, label %569, label %560

; <label>:560:                                    ; preds = %554
  store i1 true, i1* @used_color, align 1
  %561 = call i32 @tcgetpgrp(i32 1) #13
  %562 = icmp sgt i32 %561, -1
  br i1 %562, label %563, label %564

; <label>:563:                                    ; preds = %560
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %564

; <label>:564:                                    ; preds = %563, %560
  %565 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %566 = icmp eq i8* %565, null
  br i1 %566, label %568, label %567

; <label>:567:                                    ; preds = %564
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %569

; <label>:568:                                    ; preds = %564
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %569

; <label>:569:                                    ; preds = %568, %567, %554
  %570 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %571 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %572 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %573 = call i64 @fwrite_unlocked(i8* %570, i64 %571, i64 1, %struct._IO_FILE* %572) #13
  %574 = load i1, i1* @used_color, align 1
  br i1 %574, label %584, label %575

; <label>:575:                                    ; preds = %569
  store i1 true, i1* @used_color, align 1
  %576 = call i32 @tcgetpgrp(i32 1) #13
  %577 = icmp sgt i32 %576, -1
  br i1 %577, label %578, label %579

; <label>:578:                                    ; preds = %575
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %579

; <label>:579:                                    ; preds = %578, %575
  %580 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %581 = icmp eq i8* %580, null
  br i1 %581, label %583, label %582

; <label>:582:                                    ; preds = %579
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %584

; <label>:583:                                    ; preds = %579
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %584

; <label>:584:                                    ; preds = %583, %582, %569
  %585 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %586 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %587 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %588 = call i64 @fwrite_unlocked(i8* %585, i64 %586, i64 1, %struct._IO_FILE* %587) #13
  br label %589

; <label>:589:                                    ; preds = %513, %539, %584
  %590 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %591 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %592 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %593 = call i64 @fwrite_unlocked(i8* %590, i64 %591, i64 1, %struct._IO_FILE* %592) #13
  br label %594

; <label>:594:                                    ; preds = %31, %589
  %595 = icmp ne %struct.obstack* %5, null
  br i1 %595, label %596, label %617

; <label>:596:                                    ; preds = %594
  %597 = load i1, i1* @dired, align 1
  br i1 %597, label %598, label %617

; <label>:598:                                    ; preds = %596
  %599 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i64 0, i32 4
  %600 = bitcast i8** %599 to i64*
  %601 = load i64, i64* %600, align 8
  %602 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i64 0, i32 3
  %603 = bitcast i8** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = sub i64 %601, %604
  %606 = icmp ult i64 %605, 8
  br i1 %606, label %609, label %607

; <label>:607:                                    ; preds = %598
  %608 = inttoptr i64 %604 to i64*
  br label %612

; <label>:609:                                    ; preds = %598
  call void @_obstack_newchunk(%struct.obstack* nonnull %5, i64 8) #13
  %610 = bitcast i8** %602 to i64**
  %611 = load i64*, i64** %610, align 8
  br label %612

; <label>:612:                                    ; preds = %607, %609
  %613 = phi i64* [ %611, %609 ], [ %608, %607 ]
  %614 = load i64, i64* @dired_pos, align 8
  store i64 %614, i64* %613, align 1
  %615 = load i8*, i8** %602, align 8
  %616 = getelementptr inbounds i8, i8* %615, i64 8
  store i8* %616, i8** %602, align 8
  br label %617

; <label>:617:                                    ; preds = %596, %612, %594
  %618 = load i8*, i8** %8, align 8
  %619 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %620 = call i64 @fwrite_unlocked(i8* %618, i64 1, i64 %12, %struct._IO_FILE* %619) #13
  %621 = icmp eq i8* %618, %10
  %622 = icmp eq i8* %618, %0
  %623 = or i1 %621, %622
  br i1 %623, label %625, label %624

; <label>:624:                                    ; preds = %617
  call void @free(i8* %618) #13
  br label %625

; <label>:625:                                    ; preds = %617, %624
  %626 = load i64, i64* @dired_pos, align 8
  %627 = add i64 %626, %12
  store i64 %627, i64* @dired_pos, align 8
  br i1 %595, label %628, label %650

; <label>:628:                                    ; preds = %625
  %629 = load i1, i1* @dired, align 1
  br i1 %629, label %630, label %650

; <label>:630:                                    ; preds = %628
  %631 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i64 0, i32 4
  %632 = bitcast i8** %631 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i64 0, i32 3
  %635 = bitcast i8** %634 to i64*
  %636 = load i64, i64* %635, align 8
  %637 = sub i64 %633, %636
  %638 = icmp ult i64 %637, 8
  br i1 %638, label %641, label %639

; <label>:639:                                    ; preds = %630
  %640 = inttoptr i64 %636 to i64*
  br label %645

; <label>:641:                                    ; preds = %630
  call void @_obstack_newchunk(%struct.obstack* nonnull %5, i64 8) #13
  %642 = bitcast i8** %634 to i64**
  %643 = load i64*, i64** %642, align 8
  %644 = load i64, i64* @dired_pos, align 8
  br label %645

; <label>:645:                                    ; preds = %639, %641
  %646 = phi i64 [ %644, %641 ], [ %627, %639 ]
  %647 = phi i64* [ %643, %641 ], [ %640, %639 ]
  store i64 %646, i64* %647, align 1
  %648 = load i8*, i8** %634, align 8
  %649 = getelementptr inbounds i8, i8* %648, i64 8
  store i8* %649, i8** %634, align 8
  br label %650

; <label>:650:                                    ; preds = %628, %645, %625
  %651 = zext i8 %13 to i64
  %652 = add i64 %651, %12
  call void @llvm.lifetime.end(i64 1, i8* nonnull %9) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #13
  call void @llvm.lifetime.end(i64 8192, i8* nonnull %10) #13
  ret i64 %652
}

declare %struct.dirent* @readdir(%struct.__dirstream*) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @process_signals() unnamed_addr #0 {
  %1 = alloca %struct.__sigset_t, align 8
  %2 = bitcast %struct.__sigset_t* %1 to i8*
  br label %3

; <label>:3:                                      ; preds = %42, %0
  %4 = load volatile i32, i32* @interrupt_signal, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %3
  %7 = load volatile i32, i32* @stop_signal_count, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %46, label %9

; <label>:9:                                      ; preds = %6, %3
  call void @llvm.lifetime.start(i64 128, i8* nonnull %2) #13
  %10 = load i1, i1* @used_color, align 1
  br i1 %10, label %11, label %31

; <label>:11:                                     ; preds = %9
  %12 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %13 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %15 = call i64 @fwrite_unlocked(i8* %12, i64 %13, i64 1, %struct._IO_FILE* %14) #13
  %16 = load i1, i1* @used_color, align 1
  br i1 %16, label %26, label %17

; <label>:17:                                     ; preds = %11
  store i1 true, i1* @used_color, align 1
  %18 = call i32 @tcgetpgrp(i32 1) #13
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %17
  call fastcc void @signal_setup(i1 zeroext true) #13
  br label %21

; <label>:21:                                     ; preds = %20, %17
  %22 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

; <label>:24:                                     ; preds = %21
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %26

; <label>:25:                                     ; preds = %21
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %26

; <label>:26:                                     ; preds = %25, %24, %11
  %27 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %28 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %30 = call i64 @fwrite_unlocked(i8* %27, i64 %28, i64 1, %struct._IO_FILE* %29) #13
  br label %31

; <label>:31:                                     ; preds = %26, %9
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %33 = call i32 @fflush_unlocked(%struct._IO_FILE* %32) #13
  %34 = call i32 @sigprocmask(i32 0, %struct.__sigset_t* nonnull @caught_signals, %struct.__sigset_t* nonnull %1) #13
  %35 = load volatile i32, i32* @interrupt_signal, align 4
  %36 = load volatile i32, i32* @stop_signal_count, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

; <label>:38:                                     ; preds = %31
  %39 = add nsw i32 %36, -1
  store volatile i32 %39, i32* @stop_signal_count, align 4
  br label %42

; <label>:40:                                     ; preds = %31
  %41 = call void (i32)* @signal(i32 %35, void (i32)* null) #13
  br label %42

; <label>:42:                                     ; preds = %40, %38
  %43 = phi i32 [ 19, %38 ], [ %35, %40 ]
  %44 = call i32 @raise(i32 %43) #13
  %45 = call i32 @sigprocmask(i32 2, %struct.__sigset_t* nonnull %1, %struct.__sigset_t* null) #13
  call void @llvm.lifetime.end(i64 128, i8* nonnull %2) #13
  br label %3

; <label>:46:                                     ; preds = %6
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

declare i64 @fwrite_unlocked(i8*, i64, i64, %struct._IO_FILE*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @tcgetpgrp(i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @signal_setup(i1 zeroext) unnamed_addr #0 {
  %2 = alloca %struct.sigaction, align 8
  br i1 %0, label %4, label %3

; <label>:3:                                      ; preds = %1
  br label %38

; <label>:4:                                      ; preds = %1
  %5 = bitcast %struct.sigaction* %2 to i8*
  call void @llvm.lifetime.start(i64 152, i8* nonnull %5) #13
  %6 = tail call i32 @sigemptyset(%struct.__sigset_t* nonnull @caught_signals) #13
  %7 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 0, i32 0
  br label %8

; <label>:8:                                      ; preds = %17, %4
  %9 = phi i64 [ 0, %4 ], [ %18, %17 ]
  %10 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = call i32 @sigaction(i32 %11, %struct.sigaction* null, %struct.sigaction* nonnull %2) #13
  %13 = load void (i32)*, void (i32)** %7, align 8
  %14 = icmp eq void (i32)* %13, inttoptr (i64 1 to void (i32)*)
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %8
  %16 = call i32 @sigaddset(%struct.__sigset_t* nonnull @caught_signals, i32 %11) #13
  br label %17

; <label>:17:                                     ; preds = %8, %15
  %18 = add nuw nsw i64 %9, 1
  %19 = icmp eq i64 %18, 12
  br i1 %19, label %20, label %8

; <label>:20:                                     ; preds = %17
  %21 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 1
  %22 = bitcast %struct.__sigset_t* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* bitcast (%struct.__sigset_t* @caught_signals to i8*), i64 128, i32 8, i1 false)
  %23 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 2
  store i32 268435456, i32* %23, align 8
  br label %24

; <label>:24:                                     ; preds = %34, %20
  %25 = phi i64 [ 0, %20 ], [ %35, %34 ]
  %26 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 %27) #13
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

; <label>:30:                                     ; preds = %24
  %31 = icmp eq i64 %25, 0
  %32 = select i1 %31, void (i32)* @stophandler, void (i32)* @sighandler
  store void (i32)* %32, void (i32)** %7, align 8
  %33 = call i32 @sigaction(i32 %27, %struct.sigaction* nonnull %2, %struct.sigaction* null) #13
  br label %34

; <label>:34:                                     ; preds = %24, %30
  %35 = add nuw nsw i64 %25, 1
  %36 = icmp eq i64 %35, 12
  br i1 %36, label %37, label %24

; <label>:37:                                     ; preds = %34
  call void @llvm.lifetime.end(i64 152, i8* nonnull %5) #13
  br label %46

; <label>:38:                                     ; preds = %3
  %39 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 20) #13
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %38
  %42 = tail call void (i32)* @signal(i32 20, void (i32)* null) #13
  br label %43

; <label>:43:                                     ; preds = %38, %41
  %44 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 14) #13
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %47

; <label>:46:                                     ; preds = %99, %37
  ret void

; <label>:47:                                     ; preds = %43
  %48 = tail call void (i32)* @signal(i32 14, void (i32)* null) #13
  br label %49

; <label>:49:                                     ; preds = %47, %43
  %50 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 1) #13
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

; <label>:52:                                     ; preds = %49
  %53 = tail call void (i32)* @signal(i32 1, void (i32)* null) #13
  br label %54

; <label>:54:                                     ; preds = %52, %49
  %55 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 2) #13
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %59, label %57

; <label>:57:                                     ; preds = %54
  %58 = tail call void (i32)* @signal(i32 2, void (i32)* null) #13
  br label %59

; <label>:59:                                     ; preds = %57, %54
  %60 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 13) #13
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %64, label %62

; <label>:62:                                     ; preds = %59
  %63 = tail call void (i32)* @signal(i32 13, void (i32)* null) #13
  br label %64

; <label>:64:                                     ; preds = %62, %59
  %65 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 3) #13
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

; <label>:67:                                     ; preds = %64
  %68 = tail call void (i32)* @signal(i32 3, void (i32)* null) #13
  br label %69

; <label>:69:                                     ; preds = %67, %64
  %70 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 15) #13
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %74, label %72

; <label>:72:                                     ; preds = %69
  %73 = tail call void (i32)* @signal(i32 15, void (i32)* null) #13
  br label %74

; <label>:74:                                     ; preds = %72, %69
  %75 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 29) #13
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %79, label %77

; <label>:77:                                     ; preds = %74
  %78 = tail call void (i32)* @signal(i32 29, void (i32)* null) #13
  br label %79

; <label>:79:                                     ; preds = %77, %74
  %80 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 27) #13
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %84, label %82

; <label>:82:                                     ; preds = %79
  %83 = tail call void (i32)* @signal(i32 27, void (i32)* null) #13
  br label %84

; <label>:84:                                     ; preds = %82, %79
  %85 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 26) #13
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %89, label %87

; <label>:87:                                     ; preds = %84
  %88 = tail call void (i32)* @signal(i32 26, void (i32)* null) #13
  br label %89

; <label>:89:                                     ; preds = %87, %84
  %90 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 24) #13
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %94, label %92

; <label>:92:                                     ; preds = %89
  %93 = tail call void (i32)* @signal(i32 24, void (i32)* null) #13
  br label %94

; <label>:94:                                     ; preds = %92, %89
  %95 = tail call i32 @sigismember(%struct.__sigset_t* nonnull @caught_signals, i32 25) #13
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = tail call void (i32)* @signal(i32 25, void (i32)* null) #13
  br label %99

; <label>:99:                                     ; preds = %97, %94
  br label %46
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @put_indicator(%struct.bin_str* nocapture readonly) unnamed_addr #0 {
  %2 = load i1, i1* @used_color, align 1
  br i1 %2, label %8, label %3

; <label>:3:                                      ; preds = %1
  store i1 true, i1* @used_color, align 1
  %4 = tail call i32 @tcgetpgrp(i32 1) #13
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %3
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %7

; <label>:7:                                      ; preds = %6, %3
  tail call fastcc void @prep_non_filename_text()
  br label %8

; <label>:8:                                      ; preds = %7, %1
  %9 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %0, i64 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %0, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %14 = tail call i64 @fwrite_unlocked(i8* %10, i64 %12, i64 1, %struct._IO_FILE* %13) #13
  ret void
}

declare i32 @fflush_unlocked(%struct._IO_FILE*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @sigismember(%struct.__sigset_t*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @raise(i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @dired_dump_obstack(i8*, %struct.obstack* nocapture) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = ptrtoint i8* %4 to i64
  %8 = ptrtoint i8* %6 to i64
  %9 = sub i64 %7, %8
  %10 = lshr i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %60, label %12

; <label>:12:                                     ; preds = %2
  %13 = icmp eq i8* %4, %6
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 10
  %16 = load i8, i8* %15, align 8
  %17 = or i8 %16, 2
  store i8 %17, i8* %15, align 8
  br label %18

; <label>:18:                                     ; preds = %14, %12
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 6
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %7
  %22 = xor i64 %20, -1
  %23 = and i64 %21, %22
  %24 = getelementptr inbounds i8, i8* null, i64 %23
  store i8* %24, i8** %3, align 8
  %25 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 1
  %26 = bitcast %struct._obstack_chunk** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = ptrtoint i8* %24 to i64
  %29 = sub i64 %28, %27
  %30 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i64 0, i32 4
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = sub i64 %32, %27
  %34 = icmp ugt i64 %29, %33
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %18
  store i8* %31, i8** %3, align 8
  br label %36

; <label>:36:                                     ; preds = %18, %35
  %37 = phi i64 [ %32, %35 ], [ %28, %18 ]
  %38 = bitcast i8** %5 to i64*
  store i64 %37, i64* %38, align 8
  %39 = bitcast i8* %6 to i64*
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %41 = tail call i32 @fputs_unlocked(i8* %0, %struct._IO_FILE* %40) #13
  br label %42

; <label>:42:                                     ; preds = %42, %36
  %43 = phi i64 [ %47, %42 ], [ 0, %36 ]
  %44 = getelementptr inbounds i64, i64* %39, i64 %43
  %45 = load i64, i64* %44, align 8
  %46 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i64 0, i64 0), i64 %45) #13
  %47 = add nuw nsw i64 %43, 1
  %48 = icmp eq i64 %47, %10
  br i1 %48, label %49, label %42

; <label>:49:                                     ; preds = %42
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %51 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %50, i64 0, i32 5
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %50, i64 0, i32 6
  %54 = load i8*, i8** %53, align 8
  %55 = icmp ult i8* %52, %54
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %49
  %57 = tail call i32 @__overflow(%struct._IO_FILE* %50, i32 10) #13
  br label %60

; <label>:58:                                     ; preds = %49
  %59 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %59, i8** %51, align 8
  store i8 10, i8* %52, align 1
  br label %60

; <label>:60:                                     ; preds = %58, %56, %2
  ret void
}

declare i32 @__printf_chk(i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @prep_non_filename_text() unnamed_addr #0 {
  %1 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %2 = icmp eq i8* %1, null
  br i1 %2, label %4, label %3

; <label>:3:                                      ; preds = %0
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2))
  br label %5

; <label>:4:                                      ; preds = %0
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0))
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3))
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1))
  br label %5

; <label>:5:                                      ; preds = %4, %3
  ret void
}

; Function Attrs: nounwind
declare i32 @sigemptyset(%struct.__sigset_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sigaddset(%struct.__sigset_t*, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal void @stophandler(i32) #0 {
  %2 = load volatile i32, i32* @interrupt_signal, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %7

; <label>:4:                                      ; preds = %1
  %5 = load volatile i32, i32* @stop_signal_count, align 4
  %6 = add nsw i32 %5, 1
  store volatile i32 %6, i32* @stop_signal_count, align 4
  br label %7

; <label>:7:                                      ; preds = %1, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @sighandler(i32) #0 {
  %2 = load volatile i32, i32* @interrupt_signal, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  store volatile i32 %0, i32* @interrupt_signal, align 4
  br label %5

; <label>:5:                                      ; preds = %1, %4
  ret void
}

; Function Attrs: nounwind
declare i32 @sigprocmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @quote_name_buf(i8** nocapture, i8*, %struct.quoting_options*, i32, i64*, i8* nocapture) unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.__mbstate_t*
  %9 = alloca i32, align 4
  %10 = load i8*, i8** %0, align 8
  %11 = tail call i32 @get_quoting_style(%struct.quoting_options* %2) #13
  %12 = load i8, i8* @qmark_funny_chars, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = add i32 %11, -1
  %16 = icmp ult i32 %15, 2
  %17 = icmp eq i32 %11, 0
  %18 = or i1 %17, %16
  br label %19

; <label>:19:                                     ; preds = %14, %6
  %20 = phi i1 [ false, %6 ], [ %18, %14 ]
  %21 = icmp eq i32 %3, 0
  br i1 %21, label %37, label %22

; <label>:22:                                     ; preds = %19
  %23 = tail call i64 @quotearg_buffer(i8* %10, i64 8192, i8* %1, i64 -1, %struct.quoting_options* %2) #13
  %24 = icmp ugt i64 %23, 8191
  br i1 %24, label %25, label %29

; <label>:25:                                     ; preds = %22
  %26 = add i64 %23, 1
  %27 = tail call noalias i8* @xmalloc(i64 %26) #13
  %28 = tail call i64 @quotearg_buffer(i8* %27, i64 %26, i8* %1, i64 -1, %struct.quoting_options* %2) #13
  br label %29

; <label>:29:                                     ; preds = %25, %22
  %30 = phi i8* [ %27, %25 ], [ %10, %22 ]
  %31 = load i8, i8* %1, align 1
  %32 = load i8, i8* %30, align 1
  %33 = icmp eq i8 %31, %32
  br i1 %33, label %34, label %46

; <label>:34:                                     ; preds = %29
  %35 = tail call i64 @strlen(i8* nonnull %1) #16
  %36 = icmp eq i64 %35, %23
  br label %46

; <label>:37:                                     ; preds = %19
  %38 = tail call i64 @strlen(i8* %1) #16
  br i1 %20, label %39, label %287

; <label>:39:                                     ; preds = %37
  %40 = icmp ugt i64 %38, 8191
  %41 = add i64 %38, 1
  br i1 %40, label %42, label %44

; <label>:42:                                     ; preds = %39
  %43 = tail call noalias i8* @xmalloc(i64 %41) #13
  br label %44

; <label>:44:                                     ; preds = %39, %42
  %45 = phi i8* [ %43, %42 ], [ %10, %39 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %1, i64 %41, i32 1, i1 false)
  br label %49

; <label>:46:                                     ; preds = %34, %29
  %47 = phi i1 [ false, %29 ], [ %36, %34 ]
  %48 = zext i1 %47 to i8
  br i1 %20, label %49, label %287

; <label>:49:                                     ; preds = %44, %46
  %50 = phi i8* [ %45, %44 ], [ %30, %46 ]
  %51 = phi i64 [ %38, %44 ], [ %23, %46 ]
  %52 = phi i8 [ 1, %44 ], [ %48, %46 ]
  %53 = tail call i64 @__ctype_get_mb_cur_max() #13
  %54 = icmp ugt i64 %53, 1
  %55 = getelementptr inbounds i8, i8* %50, i64 %51
  %56 = icmp sgt i64 %51, 0
  br i1 %54, label %60, label %57

; <label>:57:                                     ; preds = %49
  br i1 %56, label %58, label %319

; <label>:58:                                     ; preds = %57
  %59 = tail call i16** @__ctype_b_loc() #1
  br label %274

; <label>:60:                                     ; preds = %49
  br i1 %56, label %61, label %268

; <label>:61:                                     ; preds = %60
  %62 = bitcast i64* %7 to i8*
  %63 = bitcast i32* %9 to i8*
  %64 = ptrtoint i8* %55 to i64
  br label %65

; <label>:65:                                     ; preds = %61, %262
  %66 = phi i64 [ 0, %61 ], [ %265, %262 ]
  %67 = phi i8* [ %50, %61 ], [ %264, %262 ]
  %68 = phi i8* [ %50, %61 ], [ %263, %262 ]
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  switch i32 %70, label %75 [
    i32 32, label %71
    i32 33, label %71
    i32 34, label %71
    i32 35, label %71
    i32 37, label %71
    i32 38, label %71
    i32 39, label %71
    i32 40, label %71
    i32 41, label %71
    i32 42, label %71
    i32 43, label %71
    i32 44, label %71
    i32 45, label %71
    i32 46, label %71
    i32 47, label %71
    i32 48, label %71
    i32 49, label %71
    i32 50, label %71
    i32 51, label %71
    i32 52, label %71
    i32 53, label %71
    i32 54, label %71
    i32 55, label %71
    i32 56, label %71
    i32 57, label %71
    i32 58, label %71
    i32 59, label %71
    i32 60, label %71
    i32 61, label %71
    i32 62, label %71
    i32 63, label %71
    i32 65, label %71
    i32 66, label %71
    i32 67, label %71
    i32 68, label %71
    i32 69, label %71
    i32 70, label %71
    i32 71, label %71
    i32 72, label %71
    i32 73, label %71
    i32 74, label %71
    i32 75, label %71
    i32 76, label %71
    i32 77, label %71
    i32 78, label %71
    i32 79, label %71
    i32 80, label %71
    i32 81, label %71
    i32 82, label %71
    i32 83, label %71
    i32 84, label %71
    i32 85, label %71
    i32 86, label %71
    i32 87, label %71
    i32 88, label %71
    i32 89, label %71
    i32 90, label %71
    i32 91, label %71
    i32 92, label %71
    i32 93, label %71
    i32 94, label %71
    i32 95, label %71
    i32 97, label %71
    i32 98, label %71
    i32 99, label %71
    i32 100, label %71
    i32 101, label %71
    i32 102, label %71
    i32 103, label %71
    i32 104, label %71
    i32 105, label %71
    i32 106, label %71
    i32 107, label %71
    i32 108, label %71
    i32 109, label %71
    i32 110, label %71
    i32 111, label %71
    i32 112, label %71
    i32 113, label %71
    i32 114, label %71
    i32 115, label %71
    i32 116, label %71
    i32 117, label %71
    i32 118, label %71
    i32 119, label %71
    i32 120, label %71
    i32 121, label %71
    i32 122, label %71
    i32 123, label %71
    i32 124, label %71
    i32 125, label %71
    i32 126, label %71
  ]

; <label>:71:                                     ; preds = %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65, %65
  %72 = getelementptr inbounds i8, i8* %68, i64 1
  %73 = getelementptr inbounds i8, i8* %67, i64 1
  store i8 %69, i8* %67, align 1
  %74 = add i64 %66, 1
  br label %262

; <label>:75:                                     ; preds = %65
  call void @llvm.lifetime.start(i64 8, i8* nonnull %62) #13
  store i64 0, i64* %7, align 8
  br label %76

; <label>:76:                                     ; preds = %251, %75
  %77 = phi i8* [ %68, %75 ], [ %91, %251 ]
  %78 = phi i8* [ %67, %75 ], [ %253, %251 ]
  %79 = phi i64 [ %66, %75 ], [ %254, %251 ]
  call void @llvm.lifetime.start(i64 4, i8* nonnull %63) #13
  %80 = ptrtoint i8* %77 to i64
  %81 = sub i64 %64, %80
  %82 = call i64 @rpl_mbrtowc(i32* nonnull %9, i8* %77, i64 %81, %struct.__mbstate_t* nonnull %8) #13
  switch i64 %82, label %86 [
    i64 -1, label %83
    i64 -2, label %246
    i64 0, label %85
  ]

; <label>:83:                                     ; preds = %76
  %84 = getelementptr inbounds i8, i8* %77, i64 1
  br label %247

; <label>:85:                                     ; preds = %76
  br label %86

; <label>:86:                                     ; preds = %76, %85
  %87 = phi i64 [ 1, %85 ], [ %82, %76 ]
  %88 = load i32, i32* %9, align 4
  %89 = call i32 @wcwidth(i32 %88) #13
  %90 = icmp sgt i32 %89, -1
  %91 = getelementptr i8, i8* %77, i64 %87
  br i1 %90, label %92, label %244

; <label>:92:                                     ; preds = %86
  %93 = icmp ult i64 %87, 32
  br i1 %93, label %183, label %94

; <label>:94:                                     ; preds = %92
  %95 = and i64 %87, -32
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %183, label %97

; <label>:97:                                     ; preds = %94
  %98 = getelementptr i8, i8* %78, i64 %87
  %99 = icmp ult i8* %78, %91
  %100 = icmp ult i8* %77, %98
  %101 = and i1 %99, %100
  %102 = sub i64 %87, %95
  %103 = getelementptr i8, i8* %78, i64 %95
  %104 = getelementptr i8, i8* %77, i64 %95
  br i1 %101, label %183, label %105

; <label>:105:                                    ; preds = %97
  %106 = add i64 %95, -32
  %107 = lshr exact i64 %106, 5
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %129, label %111

; <label>:111:                                    ; preds = %105
  br label %112

; <label>:112:                                    ; preds = %112, %111
  %113 = phi i64 [ %125, %112 ], [ 0, %111 ]
  %114 = phi i64 [ %126, %112 ], [ %109, %111 ]
  %115 = getelementptr i8, i8* %78, i64 %113
  %116 = getelementptr i8, i8* %77, i64 %113
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = getelementptr i8, i8* %116, i64 16
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1
  %122 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %122, align 1
  %123 = getelementptr i8, i8* %115, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %124, align 1
  %125 = add i64 %113, 32
  %126 = add i64 %114, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %112

; <label>:128:                                    ; preds = %112
  br label %129

; <label>:129:                                    ; preds = %105, %128
  %130 = phi i64 [ 0, %105 ], [ %125, %128 ]
  %131 = icmp ult i64 %106, 96
  br i1 %131, label %181, label %132

; <label>:132:                                    ; preds = %129
  br label %133

; <label>:133:                                    ; preds = %133, %132
  %134 = phi i64 [ %130, %132 ], [ %178, %133 ]
  %135 = getelementptr i8, i8* %78, i64 %134
  %136 = getelementptr i8, i8* %77, i64 %134
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = getelementptr i8, i8* %136, i64 16
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %142, align 1
  %143 = getelementptr i8, i8* %135, i64 16
  %144 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %144, align 1
  %145 = add i64 %134, 32
  %146 = getelementptr i8, i8* %78, i64 %145
  %147 = getelementptr i8, i8* %77, i64 %145
  %148 = bitcast i8* %147 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1
  %150 = getelementptr i8, i8* %147, i64 16
  %151 = bitcast i8* %150 to <16 x i8>*
  %152 = load <16 x i8>, <16 x i8>* %151, align 1
  %153 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %153, align 1
  %154 = getelementptr i8, i8* %146, i64 16
  %155 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %152, <16 x i8>* %155, align 1
  %156 = add i64 %134, 64
  %157 = getelementptr i8, i8* %78, i64 %156
  %158 = getelementptr i8, i8* %77, i64 %156
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1
  %161 = getelementptr i8, i8* %158, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  %163 = load <16 x i8>, <16 x i8>* %162, align 1
  %164 = bitcast i8* %157 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %164, align 1
  %165 = getelementptr i8, i8* %157, i64 16
  %166 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %163, <16 x i8>* %166, align 1
  %167 = add i64 %134, 96
  %168 = getelementptr i8, i8* %78, i64 %167
  %169 = getelementptr i8, i8* %77, i64 %167
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = getelementptr i8, i8* %169, i64 16
  %173 = bitcast i8* %172 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 1
  %175 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %171, <16 x i8>* %175, align 1
  %176 = getelementptr i8, i8* %168, i64 16
  %177 = bitcast i8* %176 to <16 x i8>*
  store <16 x i8> %174, <16 x i8>* %177, align 1
  %178 = add i64 %134, 128
  %179 = icmp eq i64 %178, %95
  br i1 %179, label %180, label %133

; <label>:180:                                    ; preds = %133
  br label %181

; <label>:181:                                    ; preds = %129, %180
  %182 = icmp eq i64 %87, %95
  br i1 %182, label %241, label %183

; <label>:183:                                    ; preds = %181, %97, %94, %92
  %184 = phi i64 [ %87, %97 ], [ %87, %94 ], [ %87, %92 ], [ %102, %181 ]
  %185 = phi i8* [ %78, %97 ], [ %78, %94 ], [ %78, %92 ], [ %103, %181 ]
  %186 = phi i8* [ %77, %97 ], [ %77, %94 ], [ %77, %92 ], [ %104, %181 ]
  %187 = add i64 %184, -1
  %188 = and i64 %184, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %203, label %190

; <label>:190:                                    ; preds = %183
  br label %191

; <label>:191:                                    ; preds = %191, %190
  %192 = phi i64 [ %199, %191 ], [ %184, %190 ]
  %193 = phi i8* [ %198, %191 ], [ %185, %190 ]
  %194 = phi i8* [ %196, %191 ], [ %186, %190 ]
  %195 = phi i64 [ %200, %191 ], [ %188, %190 ]
  %196 = getelementptr inbounds i8, i8* %194, i64 1
  %197 = load i8, i8* %194, align 1
  %198 = getelementptr inbounds i8, i8* %193, i64 1
  store i8 %197, i8* %193, align 1
  %199 = add i64 %192, -1
  %200 = add i64 %195, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %191

; <label>:202:                                    ; preds = %191
  br label %203

; <label>:203:                                    ; preds = %183, %202
  %204 = phi i64 [ %184, %183 ], [ %199, %202 ]
  %205 = phi i8* [ %185, %183 ], [ %198, %202 ]
  %206 = phi i8* [ %186, %183 ], [ %196, %202 ]
  %207 = icmp ult i64 %187, 7
  br i1 %207, label %240, label %208

; <label>:208:                                    ; preds = %203
  br label %209

; <label>:209:                                    ; preds = %209, %208
  %210 = phi i64 [ %204, %208 ], [ %237, %209 ]
  %211 = phi i8* [ %205, %208 ], [ %236, %209 ]
  %212 = phi i8* [ %206, %208 ], [ %234, %209 ]
  %213 = getelementptr inbounds i8, i8* %212, i64 1
  %214 = load i8, i8* %212, align 1
  %215 = getelementptr inbounds i8, i8* %211, i64 1
  store i8 %214, i8* %211, align 1
  %216 = getelementptr inbounds i8, i8* %212, i64 2
  %217 = load i8, i8* %213, align 1
  %218 = getelementptr inbounds i8, i8* %211, i64 2
  store i8 %217, i8* %215, align 1
  %219 = getelementptr inbounds i8, i8* %212, i64 3
  %220 = load i8, i8* %216, align 1
  %221 = getelementptr inbounds i8, i8* %211, i64 3
  store i8 %220, i8* %218, align 1
  %222 = getelementptr inbounds i8, i8* %212, i64 4
  %223 = load i8, i8* %219, align 1
  %224 = getelementptr inbounds i8, i8* %211, i64 4
  store i8 %223, i8* %221, align 1
  %225 = getelementptr inbounds i8, i8* %212, i64 5
  %226 = load i8, i8* %222, align 1
  %227 = getelementptr inbounds i8, i8* %211, i64 5
  store i8 %226, i8* %224, align 1
  %228 = getelementptr inbounds i8, i8* %212, i64 6
  %229 = load i8, i8* %225, align 1
  %230 = getelementptr inbounds i8, i8* %211, i64 6
  store i8 %229, i8* %227, align 1
  %231 = getelementptr inbounds i8, i8* %212, i64 7
  %232 = load i8, i8* %228, align 1
  %233 = getelementptr inbounds i8, i8* %211, i64 7
  store i8 %232, i8* %230, align 1
  %234 = getelementptr inbounds i8, i8* %212, i64 8
  %235 = load i8, i8* %231, align 1
  %236 = getelementptr inbounds i8, i8* %211, i64 8
  store i8 %235, i8* %233, align 1
  %237 = add i64 %210, -8
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %209

; <label>:239:                                    ; preds = %209
  br label %240

; <label>:240:                                    ; preds = %203, %239
  br label %241

; <label>:241:                                    ; preds = %240, %181
  %242 = getelementptr i8, i8* %78, i64 %87
  %243 = sext i32 %89 to i64
  br label %251

; <label>:244:                                    ; preds = %86
  %245 = getelementptr inbounds i8, i8* %78, i64 1
  store i8 63, i8* %78, align 1
  br label %251

; <label>:246:                                    ; preds = %76
  br label %247

; <label>:247:                                    ; preds = %246, %83
  %248 = phi i8* [ %84, %83 ], [ %55, %246 ]
  %249 = getelementptr inbounds i8, i8* %78, i64 1
  store i8 63, i8* %78, align 1
  %250 = add i64 %79, 1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %63) #13
  br label %258

; <label>:251:                                    ; preds = %244, %241
  %252 = phi i64 [ 1, %244 ], [ %243, %241 ]
  %253 = phi i8* [ %245, %244 ], [ %242, %241 ]
  %254 = add i64 %252, %79
  call void @llvm.lifetime.end(i64 4, i8* nonnull %63) #13
  %255 = call i32 @mbsinit(%struct.__mbstate_t* nonnull %8) #16
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %76, label %257

; <label>:257:                                    ; preds = %251
  br label %258

; <label>:258:                                    ; preds = %257, %247
  %259 = phi i64 [ %250, %247 ], [ %254, %257 ]
  %260 = phi i8* [ %249, %247 ], [ %253, %257 ]
  %261 = phi i8* [ %248, %247 ], [ %91, %257 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %62) #13
  br label %262

; <label>:262:                                    ; preds = %258, %71
  %263 = phi i8* [ %261, %258 ], [ %72, %71 ]
  %264 = phi i8* [ %260, %258 ], [ %73, %71 ]
  %265 = phi i64 [ %259, %258 ], [ %74, %71 ]
  %266 = icmp ult i8* %263, %55
  br i1 %266, label %65, label %267

; <label>:267:                                    ; preds = %262
  br label %268

; <label>:268:                                    ; preds = %267, %60
  %269 = phi i8* [ %50, %60 ], [ %264, %267 ]
  %270 = phi i64 [ 0, %60 ], [ %265, %267 ]
  %271 = ptrtoint i8* %269 to i64
  %272 = ptrtoint i8* %50 to i64
  %273 = sub i64 %271, %272
  br label %319

; <label>:274:                                    ; preds = %58, %284
  %275 = phi i8* [ %50, %58 ], [ %285, %284 ]
  %276 = load i16*, i16** %59, align 8
  %277 = load i8, i8* %275, align 1
  %278 = zext i8 %277 to i64
  %279 = getelementptr inbounds i16, i16* %276, i64 %278
  %280 = load i16, i16* %279, align 2
  %281 = and i16 %280, 16384
  %282 = icmp eq i16 %281, 0
  br i1 %282, label %283, label %284

; <label>:283:                                    ; preds = %274
  store i8 63, i8* %275, align 1
  br label %284

; <label>:284:                                    ; preds = %274, %283
  %285 = getelementptr inbounds i8, i8* %275, i64 1
  %286 = icmp ult i8* %285, %55
  br i1 %286, label %274, label %317

; <label>:287:                                    ; preds = %37, %46
  %288 = phi i8* [ %30, %46 ], [ %1, %37 ]
  %289 = phi i64 [ %23, %46 ], [ %38, %37 ]
  %290 = phi i8 [ %48, %46 ], [ 1, %37 ]
  %291 = icmp eq i64* %4, null
  br i1 %291, label %319, label %292

; <label>:292:                                    ; preds = %287
  %293 = tail call i64 @__ctype_get_mb_cur_max() #13
  %294 = icmp ugt i64 %293, 1
  br i1 %294, label %295, label %298

; <label>:295:                                    ; preds = %292
  %296 = tail call i32 @mbsnwidth(i8* %288, i64 %289, i32 0) #13
  %297 = sext i32 %296 to i64
  br label %319

; <label>:298:                                    ; preds = %292
  %299 = getelementptr inbounds i8, i8* %288, i64 %289
  %300 = icmp sgt i64 %289, 0
  br i1 %300, label %301, label %319

; <label>:301:                                    ; preds = %298
  %302 = tail call i16** @__ctype_b_loc() #1
  %303 = load i16*, i16** %302, align 8
  br label %304

; <label>:304:                                    ; preds = %301, %304
  %305 = phi i8* [ %288, %301 ], [ %315, %304 ]
  %306 = phi i64 [ 0, %301 ], [ %314, %304 ]
  %307 = load i8, i8* %305, align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds i16, i16* %303, i64 %308
  %310 = load i16, i16* %309, align 2
  %311 = lshr i16 %310, 14
  %312 = and i16 %311, 1
  %313 = zext i16 %312 to i64
  %314 = add i64 %313, %306
  %315 = getelementptr inbounds i8, i8* %305, i64 1
  %316 = icmp ult i8* %315, %299
  br i1 %316, label %304, label %318

; <label>:317:                                    ; preds = %284
  br label %319

; <label>:318:                                    ; preds = %304
  br label %319

; <label>:319:                                    ; preds = %318, %317, %298, %57, %287, %295, %268
  %320 = phi i8* [ %50, %268 ], [ %288, %295 ], [ %288, %287 ], [ %50, %57 ], [ %288, %298 ], [ %50, %317 ], [ %288, %318 ]
  %321 = phi i8 [ %52, %268 ], [ %290, %295 ], [ %290, %287 ], [ %52, %57 ], [ %290, %298 ], [ %52, %317 ], [ %290, %318 ]
  %322 = phi i64 [ %273, %268 ], [ %289, %295 ], [ %289, %287 ], [ %51, %57 ], [ %289, %298 ], [ %51, %317 ], [ %289, %318 ]
  %323 = phi i64 [ %270, %268 ], [ %297, %295 ], [ undef, %287 ], [ %51, %57 ], [ 0, %298 ], [ %51, %317 ], [ %314, %318 ]
  %324 = load i8, i8* @align_variable_outer_quotes, align 1
  %325 = icmp eq i8 %324, 0
  %326 = load i1, i1* @cwd_some_quoted, align 1
  %327 = select i1 %326, i8 %321, i8 0
  %328 = select i1 %325, i8 0, i8 %327
  store i8 %328, i8* %5, align 1
  %329 = icmp eq i64* %4, null
  br i1 %329, label %331, label %330

; <label>:330:                                    ; preds = %319
  store i64 %323, i64* %4, align 8
  br label %331

; <label>:331:                                    ; preds = %319, %330
  store i8* %320, i8** %0, align 8
  ret i64 %322
}

; Function Attrs: nounwind
declare i64 @__ctype_get_mb_cur_max() local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @wcwidth(i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @mbsinit(%struct.__mbstate_t*) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_file_name_and_frills(%struct.fileinfo* nocapture readonly, i64) unnamed_addr #0 {
  %3 = alloca [652 x i8], align 16
  %4 = getelementptr inbounds [652 x i8], [652 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start(i64 652, i8* nonnull %4) #13
  %5 = load i8, i8* @print_with_color, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %62, label %7

; <label>:7:                                      ; preds = %2
  %8 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %9 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  switch i64 %8, label %16 [
    i64 0, label %62
    i64 1, label %10
    i64 2, label %13
  ]

; <label>:10:                                     ; preds = %7
  %11 = load i8, i8* %9, align 1
  %12 = icmp eq i8 %11, 48
  br i1 %12, label %62, label %16

; <label>:13:                                     ; preds = %7
  %14 = tail call i32 @strncmp(i8* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %62, label %16

; <label>:16:                                     ; preds = %13, %10, %7
  %17 = load i1, i1* @used_color, align 1
  br i1 %17, label %27, label %18

; <label>:18:                                     ; preds = %16
  store i1 true, i1* @used_color, align 1
  %19 = tail call i32 @tcgetpgrp(i32 1) #13
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %18
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %22

; <label>:22:                                     ; preds = %21, %18
  %23 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %26, label %25

; <label>:25:                                     ; preds = %22
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %27

; <label>:26:                                     ; preds = %22
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %27

; <label>:27:                                     ; preds = %26, %25, %16
  %28 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %29 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %31 = tail call i64 @fwrite_unlocked(i8* %28, i64 %29, i64 1, %struct._IO_FILE* %30) #13
  %32 = load i1, i1* @used_color, align 1
  br i1 %32, label %42, label %33

; <label>:33:                                     ; preds = %27
  store i1 true, i1* @used_color, align 1
  %34 = tail call i32 @tcgetpgrp(i32 1) #13
  %35 = icmp sgt i32 %34, -1
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %33
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %37

; <label>:37:                                     ; preds = %36, %33
  %38 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

; <label>:40:                                     ; preds = %37
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %42

; <label>:41:                                     ; preds = %37
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %42

; <label>:42:                                     ; preds = %41, %40, %27
  %43 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  %44 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %46 = tail call i64 @fwrite_unlocked(i8* %43, i64 %44, i64 1, %struct._IO_FILE* %45) #13
  %47 = load i1, i1* @used_color, align 1
  br i1 %47, label %57, label %48

; <label>:48:                                     ; preds = %42
  store i1 true, i1* @used_color, align 1
  %49 = tail call i32 @tcgetpgrp(i32 1) #13
  %50 = icmp sgt i32 %49, -1
  br i1 %50, label %51, label %52

; <label>:51:                                     ; preds = %48
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %52

; <label>:52:                                     ; preds = %51, %48
  %53 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %56, label %55

; <label>:55:                                     ; preds = %52
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %57

; <label>:56:                                     ; preds = %52
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %57

; <label>:57:                                     ; preds = %56, %55, %42
  %58 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %59 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %61 = tail call i64 @fwrite_unlocked(i8* %58, i64 %59, i64 1, %struct._IO_FILE* %60) #13
  br label %62

; <label>:62:                                     ; preds = %2, %7, %10, %13, %57
  %63 = load i1, i1* @print_inode, align 1
  br i1 %63, label %64, label %81

; <label>:64:                                     ; preds = %62
  %65 = load i32, i32* @format, align 4
  %66 = icmp eq i32 %65, 4
  %67 = load i32, i32* @inode_number_width, align 4
  %68 = select i1 %66, i32 0, i32 %67
  %69 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %70 = load i8, i8* %69, align 8
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %78, label %72

; <label>:72:                                     ; preds = %64
  %73 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %78, label %76

; <label>:76:                                     ; preds = %72
  %77 = call i8* @umaxtostr(i64 %74, i8* nonnull %4) #13
  br label %78

; <label>:78:                                     ; preds = %64, %72, %76
  %79 = phi i8* [ %77, %76 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %72 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %64 ]
  %80 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.212, i64 0, i64 0), i32 %68, i8* %79) #13
  br label %81

; <label>:81:                                     ; preds = %78, %62
  %82 = load i1, i1* @print_block_size, align 1
  br i1 %82, label %83, label %100

; <label>:83:                                     ; preds = %81
  %84 = load i32, i32* @format, align 4
  %85 = icmp eq i32 %84, 4
  %86 = load i32, i32* @block_size_width, align 4
  %87 = select i1 %85, i32 0, i32 %86
  %88 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %89 = load i8, i8* %88, align 8
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %97, label %91

; <label>:91:                                     ; preds = %83
  %92 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 10
  %93 = load i64, i64* %92, align 8
  %94 = load i32, i32* @human_output_opts, align 4
  %95 = load i64, i64* @output_block_size, align 8
  %96 = call i8* @human_readable(i64 %93, i8* nonnull %4, i32 %94, i64 512, i64 %95) #13
  br label %97

; <label>:97:                                     ; preds = %83, %91
  %98 = phi i8* [ %96, %91 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %83 ]
  %99 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.212, i64 0, i64 0), i32 %87, i8* %98) #13
  br label %100

; <label>:100:                                    ; preds = %97, %81
  %101 = load i1, i1* @print_scontext, align 1
  br i1 %101, label %102, label %110

; <label>:102:                                    ; preds = %100
  %103 = load i32, i32* @format, align 4
  %104 = icmp eq i32 %103, 4
  %105 = load i32, i32* @scontext_width, align 4
  %106 = select i1 %104, i32 0, i32 %105
  %107 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 5
  %108 = load i8*, i8** %107, align 8
  %109 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.212, i64 0, i64 0), i32 %106, i8* %108) #13
  br label %110

; <label>:110:                                    ; preds = %102, %100
  %111 = call fastcc i64 @print_name_with_quoting(%struct.fileinfo* %0, i1 zeroext false, %struct.obstack* null, i64 %1)
  %112 = load i32, i32* @indicator_style, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %166, label %114

; <label>:114:                                    ; preds = %110
  %115 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %116 = load i8, i8* %115, align 8
  %117 = icmp ne i8 %116, 0
  %118 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 3
  %119 = load i32, i32* %118, align 8
  %120 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 3
  %121 = load i32, i32* %120, align 8
  br i1 %117, label %122, label %125

; <label>:122:                                    ; preds = %114
  %123 = trunc i32 %119 to i16
  %124 = and i16 %123, -4096
  switch i16 %124, label %133 [
    i16 -32768, label %126
    i16 16384, label %150
  ]

; <label>:125:                                    ; preds = %114
  switch i32 %121, label %133 [
    i32 5, label %166
    i32 9, label %150
    i32 3, label %150
  ]

; <label>:126:                                    ; preds = %122
  %127 = icmp eq i32 %112, 3
  %128 = and i1 %117, %127
  %129 = xor i1 %128, true
  %130 = and i32 %119, 73
  %131 = icmp eq i32 %130, 0
  %132 = or i1 %131, %129
  br i1 %132, label %166, label %150

; <label>:133:                                    ; preds = %125, %122
  %134 = icmp eq i32 %112, 1
  br i1 %134, label %166, label %135

; <label>:135:                                    ; preds = %133
  br i1 %117, label %136, label %139

; <label>:136:                                    ; preds = %135
  %137 = trunc i32 %119 to i16
  %138 = and i16 %137, -4096
  switch i16 %138, label %166 [
    i16 -24576, label %150
    i16 4096, label %142
    i16 -16384, label %143
  ]

; <label>:139:                                    ; preds = %135
  %140 = add i32 %121, -1
  %141 = icmp ult i32 %140, 7
  br i1 %141, label %144, label %166

; <label>:142:                                    ; preds = %136
  br label %150

; <label>:143:                                    ; preds = %136
  br label %150

; <label>:144:                                    ; preds = %139
  %145 = zext i32 %140 to i56
  %146 = shl nuw nsw i56 %145, 3
  %147 = lshr i56 17240342323527804, %146
  %148 = trunc i56 %147 to i8
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %166, label %150

; <label>:150:                                    ; preds = %144, %143, %142, %136, %126, %125, %125, %122
  %151 = phi i8 [ %148, %144 ], [ 61, %143 ], [ 124, %142 ], [ 47, %122 ], [ 47, %125 ], [ 47, %125 ], [ 64, %136 ], [ 42, %126 ]
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %153 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %152, i64 0, i32 5
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %152, i64 0, i32 6
  %156 = load i8*, i8** %155, align 8
  %157 = icmp ult i8* %154, %156
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %150
  %159 = zext i8 %151 to i32
  %160 = call i32 @__overflow(%struct._IO_FILE* %152, i32 %159) #13
  br label %163

; <label>:161:                                    ; preds = %150
  %162 = getelementptr inbounds i8, i8* %154, i64 1
  store i8* %162, i8** %153, align 8
  store i8 %151, i8* %154, align 1
  br label %163

; <label>:163:                                    ; preds = %161, %158
  %164 = load i64, i64* @dired_pos, align 8
  %165 = add i64 %164, 1
  store i64 %165, i64* @dired_pos, align 8
  br label %166

; <label>:166:                                    ; preds = %125, %163, %144, %139, %136, %133, %126, %110
  call void @llvm.lifetime.end(i64 652, i8* nonnull %4) #13
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_with_separator(i8 signext) unnamed_addr #0 {
  %2 = load i64, i64* @cwd_n_used, align 8
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %63, label %4

; <label>:4:                                      ; preds = %1
  %5 = zext i8 %0 to i32
  br label %6

; <label>:6:                                      ; preds = %4, %56
  %7 = phi i64 [ 0, %4 ], [ %59, %56 ]
  %8 = phi i64 [ 0, %4 ], [ %58, %56 ]
  %9 = load i8**, i8*** @sorted_file, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 %7
  %11 = bitcast i8** %10 to %struct.fileinfo**
  %12 = load %struct.fileinfo*, %struct.fileinfo** %11, align 8
  %13 = load i64, i64* @line_length, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %6
  %16 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %12)
  br label %17

; <label>:17:                                     ; preds = %6, %15
  %18 = phi i64 [ %16, %15 ], [ 0, %6 ]
  %19 = icmp eq i64 %7, 0
  br i1 %19, label %56, label %20

; <label>:20:                                     ; preds = %17
  %21 = load i64, i64* @line_length, align 8
  %22 = icmp eq i64 %21, 0
  %23 = add i64 %8, 2
  br i1 %22, label %30, label %24

; <label>:24:                                     ; preds = %20
  %25 = add i64 %23, %18
  %26 = icmp uge i64 %25, %21
  %27 = sub i64 -3, %18
  %28 = icmp ugt i64 %8, %27
  %29 = or i1 %28, %26
  br i1 %29, label %31, label %30

; <label>:30:                                     ; preds = %20, %24
  br label %31

; <label>:31:                                     ; preds = %24, %30
  %32 = phi i64 [ %23, %30 ], [ 0, %24 ]
  %33 = phi i32 [ 32, %30 ], [ 10, %24 ]
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %35 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %34, i64 0, i32 5
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %34, i64 0, i32 6
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ult i8* %36, %38
  br i1 %39, label %42, label %40

; <label>:40:                                     ; preds = %31
  %41 = tail call i32 @__overflow(%struct._IO_FILE* %34, i32 %5) #13
  br label %44

; <label>:42:                                     ; preds = %31
  %43 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %43, i8** %35, align 8
  store i8 %0, i8* %36, align 1
  br label %44

; <label>:44:                                     ; preds = %40, %42
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i64 0, i32 5
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i64 0, i32 6
  %49 = load i8*, i8** %48, align 8
  %50 = icmp ult i8* %47, %49
  br i1 %50, label %53, label %51

; <label>:51:                                     ; preds = %44
  %52 = tail call i32 @__overflow(%struct._IO_FILE* %45, i32 %33) #13
  br label %56

; <label>:53:                                     ; preds = %44
  %54 = trunc i32 %33 to i8
  %55 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %55, i8** %46, align 8
  store i8 %54, i8* %47, align 1
  br label %56

; <label>:56:                                     ; preds = %53, %51, %17
  %57 = phi i64 [ %8, %17 ], [ %32, %51 ], [ %32, %53 ]
  tail call fastcc void @print_file_name_and_frills(%struct.fileinfo* %12, i64 %57)
  %58 = add i64 %57, %18
  %59 = add i64 %7, 1
  %60 = load i64, i64* @cwd_n_used, align 8
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %6, label %62

; <label>:62:                                     ; preds = %56
  br label %63

; <label>:63:                                     ; preds = %62, %1
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %65 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %64, i64 0, i32 5
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %64, i64 0, i32 6
  %68 = load i8*, i8** %67, align 8
  %69 = icmp ult i8* %66, %68
  br i1 %69, label %72, label %70

; <label>:70:                                     ; preds = %63
  %71 = tail call i32 @__overflow(%struct._IO_FILE* %64, i32 10) #13
  br label %74

; <label>:72:                                     ; preds = %63
  %73 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %73, i8** %65, align 8
  store i8 10, i8* %66, align 1
  br label %74

; <label>:74:                                     ; preds = %70, %72
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @calculate_columns(i1 zeroext) unnamed_addr #0 {
  %2 = load i64, i64* @max_idx, align 8
  %3 = load i64, i64* @cwd_n_used, align 8
  %4 = icmp ult i64 %2, %3
  %5 = select i1 %4, i64 %2, i64 %3
  %6 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %7 = icmp ult i64 %6, %5
  br i1 %7, label %8, label %102

; <label>:8:                                      ; preds = %1
  %9 = lshr i64 %2, 1
  %10 = icmp ult i64 %5, %9
  %11 = load i8*, i8** bitcast (%struct.column_info** @column_info to i8**), align 8
  br i1 %10, label %12, label %19

; <label>:12:                                     ; preds = %8
  %13 = icmp ugt i64 %5, 192153584101141162
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %12
  tail call void @xalloc_die() #15
  unreachable

; <label>:15:                                     ; preds = %12
  %16 = mul i64 %5, 48
  %17 = tail call i8* @xrealloc(i8* %11, i64 %16) #13
  store i8* %17, i8** bitcast (%struct.column_info** @column_info to i8**), align 8
  %18 = shl i64 %5, 1
  br label %26

; <label>:19:                                     ; preds = %8
  %20 = icmp ugt i64 %2, 384307168202282325
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %19
  tail call void @xalloc_die() #15
  unreachable

; <label>:22:                                     ; preds = %19
  %23 = mul i64 %2, 24
  %24 = tail call i8* @xrealloc(i8* %11, i64 %23) #13
  store i8* %24, i8** bitcast (%struct.column_info** @column_info to i8**), align 8
  %25 = load i64, i64* @max_idx, align 8
  br label %26

; <label>:26:                                     ; preds = %22, %15
  %27 = phi i64 [ %18, %15 ], [ %25, %22 ]
  %28 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %29 = sub i64 %27, %28
  %30 = add i64 %27, 1
  %31 = add i64 %30, %28
  %32 = mul i64 %31, %29
  %33 = icmp ult i64 %31, %27
  br i1 %33, label %37, label %34

; <label>:34:                                     ; preds = %26
  %35 = udiv i64 %32, %29
  %36 = icmp eq i64 %35, %31
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %34, %26
  tail call void @xalloc_die() #15
  unreachable

; <label>:38:                                     ; preds = %34
  %39 = icmp ugt i64 %32, 2305843009213693951
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %38
  tail call void @xalloc_die() #15
  unreachable

; <label>:41:                                     ; preds = %38
  %42 = lshr i64 %32, 1
  %43 = shl i64 %42, 3
  %44 = tail call noalias i8* @xmalloc(i64 %43) #13
  %45 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %46 = icmp ugt i64 %27, %45
  br i1 %46, label %47, label %101

; <label>:47:                                     ; preds = %41
  %48 = bitcast i8* %44 to i64*
  %49 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %50 = sub i64 %27, %45
  %51 = add i64 %27, -1
  %52 = sub i64 %51, %45
  %53 = and i64 %50, 7
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %66, label %55

; <label>:55:                                     ; preds = %47
  br label %56

; <label>:56:                                     ; preds = %56, %55
  %57 = phi i64 [ %45, %55 ], [ %61, %56 ]
  %58 = phi i64* [ %48, %55 ], [ %62, %56 ]
  %59 = phi i64 [ %53, %55 ], [ %63, %56 ]
  %60 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %57, i32 2
  store i64* %58, i64** %60, align 8
  %61 = add nuw i64 %57, 1
  %62 = getelementptr inbounds i64, i64* %58, i64 %61
  %63 = add i64 %59, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %56

; <label>:65:                                     ; preds = %56
  br label %66

; <label>:66:                                     ; preds = %47, %65
  %67 = phi i64 [ %45, %47 ], [ %61, %65 ]
  %68 = phi i64* [ %48, %47 ], [ %62, %65 ]
  %69 = icmp ult i64 %52, 7
  br i1 %69, label %100, label %70

; <label>:70:                                     ; preds = %66
  br label %71

; <label>:71:                                     ; preds = %71, %70
  %72 = phi i64 [ %67, %70 ], [ %96, %71 ]
  %73 = phi i64* [ %68, %70 ], [ %97, %71 ]
  %74 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %72, i32 2
  store i64* %73, i64** %74, align 8
  %75 = add nuw i64 %72, 1
  %76 = getelementptr inbounds i64, i64* %73, i64 %75
  %77 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %75, i32 2
  store i64* %76, i64** %77, align 8
  %78 = add i64 %72, 2
  %79 = getelementptr inbounds i64, i64* %76, i64 %78
  %80 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %78, i32 2
  store i64* %79, i64** %80, align 8
  %81 = add i64 %72, 3
  %82 = getelementptr inbounds i64, i64* %79, i64 %81
  %83 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %81, i32 2
  store i64* %82, i64** %83, align 8
  %84 = add i64 %72, 4
  %85 = getelementptr inbounds i64, i64* %82, i64 %84
  %86 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %84, i32 2
  store i64* %85, i64** %86, align 8
  %87 = add i64 %72, 5
  %88 = getelementptr inbounds i64, i64* %85, i64 %87
  %89 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %87, i32 2
  store i64* %88, i64** %89, align 8
  %90 = add i64 %72, 6
  %91 = getelementptr inbounds i64, i64* %88, i64 %90
  %92 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %90, i32 2
  store i64* %91, i64** %92, align 8
  %93 = add i64 %72, 7
  %94 = getelementptr inbounds i64, i64* %91, i64 %93
  %95 = getelementptr inbounds %struct.column_info, %struct.column_info* %49, i64 %93, i32 2
  store i64* %94, i64** %95, align 8
  %96 = add i64 %72, 8
  %97 = getelementptr inbounds i64, i64* %94, i64 %96
  %98 = icmp eq i64 %96, %27
  br i1 %98, label %99, label %71

; <label>:99:                                     ; preds = %71
  br label %100

; <label>:100:                                    ; preds = %66, %99
  br label %101

; <label>:101:                                    ; preds = %100, %41
  store i64 %27, i64* @init_column_info.column_info_alloc, align 8
  br label %102

; <label>:102:                                    ; preds = %101, %1
  %103 = icmp eq i64 %5, 0
  br i1 %103, label %111, label %104

; <label>:104:                                    ; preds = %102
  %105 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  br label %115

; <label>:106:                                    ; preds = %199
  br label %107

; <label>:107:                                    ; preds = %106, %195
  %108 = icmp ult i64 %123, %5
  %109 = add i64 %116, 1
  br i1 %108, label %115, label %110

; <label>:110:                                    ; preds = %107
  br label %111

; <label>:111:                                    ; preds = %110, %102
  %112 = load i64, i64* @cwd_n_used, align 8
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %205, label %114

; <label>:114:                                    ; preds = %111
  br label %207

; <label>:115:                                    ; preds = %107, %104
  %116 = phi i64 [ 1, %104 ], [ %109, %107 ]
  %117 = phi i64 [ 0, %104 ], [ %123, %107 ]
  %118 = add i64 %117, -3
  %119 = lshr i64 %118, 2
  %120 = add nuw nsw i64 %119, 1
  %121 = add i64 %117, 1
  %122 = getelementptr inbounds %struct.column_info, %struct.column_info* %105, i64 %117, i32 0
  store i8 1, i8* %122, align 8
  %123 = add nuw i64 %117, 1
  %124 = mul i64 %123, 3
  %125 = getelementptr inbounds %struct.column_info, %struct.column_info* %105, i64 %117, i32 1
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.column_info, %struct.column_info* %105, i64 %117, i32 2
  %127 = load i64*, i64** %126, align 8
  %128 = icmp ult i64 %121, 4
  br i1 %128, label %197, label %129

; <label>:129:                                    ; preds = %115
  %130 = and i64 %121, -4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %197, label %132

; <label>:132:                                    ; preds = %129
  %133 = and i64 %120, 7
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %147, label %135

; <label>:135:                                    ; preds = %132
  br label %136

; <label>:136:                                    ; preds = %136, %135
  %137 = phi i64 [ %143, %136 ], [ 0, %135 ]
  %138 = phi i64 [ %144, %136 ], [ %133, %135 ]
  %139 = getelementptr inbounds i64, i64* %127, i64 %137
  %140 = bitcast i64* %139 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %140, align 8
  %141 = getelementptr i64, i64* %139, i64 2
  %142 = bitcast i64* %141 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %142, align 8
  %143 = add i64 %137, 4
  %144 = add i64 %138, -1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %136

; <label>:146:                                    ; preds = %136
  br label %147

; <label>:147:                                    ; preds = %132, %146
  %148 = phi i64 [ 0, %132 ], [ %143, %146 ]
  %149 = icmp ult i64 %118, 28
  br i1 %149, label %195, label %150

; <label>:150:                                    ; preds = %147
  br label %151

; <label>:151:                                    ; preds = %151, %150
  %152 = phi i64 [ %148, %150 ], [ %192, %151 ]
  %153 = getelementptr inbounds i64, i64* %127, i64 %152
  %154 = bitcast i64* %153 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %154, align 8
  %155 = getelementptr i64, i64* %153, i64 2
  %156 = bitcast i64* %155 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %156, align 8
  %157 = add i64 %152, 4
  %158 = getelementptr inbounds i64, i64* %127, i64 %157
  %159 = bitcast i64* %158 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %159, align 8
  %160 = getelementptr i64, i64* %158, i64 2
  %161 = bitcast i64* %160 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %161, align 8
  %162 = add i64 %152, 8
  %163 = getelementptr inbounds i64, i64* %127, i64 %162
  %164 = bitcast i64* %163 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %164, align 8
  %165 = getelementptr i64, i64* %163, i64 2
  %166 = bitcast i64* %165 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %166, align 8
  %167 = add i64 %152, 12
  %168 = getelementptr inbounds i64, i64* %127, i64 %167
  %169 = bitcast i64* %168 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %169, align 8
  %170 = getelementptr i64, i64* %168, i64 2
  %171 = bitcast i64* %170 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %171, align 8
  %172 = add i64 %152, 16
  %173 = getelementptr inbounds i64, i64* %127, i64 %172
  %174 = bitcast i64* %173 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %174, align 8
  %175 = getelementptr i64, i64* %173, i64 2
  %176 = bitcast i64* %175 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %176, align 8
  %177 = add i64 %152, 20
  %178 = getelementptr inbounds i64, i64* %127, i64 %177
  %179 = bitcast i64* %178 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %179, align 8
  %180 = getelementptr i64, i64* %178, i64 2
  %181 = bitcast i64* %180 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %181, align 8
  %182 = add i64 %152, 24
  %183 = getelementptr inbounds i64, i64* %127, i64 %182
  %184 = bitcast i64* %183 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %184, align 8
  %185 = getelementptr i64, i64* %183, i64 2
  %186 = bitcast i64* %185 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %186, align 8
  %187 = add i64 %152, 28
  %188 = getelementptr inbounds i64, i64* %127, i64 %187
  %189 = bitcast i64* %188 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %189, align 8
  %190 = getelementptr i64, i64* %188, i64 2
  %191 = bitcast i64* %190 to <2 x i64>*
  store <2 x i64> <i64 3, i64 3>, <2 x i64>* %191, align 8
  %192 = add i64 %152, 32
  %193 = icmp eq i64 %192, %130
  br i1 %193, label %194, label %151

; <label>:194:                                    ; preds = %151
  br label %195

; <label>:195:                                    ; preds = %147, %194
  %196 = icmp eq i64 %121, %130
  br i1 %196, label %107, label %197

; <label>:197:                                    ; preds = %195, %129, %115
  %198 = phi i64 [ 0, %129 ], [ 0, %115 ], [ %130, %195 ]
  br label %199

; <label>:199:                                    ; preds = %197, %199
  %200 = phi i64 [ %202, %199 ], [ %198, %197 ]
  %201 = getelementptr inbounds i64, i64* %127, i64 %200
  store i64 3, i64* %201, align 8
  %202 = add nuw i64 %200, 1
  %203 = icmp eq i64 %202, %116
  br i1 %203, label %106, label %199

; <label>:204:                                    ; preds = %256
  br label %205

; <label>:205:                                    ; preds = %204, %111
  %206 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  br label %260

; <label>:207:                                    ; preds = %114, %256
  %208 = phi i64 [ %258, %256 ], [ 0, %114 ]
  %209 = load i8**, i8*** @sorted_file, align 8
  %210 = getelementptr inbounds i8*, i8** %209, i64 %208
  %211 = bitcast i8** %210 to %struct.fileinfo**
  %212 = load %struct.fileinfo*, %struct.fileinfo** %211, align 8
  %213 = tail call fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* %212)
  br i1 %103, label %214, label %216

; <label>:214:                                    ; preds = %207
  %215 = load i64, i64* @cwd_n_used, align 8
  br label %256

; <label>:216:                                    ; preds = %207
  %217 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %218 = load i64, i64* @cwd_n_used, align 8
  %219 = load i64, i64* @line_length, align 8
  br label %220

; <label>:220:                                    ; preds = %216, %252
  %221 = phi i64 [ 0, %216 ], [ %253, %252 ]
  %222 = getelementptr inbounds %struct.column_info, %struct.column_info* %217, i64 %221, i32 0
  %223 = load i8, i8* %222, align 8
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %252, label %225

; <label>:225:                                    ; preds = %220
  br i1 %0, label %226, label %231

; <label>:226:                                    ; preds = %225
  %227 = add i64 %218, %221
  %228 = add nuw i64 %221, 1
  %229 = udiv i64 %227, %228
  %230 = udiv i64 %208, %229
  br label %234

; <label>:231:                                    ; preds = %225
  %232 = add nuw i64 %221, 1
  %233 = urem i64 %208, %232
  br label %234

; <label>:234:                                    ; preds = %231, %226
  %235 = phi i64 [ %230, %226 ], [ %233, %231 ]
  %236 = icmp eq i64 %235, %221
  %237 = select i1 %236, i64 0, i64 2
  %238 = add i64 %237, %213
  %239 = getelementptr inbounds %struct.column_info, %struct.column_info* %217, i64 %221, i32 2
  %240 = load i64*, i64** %239, align 8
  %241 = getelementptr inbounds i64, i64* %240, i64 %235
  %242 = load i64, i64* %241, align 8
  %243 = icmp ugt i64 %238, %242
  br i1 %243, label %244, label %252

; <label>:244:                                    ; preds = %234
  %245 = sub i64 %238, %242
  %246 = getelementptr inbounds %struct.column_info, %struct.column_info* %217, i64 %221, i32 1
  %247 = load i64, i64* %246, align 8
  %248 = add i64 %245, %247
  store i64 %248, i64* %246, align 8
  store i64 %238, i64* %241, align 8
  %249 = load i64, i64* %246, align 8
  %250 = icmp ult i64 %249, %219
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %222, align 8
  br label %252

; <label>:252:                                    ; preds = %234, %244, %220
  %253 = add nuw i64 %221, 1
  %254 = icmp ult i64 %253, %5
  br i1 %254, label %220, label %255

; <label>:255:                                    ; preds = %252
  br label %256

; <label>:256:                                    ; preds = %255, %214
  %257 = phi i64 [ %215, %214 ], [ %218, %255 ]
  %258 = add i64 %208, 1
  %259 = icmp ult i64 %258, %257
  br i1 %259, label %207, label %204

; <label>:260:                                    ; preds = %205, %263
  %261 = phi i64 [ %264, %263 ], [ %5, %205 ]
  %262 = icmp ugt i64 %261, 1
  br i1 %262, label %263, label %268

; <label>:263:                                    ; preds = %260
  %264 = add i64 %261, -1
  %265 = getelementptr inbounds %struct.column_info, %struct.column_info* %206, i64 %264, i32 0
  %266 = load i8, i8* %265, align 8
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %260, label %268

; <label>:268:                                    ; preds = %263, %260
  ret i64 %261
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @length_of_file_name_and_frills(%struct.fileinfo* nocapture readonly) unnamed_addr #0 {
  %2 = alloca [8192 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca [652 x i8], align 16
  %7 = getelementptr inbounds [652 x i8], [652 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start(i64 652, i8* nonnull %7) #13
  %8 = load i1, i1* @print_inode, align 1
  br i1 %8, label %9, label %23

; <label>:9:                                      ; preds = %1
  %10 = load i32, i32* @format, align 4
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %9
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = call i8* @umaxtostr(i64 %14, i8* nonnull %7) #13
  %16 = call i64 @strlen(i8* %15) #16
  br label %20

; <label>:17:                                     ; preds = %9
  %18 = load i32, i32* @inode_number_width, align 4
  %19 = sext i32 %18 to i64
  br label %20

; <label>:20:                                     ; preds = %17, %12
  %21 = phi i64 [ %16, %12 ], [ %19, %17 ]
  %22 = add i64 %21, 1
  br label %23

; <label>:23:                                     ; preds = %20, %1
  %24 = phi i64 [ %22, %20 ], [ 0, %1 ]
  %25 = load i1, i1* @print_block_size, align 1
  br i1 %25, label %26, label %49

; <label>:26:                                     ; preds = %23
  %27 = load i32, i32* @format, align 4
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %29, label %42

; <label>:29:                                     ; preds = %26
  %30 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %31 = load i8, i8* %30, align 8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %39, label %33

; <label>:33:                                     ; preds = %29
  %34 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 10
  %35 = load i64, i64* %34, align 8
  %36 = load i32, i32* @human_output_opts, align 4
  %37 = load i64, i64* @output_block_size, align 8
  %38 = call i8* @human_readable(i64 %35, i8* nonnull %7, i32 %36, i64 512, i64 %37) #13
  br label %39

; <label>:39:                                     ; preds = %29, %33
  %40 = phi i8* [ %38, %33 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), %29 ]
  %41 = call i64 @strlen(i8* %40) #16
  br label %45

; <label>:42:                                     ; preds = %26
  %43 = load i32, i32* @block_size_width, align 4
  %44 = sext i32 %43 to i64
  br label %45

; <label>:45:                                     ; preds = %42, %39
  %46 = phi i64 [ %41, %39 ], [ %44, %42 ]
  %47 = add i64 %24, 1
  %48 = add i64 %47, %46
  br label %49

; <label>:49:                                     ; preds = %45, %23
  %50 = phi i64 [ %48, %45 ], [ %24, %23 ]
  %51 = load i1, i1* @print_scontext, align 1
  br i1 %51, label %52, label %66

; <label>:52:                                     ; preds = %49
  %53 = load i32, i32* @format, align 4
  %54 = icmp eq i32 %53, 4
  br i1 %54, label %55, label %59

; <label>:55:                                     ; preds = %52
  %56 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 5
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @strlen(i8* %57) #16
  br label %62

; <label>:59:                                     ; preds = %52
  %60 = load i32, i32* @scontext_width, align 4
  %61 = sext i32 %60 to i64
  br label %62

; <label>:62:                                     ; preds = %59, %55
  %63 = phi i64 [ %58, %55 ], [ %61, %59 ]
  %64 = add i64 %50, 1
  %65 = add i64 %64, %63
  br label %66

; <label>:66:                                     ; preds = %62, %49
  %67 = phi i64 [ %65, %62 ], [ %50, %49 ]
  %68 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %71 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 10
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [8192 x i8], [8192 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start(i64 8192, i8* nonnull %73) #13
  %74 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %74) #13
  store i8* %73, i8** %3, align 8
  %75 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %75) #13
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5) #13
  %76 = call fastcc i64 @quote_name_buf(i8** nonnull %3, i8* %69, %struct.quoting_options* %70, i32 %72, i64* nonnull %4, i8* nonnull %5) #13
  %77 = load i8*, i8** %3, align 8
  %78 = icmp eq i8* %77, %73
  %79 = icmp eq i8* %77, %69
  %80 = or i1 %78, %79
  br i1 %80, label %82, label %81

; <label>:81:                                     ; preds = %66
  call void @free(i8* %77) #13
  br label %82

; <label>:82:                                     ; preds = %66, %81
  %83 = load i8, i8* %5, align 1
  %84 = zext i8 %83 to i64
  %85 = load i64, i64* %4, align 8
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %75) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %74) #13
  call void @llvm.lifetime.end(i64 8192, i8* nonnull %73) #13
  %86 = add i64 %84, %67
  %87 = add i64 %86, %85
  %88 = load i32, i32* @indicator_style, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %130, label %90

; <label>:90:                                     ; preds = %82
  %91 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %92 = load i8, i8* %91, align 8
  %93 = icmp ne i8 %92, 0
  %94 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 3
  %97 = load i32, i32* %96, align 8
  br i1 %93, label %98, label %101

; <label>:98:                                     ; preds = %90
  %99 = trunc i32 %95 to i16
  %100 = and i16 %99, -4096
  switch i16 %100, label %110 [
    i16 -32768, label %102
    i16 16384, label %125
  ]

; <label>:101:                                    ; preds = %90
  switch i32 %97, label %110 [
    i32 5, label %102
    i32 9, label %125
    i32 3, label %125
  ]

; <label>:102:                                    ; preds = %101, %98
  %103 = icmp eq i32 %88, 3
  %104 = and i1 %93, %103
  %105 = xor i1 %104, true
  %106 = and i32 %95, 73
  %107 = icmp eq i32 %106, 0
  %108 = or i1 %107, %105
  %109 = select i1 %108, i8 0, i8 42
  br label %125

; <label>:110:                                    ; preds = %101, %98
  %111 = icmp eq i32 %88, 1
  br i1 %111, label %125, label %112

; <label>:112:                                    ; preds = %110
  br i1 %93, label %113, label %116

; <label>:113:                                    ; preds = %112
  %114 = trunc i32 %95 to i16
  %115 = and i16 %114, -4096
  switch i16 %115, label %119 [
    i16 -24576, label %125
    i16 4096, label %125
    i16 -16384, label %125
  ]

; <label>:116:                                    ; preds = %112
  %117 = add i32 %97, -1
  %118 = icmp ult i32 %117, 7
  br i1 %118, label %120, label %119

; <label>:119:                                    ; preds = %116, %113
  br label %125

; <label>:120:                                    ; preds = %116
  %121 = zext i32 %117 to i56
  %122 = shl nuw nsw i56 %121, 3
  %123 = lshr i56 17240342323527804, %122
  %124 = trunc i56 %123 to i8
  br label %125

; <label>:125:                                    ; preds = %113, %113, %98, %101, %101, %110, %113, %119, %120, %102
  %126 = phi i8 [ %109, %102 ], [ %124, %120 ], [ 0, %119 ], [ 0, %110 ], [ 64, %113 ], [ 64, %101 ], [ 64, %101 ], [ 64, %98 ], [ 64, %113 ], [ 64, %113 ]
  %127 = icmp ne i8 %126, 0
  %128 = zext i1 %127 to i64
  %129 = add i64 %128, %87
  br label %130

; <label>:130:                                    ; preds = %82, %125
  %131 = phi i64 [ %129, %125 ], [ %87, %82 ]
  call void @llvm.lifetime.end(i64 652, i8* nonnull %7) #13
  ret i64 %131
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #6

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @format_user_or_group(i8*, i64, i32) unnamed_addr #0 {
  %4 = icmp eq i8* %0, null
  br i1 %4, label %29, label %5

; <label>:5:                                      ; preds = %3
  %6 = tail call i32 @gnu_mbswidth(i8* nonnull %0, i32 0) #13
  %7 = sub nsw i32 %2, %6
  %8 = icmp sgt i32 %7, 0
  %9 = select i1 %8, i32 %7, i32 0
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %11 = tail call i32 @fputs_unlocked(i8* nonnull %0, %struct._IO_FILE* %10) #13
  %12 = tail call i64 @strlen(i8* nonnull %0) #16
  %13 = zext i32 %9 to i64
  br label %14

; <label>:14:                                     ; preds = %26, %5
  %15 = phi i32 [ %9, %5 ], [ %27, %26 ]
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %17 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %16, i64 0, i32 5
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %16, i64 0, i32 6
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ult i8* %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %14
  %23 = tail call i32 @__overflow(%struct._IO_FILE* %16, i32 32) #13
  br label %26

; <label>:24:                                     ; preds = %14
  %25 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %25, i8** %17, align 8
  store i8 32, i8* %18, align 1
  br label %26

; <label>:26:                                     ; preds = %22, %24
  %27 = add nsw i32 %15, -1
  %28 = icmp eq i32 %15, 0
  br i1 %28, label %32, label %14

; <label>:29:                                     ; preds = %3
  %30 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i64 0, i64 0), i32 %2, i64 %1) #13
  %31 = sext i32 %2 to i64
  br label %34

; <label>:32:                                     ; preds = %26
  %33 = add i64 %13, %12
  br label %34

; <label>:34:                                     ; preds = %32, %29
  %35 = phi i64 [ %31, %29 ], [ %33, %32 ]
  %36 = add i64 %35, 1
  %37 = load i64, i64* @dired_pos, align 8
  %38 = add i64 %36, %37
  store i64 %38, i64* @dired_pos, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @print_name_with_quoting(%struct.fileinfo* nocapture readonly, i1 zeroext, %struct.obstack*, i64) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 1
  %7 = select i1 %1, i8** %6, i8** %5
  %8 = load i8*, i8** %7, align 8
  %9 = load i8, i8* @print_with_color, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %236, label %11

; <label>:11:                                     ; preds = %4
  br i1 %1, label %29, label %12

; <label>:12:                                     ; preds = %11
  %13 = load i8*, i8** %5, align 8
  %14 = load i1, i1* @color_symlink_as_referent, align 1
  %15 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 7
  %16 = load i8, i8* %15, align 1
  br i1 %14, label %17, label %21

; <label>:17:                                     ; preds = %12
  %18 = icmp eq i8 %16, 0
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 4
  br label %24

; <label>:21:                                     ; preds = %17, %12
  %22 = phi i8 [ 0, %17 ], [ %16, %12 ]
  %23 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 3
  br label %24

; <label>:24:                                     ; preds = %21, %19
  %25 = phi i8 [ 1, %19 ], [ %22, %21 ]
  %26 = phi i32* [ %20, %19 ], [ %23, %21 ]
  %27 = zext i8 %25 to i32
  %28 = load i32, i32* %26, align 4
  br label %47

; <label>:29:                                     ; preds = %11
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 4
  %32 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 7
  %33 = load i8, i8* %32, align 1
  %34 = add nsw i8 %33, -1
  %35 = sext i8 %34 to i32
  %36 = load i32, i32* %31, align 4
  %37 = icmp eq i8 %33, 0
  br i1 %37, label %38, label %47

; <label>:38:                                     ; preds = %29
  %39 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 12, i32 0), align 16
  %40 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 12, i32 1), align 8
  switch i64 %39, label %213 [
    i64 0, label %47
    i64 1, label %41
    i64 2, label %44
  ]

; <label>:41:                                     ; preds = %38
  %42 = load i8, i8* %40, align 1
  %43 = icmp eq i8 %42, 48
  br i1 %43, label %47, label %213

; <label>:44:                                     ; preds = %38
  %45 = tail call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %213

; <label>:47:                                     ; preds = %44, %41, %38, %29, %24
  %48 = phi i32 [ %28, %24 ], [ %36, %44 ], [ %36, %29 ], [ %36, %41 ], [ %36, %38 ]
  %49 = phi i32 [ %27, %24 ], [ -1, %44 ], [ 0, %29 ], [ %35, %41 ], [ -1, %38 ]
  %50 = phi i8* [ %13, %24 ], [ %30, %44 ], [ %30, %29 ], [ %30, %41 ], [ %30, %38 ]
  %51 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 6
  %52 = load i8, i8* %51, align 8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %166, label %54

; <label>:54:                                     ; preds = %47
  %55 = and i32 %48, 61440
  %56 = add nsw i32 %55, -4096
  %57 = lshr exact i32 %56, 12
  %58 = trunc i32 %57 to i20
  switch i20 %58, label %165 [
    i20 7, label %59
    i20 3, label %121
    i20 9, label %194
    i20 0, label %213
    i20 11, label %162
    i20 5, label %163
    i20 1, label %164
  ]

; <label>:59:                                     ; preds = %54
  %60 = and i32 %48, 2048
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

; <label>:62:                                     ; preds = %59
  %63 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 16, i32 0), align 16
  %64 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 16, i32 1), align 8
  switch i64 %63, label %213 [
    i64 0, label %71
    i64 1, label %65
    i64 2, label %68
  ]

; <label>:65:                                     ; preds = %62
  %66 = load i8, i8* %64, align 1
  %67 = icmp eq i8 %66, 48
  br i1 %67, label %71, label %213

; <label>:68:                                     ; preds = %62
  %69 = tail call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %213

; <label>:71:                                     ; preds = %68, %65, %62, %59
  %72 = and i32 %48, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %83, label %74

; <label>:74:                                     ; preds = %71
  %75 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 17, i32 0), align 16
  %76 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 17, i32 1), align 8
  switch i64 %75, label %213 [
    i64 0, label %83
    i64 1, label %77
    i64 2, label %80
  ]

; <label>:77:                                     ; preds = %74
  %78 = load i8, i8* %76, align 1
  %79 = icmp eq i8 %78, 48
  br i1 %79, label %83, label %213

; <label>:80:                                     ; preds = %74
  %81 = tail call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %213

; <label>:83:                                     ; preds = %80, %77, %74, %71
  %84 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 0), align 16
  %85 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 21, i32 1), align 8
  switch i64 %84, label %92 [
    i64 0, label %96
    i64 1, label %86
    i64 2, label %89
  ]

; <label>:86:                                     ; preds = %83
  %87 = load i8, i8* %85, align 1
  %88 = icmp eq i8 %87, 48
  br i1 %88, label %96, label %92

; <label>:89:                                     ; preds = %83
  %90 = tail call i32 @strncmp(i8* %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %96, label %92

; <label>:92:                                     ; preds = %89, %86, %83
  %93 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 9
  %94 = load i8, i8* %93, align 8
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %96, label %213

; <label>:96:                                     ; preds = %92, %89, %86, %83
  %97 = and i32 %48, 73
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %108, label %99

; <label>:99:                                     ; preds = %96
  %100 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 0), align 16
  %101 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 14, i32 1), align 8
  switch i64 %100, label %213 [
    i64 0, label %108
    i64 1, label %102
    i64 2, label %105
  ]

; <label>:102:                                    ; preds = %99
  %103 = load i8, i8* %101, align 1
  %104 = icmp eq i8 %103, 48
  br i1 %104, label %108, label %213

; <label>:105:                                    ; preds = %99
  %106 = tail call i32 @strncmp(i8* %101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %213

; <label>:108:                                    ; preds = %105, %102, %99, %96
  %109 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 2, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = icmp ugt i64 %110, 1
  br i1 %111, label %112, label %172

; <label>:112:                                    ; preds = %108
  %113 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 22, i32 0), align 16
  %114 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 22, i32 1), align 8
  switch i64 %113, label %213 [
    i64 0, label %172
    i64 1, label %115
    i64 2, label %118
  ]

; <label>:115:                                    ; preds = %112
  %116 = load i8, i8* %114, align 1
  %117 = icmp eq i8 %116, 48
  br i1 %117, label %172, label %213

; <label>:118:                                    ; preds = %112
  %119 = tail call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %172, label %213

; <label>:121:                                    ; preds = %54
  %122 = and i32 %48, 512
  %123 = icmp ne i32 %122, 0
  %124 = xor i1 %123, true
  %125 = and i32 %48, 2
  %126 = icmp eq i32 %125, 0
  %127 = or i1 %126, %124
  br i1 %127, label %137, label %128

; <label>:128:                                    ; preds = %121
  %129 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 20, i32 0), align 16
  %130 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 20, i32 1), align 8
  switch i64 %129, label %213 [
    i64 0, label %137
    i64 1, label %131
    i64 2, label %134
  ]

; <label>:131:                                    ; preds = %128
  %132 = load i8, i8* %130, align 1
  %133 = icmp eq i8 %132, 48
  br i1 %133, label %137, label %213

; <label>:134:                                    ; preds = %128
  %135 = tail call i32 @strncmp(i8* %130, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %213

; <label>:137:                                    ; preds = %134, %131, %128, %121
  br i1 %126, label %151, label %138

; <label>:138:                                    ; preds = %137
  %139 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 19, i32 0), align 16
  %140 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 19, i32 1), align 8
  switch i64 %139, label %213 [
    i64 0, label %147
    i64 1, label %141
    i64 2, label %144
  ]

; <label>:141:                                    ; preds = %138
  %142 = load i8, i8* %140, align 1
  %143 = icmp eq i8 %142, 48
  br i1 %143, label %147, label %213

; <label>:144:                                    ; preds = %138
  %145 = tail call i32 @strncmp(i8* %140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %146 = icmp ne i32 %145, 0
  br label %147

; <label>:147:                                    ; preds = %144, %141, %138
  %148 = phi i1 [ false, %141 ], [ false, %138 ], [ %146, %144 ]
  %149 = or i1 %148, %124
  %150 = select i1 %148, i32 19, i32 6
  br i1 %149, label %213, label %152

; <label>:151:                                    ; preds = %137
  br i1 %123, label %152, label %213

; <label>:152:                                    ; preds = %151, %147
  %153 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 18, i32 0), align 16
  %154 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 18, i32 1), align 8
  switch i64 %153, label %161 [
    i64 0, label %213
    i64 1, label %155
    i64 2, label %158
  ]

; <label>:155:                                    ; preds = %152
  %156 = load i8, i8* %154, align 1
  %157 = icmp eq i8 %156, 48
  br i1 %157, label %213, label %161

; <label>:158:                                    ; preds = %152
  %159 = tail call i32 @strncmp(i8* %154, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %213, label %161

; <label>:161:                                    ; preds = %158, %155, %152
  br label %213

; <label>:162:                                    ; preds = %54
  br label %213

; <label>:163:                                    ; preds = %54
  br label %213

; <label>:164:                                    ; preds = %54
  br label %213

; <label>:165:                                    ; preds = %54
  br label %213

; <label>:166:                                    ; preds = %47
  %167 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 3
  %168 = load i32, i32* %167, align 8
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [10 x i32], [10 x i32]* @get_color_indicator.filetype_indicator, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  switch i32 %168, label %194 [
    i32 8, label %172
    i32 5, label %172
  ]

; <label>:172:                                    ; preds = %166, %166, %118, %115, %112, %108
  %173 = tail call i64 @strlen(i8* %50) #16
  %174 = getelementptr inbounds i8, i8* %50, i64 %173
  %175 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8
  %176 = icmp eq %struct.color_ext_type* %175, null
  br i1 %176, label %213, label %177

; <label>:177:                                    ; preds = %172
  br label %178

; <label>:178:                                    ; preds = %177, %190
  %179 = phi %struct.color_ext_type* [ %192, %190 ], [ %175, %177 ]
  %180 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %179, i64 0, i32 0, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = icmp ugt i64 %181, %173
  br i1 %182, label %190, label %183

; <label>:183:                                    ; preds = %178
  %184 = sub i64 0, %181
  %185 = getelementptr inbounds i8, i8* %174, i64 %184
  %186 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %179, i64 0, i32 0, i32 1
  %187 = load i8*, i8** %186, align 8
  %188 = tail call i32 @strncmp(i8* %185, i8* %187, i64 %181) #16
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %211, label %190

; <label>:190:                                    ; preds = %183, %178
  %191 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %179, i64 0, i32 2
  %192 = load %struct.color_ext_type*, %struct.color_ext_type** %191, align 8
  %193 = icmp eq %struct.color_ext_type* %192, null
  br i1 %193, label %211, label %178

; <label>:194:                                    ; preds = %166, %54
  %195 = phi i32 [ %171, %166 ], [ 7, %54 ]
  %196 = icmp ne i32 %195, 7
  %197 = icmp ne i32 %49, 0
  %198 = or i1 %197, %196
  br i1 %198, label %213, label %199

; <label>:199:                                    ; preds = %194
  %200 = load i1, i1* @color_symlink_as_referent, align 1
  br i1 %200, label %210, label %201

; <label>:201:                                    ; preds = %199
  %202 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 13, i32 0), align 16
  %203 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 13, i32 1), align 8
  switch i64 %202, label %210 [
    i64 0, label %213
    i64 1, label %204
    i64 2, label %207
  ]

; <label>:204:                                    ; preds = %201
  %205 = load i8, i8* %203, align 1
  %206 = icmp eq i8 %205, 48
  br i1 %206, label %213, label %210

; <label>:207:                                    ; preds = %201
  %208 = tail call i32 @strncmp(i8* %203, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %213, label %210

; <label>:210:                                    ; preds = %207, %204, %201, %199
  br label %213

; <label>:211:                                    ; preds = %190, %183
  %212 = phi %struct.color_ext_type* [ null, %190 ], [ %179, %183 ]
  br label %213

; <label>:213:                                    ; preds = %211, %38, %41, %44, %54, %62, %65, %68, %74, %77, %80, %92, %99, %102, %105, %112, %115, %118, %128, %131, %134, %138, %141, %147, %151, %152, %155, %158, %161, %162, %163, %164, %165, %172, %194, %201, %204, %207, %210
  %214 = phi %struct.color_ext_type* [ null, %194 ], [ null, %210 ], [ null, %207 ], [ null, %204 ], [ null, %201 ], [ null, %158 ], [ null, %161 ], [ null, %147 ], [ null, %134 ], [ null, %105 ], [ null, %92 ], [ null, %80 ], [ null, %68 ], [ null, %44 ], [ null, %165 ], [ null, %164 ], [ null, %163 ], [ null, %162 ], [ null, %151 ], [ null, %38 ], [ null, %41 ], [ null, %62 ], [ null, %65 ], [ null, %74 ], [ null, %77 ], [ null, %99 ], [ null, %102 ], [ null, %115 ], [ null, %112 ], [ null, %118 ], [ null, %128 ], [ null, %131 ], [ null, %138 ], [ null, %141 ], [ null, %155 ], [ null, %152 ], [ null, %54 ], [ null, %172 ], [ %212, %211 ]
  %215 = phi i32 [ %195, %194 ], [ 13, %210 ], [ 7, %207 ], [ 7, %204 ], [ 7, %201 ], [ 6, %158 ], [ 18, %161 ], [ %150, %147 ], [ 20, %134 ], [ 14, %105 ], [ 21, %92 ], [ 17, %80 ], [ 16, %68 ], [ 12, %44 ], [ 13, %165 ], [ 11, %164 ], [ 10, %163 ], [ 9, %162 ], [ 6, %151 ], [ 12, %38 ], [ 12, %41 ], [ 16, %62 ], [ 16, %65 ], [ 17, %74 ], [ 17, %77 ], [ 14, %99 ], [ 14, %102 ], [ 22, %115 ], [ 22, %112 ], [ 22, %118 ], [ 20, %128 ], [ 20, %131 ], [ 19, %138 ], [ 19, %141 ], [ 6, %155 ], [ 6, %152 ], [ 8, %54 ], [ 5, %172 ], [ 5, %211 ]
  %216 = icmp ne %struct.color_ext_type* %214, null
  %217 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %214, i64 0, i32 1
  %218 = zext i32 %215 to i64
  %219 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %218
  %220 = select i1 %216, %struct.bin_str* %217, %struct.bin_str* %219
  %221 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %220, i64 0, i32 1
  %222 = load i8*, i8** %221, align 8
  %223 = icmp eq %struct.bin_str* %220, null
  %224 = icmp eq i8* %222, null
  %225 = or i1 %223, %224
  br i1 %225, label %226, label %236

; <label>:226:                                    ; preds = %213
  %227 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 0), align 16
  %228 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4, i32 1), align 8
  switch i64 %227, label %235 [
    i64 0, label %236
    i64 1, label %229
    i64 2, label %232
  ]

; <label>:229:                                    ; preds = %226
  %230 = load i8, i8* %228, align 1
  %231 = icmp eq i8 %230, 48
  br i1 %231, label %236, label %235

; <label>:232:                                    ; preds = %226
  %233 = tail call i32 @strncmp(i8* %228, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0), i64 2) #16
  %234 = icmp ne i32 %233, 0
  br label %236

; <label>:235:                                    ; preds = %229, %226
  br label %236

; <label>:236:                                    ; preds = %4, %235, %232, %229, %226, %213
  %237 = phi %struct.bin_str* [ %220, %213 ], [ null, %226 ], [ null, %229 ], [ null, %232 ], [ null, %235 ], [ null, %4 ]
  %238 = phi i1 [ true, %213 ], [ false, %226 ], [ false, %229 ], [ %234, %232 ], [ true, %235 ], [ false, %4 ]
  %239 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %240 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i64 0, i32 10
  %241 = load i32, i32* %240, align 4
  %242 = xor i1 %1, true
  %243 = tail call fastcc i64 @quote_name(i8* %8, %struct.quoting_options* %239, i32 %241, %struct.bin_str* %237, i1 zeroext %242, %struct.obstack* %2)
  tail call fastcc void @process_signals()
  br i1 %238, label %244, label %318

; <label>:244:                                    ; preds = %236
  %245 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %246 = icmp eq i8* %245, null
  %247 = load i1, i1* @used_color, align 1
  br i1 %246, label %260, label %248

; <label>:248:                                    ; preds = %244
  br i1 %247, label %255, label %249

; <label>:249:                                    ; preds = %248
  store i1 true, i1* @used_color, align 1
  %250 = tail call i32 @tcgetpgrp(i32 1) #13
  %251 = icmp sgt i32 %250, -1
  br i1 %251, label %252, label %253

; <label>:252:                                    ; preds = %249
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %253

; <label>:253:                                    ; preds = %252, %249
  tail call fastcc void @prep_non_filename_text() #13
  %254 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  br label %255

; <label>:255:                                    ; preds = %248, %253
  %256 = phi i8* [ %245, %248 ], [ %254, %253 ]
  %257 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 0), align 16
  %258 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %259 = tail call i64 @fwrite_unlocked(i8* %256, i64 %257, i64 1, %struct._IO_FILE* %258) #13
  br label %293

; <label>:260:                                    ; preds = %244
  br i1 %247, label %266, label %261

; <label>:261:                                    ; preds = %260
  store i1 true, i1* @used_color, align 1
  %262 = tail call i32 @tcgetpgrp(i32 1) #13
  %263 = icmp sgt i32 %262, -1
  br i1 %263, label %264, label %265

; <label>:264:                                    ; preds = %261
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %265

; <label>:265:                                    ; preds = %264, %261
  tail call fastcc void @prep_non_filename_text() #13
  br label %266

; <label>:266:                                    ; preds = %260, %265
  %267 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %268 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %269 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %270 = tail call i64 @fwrite_unlocked(i8* %267, i64 %268, i64 1, %struct._IO_FILE* %269) #13
  %271 = load i1, i1* @used_color, align 1
  br i1 %271, label %277, label %272

; <label>:272:                                    ; preds = %266
  store i1 true, i1* @used_color, align 1
  %273 = tail call i32 @tcgetpgrp(i32 1) #13
  %274 = icmp sgt i32 %273, -1
  br i1 %274, label %275, label %276

; <label>:275:                                    ; preds = %272
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %276

; <label>:276:                                    ; preds = %275, %272
  tail call fastcc void @prep_non_filename_text() #13
  br label %277

; <label>:277:                                    ; preds = %266, %276
  %278 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 1), align 8
  %279 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3, i32 0), align 16
  %280 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %281 = tail call i64 @fwrite_unlocked(i8* %278, i64 %279, i64 1, %struct._IO_FILE* %280) #13
  %282 = load i1, i1* @used_color, align 1
  br i1 %282, label %288, label %283

; <label>:283:                                    ; preds = %277
  store i1 true, i1* @used_color, align 1
  %284 = tail call i32 @tcgetpgrp(i32 1) #13
  %285 = icmp sgt i32 %284, -1
  br i1 %285, label %286, label %287

; <label>:286:                                    ; preds = %283
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %287

; <label>:287:                                    ; preds = %286, %283
  tail call fastcc void @prep_non_filename_text() #13
  br label %288

; <label>:288:                                    ; preds = %277, %287
  %289 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %290 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %291 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %292 = tail call i64 @fwrite_unlocked(i8* %289, i64 %290, i64 1, %struct._IO_FILE* %291) #13
  br label %293

; <label>:293:                                    ; preds = %255, %288
  %294 = load i64, i64* @line_length, align 8
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %318, label %296

; <label>:296:                                    ; preds = %293
  %297 = udiv i64 %3, %294
  %298 = add i64 %3, -1
  %299 = add i64 %298, %243
  %300 = udiv i64 %299, %294
  %301 = icmp eq i64 %297, %300
  br i1 %301, label %318, label %302

; <label>:302:                                    ; preds = %296
  %303 = load i1, i1* @used_color, align 1
  br i1 %303, label %313, label %304

; <label>:304:                                    ; preds = %302
  store i1 true, i1* @used_color, align 1
  %305 = tail call i32 @tcgetpgrp(i32 1) #13
  %306 = icmp sgt i32 %305, -1
  br i1 %306, label %307, label %308

; <label>:307:                                    ; preds = %304
  tail call fastcc void @signal_setup(i1 zeroext true) #13
  br label %308

; <label>:308:                                    ; preds = %307, %304
  %309 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %310 = icmp eq i8* %309, null
  br i1 %310, label %312, label %311

; <label>:311:                                    ; preds = %308
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)) #13
  br label %313

; <label>:312:                                    ; preds = %308
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)) #13
  tail call fastcc void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)) #13
  br label %313

; <label>:313:                                    ; preds = %312, %311, %302
  %314 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 23, i32 1), align 8
  %315 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 23, i32 0), align 16
  %316 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %317 = tail call i64 @fwrite_unlocked(i8* %314, i64 %315, i64 1, %struct._IO_FILE* %316) #13
  br label %318

; <label>:318:                                    ; preds = %296, %293, %313, %236
  ret i64 %243
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #10

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_name(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %1 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32* @__errno_location() #1
  store i32 0, i32* %7, align 4
  %8 = tail call i32 @strcoll(i8* %4, i8* %6) #16
  ret i32 %8
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_name(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %25 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %25 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %1 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32* @__errno_location() #1
  store i32 0, i32* %23, align 4
  %24 = tail call i32 @strcoll(i8* %20, i8* %22) #16
  br label %25

; <label>:25:                                     ; preds = %17, %13, %18
  %26 = phi i32 [ %24, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_name(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32* @__errno_location() #1
  store i32 0, i32* %7, align 4
  %8 = tail call i32 @strcoll(i8* %4, i8* %6) #16
  ret i32 %8
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_name(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %25 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %25 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %1 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32* @__errno_location() #1
  store i32 0, i32* %23, align 4
  %24 = tail call i32 @strcoll(i8* %20, i8* %22) #16
  br label %25

; <label>:25:                                     ; preds = %17, %13, %18
  %26 = phi i32 [ %24, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_name(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %1 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 @strcmp(i8* %4, i8* %6) #13
  ret i32 %7
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_name(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %24 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %24 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %1 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32 @strcmp(i8* %20, i8* %22) #13
  br label %24

; <label>:24:                                     ; preds = %17, %13, %18
  %25 = phi i32 [ %23, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %25
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_name(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 @strcmp(i8* %4, i8* %6) #13
  ret i32 %7
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_name(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %24 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %24 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %1 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32 @strcmp(i8* %20, i8* %22) #13
  br label %24

; <label>:24:                                     ; preds = %17, %13, %18
  %25 = phi i32 [ %23, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %25
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_extension(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i8* @strrchr(i8* %4, i32 46) #16
  %6 = bitcast i8* %1 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i8* @strrchr(i8* %7, i32 46) #16
  %9 = icmp ne i8* %5, null
  %10 = select i1 %9, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %11 = icmp ne i8* %8, null
  %12 = select i1 %11, i8* %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %13 = tail call i32* @__errno_location() #1
  store i32 0, i32* %13, align 4
  %14 = tail call i32 @strcoll(i8* %10, i8* %12) #16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %2
  store i32 0, i32* %13, align 4
  %17 = tail call i32 @strcoll(i8* %4, i8* %7) #16
  br label %18

; <label>:18:                                     ; preds = %2, %16
  %19 = phi i32 [ %17, %16 ], [ %14, %2 ]
  ret i32 %19
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_extension(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %34 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %34 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i8* @strrchr(i8* %20, i32 46) #16
  %22 = bitcast i8* %1 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i8* @strrchr(i8* %23, i32 46) #16
  %25 = icmp ne i8* %21, null
  %26 = select i1 %25, i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %27 = icmp ne i8* %24, null
  %28 = select i1 %27, i8* %24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %29 = tail call i32* @__errno_location() #1
  store i32 0, i32* %29, align 4
  %30 = tail call i32 @strcoll(i8* %26, i8* %28) #16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

; <label>:32:                                     ; preds = %18
  store i32 0, i32* %29, align 4
  %33 = tail call i32 @strcoll(i8* %20, i8* %23) #16
  br label %34

; <label>:34:                                     ; preds = %17, %13, %32, %18
  %35 = phi i32 [ 1, %17 ], [ %33, %32 ], [ %30, %18 ], [ -1, %13 ]
  ret i32 %35
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_extension(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i8* @strrchr(i8* %4, i32 46) #16
  %6 = bitcast i8* %0 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i8* @strrchr(i8* %7, i32 46) #16
  %9 = icmp ne i8* %5, null
  %10 = select i1 %9, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %11 = icmp ne i8* %8, null
  %12 = select i1 %11, i8* %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %13 = tail call i32* @__errno_location() #1
  store i32 0, i32* %13, align 4
  %14 = tail call i32 @strcoll(i8* %10, i8* %12) #16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %2
  store i32 0, i32* %13, align 4
  %17 = tail call i32 @strcoll(i8* %4, i8* %7) #16
  br label %18

; <label>:18:                                     ; preds = %2, %16
  %19 = phi i32 [ %17, %16 ], [ %14, %2 ]
  ret i32 %19
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_extension(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %34 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %34 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %1 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i8* @strrchr(i8* %20, i32 46) #16
  %22 = bitcast i8* %0 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i8* @strrchr(i8* %23, i32 46) #16
  %25 = icmp ne i8* %21, null
  %26 = select i1 %25, i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %27 = icmp ne i8* %24, null
  %28 = select i1 %27, i8* %24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %29 = tail call i32* @__errno_location() #1
  store i32 0, i32* %29, align 4
  %30 = tail call i32 @strcoll(i8* %26, i8* %28) #16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

; <label>:32:                                     ; preds = %18
  store i32 0, i32* %29, align 4
  %33 = tail call i32 @strcoll(i8* %20, i8* %23) #16
  br label %34

; <label>:34:                                     ; preds = %17, %13, %32, %18
  %35 = phi i32 [ 1, %17 ], [ %33, %32 ], [ %30, %18 ], [ -1, %13 ]
  ret i32 %35
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_extension(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i8* @strrchr(i8* %4, i32 46) #16
  %6 = bitcast i8* %1 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i8* @strrchr(i8* %7, i32 46) #16
  %9 = icmp ne i8* %5, null
  %10 = select i1 %9, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %11 = icmp ne i8* %8, null
  %12 = select i1 %11, i8* %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %13 = tail call i32 @strcmp(i8* %10, i8* %12) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = tail call i32 @strcmp(i8* %4, i8* %7) #13
  br label %17

; <label>:17:                                     ; preds = %2, %15
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  ret i32 %18
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_extension(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %33 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %33 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i8* @strrchr(i8* %20, i32 46) #16
  %22 = bitcast i8* %1 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i8* @strrchr(i8* %23, i32 46) #16
  %25 = icmp ne i8* %21, null
  %26 = select i1 %25, i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %27 = icmp ne i8* %24, null
  %28 = select i1 %27, i8* %24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %29 = tail call i32 @strcmp(i8* %26, i8* %28) #13
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %18
  %32 = tail call i32 @strcmp(i8* %20, i8* %23) #13
  br label %33

; <label>:33:                                     ; preds = %17, %13, %31, %18
  %34 = phi i32 [ 1, %17 ], [ %32, %31 ], [ %29, %18 ], [ -1, %13 ]
  ret i32 %34
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_extension(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i8* @strrchr(i8* %4, i32 46) #16
  %6 = bitcast i8* %0 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i8* @strrchr(i8* %7, i32 46) #16
  %9 = icmp ne i8* %5, null
  %10 = select i1 %9, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %11 = icmp ne i8* %8, null
  %12 = select i1 %11, i8* %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %13 = tail call i32 @strcmp(i8* %10, i8* %12) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = tail call i32 @strcmp(i8* %4, i8* %7) #13
  br label %17

; <label>:17:                                     ; preds = %2, %15
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  ret i32 %18
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_extension(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %33 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %33 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %1 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i8* @strrchr(i8* %20, i32 46) #16
  %22 = bitcast i8* %0 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i8* @strrchr(i8* %23, i32 46) #16
  %25 = icmp ne i8* %21, null
  %26 = select i1 %25, i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %27 = icmp ne i8* %24, null
  %28 = select i1 %27, i8* %24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %29 = tail call i32 @strcmp(i8* %26, i8* %28) #13
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %18
  %32 = tail call i32 @strcmp(i8* %20, i8* %23) #13
  br label %33

; <label>:33:                                     ; preds = %17, %13, %31, %18
  %34 = phi i32 [ 1, %17 ], [ %32, %31 ], [ %29, %18 ], [ -1, %13 ]
  ret i32 %34
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_size(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 64
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 64
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %5, %8
  %10 = icmp sgt i64 %5, %8
  %11 = zext i1 %10 to i32
  %12 = select i1 %9, i32 -1, i32 %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %2
  %15 = bitcast i8* %0 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %1 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32* @__errno_location() #1
  store i32 0, i32* %19, align 4
  %20 = tail call i32 @strcoll(i8* %16, i8* %18) #16
  br label %21

; <label>:21:                                     ; preds = %2, %14
  %22 = phi i32 [ %20, %14 ], [ %12, %2 ]
  ret i32 %22
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_size(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %37 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %37 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 64
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 64
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %21, %24
  %26 = icmp sgt i64 %21, %24
  %27 = zext i1 %26 to i32
  %28 = select i1 %25, i32 -1, i32 %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %18
  %31 = bitcast i8* %0 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %1 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32* @__errno_location() #1
  store i32 0, i32* %35, align 4
  %36 = tail call i32 @strcoll(i8* %32, i8* %34) #16
  br label %37

; <label>:37:                                     ; preds = %17, %13, %30, %18
  %38 = phi i32 [ 1, %17 ], [ %36, %30 ], [ %28, %18 ], [ -1, %13 ]
  ret i32 %38
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_size(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 64
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %5, %8
  %10 = icmp sgt i64 %5, %8
  %11 = zext i1 %10 to i32
  %12 = select i1 %9, i32 -1, i32 %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %2
  %15 = bitcast i8* %1 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %0 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32* @__errno_location() #1
  store i32 0, i32* %19, align 4
  %20 = tail call i32 @strcoll(i8* %16, i8* %18) #16
  br label %21

; <label>:21:                                     ; preds = %2, %14
  %22 = phi i32 [ %20, %14 ], [ %12, %2 ]
  ret i32 %22
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_size(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %37 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %37 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 64
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 64
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %21, %24
  %26 = icmp sgt i64 %21, %24
  %27 = zext i1 %26 to i32
  %28 = select i1 %25, i32 -1, i32 %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %18
  %31 = bitcast i8* %1 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32* @__errno_location() #1
  store i32 0, i32* %35, align 4
  %36 = tail call i32 @strcoll(i8* %32, i8* %34) #16
  br label %37

; <label>:37:                                     ; preds = %17, %13, %30, %18
  %38 = phi i32 [ 1, %17 ], [ %36, %30 ], [ %28, %18 ], [ -1, %13 ]
  ret i32 %38
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_size(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %1, i64 64
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 64
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %5, %8
  %10 = icmp sgt i64 %5, %8
  %11 = zext i1 %10 to i32
  %12 = select i1 %9, i32 -1, i32 %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %2
  %15 = bitcast i8* %0 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %1 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32 @strcmp(i8* %16, i8* %18) #13
  br label %20

; <label>:20:                                     ; preds = %2, %14
  %21 = phi i32 [ %19, %14 ], [ %12, %2 ]
  ret i32 %21
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_size(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %36 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %36 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 64
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 64
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %21, %24
  %26 = icmp sgt i64 %21, %24
  %27 = zext i1 %26 to i32
  %28 = select i1 %25, i32 -1, i32 %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %36

; <label>:30:                                     ; preds = %18
  %31 = bitcast i8* %0 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %1 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 @strcmp(i8* %32, i8* %34) #13
  br label %36

; <label>:36:                                     ; preds = %17, %13, %30, %18
  %37 = phi i32 [ 1, %17 ], [ %35, %30 ], [ %28, %18 ], [ -1, %13 ]
  ret i32 %37
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_size(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 64
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %5, %8
  %10 = icmp sgt i64 %5, %8
  %11 = zext i1 %10 to i32
  %12 = select i1 %9, i32 -1, i32 %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %2
  %15 = bitcast i8* %1 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %0 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32 @strcmp(i8* %16, i8* %18) #13
  br label %20

; <label>:20:                                     ; preds = %2, %14
  %21 = phi i32 [ %19, %14 ], [ %12, %2 ]
  ret i32 %21
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_size(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %36 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %36 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 64
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 64
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %21, %24
  %26 = icmp sgt i64 %21, %24
  %27 = zext i1 %26 to i32
  %28 = select i1 %25, i32 -1, i32 %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %36

; <label>:30:                                     ; preds = %18
  %31 = bitcast i8* %1 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 @strcmp(i8* %32, i8* %34) #13
  br label %36

; <label>:36:                                     ; preds = %17, %13, %30, %18
  %37 = phi i32 [ 1, %17 ], [ %35, %30 ], [ %28, %18 ], [ -1, %13 ]
  ret i32 %37
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @xstrcoll_version(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %1 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 @filevercmp(i8* %4, i8* %6) #16
  ret i32 %7
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @xstrcoll_df_version(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %24 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %24 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %1 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32 @filevercmp(i8* %20, i8* %22) #16
  br label %24

; <label>:24:                                     ; preds = %17, %13, %18
  %25 = phi i32 [ %23, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %25
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_xstrcoll_version(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 @filevercmp(i8* %4, i8* %6) #16
  ret i32 %7
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_xstrcoll_df_version(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %24 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %24 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = bitcast i8* %1 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32 @filevercmp(i8* %20, i8* %22) #16
  br label %24

; <label>:24:                                     ; preds = %17, %13, %18
  %25 = phi i32 [ %23, %18 ], [ 1, %17 ], [ -1, %13 ]
  ret i32 %25
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_mtime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 104
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 112
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 104
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 112
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_mtime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 104
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 112
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 104
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 112
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_mtime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 104
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 112
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 104
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 112
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_mtime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 104
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 112
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 104
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 112
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_mtime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %1, i64 104
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 112
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 104
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 112
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_mtime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 104
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 112
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 104
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 112
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_mtime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 104
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 112
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 104
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 112
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_mtime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 104
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 112
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 104
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 112
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_ctime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 120
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 128
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 120
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 128
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_ctime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 120
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 128
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 120
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 128
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_ctime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 120
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 128
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 120
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 128
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_ctime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 120
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 128
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 120
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 128
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_ctime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %1, i64 120
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 128
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 120
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 128
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_ctime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 120
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 128
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 120
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 128
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_ctime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 120
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 128
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 120
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 128
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_ctime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 120
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 128
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 120
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 128
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_atime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 96
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 88
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 96
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @xstrcoll_df_atime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 88
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 96
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 88
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 96
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_atime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 96
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 88
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 96
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %29, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32* @__errno_location() #1
  store i32 0, i32* %27, align 4
  %28 = tail call i32 @strcoll(i8* %24, i8* %26) #16
  br label %29

; <label>:29:                                     ; preds = %2, %16, %18, %22
  %30 = phi i32 [ %28, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rev_xstrcoll_df_atime(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %45 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %45 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 88
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 96
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 88
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 96
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %45, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32* @__errno_location() #1
  store i32 0, i32* %43, align 4
  %44 = tail call i32 @strcoll(i8* %40, i8* %42) #16
  br label %45

; <label>:45:                                     ; preds = %17, %13, %38, %34, %32, %18
  %46 = phi i32 [ 1, %17 ], [ %44, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %46
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_atime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %1, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 96
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 88
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 96
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %1 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @strcmp_df_atime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %1, i64 88
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 96
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 88
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 96
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %1 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_atime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 96
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 88
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 96
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %5, %11
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %2
  %17 = icmp sgt i64 %5, %11
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i64 %8, %14
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %2, %16, %18, %22
  %29 = phi i32 [ %27, %22 ], [ %20, %18 ], [ 1, %16 ], [ -1, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind readonly sspstrong uwtable
define internal i32 @rev_strcmp_df_atime(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 160
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  %7 = getelementptr inbounds i8, i8* %1, i64 160
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  %11 = icmp ne i32 %5, 9
  %12 = xor i1 %6, %11
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %2
  switch i32 %9, label %44 [
    i32 9, label %14
    i32 3, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %2
  %15 = icmp ne i32 %9, 9
  %16 = xor i1 %10, %15
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %14
  switch i32 %5, label %44 [
    i32 9, label %18
    i32 3, label %18
  ]

; <label>:18:                                     ; preds = %17, %17, %14
  %19 = getelementptr inbounds i8, i8* %0, i64 88
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 96
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 88
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 96
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %21, %27
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %18
  %33 = icmp sgt i64 %21, %27
  br i1 %33, label %44, label %34

; <label>:34:                                     ; preds = %32
  %35 = sub nsw i64 %24, %30
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %34
  %39 = bitcast i8* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @strcmp(i8* %40, i8* %42) #13
  br label %44

; <label>:44:                                     ; preds = %17, %13, %38, %34, %32, %18
  %45 = phi i32 [ 1, %17 ], [ %43, %38 ], [ %36, %34 ], [ 1, %32 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %45
}

; Function Attrs: nounwind readonly
declare i32 @strcoll(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

declare %struct._cap_struct* @cap_get_file(i8*) local_unnamed_addr #5

declare i8* @cap_to_text(%struct._cap_struct*, i64*) local_unnamed_addr #5

declare i32 @cap_free(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @stpncpy(i8*, i8* nocapture readonly, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @__stpcpy_chk(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @areadlink_with_size(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 1025
  %4 = add i64 %1, 1
  %5 = select i1 %3, i64 %4, i64 1025
  %6 = tail call noalias i8* @malloc(i64 %5) #13
  %7 = icmp eq i8* %6, null
  br i1 %7, label %36, label %8

; <label>:8:                                      ; preds = %2
  br label %9

; <label>:9:                                      ; preds = %8, %27
  %10 = phi i8* [ %29, %27 ], [ %6, %8 ]
  %11 = phi i64 [ %28, %27 ], [ %5, %8 ]
  %12 = tail call i64 @readlink(i8* %0, i8* nonnull %10, i64 %11) #13
  %13 = icmp slt i64 %12, 0
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %9
  %15 = tail call i32* @__errno_location() #1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 34
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %14
  tail call void @free(i8* nonnull %10) #13
  store i32 %16, i32* %15, align 4
  br label %36

; <label>:19:                                     ; preds = %14, %9
  %20 = icmp ult i64 %12, %11
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds i8, i8* %10, i64 %12
  store i8 0, i8* %22, align 1
  br label %36

; <label>:23:                                     ; preds = %19
  tail call void @free(i8* nonnull %10) #13
  %24 = icmp ult i64 %11, 4611686018427387904
  br i1 %24, label %25, label %31

; <label>:25:                                     ; preds = %23
  %26 = shl i64 %11, 1
  br label %27

; <label>:27:                                     ; preds = %25, %31
  %28 = phi i64 [ %26, %25 ], [ 9223372036854775807, %31 ]
  %29 = tail call noalias i8* @malloc(i64 %28) #13
  %30 = icmp eq i8* %29, null
  br i1 %30, label %35, label %9

; <label>:31:                                     ; preds = %23
  %32 = icmp ult i64 %11, 9223372036854775807
  br i1 %32, label %27, label %33

; <label>:33:                                     ; preds = %31
  %34 = tail call i32* @__errno_location() #1
  store i32 12, i32* %34, align 4
  br label %36

; <label>:35:                                     ; preds = %27
  br label %36

; <label>:36:                                     ; preds = %35, %2, %18, %21, %33
  %37 = phi i8* [ null, %33 ], [ %10, %21 ], [ null, %18 ], [ null, %2 ], [ null, %35 ]
  ret i8* %37
}

; Function Attrs: nounwind
declare i64 @readlink(i8* nocapture readonly, i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal void @__argmatch_die() #0 {
  tail call void @usage(i32 1) #13
  ret void
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @argmatch(i8* nocapture readonly, i8** nocapture readonly, i8* readonly, i64) local_unnamed_addr #8 {
  %5 = tail call i64 @strlen(i8* %0) #16
  %6 = load i8*, i8** %1, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %39, label %8

; <label>:8:                                      ; preds = %4
  %9 = icmp eq i8* %2, null
  br label %10

; <label>:10:                                     ; preds = %8, %31
  %11 = phi i8* [ %6, %8 ], [ %36, %31 ]
  %12 = phi i8 [ 0, %8 ], [ %33, %31 ]
  %13 = phi i64 [ -1, %8 ], [ %32, %31 ]
  %14 = phi i64 [ 0, %8 ], [ %34, %31 ]
  %15 = tail call i32 @strncmp(i8* nonnull %11, i8* %0, i64 %5) #16
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

; <label>:17:                                     ; preds = %10
  %18 = tail call i64 @strlen(i8* nonnull %11) #16
  %19 = icmp eq i64 %18, %5
  br i1 %19, label %45, label %20

; <label>:20:                                     ; preds = %17
  %21 = icmp eq i64 %13, -1
  br i1 %21, label %31, label %22

; <label>:22:                                     ; preds = %20
  br i1 %9, label %30, label %23

; <label>:23:                                     ; preds = %22
  %24 = mul i64 %13, %3
  %25 = getelementptr inbounds i8, i8* %2, i64 %24
  %26 = mul i64 %14, %3
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = tail call i32 @memcmp(i8* %25, i8* %27, i64 %3) #16
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

; <label>:30:                                     ; preds = %23, %22
  br label %31

; <label>:31:                                     ; preds = %20, %23, %10, %30
  %32 = phi i64 [ %13, %10 ], [ %13, %30 ], [ %13, %23 ], [ %14, %20 ]
  %33 = phi i8 [ %12, %10 ], [ 1, %30 ], [ %12, %23 ], [ %12, %20 ]
  %34 = add i64 %14, 1
  %35 = getelementptr inbounds i8*, i8** %1, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %10

; <label>:38:                                     ; preds = %31
  br label %39

; <label>:39:                                     ; preds = %38, %4
  %40 = phi i64 [ -1, %4 ], [ %32, %38 ]
  %41 = phi i8 [ 0, %4 ], [ %33, %38 ]
  %42 = and i8 %41, 1
  %43 = icmp eq i8 %42, 0
  %44 = select i1 %43, i64 %40, i64 -2
  br label %46

; <label>:45:                                     ; preds = %17
  br label %46

; <label>:46:                                     ; preds = %45, %39
  %47 = phi i64 [ %44, %39 ], [ %14, %45 ]
  ret i64 %47
}

; Function Attrs: nounwind sspstrong uwtable
define void @argmatch_invalid(i8*, i8*, i64) local_unnamed_addr #0 {
  %4 = icmp eq i64 %2, -1
  %5 = select i1 %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.214, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.215, i64 0, i64 0)
  %6 = tail call i8* @dcgettext(i8* null, i8* %5, i32 5) #13
  %7 = tail call i8* @quotearg_n_style(i32 0, i32 8, i8* %1) #13
  %8 = tail call i8* @quote_n(i32 1, i8* %0) #13
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %6, i8* %7, i8* %8) #13
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @argmatch_valid(i8** nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.216, i64 0, i64 0), i32 5) #13
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %6 = tail call i32 @fputs_unlocked(i8* %4, %struct._IO_FILE* %5) #13
  %7 = load i8*, i8** %0, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %35, label %9

; <label>:9:                                      ; preds = %3
  br label %10

; <label>:10:                                     ; preds = %9, %28
  %11 = phi i8* [ %32, %28 ], [ %7, %9 ]
  %12 = phi i8* [ %29, %28 ], [ null, %9 ]
  %13 = phi i64 [ %30, %28 ], [ 0, %9 ]
  %14 = icmp eq i64 %13, 0
  %15 = mul i64 %13, %2
  %16 = getelementptr inbounds i8, i8* %1, i64 %15
  br i1 %14, label %20, label %17

; <label>:17:                                     ; preds = %10
  %18 = tail call i32 @memcmp(i8* %12, i8* %16, i64 %2) #16
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %10, %17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %22 = tail call i8* @quote(i8* nonnull %11) #13
  %23 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %21, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.217, i64 0, i64 0), i8* %22) #13
  br label %28

; <label>:24:                                     ; preds = %17
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %26 = tail call i8* @quote(i8* nonnull %11) #13
  %27 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %25, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.218, i64 0, i64 0), i8* %26) #13
  br label %28

; <label>:28:                                     ; preds = %20, %24
  %29 = phi i8* [ %16, %20 ], [ %12, %24 ]
  %30 = add i64 %13, 1
  %31 = getelementptr inbounds i8*, i8** %0, i64 %30
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %10

; <label>:34:                                     ; preds = %28
  br label %35

; <label>:35:                                     ; preds = %34, %3
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %37 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %36, i64 0, i32 5
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %36, i64 0, i32 6
  %40 = load i8*, i8** %39, align 8
  %41 = icmp ult i8* %38, %40
  br i1 %41, label %44, label %42

; <label>:42:                                     ; preds = %35
  %43 = tail call i32 @__overflow(%struct._IO_FILE* nonnull %36, i32 10) #13
  br label %46

; <label>:44:                                     ; preds = %35
  %45 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %45, i8** %37, align 8
  store i8 10, i8* %38, align 1
  br label %46

; <label>:46:                                     ; preds = %42, %44
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @__xargmatch_internal(i8*, i8*, i8** nocapture readonly, i8* readonly, i64, void ()* nocapture) local_unnamed_addr #0 {
  %7 = tail call i64 @argmatch(i8* %1, i8** %2, i8* %3, i64 %4) #16
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %15, label %9

; <label>:9:                                      ; preds = %6
  %10 = icmp eq i64 %7, -1
  %11 = select i1 %10, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.214, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.215, i64 0, i64 0)
  %12 = tail call i8* @dcgettext(i8* null, i8* %11, i32 5) #13
  %13 = tail call i8* @quotearg_n_style(i32 0, i32 8, i8* %1) #13
  %14 = tail call i8* @quote_n(i32 1, i8* %0) #13
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %12, i8* %13, i8* %14) #13
  tail call void @argmatch_valid(i8** %2, i8* %3, i64 %4)
  tail call void %5() #13
  br label %15

; <label>:15:                                     ; preds = %6, %9
  %16 = phi i64 [ -1, %9 ], [ %7, %6 ]
  ret i64 %16
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i8* @argmatch_to_argument(i8* nocapture readonly, i8** nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #8 {
  %5 = load i8*, i8** %1, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %22, label %7

; <label>:7:                                      ; preds = %4
  br label %12

; <label>:8:                                      ; preds = %12
  %9 = getelementptr inbounds i8*, i8** %1, i64 %19
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %20, label %12

; <label>:12:                                     ; preds = %7, %8
  %13 = phi i8* [ %10, %8 ], [ %5, %7 ]
  %14 = phi i64 [ %19, %8 ], [ 0, %7 ]
  %15 = mul i64 %14, %3
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  %17 = tail call i32 @memcmp(i8* %0, i8* %16, i64 %3) #16
  %18 = icmp eq i32 %17, 0
  %19 = add i64 %14, 1
  br i1 %18, label %20, label %8

; <label>:20:                                     ; preds = %8, %12
  %21 = phi i8* [ null, %8 ], [ %13, %12 ]
  br label %22

; <label>:22:                                     ; preds = %20, %4
  %23 = phi i8* [ null, %4 ], [ %21, %20 ]
  ret i8* %23
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout_set_file_name(i8*) local_unnamed_addr #0 {
  store i8* %0, i8** @file_name, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout_set_ignore_EPIPE(i1 zeroext) local_unnamed_addr #0 {
  %2 = zext i1 %0 to i8
  store i8 %2, i8* @ignore_EPIPE, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @close_stdout() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %2 = tail call i32 @close_stream(%struct._IO_FILE* %1) #13
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %21, label %4

; <label>:4:                                      ; preds = %0
  %5 = load i8, i8* @ignore_EPIPE, align 1
  %6 = icmp eq i8 %5, 0
  %7 = tail call i32* @__errno_location() #1
  br i1 %6, label %11, label %8

; <label>:8:                                      ; preds = %4
  %9 = load i32, i32* %7, align 4
  %10 = icmp eq i32 %9, 32
  br i1 %10, label %21, label %11

; <label>:11:                                     ; preds = %4, %8
  %12 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.236, i64 0, i64 0), i32 5) #13
  %13 = load i8*, i8** @file_name, align 8
  %14 = icmp eq i8* %13, null
  %15 = load i32, i32* %7, align 4
  br i1 %14, label %18, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call i8* @quotearg_colon(i8* nonnull %13) #13
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.237, i64 0, i64 0), i8* %17, i8* %12) #13
  br label %19

; <label>:18:                                     ; preds = %11
  tail call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.238, i64 0, i64 0), i8* %12) #13
  br label %19

; <label>:19:                                     ; preds = %18, %16
  %20 = load volatile i32, i32* @exit_failure, align 4
  tail call void @_exit(i32 %20) #15
  unreachable

; <label>:21:                                     ; preds = %0, %8
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = tail call i32 @close_stream(%struct._IO_FILE* %22) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %21
  %26 = load volatile i32, i32* @exit_failure, align 4
  tail call void @_exit(i32 %26) #15
  unreachable

; <label>:27:                                     ; preds = %21
  ret void
}

; Function Attrs: noreturn
declare void @_exit(i32) local_unnamed_addr #11

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @dir_len(i8*) local_unnamed_addr #8 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp eq i8 %2, 47
  %4 = zext i1 %3 to i64
  %5 = tail call i8* @last_component(i8* %0) #16
  %6 = ptrtoint i8* %5 to i64
  %7 = ptrtoint i8* %0 to i64
  %8 = sub i64 %6, %7
  br label %9

; <label>:9:                                      ; preds = %12, %1
  %10 = phi i64 [ %8, %1 ], [ %13, %12 ]
  %11 = icmp ult i64 %4, %10
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %9
  %13 = add i64 %10, -1
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 47
  br i1 %16, label %9, label %17

; <label>:17:                                     ; preds = %12, %9
  ret i64 %10
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @mdir_name(i8*) local_unnamed_addr #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp eq i8 %2, 47
  %4 = zext i1 %3 to i64
  %5 = tail call i8* @last_component(i8* %0) #16
  %6 = ptrtoint i8* %5 to i64
  %7 = ptrtoint i8* %0 to i64
  %8 = sub i64 %6, %7
  br label %9

; <label>:9:                                      ; preds = %12, %1
  %10 = phi i64 [ %8, %1 ], [ %13, %12 ]
  %11 = icmp ult i64 %4, %10
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %9
  %13 = add i64 %10, -1
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 47
  br i1 %16, label %9, label %17

; <label>:17:                                     ; preds = %9, %12
  %18 = icmp eq i64 %10, 0
  %19 = zext i1 %18 to i64
  %20 = add i64 %10, 1
  %21 = add i64 %20, %19
  %22 = tail call noalias i8* @malloc(i64 %21) #13
  %23 = icmp eq i8* %22, null
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %22, i8* nonnull %0, i64 %10, i32 1, i1 false)
  br i1 %18, label %25, label %26

; <label>:25:                                     ; preds = %24
  store i8 46, i8* %22, align 1
  br label %26

; <label>:26:                                     ; preds = %25, %24
  %27 = phi i64 [ 1, %25 ], [ %10, %24 ]
  %28 = getelementptr inbounds i8, i8* %22, i64 %27
  store i8 0, i8* %28, align 1
  br label %29

; <label>:29:                                     ; preds = %17, %26
  %30 = phi i8* [ %22, %26 ], [ null, %17 ]
  ret i8* %30
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i8* @last_component(i8* readonly) local_unnamed_addr #8 {
  br label %2

; <label>:2:                                      ; preds = %2, %1
  %3 = phi i8* [ %0, %1 ], [ %6, %2 ]
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 47
  %6 = getelementptr inbounds i8, i8* %3, i64 1
  br i1 %5, label %2, label %7

; <label>:7:                                      ; preds = %2
  br label %8

; <label>:8:                                      ; preds = %7, %18
  %9 = phi i8 [ %22, %18 ], [ %4, %7 ]
  %10 = phi i8* [ %19, %18 ], [ %3, %7 ]
  %11 = phi i8* [ %21, %18 ], [ %3, %7 ]
  %12 = phi i8 [ %20, %18 ], [ 0, %7 ]
  switch i8 %9, label %13 [
    i8 0, label %23
    i8 47, label %18
  ]

; <label>:13:                                     ; preds = %8
  %14 = and i8 %12, 1
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i8* %10, i8* %11
  %17 = select i1 %15, i8 %12, i8 0
  br label %18

; <label>:18:                                     ; preds = %13, %8
  %19 = phi i8* [ %10, %8 ], [ %16, %13 ]
  %20 = phi i8 [ 1, %8 ], [ %17, %13 ]
  %21 = getelementptr inbounds i8, i8* %11, i64 1
  %22 = load i8, i8* %21, align 1
  br label %8

; <label>:23:                                     ; preds = %8
  ret i8* %10
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @base_len(i8* nocapture readonly) local_unnamed_addr #8 {
  %2 = tail call i64 @strlen(i8* %0) #16
  br label %3

; <label>:3:                                      ; preds = %6, %1
  %4 = phi i64 [ %2, %1 ], [ %7, %6 ]
  %5 = icmp ugt i64 %4, 1
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %3
  %7 = add i64 %4, -1
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 47
  br i1 %10, label %3, label %11

; <label>:11:                                     ; preds = %3, %6
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @file_has_acl(i8*, %struct.stat* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.stat, %struct.stat* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 61440
  %6 = icmp eq i32 %5, 40960
  br i1 %6, label %35, label %7

; <label>:7:                                      ; preds = %2
  %8 = tail call i64 @getxattr(i8* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.247, i64 0, i64 0), i8* null, i64 0) #13
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %7
  %11 = tail call i32* @__errno_location() #1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 61
  br i1 %13, label %16, label %29

; <label>:14:                                     ; preds = %7
  %15 = icmp eq i64 %8, 0
  br i1 %15, label %16, label %35

; <label>:16:                                     ; preds = %14, %10
  %17 = load i32, i32* %3, align 8
  %18 = and i32 %17, 61440
  %19 = icmp eq i32 %18, 16384
  br i1 %19, label %20, label %34

; <label>:20:                                     ; preds = %16
  %21 = tail call i64 @getxattr(i8* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1.248, i64 0, i64 0), i8* null, i64 0) #13
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %23, label %27

; <label>:23:                                     ; preds = %20
  %24 = tail call i32* @__errno_location() #1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 61
  br i1 %26, label %34, label %29

; <label>:27:                                     ; preds = %20
  %28 = icmp eq i64 %21, 0
  br i1 %28, label %34, label %35

; <label>:29:                                     ; preds = %23, %10
  %30 = phi i32* [ %24, %23 ], [ %11, %10 ]
  %31 = load i32, i32* %30, align 4
  %32 = tail call zeroext i1 @acl_errno_valid(i32 %31) #1
  %33 = sext i1 %32 to i32
  br label %35

; <label>:34:                                     ; preds = %27, %16, %23
  br label %35

; <label>:35:                                     ; preds = %27, %14, %2, %29, %34
  %36 = phi i32 [ %33, %29 ], [ 0, %34 ], [ 1, %14 ], [ 1, %27 ], [ 0, %2 ]
  ret i32 %36
}

; Function Attrs: nounwind
declare i64 @getxattr(i8*, i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define void @strmode(i32, i8* nocapture) local_unnamed_addr #0 {
  %3 = and i32 %0, 61440
  %4 = add nsw i32 %3, -4096
  %5 = icmp ult i32 %4, 49152
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %2
  %7 = lshr exact i32 %4, 12
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x i8], [12 x i8]* @switch.table.249, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  br label %11

; <label>:11:                                     ; preds = %2, %6
  %12 = phi i8 [ %10, %6 ], [ 63, %2 ]
  store i8 %12, i8* %1, align 1
  %13 = and i32 %0, 256
  %14 = icmp ne i32 %13, 0
  %15 = select i1 %14, i8 114, i8 45
  %16 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %15, i8* %16, align 1
  %17 = trunc i32 %0 to i8
  %18 = ashr i8 %17, 7
  %19 = and i8 %18, 74
  %20 = add nuw i8 %19, 45
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %20, i8* %21, align 1
  %22 = and i32 %0, 2048
  %23 = icmp ne i32 %22, 0
  %24 = and i32 %0, 64
  %25 = icmp ne i32 %24, 0
  %26 = lshr exact i32 %24, 1
  %27 = or i32 %26, 83
  %28 = select i1 %25, i32 120, i32 45
  %29 = select i1 %23, i32 %27, i32 %28
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %30, i8* %31, align 1
  %32 = and i32 %0, 32
  %33 = icmp ne i32 %32, 0
  %34 = select i1 %33, i8 114, i8 45
  %35 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %34, i8* %35, align 1
  %36 = and i32 %0, 16
  %37 = icmp ne i32 %36, 0
  %38 = select i1 %37, i8 119, i8 45
  %39 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %38, i8* %39, align 1
  %40 = and i32 %0, 1024
  %41 = icmp ne i32 %40, 0
  %42 = and i32 %0, 8
  %43 = icmp ne i32 %42, 0
  %44 = shl nuw nsw i32 %42, 2
  %45 = or i32 %44, 83
  %46 = select i1 %43, i32 120, i32 45
  %47 = select i1 %41, i32 %45, i32 %46
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %48, i8* %49, align 1
  %50 = and i32 %0, 4
  %51 = icmp ne i32 %50, 0
  %52 = select i1 %51, i8 114, i8 45
  %53 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %52, i8* %53, align 1
  %54 = and i32 %0, 2
  %55 = icmp ne i32 %54, 0
  %56 = select i1 %55, i8 119, i8 45
  %57 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 %56, i8* %57, align 1
  %58 = and i32 %0, 512
  %59 = icmp ne i32 %58, 0
  %60 = and i32 %0, 1
  %61 = icmp ne i32 %60, 0
  %62 = shl nuw nsw i32 %60, 5
  %63 = or i32 %62, 84
  %64 = select i1 %61, i32 120, i32 45
  %65 = select i1 %59, i32 %63, i32 %64
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 32, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 0, i8* %69, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @filemodestring(%struct.stat* nocapture readonly, i8* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.stat, %struct.stat* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  tail call void @strmode(i32 %4, i8* %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @file_name_concat(i8*, i8*, i8**) local_unnamed_addr #0 {
  %4 = tail call i8* @mfile_name_concat(i8* %0, i8* %1, i8** %2) #13
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %3
  tail call void @xalloc_die() #15
  unreachable

; <label>:7:                                      ; preds = %3
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @mfile_name_concat(i8*, i8*, i8**) local_unnamed_addr #0 {
  %4 = tail call i8* @last_component(i8* %0) #16
  %5 = tail call i64 @base_len(i8* %4) #16
  %6 = ptrtoint i8* %4 to i64
  %7 = ptrtoint i8* %0 to i64
  %8 = sub i64 %6, %7
  %9 = add i64 %8, %5
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %16, label %11

; <label>:11:                                     ; preds = %3
  %12 = add i64 %5, -1
  %13 = getelementptr inbounds i8, i8* %4, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i8 %14, 47
  br label %16

; <label>:16:                                     ; preds = %3, %11
  %17 = phi i1 [ false, %3 ], [ %15, %11 ]
  br label %18

; <label>:18:                                     ; preds = %18, %16
  %19 = phi i8* [ %1, %16 ], [ %22, %18 ]
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 47
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  br i1 %21, label %18, label %23

; <label>:23:                                     ; preds = %18
  %24 = zext i1 %17 to i64
  %25 = tail call i64 @strlen(i8* %19) #16
  %26 = add i64 %9, 1
  %27 = add i64 %26, %24
  %28 = add i64 %27, %25
  %29 = tail call noalias i8* @malloc(i64 %28) #13
  %30 = icmp eq i8* %29, null
  br i1 %30, label %44, label %31

; <label>:31:                                     ; preds = %23
  %32 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %29, i1 false) #13
  %33 = tail call i8* @__mempcpy_chk(i8* nonnull %29, i8* nonnull %0, i64 %9, i64 %32) #13
  store i8 47, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %33, i64 %24
  %35 = icmp eq i8** %2, null
  br i1 %35, label %41, label %36

; <label>:36:                                     ; preds = %31
  %37 = load i8, i8* %1, align 1
  %38 = icmp eq i8 %37, 47
  %39 = sext i1 %38 to i64
  %40 = getelementptr inbounds i8, i8* %34, i64 %39
  store i8* %40, i8** %2, align 8
  br label %41

; <label>:41:                                     ; preds = %31, %36
  %42 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %34, i1 false) #13
  %43 = tail call i8* @__mempcpy_chk(i8* nonnull %34, i8* nonnull %19, i64 %25, i64 %42) #13
  store i8 0, i8* %43, align 1
  br label %44

; <label>:44:                                     ; preds = %23, %41
  %45 = phi i8* [ %29, %41 ], [ null, %23 ]
  ret i8* %45
}

; Function Attrs: nounwind
declare i8* @__mempcpy_chk(i8*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readonly sspstrong uwtable
define i32 @filevercmp(i8*, i8*) local_unnamed_addr #8 {
  %3 = tail call i32 @strcmp(i8* %0, i8* %1) #13
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %301, label %5

; <label>:5:                                      ; preds = %2
  %6 = load i8, i8* %0, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %301, label %8

; <label>:8:                                      ; preds = %5
  %9 = load i8, i8* %1, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %301, label %11

; <label>:11:                                     ; preds = %8
  %12 = icmp eq i8 %6, 46
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds i8, i8* %0, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %301, label %17

; <label>:17:                                     ; preds = %11, %13
  %18 = icmp eq i8 %9, 46
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds i8, i8* %1, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %301, label %23

; <label>:23:                                     ; preds = %17, %19
  br i1 %12, label %24, label %32

; <label>:24:                                     ; preds = %23
  %25 = getelementptr inbounds i8, i8* %0, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 46
  br i1 %27, label %28, label %32

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds i8, i8* %0, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %301, label %32

; <label>:32:                                     ; preds = %23, %24, %28
  br i1 %18, label %33, label %41

; <label>:33:                                     ; preds = %32
  %34 = getelementptr inbounds i8, i8* %1, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 46
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %33
  %38 = getelementptr inbounds i8, i8* %1, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %301, label %41

; <label>:41:                                     ; preds = %32, %33, %37
  br i1 %12, label %42, label %43

; <label>:42:                                     ; preds = %41
  br i1 %18, label %44, label %301

; <label>:43:                                     ; preds = %41
  br i1 %18, label %301, label %48

; <label>:44:                                     ; preds = %42
  %45 = getelementptr inbounds i8, i8* %0, i64 1
  %46 = getelementptr inbounds i8, i8* %1, i64 1
  %47 = load i8, i8* %45, align 1
  br label %48

; <label>:48:                                     ; preds = %43, %44
  %49 = phi i8 [ %47, %44 ], [ %6, %43 ]
  %50 = phi i8* [ %46, %44 ], [ %1, %43 ]
  %51 = phi i8* [ %45, %44 ], [ %0, %43 ]
  %52 = icmp eq i8 %49, 0
  br i1 %52, label %90, label %53

; <label>:53:                                     ; preds = %48
  br label %54

; <label>:54:                                     ; preds = %53, %83
  %55 = phi i8 [ %87, %83 ], [ %49, %53 ]
  %56 = phi i8* [ %86, %83 ], [ %51, %53 ]
  %57 = phi i8 [ %85, %83 ], [ 0, %53 ]
  %58 = phi i8* [ %84, %83 ], [ null, %53 ]
  %59 = and i8 %57, 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %73, label %61

; <label>:61:                                     ; preds = %54
  %62 = sext i8 %55 to i32
  %63 = add nsw i32 %62, -65
  %64 = icmp ult i32 %63, 58
  br i1 %64, label %65, label %70

; <label>:65:                                     ; preds = %61
  %66 = zext i32 %63 to i58
  %67 = lshr i58 -4227858433, %66
  %68 = and i58 %67, 1
  %69 = icmp eq i58 %68, 0
  br i1 %69, label %70, label %83

; <label>:70:                                     ; preds = %65, %61
  %71 = icmp eq i8 %55, 126
  %72 = select i1 %71, i8* %58, i8* null
  br label %83

; <label>:73:                                     ; preds = %54
  %74 = icmp eq i8 %55, 46
  br i1 %74, label %75, label %78

; <label>:75:                                     ; preds = %73
  %76 = icmp eq i8* %58, null
  %77 = select i1 %76, i8* %56, i8* %58
  br label %83

; <label>:78:                                     ; preds = %73
  %79 = sext i8 %55 to i32
  switch i32 %79, label %80 [
    i32 48, label %83
    i32 49, label %83
    i32 50, label %83
    i32 51, label %83
    i32 52, label %83
    i32 53, label %83
    i32 54, label %83
    i32 55, label %83
    i32 56, label %83
    i32 57, label %83
    i32 97, label %83
    i32 98, label %83
    i32 99, label %83
    i32 100, label %83
    i32 101, label %83
    i32 102, label %83
    i32 103, label %83
    i32 104, label %83
    i32 105, label %83
    i32 106, label %83
    i32 107, label %83
    i32 108, label %83
    i32 109, label %83
    i32 110, label %83
    i32 111, label %83
    i32 112, label %83
    i32 113, label %83
    i32 114, label %83
    i32 115, label %83
    i32 116, label %83
    i32 117, label %83
    i32 118, label %83
    i32 119, label %83
    i32 120, label %83
    i32 121, label %83
    i32 122, label %83
    i32 65, label %83
    i32 66, label %83
    i32 67, label %83
    i32 68, label %83
    i32 69, label %83
    i32 70, label %83
    i32 71, label %83
    i32 72, label %83
    i32 73, label %83
    i32 74, label %83
    i32 75, label %83
    i32 76, label %83
    i32 77, label %83
    i32 78, label %83
    i32 79, label %83
    i32 80, label %83
    i32 81, label %83
    i32 82, label %83
    i32 83, label %83
    i32 84, label %83
    i32 85, label %83
    i32 86, label %83
    i32 87, label %83
    i32 88, label %83
    i32 89, label %83
    i32 90, label %83
  ]

; <label>:80:                                     ; preds = %78
  %81 = icmp eq i8 %55, 126
  %82 = select i1 %81, i8* %58, i8* null
  br label %83

; <label>:83:                                     ; preds = %80, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %78, %75, %70, %65
  %84 = phi i
  %85 = phi i
  %86 = getelementptr inbounds i8, i8* %56, i64 1
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %89, label %54

; <label>:89:                                     ; preds = %83
  br label %90

; <label>:90:                                     ; preds = %89, %48
  %91 = phi i8* [ %51, %48 ], [ %86, %89 ]
  %92 = phi i8* [ null, %48 ], [ %84, %89 ]
  %93 = load i8, i8* %50, align 1
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %132, label %95

; <label>:95:                                     ; preds = %90
  br label %96

; <label>:96:                                     ; preds = %95, %125
  %97 = phi i8 [ %129, %125 ], [ %93, %95 ]
  %98 = phi i8* [ %128, %125 ], [ %50, %95 ]
  %99 = phi i8 [ %127, %125 ], [ 0, %95 ]
  %100 = phi i8* [ %126, %125 ], [ null, %95 ]
  %101 = and i8 %99, 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %115, label %103

; <label>:103:                                    ; preds = %96
  %104 = sext i8 %97 to i32
  %105 = add nsw i32 %104, -65
  %106 = icmp ult i32 %105, 58
  br i1 %106, label %107, label %112

; <label>:107:                                    ; preds = %103
  %108 = zext i32 %105 to i58
  %109 = lshr i58 -4227858433, %108
  %110 = and i58 %109, 1
  %111 = icmp eq i58 %110, 0
  br i1 %111, label %112, label %125

; <label>:112:                                    ; preds = %107, %103
  %113 = icmp eq i8 %97, 126
  %114 = select i1 %113, i8* %100, i8* null
  br label %125

; <label>:115:                                    ; preds = %96
  %116 = icmp eq i8 %97, 46
  br i1 %116, label %117, label %120

; <label>:117:                                    ; preds = %115
  %118 = icmp eq i8* %100, null
  %119 = select i1 %118, i8* %98, i8* %100
  br label %125

; <label>:120:                                    ; preds = %115
  %121 = sext i8 %97 to i32
  switch i32 %121, label %122 [
    i32 48, label %125
    i32 49, label %125
    i32 50, label %125
    i32 51, label %125
    i32 52, label %125
    i32 53, label %125
    i32 54, label %125
    i32 55, label %125
    i32 56, label %125
    i32 57, label %125
    i32 97, label %125
    i32 98, label %125
    i32 99, label %125
    i32 100, label %125
    i32 101, label %125
    i32 102, label %125
    i32 103, label %125
    i32 104, label %125
    i32 105, label %125
    i32 106, label %125
    i32 107, label %125
    i32 108, label %125
    i32 109, label %125
    i32 110, label %125
    i32 111, label %125
    i32 112, label %125
    i32 113, label %125
    i32 114, label %125
    i32 115, label %125
    i32 116, label %125
    i32 117, label %125
    i32 118, label %125
    i32 119, label %125
    i32 120, label %125
    i32 121, label %125
    i32 122, label %125
    i32 65, label %125
    i32 66, label %125
    i32 67, label %125
    i32 68, label %125
    i32 69, label %125
    i32 70, label %125
    i32 71, label %125
    i32 72, label %125
    i32 73, label %125
    i32 74, label %125
    i32 75, label %125
    i32 76, label %125
    i32 77, label %125
    i32 78, label %125
    i32 79, label %125
    i32 80, label %125
    i32 81, label %125
    i32 82, label %125
    i32 83, label %125
    i32 84, label %125
    i32 85, label %125
    i32 86, label %125
    i32 87, label %125
    i32 88, label %125
    i32 89, label %125
    i32 90, label %125
  ]

; <label>:122:                                    ; preds = %120
  %123 = icmp eq i8 %97, 126
  %124 = select i1 %123, i8* %100, i8* null
  br label %125

; <label>:125:                                    ; preds = %122, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %120, %117, %112, %107
  %126 = phi i
  %127 = phi i8 [ 0, %107 ], [ 0, %112 ], [ 1, %117 ], [ %99, %122 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ], [ %99, %120 ]
  %128 = getelementptr inbounds i8, i8* %98, i64 1
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %96

; <label>:131:                                    ; preds = %125
  br label %132

; <label>:132:                                    ; preds = %131, %90
  %133 = phi i8* [ %50, %90 ], [ %128, %131 ]
  %134 = phi i8* [ null, %90 ], [ %126, %131 ]
  %135 = icmp ne i8* %92, null
  %136 = select i1 %135, i8* %92, i8* %91
  %137 = ptrtoint i8* %136 to i64
  %138 = ptrtoint i8* %51 to i64
  %139 = sub i64 %137, %138
  %140 = icmp ne i8* %134, null
  %141 = select i1 %140, i8* %134, i8* %133
  %142 = ptrtoint i8* %141 to i64
  %143 = ptrtoint i8* %50 to i64
  %144 = sub i64 %142, %143
  %145 = or i1 %135, %140
  %146 = icmp eq i64 %139, %144
  %147 = and i1 %145, %146
  br i1 %147, label %148, label %156

; <label>:148:                                    ; preds = %132
  %149 = tail call i32 @strncmp(i8* %51, i8* %50, i64 %139) #16
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %156

; <label>:151:                                    ; preds = %148
  %152 = ptrtoint i8* %91 to i64
  %153 = sub i64 %152, %138
  %154 = ptrtoint i8* %133 to i64
  %155 = sub i64 %154, %143
  br label %156

; <label>:156:                                    ; preds = %132, %151, %148
  %157 = phi i64 [ %155, %151 ], [ %139, %148 ], [ %144, %132 ]
  %158 = phi i64 [ %153, %151 ], [ %139, %148 ], [ %139, %132 ]
  br label %159

; <label>:159:                                    ; preds = %293, %156
  %160 = phi i64 [ 0, %156 ], [ %281, %293 ]
  %161 = phi i64 [ 0, %156 ], [ %283, %293 ]
  %162 = icmp ult i64 %161, %158
  %163 = icmp ult i64 %160, %157
  %164 = or i1 %163, %162
  br i1 %164, label %165, label %295

; <label>:165:                                    ; preds = %159
  br label %166

; <label>:166:                                    ; preds = %165, %229
  %167 = phi i64 [ %231, %229 ], [ %160, %165 ]
  %168 = phi i64 [ %230, %229 ], [ %161, %165 ]
  %169 = icmp ult i64 %168, %158
  br i1 %169, label %170, label %176

; <label>:170:                                    ; preds = %166
  %171 = getelementptr inbounds i8, i8* %51, i64 %168
  %172 = load i8, i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = add nsw i32 %173, -48
  %175 = icmp ult i32 %174, 10
  br i1 %175, label %176, label %185

; <label>:176:                                    ; preds = %170, %166
  %177 = icmp ult i64 %167, %157
  br i1 %177, label %179, label %178

; <label>:178:                                    ; preds = %179, %176
  br label %234

; <label>:179:                                    ; preds = %176
  %180 = getelementptr inbounds i8, i8* %50, i64 %167
  %181 = load i8, i8* %180, align 1
  %182 = sext i8 %181 to i32
  %183 = add nsw i32 %182, -48
  %184 = icmp ult i32 %183, 10
  br i1 %184, label %178, label %185

; <label>:185:                                    ; preds = %179, %170
  %186 = icmp eq i64 %168, %158
  br i1 %186, label %205, label %187

; <label>:187:                                    ; preds = %185
  %188 = getelementptr inbounds i8, i8* %51, i64 %168
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nsw i32 %190, -48
  %192 = icmp ult i32 %191, 10
  br i1 %192, label %205, label %193

; <label>:193:                                    ; preds = %187
  %194 = add nsw i32 %190, -65
  %195 = icmp ult i32 %194, 58
  br i1 %195, label %196, label %201

; <label>:196:                                    ; preds = %193
  %197 = zext i32 %194 to i58
  %198 = lshr i58 -4227858433, %197
  %199 = and i58 %198, 1
  %200 = icmp eq i58 %199, 0
  br i1 %200, label %201, label %205

; <label>:201:                                    ; preds = %196, %193
  %202 = icmp eq i8 %189, 126
  %203 = or i32 %190, 256
  %204 = select i1 %202, i32 -1, i32 %203
  br label %205

; <label>:205:                                    ; preds = %201, %196, %187, %185
  %206 = phi i32 [ 0, %185 ], [ %204, %201 ], [ 0, %187 ], [ %190, %196 ]
  %207 = icmp eq i64 %167, %157
  br i1 %207, label %226, label %208

; <label>:208:                                    ; preds = %205
  %209 = getelementptr inbounds i8, i8* %50, i64 %167
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add nsw i32 %211, -48
  %213 = icmp ult i32 %212, 10
  br i1 %213, label %226, label %214

; <label>:214:                                    ; preds = %208
  %215 = add nsw i32 %211, -65
  %216 = icmp ult i32 %215, 58
  br i1 %216, label %217, label %222

; <label>:217:                                    ; preds = %214
  %218 = zext i32 %215 to i58
  %219 = lshr i58 -4227858433, %218
  %220 = and i58 %219, 1
  %221 = icmp eq i58 %220, 0
  br i1 %221, label %222, label %226

; <label>:222:                                    ; preds = %217, %214
  %223 = icmp eq i8 %210, 126
  %224 = or i32 %211, 256
  %225 = select i1 %223, i32 -1, i32 %224
  br label %226

; <label>:226:                                    ; preds = %222, %217, %208, %205
  %227 = phi i32 [ 0, %205 ], [ %225, %222 ], [ 0, %208 ], [ %211, %217 ]
  %228 = icmp eq i32 %206, %227
  br i1 %228, label %229, label %232

; <label>:229:                                    ; preds = %226
  %230 = add i64 %168, 1
  %231 = add i64 %167, 1
  br label %166

; <label>:232:                                    ; preds = %226
  %233 = sub nsw i32 %206, %227
  br label %297

; <label>:234:                                    ; preds = %178, %234
  %235 = phi i64 [ %239, %234 ], [ %168, %178 ]
  %236 = getelementptr inbounds i8, i8* %51, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 48
  %239 = add i64 %235, 1
  br i1 %238, label %234, label %240

; <label>:240:                                    ; preds = %234
  br label %241

; <label>:241:                                    ; preds = %240, %241
  %242 = phi i64 [ %246, %241 ], [ %167, %240 ]
  %243 = getelementptr inbounds i8, i8* %50, i64 %242
  %244 = load i8, i8* %243, align 1
  %245 = icmp eq i8 %244, 48
  %246 = add i64 %242, 1
  br i1 %245, label %241, label %247

; <label>:247:                                    ; preds = %241
  %248 = sext i8 %237 to i32
  %249 = add nsw i32 %248, -48
  %250 = icmp ult i32 %249, 10
  br i1 %250, label %251, label %279

; <label>:251:                                    ; preds = %247
  %252 = sext i8 %244 to i32
  %253 = add nsw i32 %252, -48
  %254 = icmp ult i32 %253, 10
  br i1 %254, label %255, label %279

; <label>:255:                                    ; preds = %251
  br label %256

; <label>:256:                                    ; preds = %255, %272
  %257 = phi i32 [ %275, %272 ], [ %252, %255 ]
  %258 = phi i64 [ %266, %272 ], [ %242, %255 ]
  %259 = phi i32 [ %264, %272 ], [ 0, %255 ]
  %260 = phi i64 [ %265, %272 ], [ %235, %255 ]
  %261 = phi i32 [ %269, %272 ], [ %248, %255 ]
  %262 = icmp eq i32 %259, 0
  %263 = sub nsw i32 %261, %257
  %264 = select i1 %262, i32 %263, i32 %259
  %265 = add i64 %260, 1
  %266 = add i64 %258, 1
  %267 = getelementptr inbounds i8, i8* %51, i64 %265
  %268 = load i8, i8* %267, align 1
  %269 = sext i8 %268 to i32
  %270 = add nsw i32 %269, -48
  %271 = icmp ult i32 %270, 10
  br i1 %271, label %272, label %278

; <label>:272:                                    ; preds = %256
  %273 = getelementptr inbounds i8, i8* %50, i64 %266
  %274 = load i8, i8* %273, align 1
  %275 = sext i8 %274 to i32
  %276 = add nsw i32 %275, -48
  %277 = icmp ult i32 %276, 10
  br i1 %277, label %256, label %278

; <label>:278:                                    ; preds = %256, %272
  br label %279

; <label>:279:                                    ; preds = %278, %251, %247
  %280 = phi i8 [ %237, %247 ], [ %237, %251 ], [ %268, %278 ]
  %281 = phi i64 [ %242, %247 ], [ %242, %251 ], [ %266, %278 ]
  %282 = phi i32 [ 0, %247 ], [ 0, %251 ], [ %264, %278 ]
  %283 = phi i64 [ %235, %247 ], [ %235, %251 ], [ %265, %278 ]
  %284 = sext i8 %280 to i32
  %285 = add nsw i32 %284, -48
  %286 = icmp ult i32 %285, 10
  br i1 %286, label %295, label %287

; <label>:287:                                    ; preds = %279
  %288 = getelementptr inbounds i8, i8* %50, i64 %281
  %289 = load i8, i8* %288, align 1
  %290 = sext i8 %289 to i32
  %291 = add nsw i32 %290, -48
  %292 = icmp ult i32 %291, 10
  br i1 %292, label %295, label %293

; <label>:293:                                    ; preds = %287
  %294 = icmp eq i32 %282, 0
  br i1 %294, label %159, label %295

; <label>:295:                                    ; preds = %293, %287, %279, %159
  %296 = phi i32 [ 0, %159 ], [ %282, %293 ], [ -1, %287 ], [ 1, %279 ]
  br label %297

; <label>:297:                                    ; preds = %295, %232
  %298 = phi i32 [ %233, %232 ], [ %296, %295 ]
  %299 = icmp eq i32 %298, 0
  %300 = select i1 %299, i32 %3, i32 %298
  br label %301

; <label>:301:                                    ; preds = %43, %42, %37, %28, %19, %13, %8, %5, %2, %297
  %302 = phi i32 [ %300, %297 ], [ 0, %2 ], [ -1, %5 ], [ 1, %8 ], [ -1, %13 ], [ 1, %19 ], [ -1, %28 ], [ 1, %37 ], [ -1, %42 ], [ 1, %43 ]
  ret i32 %302
}

; Function Attrs: nounwind sspstrong uwtable
define void @gettime(%struct.timespec*) local_unnamed_addr #0 {
  %2 = alloca %struct.timespec, align 8
  %3 = tail call i32 @clock_gettime(i32 0, %struct.timespec* %0) #13
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %15, label %5

; <label>:5:                                      ; preds = %1
  %6 = bitcast %struct.timespec* %2 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) #13
  %7 = call i32 @gettimeofday(%struct.timespec* nonnull %2, %struct.timezone* null) #13
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.timespec, %struct.timespec* %0, i64 0, i32 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = mul nsw i64 %12, 1000
  %14 = getelementptr inbounds %struct.timespec, %struct.timespec* %0, i64 0, i32 1
  store i64 %13, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) #13
  br label %15

; <label>:15:                                     ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare i32 @clock_gettime(i32, %struct.timespec*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timespec* nocapture, %struct.timezone* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define zeroext i1 @hard_locale(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @setlocale(i32 %0, i8* null) #13
  %3 = icmp eq i8* %2, null
  br i1 %3, label %15, label %4

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* %2, align 1
  %6 = icmp eq i8 %5, 67
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %4, %7
  %12 = tail call i32 @strcmp(i8* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.262, i64 0, i64 0)) #13
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11, %7
  br label %15

; <label>:15:                                     ; preds = %1, %11, %14
  %16 = phi i1 [ false, %14 ], [ true, %11 ], [ true, %1 ]
  ret i1 %16
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @hash_get_n_buckets(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @hash_get_n_buckets_used(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @hash_get_n_entries(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @hash_get_max_bucket_length(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %3 = load %struct.hash_entry*, %struct.hash_entry** %2, align 8
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = icmp ult %struct.hash_entry* %3, %5
  br i1 %6, label %7, label %65

; <label>:7:                                      ; preds = %1
  %8 = bitcast %struct.hash_entry* %5 to i8*
  %9 = ptrtoint %struct.hash_entry* %3 to i64
  %10 = xor i64 %9, -1
  %11 = getelementptr i8, i8* %8, i64 %10
  %12 = ptrtoint i8* %11 to i64
  %13 = lshr i64 %12, 4
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %33

; <label>:16:                                     ; preds = %7
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %30, label %21

; <label>:21:                                     ; preds = %17
  br label %22

; <label>:22:                                     ; preds = %22, %21
  %23 = phi %struct.hash_entry* [ %26, %22 ], [ %3, %21 ]
  %24 = phi i64 [ %28, %22 ], [ 1, %21 ]
  %25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i64 0, i32 1
  %26 = load %struct.hash_entry*, %struct.hash_entry** %25, align 8
  %27 = icmp eq %struct.hash_entry* %26, null
  %28 = add i64 %24, 1
  br i1 %27, label %29, label %22

; <label>:29:                                     ; preds = %22
  br label %30

; <label>:30:                                     ; preds = %29, %17
  %31 = phi i64 [ %24, %29 ], [ 0, %17 ]
  %32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i64 1
  br label %33

; <label>:33:                                     ; preds = %30, %7
  %34 = phi i64 [ 0, %7 ], [ %31, %30 ]
  %35 = phi %struct.hash_entry* [ %3, %7 ], [ %32, %30 ]
  %36 = phi i64 [ undef, %7 ], [ %31, %30 ]
  %37 = icmp eq i64 %13, 0
  br i1 %37, label %63, label %38

; <label>:38:                                     ; preds = %33
  br label %39

; <label>:39:                                     ; preds = %78, %38
  %40 = phi i64 [ %34, %38 ], [ %79, %78 ]
  %41 = phi %struct.hash_entry* [ %35, %38 ], [ %80, %78 ]
  %42 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %56, label %45

; <label>:45:                                     ; preds = %39
  br label %46

; <label>:46:                                     ; preds = %45, %46
  %47 = phi %struct.hash_entry* [ %50, %46 ], [ %41, %45 ]
  %48 = phi i64 [ %52, %46 ], [ 1, %45 ]
  %49 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %47, i64 0, i32 1
  %50 = load %struct.hash_entry*, %struct.hash_entry** %49, align 8
  %51 = icmp eq %struct.hash_entry* %50, null
  %52 = add i64 %48, 1
  br i1 %51, label %53, label %46

; <label>:53:                                     ; preds = %46
  %54 = icmp ugt i64 %48, %40
  %55 = select i1 %54, i64 %48, i64 %40
  br label %56

; <label>:56:                                     ; preds = %39, %53
  %57 = phi i64 [ %55, %53 ], [ %40, %39 ]
  %58 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i64 1
  %59 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %58, i64 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %78, label %67

; <label>:62:                                     ; preds = %78
  br label %63

; <label>:63:                                     ; preds = %33, %62
  %64 = phi i64 [ %36, %33 ], [ %79, %62 ]
  br label %65

; <label>:65:                                     ; preds = %63, %1
  %66 = phi i64 [ 0, %1 ], [ %64, %63 ]
  ret i64 %66

; <label>:67:                                     ; preds = %56
  br label %68

; <label>:68:                                     ; preds = %68, %67
  %69 = phi %struct.hash_entry* [ %72, %68 ], [ %58, %67 ]
  %70 = phi i64 [ %74, %68 ], [ 1, %67 ]
  %71 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %69, i64 0, i32 1
  %72 = load %struct.hash_entry*, %struct.hash_entry** %71, align 8
  %73 = icmp eq %struct.hash_entry* %72, null
  %74 = add i64 %70, 1
  br i1 %73, label %75, label %68

; <label>:75:                                     ; preds = %68
  %76 = icmp ugt i64 %70, %57
  %77 = select i1 %76, i64 %70, i64 %57
  br label %78

; <label>:78:                                     ; preds = %75, %56
  %79 = phi i64 [ %77, %75 ], [ %57, %56 ]
  %80 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i64 2
  %81 = icmp ult %struct.hash_entry* %80, %5
  br i1 %81, label %39, label %62
}

; Function Attrs: nounwind readonly sspstrong uwtable
define zeroext i1 @hash_table_ok(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %3 = load %struct.hash_entry*, %struct.hash_entry** %2, align 8
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = icmp ult %struct.hash_entry* %3, %5
  br i1 %6, label %7, label %70

; <label>:7:                                      ; preds = %1
  %8 = bitcast %struct.hash_entry* %5 to i8*
  %9 = ptrtoint %struct.hash_entry* %3 to i64
  %10 = xor i64 %9, -1
  %11 = getelementptr i8, i8* %8, i64 %10
  %12 = ptrtoint i8* %11 to i64
  %13 = lshr i64 %12, 4
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %34

; <label>:16:                                     ; preds = %7
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %30, label %21

; <label>:21:                                     ; preds = %17
  br label %22

; <label>:22:                                     ; preds = %22, %21
  %23 = phi i64 [ %25, %22 ], [ 0, %21 ]
  %24 = phi %struct.hash_entry* [ %27, %22 ], [ %3, %21 ]
  %25 = add i64 %23, 1
  %26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %24, i64 0, i32 1
  %27 = load %struct.hash_entry*, %struct.hash_entry** %26, align 8
  %28 = icmp eq %struct.hash_entry* %27, null
  br i1 %28, label %29, label %22

; <label>:29:                                     ; preds = %22
  br label %30

; <label>:30:                                     ; preds = %29, %17
  %31 = phi i64 [ 0, %17 ], [ 1, %29 ]
  %32 = phi i64 [ 0, %17 ], [ %25, %29 ]
  %33 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i64 1
  br label %34

; <label>:34:                                     ; preds = %30, %7
  %35 = phi i64 [ 0, %7 ], [ %32, %30 ]
  %36 = phi i64 [ 0, %7 ], [ %31, %30 ]
  %37 = phi %struct.hash_entry* [ %3, %7 ], [ %33, %30 ]
  %38 = phi i64 [ undef, %7 ], [ %31, %30 ]
  %39 = phi i64 [ undef, %7 ], [ %32, %30 ]
  %40 = icmp eq i64 %13, 0
  br i1 %40, label %67, label %41

; <label>:41:                                     ; preds = %34
  br label %42

; <label>:42:                                     ; preds = %93, %41
  %43 = phi i64 [ %35, %41 ], [ %95, %93 ]
  %44 = phi i64 [ %36, %41 ], [ %94, %93 ]
  %45 = phi %struct.hash_entry* [ %37, %41 ], [ %96, %93 ]
  %46 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %59, label %49

; <label>:49:                                     ; preds = %42
  br label %50

; <label>:50:                                     ; preds = %49, %50
  %51 = phi i64 [ %53, %50 ], [ %43, %49 ]
  %52 = phi %struct.hash_entry* [ %55, %50 ], [ %45, %49 ]
  %53 = add i64 %51, 1
  %54 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %52, i64 0, i32 1
  %55 = load %struct.hash_entry*, %struct.hash_entry** %54, align 8
  %56 = icmp eq %struct.hash_entry* %55, null
  br i1 %56, label %57, label %50

; <label>:57:                                     ; preds = %50
  %58 = add i64 %44, 1
  br label %59

; <label>:59:                                     ; preds = %57, %42
  %60 = phi i64 [ %44, %42 ], [ %58, %57 ]
  %61 = phi i64 [ %43, %42 ], [ %53, %57 ]
  %62 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i64 1
  %63 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %62, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %93, label %83

; <label>:66:                                     ; preds = %93
  br label %67

; <label>:67:                                     ; preds = %34, %66
  %68 = phi i64 [ %38, %34 ], [ %94, %66 ]
  %69 = phi i64 [ %39, %34 ], [ %95, %66 ]
  br label %70

; <label>:70:                                     ; preds = %67, %1
  %71 = phi i64 [ 0, %1 ], [ %68, %67 ]
  %72 = phi i64 [ 0, %1 ], [ %69, %67 ]
  %73 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %71, %74
  br i1 %75, label %76, label %80

; <label>:76:                                     ; preds = %70
  %77 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %72, %78
  br i1 %79, label %81, label %80

; <label>:80:                                     ; preds = %76, %70
  br label %81

; <label>:81:                                     ; preds = %76, %80
  %82 = phi i1 [ false, %80 ], [ true, %76 ]
  ret i1 %82

; <label>:83:                                     ; preds = %59
  br label %84

; <label>:84:                                     ; preds = %84, %83
  %85 = phi i64 [ %87, %84 ], [ %61, %83 ]
  %86 = phi %struct.hash_entry* [ %89, %84 ], [ %62, %83 ]
  %87 = add i64 %85, 1
  %88 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %86, i64 0, i32 1
  %89 = load %struct.hash_entry*, %struct.hash_entry** %88, align 8
  %90 = icmp eq %struct.hash_entry* %89, null
  br i1 %90, label %91, label %84

; <label>:91:                                     ; preds = %84
  %92 = add i64 %60, 1
  br label %93

; <label>:93:                                     ; preds = %91, %59
  %94 = phi i64 [ %60, %59 ], [ %92, %91 ]
  %95 = phi i64 [ %61, %59 ], [ %87, %91 ]
  %96 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i64 2
  %97 = icmp ult %struct.hash_entry* %96, %5
  br i1 %97, label %42, label %66
}

; Function Attrs: nounwind sspstrong uwtable
define void @hash_print_statistics(%struct.hash_table* nocapture readonly, %struct._IO_FILE*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %10 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %12 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %13 = icmp ult %struct.hash_entry* %10, %12
  br i1 %13, label %14, label %72

; <label>:14:                                     ; preds = %2
  %15 = bitcast %struct.hash_entry* %12 to i8*
  %16 = ptrtoint %struct.hash_entry* %10 to i64
  %17 = xor i64 %16, -1
  %18 = getelementptr i8, i8* %15, i64 %17
  %19 = ptrtoint i8* %18 to i64
  %20 = lshr i64 %19, 4
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %40

; <label>:23:                                     ; preds = %14
  br label %24

; <label>:24:                                     ; preds = %23
  %25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %37, label %28

; <label>:28:                                     ; preds = %24
  br label %29

; <label>:29:                                     ; preds = %29, %28
  %30 = phi %struct.hash_entry* [ %33, %29 ], [ %10, %28 ]
  %31 = phi i64 [ %35, %29 ], [ 1, %28 ]
  %32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i64 0, i32 1
  %33 = load %struct.hash_entry*, %struct.hash_entry** %32, align 8
  %34 = icmp eq %struct.hash_entry* %33, null
  %35 = add i64 %31, 1
  br i1 %34, label %36, label %29

; <label>:36:                                     ; preds = %29
  br label %37

; <label>:37:                                     ; preds = %36, %24
  %38 = phi i64 [ %31, %36 ], [ 0, %24 ]
  %39 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i64 1
  br label %40

; <label>:40:                                     ; preds = %37, %14
  %41 = phi i64 [ 0, %14 ], [ %38, %37 ]
  %42 = phi %struct.hash_entry* [ %10, %14 ], [ %39, %37 ]
  %43 = phi i64 [ undef, %14 ], [ %38, %37 ]
  %44 = icmp eq i64 %20, 0
  br i1 %44, label %70, label %45

; <label>:45:                                     ; preds = %40
  br label %46

; <label>:46:                                     ; preds = %93, %45
  %47 = phi i64 [ %41, %45 ], [ %94, %93 ]
  %48 = phi %struct.hash_entry* [ %42, %45 ], [ %95, %93 ]
  %49 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i64 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %63, label %52

; <label>:52:                                     ; preds = %46
  br label %53

; <label>:53:                                     ; preds = %52, %53
  %54 = phi %struct.hash_entry* [ %57, %53 ], [ %48, %52 ]
  %55 = phi i64 [ %59, %53 ], [ 1, %52 ]
  %56 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i64 0, i32 1
  %57 = load %struct.hash_entry*, %struct.hash_entry** %56, align 8
  %58 = icmp eq %struct.hash_entry* %57, null
  %59 = add i64 %55, 1
  br i1 %58, label %60, label %53

; <label>:60:                                     ; preds = %53
  %61 = icmp ugt i64 %55, %47
  %62 = select i1 %61, i64 %55, i64 %47
  br label %63

; <label>:63:                                     ; preds = %60, %46
  %64 = phi i64 [ %62, %60 ], [ %47, %46 ]
  %65 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i64 1
  %66 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %65, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %93, label %82

; <label>:69:                                     ; preds = %93
  br label %70

; <label>:70:                                     ; preds = %40, %69
  %71 = phi i64 [ %43, %40 ], [ %94, %69 ]
  br label %72

; <label>:72:                                     ; preds = %70, %2
  %73 = phi i64 [ 0, %2 ], [ %71, %70 ]
  %74 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %1, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.265, i64 0, i64 0), i64 %4) #13
  %75 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %1, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.266, i64 0, i64 0), i64 %6) #13
  %76 = uitofp i64 %8 to double
  %77 = fmul double %76, 1.000000e+02
  %78 = uitofp i64 %6 to double
  %79 = fdiv double %77, %78
  %80 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %1, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.267, i64 0, i64 0), i64 %8, double %79) #13
  %81 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %1, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3.268, i64 0, i64 0), i64 %73) #13
  ret void

; <label>:82:                                     ; preds = %63
  br label %83

; <label>:83:                                     ; preds = %83, %82
  %84 = phi %struct.hash_entry* [ %87, %83 ], [ %65, %82 ]
  %85 = phi i64 [ %89, %83 ], [ 1, %82 ]
  %86 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %84, i64 0, i32 1
  %87 = load %struct.hash_entry*, %struct.hash_entry** %86, align 8
  %88 = icmp eq %struct.hash_entry* %87, null
  %89 = add i64 %85, 1
  br i1 %88, label %90, label %83

; <label>:90:                                     ; preds = %83
  %91 = icmp ugt i64 %85, %64
  %92 = select i1 %91, i64 %85, i64 %64
  br label %93

; <label>:93:                                     ; preds = %90, %63
  %94 = phi i64 [ %92, %90 ], [ %64, %63 ]
  %95 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i64 2
  %96 = icmp ult %struct.hash_entry* %95, %12
  br i1 %96, label %46, label %69
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @hash_lookup(%struct.hash_table* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %4 = load i64 (i8*, i64)*, i64 (i8*, i64)** %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = tail call i64 %4(i8* %1, i64 %6) #13
  %8 = load i64, i64* %5, align 8
  %9 = icmp ult i64 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %13 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 %7
  %15 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  %18 = icmp eq %struct.hash_entry* %14, null
  %19 = or i1 %17, %18
  br i1 %19, label %42, label %20

; <label>:20:                                     ; preds = %11
  %21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 7
  %22 = icmp eq i8* %16, %1
  br i1 %22, label %42, label %23

; <label>:23:                                     ; preds = %20
  br label %24

; <label>:24:                                     ; preds = %23, %36
  %25 = phi %struct.hash_entry* [ %34, %36 ], [ %14, %23 ]
  %26 = phi i8* [ %38, %36 ], [ %16, %23 ]
  %27 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %21, align 8
  %28 = tail call zeroext i1 %27(i8* %1, i8* %26) #13
  br i1 %28, label %29, label %32

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  br label %42

; <label>:32:                                     ; preds = %24
  %33 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i64 0, i32 1
  %34 = load %struct.hash_entry*, %struct.hash_entry** %33, align 8
  %35 = icmp eq %struct.hash_entry* %34, null
  br i1 %35, label %40, label %36

; <label>:36:                                     ; preds = %32
  %37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, %1
  br i1 %39, label %40, label %24

; <label>:40:                                     ; preds = %32, %36
  %41 = phi i8* [ null, %32 ], [ %1, %36 ]
  br label %42

; <label>:42:                                     ; preds = %40, %20, %29, %11
  %43 = phi i8* [ null, %11 ], [ %31, %29 ], [ %1, %20 ], [ %41, %40 ]
  ret i8* %43
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i8* @hash_get_first(%struct.hash_table* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %23, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %7 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %9 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %10 = icmp ult %struct.hash_entry* %7, %9
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %5
  br label %16

; <label>:12:                                     ; preds = %16
  %13 = icmp ult %struct.hash_entry* %21, %9
  br i1 %13, label %16, label %14

; <label>:14:                                     ; preds = %12
  br label %15

; <label>:15:                                     ; preds = %14, %5
  tail call void @abort() #15
  unreachable

; <label>:16:                                     ; preds = %11, %12
  %17 = phi %struct.hash_entry* [ %21, %12 ], [ %7, %11 ]
  %18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  %21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i64 1
  br i1 %20, label %12, label %22

; <label>:22:                                     ; preds = %16
  br label %23

; <label>:23:                                     ; preds = %22, %1
  %24 = phi i8* [ null, %1 ], [ %19, %22 ]
  ret i8* %24
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @hash_get_next(%struct.hash_table* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %4 = load i64 (i8*, i64)*, i64 (i8*, i64)** %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = tail call i64 %4(i8* %1, i64 %6) #13
  %8 = load i64, i64* %5, align 8
  %9 = icmp ult i64 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %13 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 %7
  br label %15

; <label>:15:                                     ; preds = %27, %11
  %16 = phi %struct.hash_entry* [ %14, %11 ], [ %21, %27 ]
  %17 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, %1
  %20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i64 0, i32 1
  %21 = load %struct.hash_entry*, %struct.hash_entry** %20, align 8
  %22 = icmp eq %struct.hash_entry* %21, null
  br i1 %19, label %23, label %27

; <label>:23:                                     ; preds = %15
  br i1 %22, label %29, label %24

; <label>:24:                                     ; preds = %23
  %25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %42

; <label>:27:                                     ; preds = %15
  br i1 %22, label %28, label %15

; <label>:28:                                     ; preds = %27
  br label %29

; <label>:29:                                     ; preds = %28, %23
  %30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %31 = load %struct.hash_entry*, %struct.hash_entry** %30, align 8
  br label %32

; <label>:32:                                     ; preds = %29, %36
  %33 = phi %struct.hash_entry* [ %34, %36 ], [ %14, %29 ]
  %34 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i64 1
  %35 = icmp ult %struct.hash_entry* %34, %31
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %32
  %37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %32, label %40

; <label>:40:                                     ; preds = %36, %32
  %41 = phi i8* [ null, %32 ], [ %38, %36 ]
  br label %42

; <label>:42:                                     ; preds = %40, %24
  %43 = phi i8* [ %26, %24 ], [ %41, %40 ]
  ret i8* %43
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @hash_get_entries(%struct.hash_table* nocapture readonly, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %8 = icmp ult %struct.hash_entry* %5, %7
  br i1 %8, label %9, label %42

; <label>:9:                                      ; preds = %3
  br label %10

; <label>:10:                                     ; preds = %9, %35
  %11 = phi %struct.hash_entry* [ %36, %35 ], [ %7, %9 ]
  %12 = phi %struct.hash_entry* [ %38, %35 ], [ %5, %9 ]
  %13 = phi i64 [ %37, %35 ], [ 0, %9 ]
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  %17 = icmp eq %struct.hash_entry* %12, null
  %18 = or i1 %16, %17
  br i1 %18, label %35, label %19

; <label>:19:                                     ; preds = %10
  br label %20

; <label>:20:                                     ; preds = %19, %24
  %21 = phi %struct.hash_entry* [ %31, %24 ], [ %12, %19 ]
  %22 = phi i64 [ %27, %24 ], [ %13, %19 ]
  %23 = icmp ult i64 %22, %2
  br i1 %23, label %24, label %40

; <label>:24:                                     ; preds = %20
  %25 = bitcast %struct.hash_entry* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %22, 1
  %28 = getelementptr inbounds i8*, i8** %1, i64 %22
  %29 = bitcast i8** %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i64 0, i32 1
  %31 = load %struct.hash_entry*, %struct.hash_entry** %30, align 8
  %32 = icmp eq %struct.hash_entry* %31, null
  br i1 %32, label %33, label %20

; <label>:33:                                     ; preds = %24
  %34 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  br label %35

; <label>:35:                                     ; preds = %33, %10
  %36 = phi %struct.hash_entry* [ %11, %10 ], [ %34, %33 ]
  %37 = phi i64 [ %13, %10 ], [ %27, %33 ]
  %38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i64 1
  %39 = icmp ult %struct.hash_entry* %38, %36
  br i1 %39, label %10, label %41

; <label>:40:                                     ; preds = %20
  br label %42

; <label>:41:                                     ; preds = %35
  br label %42

; <label>:42:                                     ; preds = %41, %40, %3
  %43 = phi i64 [ 0, %3 ], [ %22, %40 ], [ %37, %41 ]
  ret i64 %43
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @hash_do_for_each(%struct.hash_table* nocapture readonly, i1 (i8*, i8*)* nocapture, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %8 = icmp ult %struct.hash_entry* %5, %7
  br i1 %8, label %9, label %43

; <label>:9:                                      ; preds = %3
  br label %10

; <label>:10:                                     ; preds = %9, %35
  %11 = phi %struct.hash_entry* [ %36, %35 ], [ %7, %9 ]
  %12 = phi %struct.hash_entry* [ %38, %35 ], [ %5, %9 ]
  %13 = phi i64 [ %37, %35 ], [ 0, %9 ]
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  %17 = icmp eq %struct.hash_entry* %12, null
  %18 = or i1 %16, %17
  br i1 %18, label %35, label %19

; <label>:19:                                     ; preds = %10
  %20 = tail call zeroext i1 %1(i8* %15, i8* %2) #13
  br i1 %20, label %21, label %41

; <label>:21:                                     ; preds = %19
  br label %22

; <label>:22:                                     ; preds = %21, %29
  %23 = phi i64 [ %25, %29 ], [ %13, %21 ]
  %24 = phi %struct.hash_entry* [ %27, %29 ], [ %12, %21 ]
  %25 = add i64 %23, 1
  %26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %24, i64 0, i32 1
  %27 = load %struct.hash_entry*, %struct.hash_entry** %26, align 8
  %28 = icmp eq %struct.hash_entry* %27, null
  br i1 %28, label %33, label %29

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = tail call zeroext i1 %1(i8* %31, i8* %2) #13
  br i1 %32, label %22, label %40

; <label>:33:                                     ; preds = %22
  %34 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  br label %35

; <label>:35:                                     ; preds = %33, %10
  %36 = phi %struct.hash_entry* [ %11, %10 ], [ %34, %33 ]
  %37 = phi i64 [ %13, %10 ], [ %25, %33 ]
  %38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i64 1
  %39 = icmp ult %struct.hash_entry* %38, %36
  br i1 %39, label %10, label %41

; <label>:40:                                     ; preds = %29
  br label %43

; <label>:41:                                     ; preds = %19, %35
  %42 = phi i64 [ %37, %35 ], [ %13, %19 ]
  br label %43

; <label>:43:                                     ; preds = %41, %40, %3
  %44 = phi i64 [ 0, %3 ], [ %25, %40 ], [ %42, %41 ]
  ret i64 %44
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @hash_string(i8* nocapture readonly, i64) local_unnamed_addr #8 {
  %3 = load i8, i8* %0, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %18, label %5

; <label>:5:                                      ; preds = %2
  br label %6

; <label>:6:                                      ; preds = %5, %6
  %7 = phi i8 [ %15, %6 ], [ %3, %5 ]
  %8 = phi i8* [ %14, %6 ], [ %0, %5 ]
  %9 = phi i64 [ %13, %6 ], [ 0, %5 ]
  %10 = mul i64 %9, 31
  %11 = zext i8 %7 to i64
  %12 = add i64 %11, %10
  %13 = urem i64 %12, %1
  %14 = getelementptr inbounds i8, i8* %8, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %6

; <label>:17:                                     ; preds = %6
  br label %18

; <label>:18:                                     ; preds = %17, %2
  %19 = phi i64 [ 0, %2 ], [ %13, %17 ]
  ret i64 %19
}

; Function Attrs: nounwind sspstrong uwtable
define void @hash_reset_tuning(%struct.hash_tuning* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.hash_tuning* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast (%struct.hash_tuning* @default_tuning to i8*), i64 20, i32 4, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define noalias %struct.hash_table* @hash_initialize(i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*) local_unnamed_addr #0 {
  %6 = icmp eq i64 (i8*, i64)* %2, null
  %7 = select i1 %6, i64 (i8*, i64)* @raw_hasher, i64 (i8*, i64)* %2
  %8 = icmp eq i1 (i8*, i8*)* %3, null
  %9 = select i1 %8, i1 (i8*, i8*)* @raw_comparator, i1 (i8*, i8*)* %3
  %10 = tail call noalias i8* @malloc(i64 80) #13
  %11 = bitcast i8* %10 to %struct.hash_table*
  %12 = icmp eq i8* %10, null
  br i1 %12, label %110, label %13

; <label>:13:                                     ; preds = %5
  %14 = icmp eq %struct.hash_tuning* %1, null
  %15 = select i1 %14, %struct.hash_tuning* @default_tuning, %struct.hash_tuning* %1
  %16 = getelementptr inbounds i8, i8* %10, i64 40
  %17 = bitcast i8* %16 to %struct.hash_tuning**
  store %struct.hash_tuning* %15, %struct.hash_tuning** %17, align 8
  %18 = icmp eq %struct.hash_tuning* %15, @default_tuning
  br i1 %18, label %42, label %19

; <label>:19:                                     ; preds = %13
  %20 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = fcmp ogt float %21, 0x3FB99999A0000000
  %23 = fcmp olt float %21, 0x3FECCCCCC0000000
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %109

; <label>:25:                                     ; preds = %19
  %26 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 3
  %27 = load float, float* %26, align 4
  %28 = fcmp ogt float %27, 0x3FF19999A0000000
  br i1 %28, label %29, label %109

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = fcmp ult float %31, 0.000000e+00
  br i1 %32, label %109, label %33

; <label>:33:                                     ; preds = %29
  %34 = fadd float %31, 0x3FB99999A0000000
  %35 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fcmp olt float %34, %36
  %38 = fcmp ole float %36, 1.000000e+00
  %39 = and i1 %38, %37
  %40 = fcmp olt float %34, %21
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %109

; <label>:42:                                     ; preds = %13, %33
  %43 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 4
  %44 = load i8, i8* %43, align 4
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %53

; <label>:46:                                     ; preds = %42
  %47 = uitofp i64 %0 to float
  %48 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %15, i64 0, i32 2
  %49 = load float, float* %48, align 4
  %50 = fdiv float %47, %49
  %51 = fcmp ult float %50, 0x43F0000000000000
  %52 = fptoui float %50 to i64
  br i1 %51, label %53, label %109

; <label>:53:                                     ; preds = %46, %42
  %54 = phi i64 [ %0, %42 ], [ %52, %46 ]
  %55 = icmp ugt i64 %54, 10
  %56 = select i1 %55, i64 %54, i64 10
  %57 = or i64 %56, 1
  %58 = icmp eq i64 %57, -1
  br i1 %58, label %109, label %59

; <label>:59:                                     ; preds = %53
  br label %60

; <label>:60:                                     ; preds = %59, %81
  %61 = phi i64 [ %82, %81 ], [ %57, %59 ]
  %62 = icmp ugt i64 %61, 9
  br i1 %62, label %63, label %77

; <label>:63:                                     ; preds = %60
  br label %64

; <label>:64:                                     ; preds = %63, %69
  %65 = phi i64 [ %72, %69 ], [ 9, %63 ]
  %66 = phi i64 [ %73, %69 ], [ 3, %63 ]
  %67 = urem i64 %61, %66
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %75, label %69

; <label>:69:                                     ; preds = %64
  %70 = shl i64 %66, 2
  %71 = add i64 %65, 4
  %72 = add i64 %71, %70
  %73 = add i64 %66, 2
  %74 = icmp ult i64 %72, %61
  br i1 %74, label %64, label %75

; <label>:75:                                     ; preds = %64, %69
  %76 = phi i64 [ %73, %69 ], [ %66, %64 ]
  br label %77

; <label>:77:                                     ; preds = %75, %60
  %78 = phi i64 [ 3, %60 ], [ %76, %75 ]
  %79 = urem i64 %61, %78
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %84

; <label>:81:                                     ; preds = %77
  %82 = add i64 %61, 2
  %83 = icmp eq i64 %82, -1
  br i1 %83, label %108, label %60

; <label>:84:                                     ; preds = %77
  %85 = icmp ugt i64 %61, 1152921504606846975
  br i1 %85, label %109, label %86

; <label>:86:                                     ; preds = %84
  %87 = getelementptr inbounds i8, i8* %10, i64 16
  %88 = bitcast i8* %87 to i64*
  store i64 %61, i64* %88, align 8
  %89 = icmp eq i64 %61, 0
  br i1 %89, label %109, label %90

; <label>:90:                                     ; preds = %86
  %91 = tail call i8* @rpl_calloc(i64 %61, i64 16) #13
  %92 = bitcast i8* %10 to i8**
  store i8* %91, i8** %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %109, label %94

; <label>:94:                                     ; preds = %90
  %95 = bitcast i8* %91 to %struct.hash_entry*
  %96 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %95, i64 %61
  %97 = getelementptr inbounds i8, i8* %10, i64 8
  %98 = bitcast i8* %97 to %struct.hash_entry**
  store %struct.hash_entry* %96, %struct.hash_entry** %98, align 8
  %99 = getelementptr inbounds i8, i8* %10, i64 24
  %100 = getelementptr inbounds i8, i8* %10, i64 48
  %101 = bitcast i8* %100 to i64 (i8*, i64)**
  call void @llvm.memset.p0i8.i64(i8* %99, i8 0, i64 16, i32 8, i1 false)
  store i64 (i8*, i64)* %7, i64 (i8*, i64)** %101, align 8
  %102 = getelementptr inbounds i8, i8* %10, i64 56
  %103 = bitcast i8* %102 to i1 (i8*, i8*)**
  store i1 (i8*, i8*)* %9, i1 (i8*, i8*)** %103, align 8
  %104 = getelementptr inbounds i8, i8* %10, i64 64
  %105 = bitcast i8* %104 to void (i8*)**
  store void (i8*)* %4, void (i8*)** %105, align 8
  %106 = getelementptr inbounds i8, i8* %10, i64 72
  %107 = bitcast i8* %106 to %struct.hash_entry**
  store %struct.hash_entry* null, %struct.hash_entry** %107, align 8
  br label %110

; <label>:108:                                    ; preds = %81
  br label %109

; <label>:109:                                    ; preds = %108, %84, %46, %53, %33, %29, %25, %19, %86, %90
  tail call void @free(i8* nonnull %10) #13
  br label %110

; <label>:110:                                    ; preds = %5, %109, %94
  %111 = phi %struct.hash_table* [ null, %109 ], [ %11, %94 ], [ null, %5 ]
  ret %struct.hash_table* %111
}

; Function Attrs: nounwind readnone sspstrong uwtable
define internal i64 @raw_hasher(i8*, i64) #12 {
  %3 = ptrtoint i8* %0 to i64
  %4 = lshr i64 %3, 3
  %5 = shl i64 %3, 61
  %6 = or i64 %5, %4
  %7 = urem i64 %6, %1
  ret i64 %7
}

; Function Attrs: nounwind readnone sspstrong uwtable
define internal zeroext i1 @raw_comparator(i8* readnone, i8* readnone) #12 {
  %3 = icmp eq i8* %0, %1
  ret i1 %3
}

; Function Attrs: nounwind sspstrong uwtable
define void @hash_clear(%struct.hash_table* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %3 = load %struct.hash_entry*, %struct.hash_entry** %2, align 8
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = icmp ult %struct.hash_entry* %3, %5
  br i1 %6, label %7, label %54

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 8
  %9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %10 = bitcast %struct.hash_entry** %9 to i64*
  br label %11

; <label>:11:                                     ; preds = %7, %49
  %12 = phi %struct.hash_entry* [ %5, %7 ], [ %50, %49 ]
  %13 = phi %struct.hash_entry* [ %3, %7 ], [ %51, %49 ]
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %49, label %17

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 0, i32 1
  %19 = load %struct.hash_entry*, %struct.hash_entry** %18, align 8
  %20 = icmp eq %struct.hash_entry* %19, null
  %21 = load void (i8*)*, void (i8*)** %8, align 8
  %22 = icmp ne void (i8*)* %21, null
  br i1 %20, label %41, label %23

; <label>:23:                                     ; preds = %17
  br label %24

; <label>:24:                                     ; preds = %23, %32
  %25 = phi i1 [ %39, %32 ], [ %22, %23 ]
  %26 = phi void (i8*)* [ %33, %32 ], [ %21, %23 ]
  %27 = phi %struct.hash_entry* [ %35, %32 ], [ %19, %23 ]
  %28 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i64 0, i32 0
  br i1 %25, label %29, label %32

; <label>:29:                                     ; preds = %24
  %30 = load i8*, i8** %28, align 8
  tail call void %26(i8* %30) #13
  %31 = load void (i8*)*, void (i8*)** %8, align 8
  br label %32

; <label>:32:                                     ; preds = %24, %29
  %33 = phi void (i8*)* [ %31, %29 ], [ %26, %24 ]
  store i8* null, i8** %28, align 8
  %34 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i64 0, i32 1
  %35 = load %struct.hash_entry*, %struct.hash_entry** %34, align 8
  %36 = load i64, i64* %10, align 8
  %37 = bitcast %struct.hash_entry** %34 to i64*
  store i64 %36, i64* %37, align 8
  store %struct.hash_entry* %27, %struct.hash_entry** %9, align 8
  %38 = icmp eq %struct.hash_entry* %35, null
  %39 = icmp ne void (i8*)* %33, null
  br i1 %38, label %40, label %24

; <label>:40:                                     ; preds = %32
  br label %41

; <label>:41:                                     ; preds = %40, %17
  %42 = phi void (i8*)* [ %21, %17 ], [ %33, %40 ]
  %43 = phi i1 [ %22, %17 ], [ %39, %40 ]
  br i1 %43, label %44, label %46

; <label>:44:                                     ; preds = %41
  %45 = load i8*, i8** %14, align 8
  tail call void %42(i8* %45) #13
  br label %46

; <label>:46:                                     ; preds = %44, %41
  %47 = bitcast %struct.hash_entry* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %47, i8 0, i64 16, i32 8, i1 false)
  %48 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  br label %49

; <label>:49:                                     ; preds = %11, %46
  %50 = phi %struct.hash_entry* [ %12, %11 ], [ %48, %46 ]
  %51 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 1
  %52 = icmp ult %struct.hash_entry* %51, %50
  br i1 %52, label %11, label %53

; <label>:53:                                     ; preds = %49
  br label %54

; <label>:54:                                     ; preds = %53, %1
  %55 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %56 = bitcast i64* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @hash_free(%struct.hash_table* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 8
  %3 = load void (i8*)*, void (i8*)** %2, align 8
  %4 = icmp eq void (i8*)* %3, null
  br i1 %4, label %46, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %46, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %11 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %13 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %14 = icmp ult %struct.hash_entry* %11, %13
  br i1 %14, label %15, label %46

; <label>:15:                                     ; preds = %9
  br label %16

; <label>:16:                                     ; preds = %15, %41
  %17 = phi %struct.hash_entry* [ %42, %41 ], [ %13, %15 ]
  %18 = phi %struct.hash_entry* [ %43, %41 ], [ %11, %15 ]
  %19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  %22 = icmp eq %struct.hash_entry* %18, null
  %23 = or i1 %21, %22
  br i1 %23, label %41, label %24

; <label>:24:                                     ; preds = %16
  %25 = load void (i8*)*, void (i8*)** %2, align 8
  tail call void %25(i8* %20) #13
  %26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 0, i32 1
  %27 = load %struct.hash_entry*, %struct.hash_entry** %26, align 8
  %28 = icmp eq %struct.hash_entry* %27, null
  br i1 %28, label %39, label %29

; <label>:29:                                     ; preds = %24
  br label %30

; <label>:30:                                     ; preds = %29, %30
  %31 = phi %struct.hash_entry* [ %36, %30 ], [ %27, %29 ]
  %32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %31, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = load void (i8*)*, void (i8*)** %2, align 8
  tail call void %34(i8* %33) #13
  %35 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %31, i64 0, i32 1
  %36 = load %struct.hash_entry*, %struct.hash_entry** %35, align 8
  %37 = icmp eq %struct.hash_entry* %36, null
  br i1 %37, label %38, label %30

; <label>:38:                                     ; preds = %30
  br label %39

; <label>:39:                                     ; preds = %38, %24
  %40 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %16
  %42 = phi %struct.hash_entry* [ %40, %39 ], [ %17, %16 ]
  %43 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 1
  %44 = icmp ult %struct.hash_entry* %43, %42
  br i1 %44, label %16, label %45

; <label>:45:                                     ; preds = %41
  br label %46

; <label>:46:                                     ; preds = %45, %9, %5, %1
  %47 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %48 = load %struct.hash_entry*, %struct.hash_entry** %47, align 8
  %49 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 1
  %50 = load %struct.hash_entry*, %struct.hash_entry** %49, align 8
  %51 = icmp ult %struct.hash_entry* %48, %50
  br i1 %51, label %52, label %73

; <label>:52:                                     ; preds = %46
  br label %53

; <label>:53:                                     ; preds = %52, %68
  %54 = phi %struct.hash_entry* [ %69, %68 ], [ %50, %52 ]
  %55 = phi %struct.hash_entry* [ %70, %68 ], [ %48, %52 ]
  %56 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i64 0, i32 1
  %57 = load %struct.hash_entry*, %struct.hash_entry** %56, align 8
  %58 = icmp eq %struct.hash_entry* %57, null
  br i1 %58, label %68, label %59

; <label>:59:                                     ; preds = %53
  br label %60

; <label>:60:                                     ; preds = %59, %60
  %61 = phi %struct.hash_entry* [ %64, %60 ], [ %57, %59 ]
  %62 = bitcast %struct.hash_entry* %61 to i8*
  %63 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %61, i64 0, i32 1
  %64 = load %struct.hash_entry*, %struct.hash_entry** %63, align 8
  tail call void @free(i8* %62) #13
  %65 = icmp eq %struct.hash_entry* %64, null
  br i1 %65, label %66, label %60

; <label>:66:                                     ; preds = %60
  %67 = load %struct.hash_entry*, %struct.hash_entry** %49, align 8
  br label %68

; <label>:68:                                     ; preds = %66, %53
  %69 = phi %struct.hash_entry* [ %67, %66 ], [ %54, %53 ]
  %70 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i64 1
  %71 = icmp ult %struct.hash_entry* %70, %69
  br i1 %71, label %53, label %72

; <label>:72:                                     ; preds = %68
  br label %73

; <label>:73:                                     ; preds = %72, %46
  %74 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %75 = load %struct.hash_entry*, %struct.hash_entry** %74, align 8
  %76 = icmp eq %struct.hash_entry* %75, null
  br i1 %76, label %85, label %77

; <label>:77:                                     ; preds = %73
  br label %78

; <label>:78:                                     ; preds = %77, %78
  %79 = phi %struct.hash_entry* [ %82, %78 ], [ %75, %77 ]
  %80 = bitcast %struct.hash_entry* %79 to i8*
  %81 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %79, i64 0, i32 1
  %82 = load %struct.hash_entry*, %struct.hash_entry** %81, align 8
  tail call void @free(i8* %80) #13
  %83 = icmp eq %struct.hash_entry* %82, null
  br i1 %83, label %84, label %78

; <label>:84:                                     ; preds = %78
  br label %85

; <label>:85:                                     ; preds = %84, %73
  %86 = bitcast %struct.hash_table* %0 to i8**
  %87 = load i8*, i8** %86, align 8
  tail call void @free(i8* %87) #13
  %88 = bitcast %struct.hash_table* %0 to i8*
  tail call void @free(i8* %88) #13
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define zeroext i1 @hash_rehash(%struct.hash_table* nocapture, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.hash_table, align 16
  %4 = bitcast %struct.hash_table* %3 to i8*
  call void @llvm.lifetime.start(i64 80, i8* nonnull %4) #13
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 5
  %6 = load %struct.hash_tuning*, %struct.hash_tuning** %5, align 8
  %7 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %6, i64 0, i32 4
  %8 = load i8, i8* %7, align 4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %2
  %11 = uitofp i64 %1 to float
  %12 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %6, i64 0, i32 2
  %13 = load float, float* %12, align 4
  %14 = fdiv float %11, %13
  %15 = fcmp ult float %14, 0x43F0000000000000
  %16 = fptoui float %14 to i64
  br i1 %15, label %17, label %152

; <label>:17:                                     ; preds = %10, %2
  %18 = phi i64 [ %1, %2 ], [ %16, %10 ]
  %19 = icmp ugt i64 %18, 10
  %20 = select i1 %19, i64 %18, i64 10
  %21 = or i64 %20, 1
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %152, label %23

; <label>:23:                                     ; preds = %17
  br label %24

; <label>:24:                                     ; preds = %23, %45
  %25 = phi i64 [ %46, %45 ], [ %21, %23 ]
  %26 = icmp ugt i64 %25, 9
  br i1 %26, label %27, label %41

; <label>:27:                                     ; preds = %24
  br label %28

; <label>:28:                                     ; preds = %27, %33
  %29 = phi i64 [ %36, %33 ], [ 9, %27 ]
  %30 = phi i64 [ %37, %33 ], [ 3, %27 ]
  %31 = urem i64 %25, %30
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %39, label %33

; <label>:33:                                     ; preds = %28
  %34 = shl i64 %30, 2
  %35 = add i64 %29, 4
  %36 = add i64 %35, %34
  %37 = add i64 %30, 2
  %38 = icmp ult i64 %36, %25
  br i1 %38, label %28, label %39

; <label>:39:                                     ; preds = %28, %33
  %40 = phi i64 [ %37, %33 ], [ %30, %28 ]
  br label %41

; <label>:41:                                     ; preds = %39, %24
  %42 = phi i64 [ 3, %24 ], [ %40, %39 ]
  %43 = urem i64 %25, %42
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %41
  %46 = add i64 %25, 2
  %47 = icmp eq i64 %46, -1
  br i1 %47, label %151, label %24

; <label>:48:                                     ; preds = %41
  %49 = add i64 %25, -1
  %50 = icmp ugt i64 %49, 1152921504606846974
  br i1 %50, label %152, label %51

; <label>:51:                                     ; preds = %48
  %52 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %25, %53
  br i1 %54, label %152, label %55

; <label>:55:                                     ; preds = %51
  %56 = tail call i8* @rpl_calloc(i64 %25, i64 16) #13
  %57 = bitcast %struct.hash_table* %3 to i8**
  store i8* %56, i8** %57, align 16
  %58 = icmp eq i8* %56, null
  br i1 %58, label %152, label %59

; <label>:59:                                     ; preds = %55
  %60 = bitcast i8* %56 to %struct.hash_entry*
  %61 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 2
  store i64 %25, i64* %61, align 16
  %62 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %60, i64 %25
  %63 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 1
  store %struct.hash_entry* %62, %struct.hash_entry** %63, align 8
  %64 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 3
  %65 = bitcast i64* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* %65, i8 0, i64 16, i32 8, i1 false)
  %66 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 5
  %67 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %68 = bitcast %struct.hash_tuning** %5 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 8
  %70 = bitcast %struct.hash_tuning** %66 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %70, align 8
  %71 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 7
  %72 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 7
  %73 = bitcast i1 (i8*, i8*)** %71 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 8
  %75 = bitcast i1 (i8*, i8*)** %72 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %75, align 8
  %76 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %77 = bitcast %struct.hash_entry** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 9
  %80 = bitcast %struct.hash_entry** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = call fastcc zeroext i1 @transfer_entries(%struct.hash_table* nonnull %3, %struct.hash_table* nonnull %0, i1 zeroext false)
  br i1 %81, label %82, label %92

; <label>:82:                                     ; preds = %59
  %83 = bitcast %struct.hash_table* %0 to i8**
  %84 = load i8*, i8** %83, align 8
  tail call void @free(i8* %84) #13
  %85 = bitcast %struct.hash_table* %3 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 16
  %87 = bitcast %struct.hash_table* %0 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %87, align 8
  %88 = bitcast i64* %61 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 16
  %90 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %90, align 8
  %91 = load i64, i64* %80, align 8
  store i64 %91, i64* %77, align 8
  br label %152

; <label>:92:                                     ; preds = %59
  %93 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 0
  %94 = load i64, i64* %80, align 8
  store i64 %94, i64* %77, align 8
  %95 = load %struct.hash_entry*, %struct.hash_entry** %93, align 16
  %96 = load %struct.hash_entry*, %struct.hash_entry** %63, align 8
  %97 = icmp ult %struct.hash_entry* %95, %96
  br i1 %97, label %98, label %146

; <label>:98:                                     ; preds = %92
  %99 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %100 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  br label %101

; <label>:101:                                    ; preds = %142, %98
  %102 = phi %struct.hash_entry* [ %95, %98 ], [ %143, %142 ]
  %103 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %102, i64 0, i32 0
  %104 = load i8*, i8** %103, align 8
  %105 = icmp eq i8* %104, null
  br i1 %105, label %142, label %106

; <label>:106:                                    ; preds = %101
  %107 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %102, i64 0, i32 1
  %108 = load %struct.hash_entry*, %struct.hash_entry** %107, align 8
  %109 = icmp eq %struct.hash_entry* %108, null
  br i1 %109, label %141, label %110

; <label>:110:                                    ; preds = %106
  %111 = load i64, i64* %52, align 8
  br label %112

; <label>:112:                                    ; preds = %131, %110
  %113 = phi i64 [ %119, %131 ], [ %111, %110 ]
  %114 = phi %struct.hash_entry* [ %125, %131 ], [ %108, %110 ]
  %115 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %114, i64 0, i32 0
  %116 = load i8*, i8** %115, align 8
  %117 = load i64 (i8*, i64)*, i64 (i8*, i64)** %67, align 8
  %118 = tail call i64 %117(i8* %116, i64 %113) #13
  %119 = load i64, i64* %52, align 8
  %120 = icmp ult i64 %118, %119
  br i1 %120, label %122, label %121

; <label>:121:                                    ; preds = %112
  tail call void @abort() #15
  unreachable

; <label>:122:                                    ; preds = %112
  %123 = load %struct.hash_entry*, %struct.hash_entry** %99, align 8
  %124 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %114, i64 0, i32 1
  %125 = load %struct.hash_entry*, %struct.hash_entry** %124, align 8
  %126 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %123, i64 %118, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %137, label %129

; <label>:129:                                    ; preds = %122
  %130 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %123, i64 %118, i32 1
  br label %131

; <label>:131:                                    ; preds = %137, %129
  %132 = phi %struct.hash_entry** [ %130, %129 ], [ %76, %137 ]
  %133 = bitcast %struct.hash_entry** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %struct.hash_entry** %124 to i64*
  store i64 %134, i64* %135, align 8
  store %struct.hash_entry* %114, %struct.hash_entry** %132, align 8
  %136 = icmp eq %struct.hash_entry* %125, null
  br i1 %136, label %140, label %112

; <label>:137:                                    ; preds = %122
  store i8* %116, i8** %126, align 8
  %138 = load i64, i64* %100, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %100, align 8
  store i8* null, i8** %115, align 8
  br label %131

; <label>:140:                                    ; preds = %131
  br label %141

; <label>:141:                                    ; preds = %140, %106
  store %struct.hash_entry* null, %struct.hash_entry** %107, align 8
  br label %142

; <label>:142:                                    ; preds = %141, %101
  %143 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %102, i64 1
  %144 = icmp ult %struct.hash_entry* %143, %96
  br i1 %144, label %101, label %145

; <label>:145:                                    ; preds = %142
  br label %146

; <label>:146:                                    ; preds = %145, %92
  %147 = call fastcc zeroext i1 @transfer_entries(%struct.hash_table* %0, %struct.hash_table* nonnull %3, i1 zeroext false)
  br i1 %147, label %149, label %148

; <label>:148:                                    ; preds = %146
  tail call void @abort() #15
  unreachable

; <label>:149:                                    ; preds = %146
  %150 = load i8*, i8** %57, align 16
  tail call void @free(i8* %150) #13
  br label %152

; <label>:151:                                    ; preds = %45
  br label %152

; <label>:152:                                    ; preds = %151, %17, %48, %10, %55, %51, %149, %82
  %153 = phi i1 [ true, %82 ], [ false, %149 ], [ true, %51 ], [ false, %55 ], [ false, %10 ], [ false, %48 ], [ false, %17 ], [ false, %151 ]
  call void @llvm.lifetime.end(i64 80, i8* nonnull %4) #13
  ret i1 %153
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @transfer_entries(%struct.hash_table* nocapture, %struct.hash_table* nocapture, i1 zeroext) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i64 0, i32 0
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i64 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %8 = icmp ult %struct.hash_entry* %5, %7
  br i1 %8, label %9, label %103

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i64 0, i32 3
  %15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %16 = bitcast %struct.hash_entry** %15 to i64*
  br label %17

; <label>:17:                                     ; preds = %9, %97
  %18 = phi %struct.hash_entry* [ %5, %9 ], [ %98, %97 ]
  %19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %97, label %22

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 0, i32 1
  %24 = load %struct.hash_entry*, %struct.hash_entry** %23, align 8
  %25 = icmp eq %struct.hash_entry* %24, null
  br i1 %25, label %58, label %26

; <label>:26:                                     ; preds = %22
  %27 = load i64, i64* %11, align 8
  br label %28

; <label>:28:                                     ; preds = %26, %47
  %29 = phi i64 [ %35, %47 ], [ %27, %26 ]
  %30 = phi %struct.hash_entry* [ %41, %47 ], [ %24, %26 ]
  %31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = load i64 (i8*, i64)*, i64 (i8*, i64)** %10, align 8
  %34 = tail call i64 %33(i8* %32, i64 %29) #13
  %35 = load i64, i64* %11, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %28
  tail call void @abort() #15
  unreachable

; <label>:38:                                     ; preds = %28
  %39 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %40 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i64 0, i32 1
  %41 = load %struct.hash_entry*, %struct.hash_entry** %40, align 8
  %42 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i64 %34, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %53, label %45

; <label>:45:                                     ; preds = %38
  %46 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i64 %34, i32 1
  br label %47

; <label>:47:                                     ; preds = %45, %53
  %48 = phi %struct.hash_entry** [ %46, %45 ], [ %15, %53 ]
  %49 = bitcast %struct.hash_entry** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %struct.hash_entry** %40 to i64*
  store i64 %50, i64* %51, align 8
  store %struct.hash_entry* %30, %struct.hash_entry** %48, align 8
  %52 = icmp eq %struct.hash_entry* %41, null
  br i1 %52, label %56, label %28

; <label>:53:                                     ; preds = %38
  store i8* %32, i8** %42, align 8
  %54 = load i64, i64* %13, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %13, align 8
  store i8* null, i8** %31, align 8
  br label %47

; <label>:56:                                     ; preds = %47
  %57 = load i8*, i8** %19, align 8
  br label %58

; <label>:58:                                     ; preds = %56, %22
  %59 = phi i8* [ %57, %56 ], [ %20, %22 ]
  store %struct.hash_entry* null, %struct.hash_entry** %23, align 8
  br i1 %2, label %97, label %60

; <label>:60:                                     ; preds = %58
  %61 = load i64 (i8*, i64)*, i64 (i8*, i64)** %10, align 8
  %62 = load i64, i64* %11, align 8
  %63 = tail call i64 %61(i8* %59, i64 %62) #13
  %64 = load i64, i64* %11, align 8
  %65 = icmp ult i64 %63, %64
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %60
  tail call void @abort() #15
  unreachable

; <label>:67:                                     ; preds = %60
  %68 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %69 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %68, i64 %63, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %91, label %72

; <label>:72:                                     ; preds = %67
  %73 = load %struct.hash_entry*, %struct.hash_entry** %15, align 8
  %74 = icmp eq %struct.hash_entry* %73, null
  br i1 %74, label %79, label %75

; <label>:75:                                     ; preds = %72
  %76 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %73, i64 0, i32 1
  %77 = bitcast %struct.hash_entry** %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %16, align 8
  br label %83

; <label>:79:                                     ; preds = %72
  %80 = tail call noalias i8* @malloc(i64 16) #13
  %81 = bitcast i8* %80 to %struct.hash_entry*
  %82 = icmp eq i8* %80, null
  br i1 %82, label %101, label %83

; <label>:83:                                     ; preds = %79, %75
  %84 = phi %struct.hash_entry* [ %73, %75 ], [ %81, %79 ]
  %85 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %84, i64 0, i32 0
  store i8* %59, i8** %85, align 8
  %86 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %68, i64 %63, i32 1
  %87 = bitcast %struct.hash_entry** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %84, i64 0, i32 1
  %90 = bitcast %struct.hash_entry** %89 to i64*
  store i64 %88, i64* %90, align 8
  store %struct.hash_entry* %84, %struct.hash_entry** %86, align 8
  br label %94

; <label>:91:                                     ; preds = %67
  store i8* %59, i8** %69, align 8
  %92 = load i64, i64* %13, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %13, align 8
  br label %94

; <label>:94:                                     ; preds = %83, %91
  store i8* null, i8** %19, align 8
  %95 = load i64, i64* %14, align 8
  %96 = add i64 %95, -1
  store i64 %96, i64* %14, align 8
  br label %97

; <label>:97:                                     ; preds = %58, %94, %17
  %98 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 1
  %99 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %100 = icmp ult %struct.hash_entry* %98, %99
  br i1 %100, label %17, label %101

; <label>:101:                                    ; preds = %79, %97
  %102 = phi i1 [ false, %79 ], [ true, %97 ]
  br label %103

; <label>:103:                                    ; preds = %101, %3
  %104 = phi i1 [ true, %3 ], [ %102, %101 ]
  ret i1 %104
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @hash_insert_if_absent(%struct.hash_table* nocapture, i8*, i8**) local_unnamed_addr #0 {
  %4 = icmp eq i8* %1, null
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %8 = load i64 (i8*, i64)*, i64 (i8*, i64)** %7, align 8
  %9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = tail call i64 %8(i8* nonnull %1, i64 %10) #13
  %12 = load i64, i64* %9, align 8
  %13 = icmp ult i64 %11, %12
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %6
  tail call void @abort() #15
  unreachable

; <label>:15:                                     ; preds = %6
  %16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %17 = load %struct.hash_entry*, %struct.hash_entry** %16, align 8
  %18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i64 %11
  %19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %61, label %22

; <label>:22:                                     ; preds = %15
  %23 = icmp eq i8* %20, %1
  br i1 %23, label %56, label %24

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 7
  %26 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %25, align 8
  %27 = tail call zeroext i1 %26(i8* nonnull %1, i8* nonnull %20) #13
  br i1 %27, label %49, label %28

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i64 %11, i32 1
  %30 = load %struct.hash_entry*, %struct.hash_entry** %29, align 8
  %31 = icmp eq %struct.hash_entry* %30, null
  br i1 %31, label %61, label %32

; <label>:32:                                     ; preds = %28
  br label %33

; <label>:33:                                     ; preds = %32, %45
  %34 = phi %struct.hash_entry* [ %47, %45 ], [ %30, %32 ]
  %35 = phi %struct.hash_entry** [ %46, %45 ], [ %29, %32 ]
  %36 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %52, label %39

; <label>:39:                                     ; preds = %33
  %40 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %25, align 8
  %41 = tail call zeroext i1 %40(i8* nonnull %1, i8* %37) #13
  %42 = load %struct.hash_entry*, %struct.hash_entry** %35, align 8
  br i1 %41, label %43, label %45

; <label>:43:                                     ; preds = %39
  %44 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i64 0, i32 0
  br label %49

; <label>:45:                                     ; preds = %39
  %46 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i64 0, i32 1
  %47 = load %struct.hash_entry*, %struct.hash_entry** %46, align 8
  %48 = icmp eq %struct.hash_entry* %47, null
  br i1 %48, label %60, label %33

; <label>:49:                                     ; preds = %24, %43
  %50 = phi i8** [ %44, %43 ], [ %19, %24 ]
  %51 = load i8*, i8** %50, align 8
  br label %53

; <label>:52:                                     ; preds = %33
  br label %53

; <label>:53:                                     ; preds = %52, %49
  %54 = phi i8* [ %51, %49 ], [ %1, %52 ]
  %55 = icmp eq i8* %54, null
  br i1 %55, label %61, label %56

; <label>:56:                                     ; preds = %22, %53
  %57 = phi i8* [ %54, %53 ], [ %1, %22 ]
  %58 = icmp eq i8** %2, null
  br i1 %58, label %198, label %59

; <label>:59:                                     ; preds = %56
  store i8* %57, i8** %2, align 8
  br label %198

; <label>:60:                                     ; preds = %45
  br label %61

; <label>:61:                                     ; preds = %60, %28, %15, %53
  %62 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %63 = load i64, i64* %62, align 8
  %64 = uitofp i64 %63 to float
  %65 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 5
  %66 = load %struct.hash_tuning*, %struct.hash_tuning** %65, align 8
  %67 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %66, i64 0, i32 2
  %68 = load float, float* %67, align 4
  %69 = load i64, i64* %9, align 8
  %70 = uitofp i64 %69 to float
  %71 = fmul float %68, %70
  %72 = fcmp ogt float %64, %71
  br i1 %72, label %73, label %164

; <label>:73:                                     ; preds = %61
  %74 = icmp eq %struct.hash_tuning* %66, @default_tuning
  br i1 %74, label %97, label %75

; <label>:75:                                     ; preds = %73
  %76 = fcmp ogt float %68, 0x3FB99999A0000000
  %77 = fcmp olt float %68, 0x3FECCCCCC0000000
  %78 = and i1 %76, %77
  br i1 %78, label %79, label %96

; <label>:79:                                     ; preds = %75
  %80 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %66, i64 0, i32 3
  %81 = load float, float* %80, align 4
  %82 = fcmp ogt float %81, 0x3FF19999A0000000
  br i1 %82, label %83, label %96

; <label>:83:                                     ; preds = %79
  %84 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %66, i64 0, i32 0
  %85 = load float, float* %84, align 4
  %86 = fcmp ult float %85, 0.000000e+00
  br i1 %86, label %96, label %87

; <label>:87:                                     ; preds = %83
  %88 = fadd float %85, 0x3FB99999A0000000
  %89 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %66, i64 0, i32 1
  %90 = load float, float* %89, align 4
  %91 = fcmp olt float %88, %90
  %92 = fcmp ole float %90, 1.000000e+00
  %93 = and i1 %92, %91
  %94 = fcmp olt float %88, %68
  %95 = and i1 %94, %93
  br i1 %95, label %97, label %96

; <label>:96:                                     ; preds = %87, %83, %79, %75
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %65, align 8
  br label %97

; <label>:97:                                     ; preds = %73, %87, %96
  %98 = phi float [ %68, %73 ], [ %68, %87 ], [ 0x3FE99999A0000000, %96 ]
  %99 = phi %struct.hash_tuning* [ @default_tuning, %73 ], [ %66, %87 ], [ @default_tuning, %96 ]
  %100 = fmul float %98, %70
  %101 = fcmp ogt float %64, %100
  br i1 %101, label %102, label %164

; <label>:102:                                    ; preds = %97
  %103 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %99, i64 0, i32 4
  %104 = load i8, i8* %103, align 4
  %105 = icmp eq i8 %104, 0
  %106 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %99, i64 0, i32 3
  %107 = load float, float* %106, align 4
  %108 = fmul float %70, %107
  %109 = fmul float %98, %108
  %110 = select i1 %105, float %109, float %108
  %111 = fcmp ult float %110, 0x43F0000000000000
  br i1 %111, label %112, label %198

; <label>:112:                                    ; preds = %102
  %113 = fptoui float %110 to i64
  %114 = tail call zeroext i1 @hash_rehash(%struct.hash_table* nonnull %0, i64 %113)
  br i1 %114, label %115, label %198

; <label>:115:                                    ; preds = %112
  %116 = load i64 (i8*, i64)*, i64 (i8*, i64)** %7, align 8
  %117 = load i64, i64* %9, align 8
  %118 = tail call i64 %116(i8* nonnull %1, i64 %117) #13
  %119 = load i64, i64* %9, align 8
  %120 = icmp ult i64 %118, %119
  br i1 %120, label %122, label %121

; <label>:121:                                    ; preds = %115
  tail call void @abort() #15
  unreachable

; <label>:122:                                    ; preds = %115
  %123 = load %struct.hash_entry*, %struct.hash_entry** %16, align 8
  %124 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %123, i64 %118
  %125 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %124, i64 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = icmp eq i8* %126, null
  br i1 %127, label %164, label %128

; <label>:128:                                    ; preds = %122
  %129 = icmp eq i8* %126, %1
  br i1 %129, label %159, label %130

; <label>:130:                                    ; preds = %128
  %131 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 7
  %132 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %131, align 8
  %133 = tail call zeroext i1 %132(i8* nonnull %1, i8* nonnull %126) #13
  br i1 %133, label %134, label %136

; <label>:134:                                    ; preds = %130
  %135 = load i8*, i8** %125, align 8
  br label %159

; <label>:136:                                    ; preds = %130
  %137 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %123, i64 %118, i32 1
  %138 = load %struct.hash_entry*, %struct.hash_entry** %137, align 8
  %139 = icmp eq %struct.hash_entry* %138, null
  br i1 %139, label %164, label %140

; <label>:140:                                    ; preds = %136
  br label %141

; <label>:141:                                    ; preds = %140, %154
  %142 = phi %struct.hash_entry* [ %156, %154 ], [ %138, %140 ]
  %143 = phi %struct.hash_entry** [ %155, %154 ], [ %137, %140 ]
  %144 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %142, i64 0, i32 0
  %145 = load i8*, i8** %144, align 8
  %146 = icmp eq i8* %145, %1
  br i1 %146, label %158, label %147

; <label>:147:                                    ; preds = %141
  %148 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %131, align 8
  %149 = tail call zeroext i1 %148(i8* nonnull %1, i8* %145) #13
  %150 = load %struct.hash_entry*, %struct.hash_entry** %143, align 8
  br i1 %149, label %151, label %154

; <label>:151:                                    ; preds = %147
  %152 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %150, i64 0, i32 0
  %153 = load i8*, i8** %152, align 8
  br label %159

; <label>:154:                                    ; preds = %147
  %155 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %150, i64 0, i32 1
  %156 = load %struct.hash_entry*, %struct.hash_entry** %155, align 8
  %157 = icmp eq %struct.hash_entry* %156, null
  br i1 %157, label %163, label %141

; <label>:158:                                    ; preds = %141
  br label %159

; <label>:159:                                    ; preds = %158, %151, %128, %134
  %160 = phi i8* [ %135, %134 ], [ %1, %128 ], [ %153, %151 ], [ %1, %158 ]
  %161 = icmp eq i8* %160, null
  br i1 %161, label %164, label %162

; <label>:162:                                    ; preds = %159
  tail call void @abort() #15
  unreachable

; <label>:163:                                    ; preds = %154
  br label %164

; <label>:164:                                    ; preds = %163, %136, %122, %159, %97, %61
  %165 = phi %struct.hash_entry* [ %124, %159 ], [ %18, %97 ], [ %18, %61 ], [ %124, %122 ], [ %124, %136 ], [ %124, %163 ]
  %166 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %165, i64 0, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = icmp eq i8* %167, null
  br i1 %168, label %193, label %169

; <label>:169:                                    ; preds = %164
  %170 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %171 = load %struct.hash_entry*, %struct.hash_entry** %170, align 8
  %172 = icmp eq %struct.hash_entry* %171, null
  br i1 %172, label %178, label %173

; <label>:173:                                    ; preds = %169
  %174 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %171, i64 0, i32 1
  %175 = bitcast %struct.hash_entry** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = bitcast %struct.hash_entry** %170 to i64*
  store i64 %176, i64* %177, align 8
  br label %182

; <label>:178:                                    ; preds = %169
  %179 = tail call noalias i8* @malloc(i64 16) #13
  %180 = bitcast i8* %179 to %struct.hash_entry*
  %181 = icmp eq i8* %179, null
  br i1 %181, label %198, label %182

; <label>:182:                                    ; preds = %173, %178
  %183 = phi %struct.hash_entry* [ %171, %173 ], [ %180, %178 ]
  %184 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %183, i64 0, i32 0
  store i8* %1, i8** %184, align 8
  %185 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %165, i64 0, i32 1
  %186 = bitcast %struct.hash_entry** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %183, i64 0, i32 1
  %189 = bitcast %struct.hash_entry** %188 to i64*
  store i64 %187, i64* %189, align 8
  store %struct.hash_entry* %183, %struct.hash_entry** %185, align 8
  %190 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = add i64 %191, 1
  store i64 %192, i64* %190, align 8
  br label %198

; <label>:193:                                    ; preds = %164
  store i8* %1, i8** %166, align 8
  %194 = bitcast i64* %62 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 8
  %196 = add <2 x i64> %195, <i64 1, i64 1>
  %197 = bitcast i64* %62 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %197, align 8
  br label %198

; <label>:198:                                    ; preds = %112, %102, %182, %178, %59, %56, %193
  %199 = phi i32 [ 1, %193 ], [ 0, %56 ], [ 0, %59 ], [ 1, %182 ], [ -1, %178 ], [ -1, %102 ], [ -1, %112 ]
  ret i32 %199
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @hash_insert(%struct.hash_table* nocapture, i8*) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %4) #13
  %5 = call i32 @hash_insert_if_absent(%struct.hash_table* %0, i8* %1, i8** nonnull %3)
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %2
  %8 = icmp eq i32 %5, 0
  %9 = load i8*, i8** %3, align 8
  %10 = select i1 %8, i8* %9, i8* %1
  br label %11

; <label>:11:                                     ; preds = %7, %2
  %12 = phi i8* [ null, %2 ], [ %10, %7 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %4) #13
  ret i8* %12
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @hash_delete(%struct.hash_table* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 6
  %4 = load i64 (i8*, i64)*, i64 (i8*, i64)** %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = tail call i64 %4(i8* %1, i64 %6) #13
  %8 = load i64, i64* %5, align 8
  %9 = icmp ult i64 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %13 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 %7
  %15 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %155, label %18

; <label>:18:                                     ; preds = %11
  %19 = icmp eq i8* %16, %1
  br i1 %19, label %31, label %20

; <label>:20:                                     ; preds = %18
  %21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 7
  %22 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %21, align 8
  %23 = tail call zeroext i1 %22(i8* %1, i8* nonnull %16) #13
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %20
  %25 = load i8*, i8** %15, align 8
  br label %31

; <label>:26:                                     ; preds = %20
  %27 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 %7, i32 1
  %28 = load %struct.hash_entry*, %struct.hash_entry** %27, align 8
  %29 = icmp eq %struct.hash_entry* %28, null
  br i1 %29, label %155, label %30

; <label>:30:                                     ; preds = %26
  br label %46

; <label>:31:                                     ; preds = %24, %18
  %32 = phi i8* [ %25, %24 ], [ %1, %18 ]
  %33 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i64 %7, i32 1
  %34 = load %struct.hash_entry*, %struct.hash_entry** %33, align 8
  %35 = icmp eq %struct.hash_entry* %34, null
  br i1 %35, label %45, label %36

; <label>:36:                                     ; preds = %31
  %37 = bitcast %struct.hash_entry* %14 to i8*
  %38 = bitcast %struct.hash_entry* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false) #13
  %39 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i64 0, i32 0
  store i8* null, i8** %39, align 8
  %40 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %41 = bitcast %struct.hash_entry** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i64 0, i32 1
  %44 = bitcast %struct.hash_entry** %43 to i64*
  store i64 %42, i64* %44, align 8
  store %struct.hash_entry* %34, %struct.hash_entry** %40, align 8
  br label %75

; <label>:45:                                     ; preds = %31
  store i8* null, i8** %15, align 8
  br label %75

; <label>:46:                                     ; preds = %30, %71
  %47 = phi %struct.hash_entry* [ %73, %71 ], [ %28, %30 ]
  %48 = phi %struct.hash_entry** [ %72, %71 ], [ %27, %30 ]
  %49 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %47, i64 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, %1
  br i1 %51, label %59, label %52

; <label>:52:                                     ; preds = %46
  %53 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %21, align 8
  %54 = tail call zeroext i1 %53(i8* %1, i8* %50) #13
  %55 = load %struct.hash_entry*, %struct.hash_entry** %48, align 8
  br i1 %54, label %56, label %71

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  br label %60

; <label>:59:                                     ; preds = %46
  br label %60

; <label>:60:                                     ; preds = %59, %56
  %61 = phi i8* [ %58, %56 ], [ %1, %59 ]
  %62 = phi %struct.hash_entry* [ %55, %56 ], [ %47, %59 ]
  %63 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %62, i64 0, i32 0
  %64 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %62, i64 0, i32 1
  %65 = bitcast %struct.hash_entry** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %struct.hash_entry** %48 to i64*
  store i64 %66, i64* %67, align 8
  store i8* null, i8** %63, align 8
  %68 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %69 = bitcast %struct.hash_entry** %68 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %65, align 8
  store %struct.hash_entry* %62, %struct.hash_entry** %68, align 8
  br label %75

; <label>:71:                                     ; preds = %52
  %72 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i64 0, i32 1
  %73 = load %struct.hash_entry*, %struct.hash_entry** %72, align 8
  %74 = icmp eq %struct.hash_entry* %73, null
  br i1 %74, label %154, label %46

; <label>:75:                                     ; preds = %36, %45, %60
  %76 = phi i8* [ %32, %36 ], [ %32, %45 ], [ %61, %60 ]
  %77 = icmp eq i8* %76, null
  br i1 %77, label %155, label %78

; <label>:78:                                     ; preds = %75
  %79 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 4
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, -1
  store i64 %81, i64* %79, align 8
  %82 = load i8*, i8** %15, align 8
  %83 = icmp eq i8* %82, null
  br i1 %83, label %84, label %155

; <label>:84:                                     ; preds = %78
  %85 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, -1
  store i64 %87, i64* %85, align 8
  %88 = uitofp i64 %87 to float
  %89 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 5
  %90 = load %struct.hash_tuning*, %struct.hash_tuning** %89, align 8
  %91 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %90, i64 0, i32 0
  %92 = load float, float* %91, align 4
  %93 = load i64, i64* %5, align 8
  %94 = uitofp i64 %93 to float
  %95 = fmul float %92, %94
  %96 = fcmp olt float %88, %95
  br i1 %96, label %97, label %155

; <label>:97:                                     ; preds = %84
  %98 = icmp eq %struct.hash_tuning* %90, @default_tuning
  br i1 %98, label %121, label %99

; <label>:99:                                     ; preds = %97
  %100 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %90, i64 0, i32 2
  %101 = load float, float* %100, align 4
  %102 = fcmp ogt float %101, 0x3FB99999A0000000
  %103 = fcmp olt float %101, 0x3FECCCCCC0000000
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %120

; <label>:105:                                    ; preds = %99
  %106 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %90, i64 0, i32 3
  %107 = load float, float* %106, align 4
  %108 = fcmp ule float %107, 0x3FF19999A0000000
  %109 = fcmp ult float %92, 0.000000e+00
  %110 = or i1 %109, %108
  br i1 %110, label %120, label %111

; <label>:111:                                    ; preds = %105
  %112 = fadd float %92, 0x3FB99999A0000000
  %113 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %90, i64 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = fcmp olt float %112, %114
  %116 = fcmp ole float %114, 1.000000e+00
  %117 = and i1 %116, %115
  %118 = fcmp olt float %112, %101
  %119 = and i1 %118, %117
  br i1 %119, label %121, label %120

; <label>:120:                                    ; preds = %105, %111, %99
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %89, align 8
  br label %121

; <label>:121:                                    ; preds = %97, %111, %120
  %122 = phi float [ %92, %97 ], [ %92, %111 ], [ 0.000000e+00, %120 ]
  %123 = phi %struct.hash_tuning* [ @default_tuning, %97 ], [ %90, %111 ], [ @default_tuning, %120 ]
  %124 = fmul float %122, %94
  %125 = fcmp olt float %88, %124
  br i1 %125, label %126, label %155

; <label>:126:                                    ; preds = %121
  %127 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %123, i64 0, i32 4
  %128 = load i8, i8* %127, align 4
  %129 = icmp eq i8 %128, 0
  %130 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %123, i64 0, i32 1
  %131 = load float, float* %130, align 4
  %132 = fmul float %94, %131
  br i1 %129, label %133, label %137

; <label>:133:                                    ; preds = %126
  %134 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %123, i64 0, i32 2
  %135 = load float, float* %134, align 4
  %136 = fmul float %132, %135
  br label %137

; <label>:137:                                    ; preds = %126, %133
  %138 = phi float [ %136, %133 ], [ %132, %126 ]
  %139 = fptoui float %138 to i64
  %140 = tail call zeroext i1 @hash_rehash(%struct.hash_table* nonnull %0, i64 %139)
  br i1 %140, label %155, label %141

; <label>:141:                                    ; preds = %137
  %142 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 9
  %143 = load %struct.hash_entry*, %struct.hash_entry** %142, align 8
  %144 = icmp eq %struct.hash_entry* %143, null
  br i1 %144, label %153, label %145

; <label>:145:                                    ; preds = %141
  br label %146

; <label>:146:                                    ; preds = %145, %146
  %147 = phi %struct.hash_entry* [ %150, %146 ], [ %143, %145 ]
  %148 = bitcast %struct.hash_entry* %147 to i8*
  %149 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %147, i64 0, i32 1
  %150 = load %struct.hash_entry*, %struct.hash_entry** %149, align 8
  tail call void @free(i8* %148) #13
  %151 = icmp eq %struct.hash_entry* %150, null
  br i1 %151, label %152, label %146

; <label>:152:                                    ; preds = %146
  br label %153

; <label>:153:                                    ; preds = %152, %141
  store %struct.hash_entry* null, %struct.hash_entry** %142, align 8
  br label %155

; <label>:154:                                    ; preds = %71
  br label %155

; <label>:155:                                    ; preds = %154, %26, %11, %121, %84, %78, %153, %137, %75
  %156 = phi i8* [ null, %75 ], [ %76, %137 ], [ %76, %153 ], [ %76, %78 ], [ %76, %84 ], [ %76, %121 ], [ null, %11 ], [ null, %26 ], [ null, %154 ]
  ret i8* %156
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @human_readable(i64, i8*, i32, i64, i64) local_unnamed_addr #0 {
  %6 = alloca [41 x i8], align 16
  %7 = and i32 %2, 3
  %8 = and i32 %2, 32
  %9 = icmp ne i32 %8, 0
  %10 = select i1 %9, i32 1024, i32 1000
  %11 = tail call %struct.lconv* @localeconv() #13
  %12 = getelementptr inbounds %struct.lconv, %struct.lconv* %11, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i64 @strlen(i8* %13) #16
  %15 = add i64 %14, -1
  %16 = icmp ult i64 %15, 16
  %17 = select i1 %16, i64 %14, i64 1
  %18 = select i1 %16, i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.279, i64 0, i64 0)
  %19 = getelementptr inbounds %struct.lconv, %struct.lconv* %11, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.lconv, %struct.lconv* %11, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i64 @strlen(i8* %22) #16
  %24 = icmp ult i64 %23, 17
  %25 = select i1 %24, i8* %22, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.280, i64 0, i64 0)
  %26 = getelementptr inbounds i8, i8* %1, i64 647
  %27 = icmp ugt i64 %4, %3
  br i1 %27, label %36, label %28

; <label>:28:                                     ; preds = %5
  %29 = urem i64 %3, %4
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %56

; <label>:31:                                     ; preds = %28
  %32 = udiv i64 %3, %4
  %33 = mul i64 %32, %0
  %34 = udiv i64 %33, %32
  %35 = icmp eq i64 %34, %0
  br i1 %35, label %149, label %56

; <label>:36:                                     ; preds = %5
  %37 = icmp eq i64 %3, 0
  br i1 %37, label %56, label %38

; <label>:38:                                     ; preds = %36
  %39 = urem i64 %4, %3
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %56

; <label>:41:                                     ; preds = %38
  %42 = udiv i64 %4, %3
  %43 = urem i64 %0, %42
  %44 = mul i64 %43, 10
  %45 = urem i64 %44, %42
  %46 = shl i64 %45, 1
  %47 = udiv i64 %0, %42
  %48 = udiv i64 %44, %42
  %49 = trunc i64 %48 to i32
  %50 = icmp ult i64 %46, %42
  %51 = icmp ne i64 %46, 0
  %52 = zext i1 %51 to i32
  %53 = icmp ult i64 %42, %46
  %54 = select i1 %53, i32 3, i32 2
  %55 = select i1 %50, i32 %52, i32 %54
  br label %149

; <label>:56:                                     ; preds = %31, %36, %38, %28
  %57 = uitofp i64 %4 to x86_fp80
  %58 = uitofp i64 %0 to x86_fp80
  %59 = uitofp i64 %3 to x86_fp80
  %60 = fdiv x86_fp80 %59, %57
  %61 = fmul x86_fp80 %58, %60
  %62 = and i32 %2, 16
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %66, label %64

; <label>:64:                                     ; preds = %56
  %65 = uitofp i32 %10 to x86_fp80
  br label %84

; <label>:66:                                     ; preds = %56
  %67 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %1, i1 false)
  %68 = icmp ne i32 %7, 1
  %69 = fcmp olt x86_fp80 %61, 0xK403EFFFFFFFFFFFFFFFF
  %70 = and i1 %68, %69
  br i1 %70, label %71, label %80

; <label>:71:                                     ; preds = %66
  %72 = fptoui x86_fp80 %61 to i64
  %73 = icmp eq i32 %7, 0
  %74 = uitofp i64 %72 to x86_fp80
  %75 = fcmp une x86_fp80 %74, %61
  %76 = and i1 %73, %75
  %77 = zext i1 %76 to i64
  %78 = add i64 %77, %72
  %79 = uitofp i64 %78 to x86_fp80
  br label %80

; <label>:80:                                     ; preds = %66, %71
  %81 = phi x86_fp80 [ %79, %71 ], [ %61, %66 ]
  %82 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %1, i32 1, i64 %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.281, i64 0, i64 0), x86_fp80 %81) #13
  %83 = tail call i64 @strlen(i8* %1) #16
  br label %140

; <label>:84:                                     ; preds = %64
  %85 = fmul x86_fp80 %65, %65
  %86 = fcmp ugt x86_fp80 %85, %61
  br i1 %86, label %87, label %384

; <label>:87:                                     ; preds = %404, %400, %396, %392, %388, %384, %84, %408
  %88 = phi x86_fp80 [ %65, %84 ], [ %385, %384 ], [ %389, %388 ], [ %393, %392 ], [ %397, %396 ], [ %401, %400 ], [ %405, %404 ], [ %409, %408 ]
  %89 = phi i32 [ 1, %84 ], [ 2, %384 ], [ 3, %388 ], [ 4, %392 ], [ 5, %396 ], [ 6, %400 ], [ 7, %404 ], [ 8, %408 ]
  %90 = fdiv x86_fp80 %61, %88
  %91 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %1, i1 false)
  %92 = icmp ne i32 %7, 1
  %93 = fcmp olt x86_fp80 %90, 0xK403EFFFFFFFFFFFFFFFF
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %104

; <label>:95:                                     ; preds = %87
  %96 = fptoui x86_fp80 %90 to i64
  %97 = icmp eq i32 %7, 0
  %98 = uitofp i64 %96 to x86_fp80
  %99 = fcmp une x86_fp80 %98, %90
  %100 = and i1 %97, %99
  %101 = zext i1 %100 to i64
  %102 = add i64 %101, %96
  %103 = uitofp i64 %102 to x86_fp80
  br label %104

; <label>:104:                                    ; preds = %87, %95
  %105 = phi x86_fp80 [ %103, %95 ], [ %90, %87 ]
  %106 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %1, i32 1, i64 %91, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.282, i64 0, i64 0), x86_fp80 %105) #13
  %107 = tail call i64 @strlen(i8* %1) #16
  %108 = add i64 %17, 1
  %109 = zext i32 %8 to i64
  %110 = lshr exact i64 %109, 5
  %111 = xor i64 %110, 3
  %112 = add i64 %111, %17
  %113 = icmp ult i64 %112, %107
  br i1 %113, label %122, label %114

; <label>:114:                                    ; preds = %104
  %115 = and i32 %2, 8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %140, label %117

; <label>:117:                                    ; preds = %114
  %118 = add i64 %107, -1
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 48
  br i1 %121, label %122, label %140

; <label>:122:                                    ; preds = %117, %104
  %123 = fmul x86_fp80 %90, 0xK4002A000000000000000
  %124 = fcmp olt x86_fp80 %123, 0xK403EFFFFFFFFFFFFFFFF
  %125 = and i1 %92, %124
  br i1 %125, label %126, label %135

; <label>:126:                                    ; preds = %122
  %127 = fptoui x86_fp80 %123 to i64
  %128 = icmp eq i32 %7, 0
  %129 = uitofp i64 %127 to x86_fp80
  %130 = fcmp une x86_fp80 %129, %123
  %131 = and i1 %128, %130
  %132 = zext i1 %131 to i64
  %133 = add i64 %132, %127
  %134 = uitofp i64 %133 to x86_fp80
  br label %135

; <label>:135:                                    ; preds = %122, %126
  %136 = phi x86_fp80 [ %134, %126 ], [ %123, %122 ]
  %137 = fdiv x86_fp80 %136, 0xK4002A000000000000000
  %138 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %1, i32 1, i64 %91, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.281, i64 0, i64 0), x86_fp80 %137) #13
  %139 = tail call i64 @strlen(i8* %1) #16
  br label %140

; <label>:140:                                    ; preds = %117, %135, %114, %80
  %141 = phi i64 [ %83, %80 ], [ %139, %135 ], [ %107, %117 ], [ %107, %114 ]
  %142 = phi i64 [ 0, %80 ], [ 0, %135 ], [ %108, %117 ], [ %108, %114 ]
  %143 = phi i32 [ -1, %80 ], [ %89, %135 ], [ %89, %117 ], [ %89, %114 ]
  %144 = sub i64 0, %141
  %145 = getelementptr inbounds i8, i8* %26, i64 %144
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %145, i8* %1, i64 %141, i32 1, i1 false)
  %146 = getelementptr inbounds i8, i8* %145, i64 %141
  %147 = sub i64 0, %142
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  br label %269

; <label>:149:                                    ; preds = %31, %41
  %150 = phi i32 [ 0, %31 ], [ %55, %41 ]
  %151 = phi i32 [ 0, %31 ], [ %49, %41 ]
  %152 = phi i64 [ %33, %31 ], [ %47, %41 ]
  %153 = and i32 %2, 16
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %222

; <label>:155:                                    ; preds = %149
  %156 = zext i32 %10 to i64
  %157 = icmp ugt i64 %156, %152
  br i1 %157, label %222, label %158

; <label>:158:                                    ; preds = %155
  br label %159

; <label>:159:                                    ; preds = %158, %184
  %160 = phi i32 [ %185, %184 ], [ %150, %158 ]
  %161 = phi i32 [ %186, %184 ], [ 0, %158 ]
  %162 = phi i32 [ %174, %184 ], [ %151, %158 ]
  %163 = phi i64 [ %173, %184 ], [ %152, %158 ]
  %164 = urem i64 %163, %156
  %165 = mul nuw nsw i64 %164, 10
  %166 = zext i32 %162 to i64
  %167 = add nuw nsw i64 %165, %166
  %168 = trunc i64 %167 to i32
  %169 = urem i32 %168, %10
  %170 = shl nuw nsw i32 %169, 1
  %171 = ashr i32 %160, 1
  %172 = add nsw i32 %170, %171
  %173 = udiv i64 %163, %156
  %174 = udiv i32 %168, %10
  %175 = icmp ult i32 %172, %10
  br i1 %175, label %176, label %180

; <label>:176:                                    ; preds = %159
  %177 = sub nsw i32 0, %160
  %178 = icmp ne i32 %172, %177
  %179 = zext i1 %178 to i32
  br label %184

; <label>:180:                                    ; preds = %159
  %181 = add i32 %172, %160
  %182 = icmp ult i32 %10, %181
  %183 = select i1 %182, i32 3, i32 2
  br label %184

; <label>:184:                                    ; preds = %180, %176
  %185 = phi i32 [ %179, %176 ], [ %183, %180 ]
  %186 = add nuw nsw i32 %161, 1
  %187 = icmp ule i64 %156, %173
  %188 = icmp slt i32 %186, 8
  %189 = and i1 %188, %187
  br i1 %189, label %159, label %190

; <label>:190:                                    ; preds = %184
  %191 = icmp ult i64 %173, 10
  br i1 %191, label %192, label %222

; <label>:192:                                    ; preds = %190
  %193 = icmp eq i32 %7, 1
  br i1 %193, label %194, label %198

; <label>:194:                                    ; preds = %192
  %195 = and i32 %174, 1
  %196 = add nuw nsw i32 %185, %195
  %197 = icmp ugt i32 %196, 2
  br i1 %197, label %202, label %208

; <label>:198:                                    ; preds = %192
  %199 = icmp eq i32 %7, 0
  %200 = icmp ne i32 %185, 0
  %201 = and i1 %199, %200
  br i1 %201, label %202, label %208

; <label>:202:                                    ; preds = %198, %194
  %203 = add nsw i32 %174, 1
  %204 = icmp eq i32 %203, 10
  %205 = add i64 %173, 1
  br i1 %204, label %206, label %208

; <label>:206:                                    ; preds = %202
  %207 = icmp ult i64 %205, 10
  br i1 %207, label %208, label %222

; <label>:208:                                    ; preds = %202, %198, %194, %206
  %209 = phi i64 [ %205, %206 ], [ %173, %194 ], [ %173, %198 ], [ %173, %202 ]
  %210 = phi i32 [ 0, %206 ], [ %174, %194 ], [ %174, %198 ], [ %203, %202 ]
  %211 = phi i32 [ 0, %206 ], [ %185, %194 ], [ %185, %198 ], [ 0, %202 ]
  %212 = icmp ne i32 %210, 0
  %213 = and i32 %2, 8
  %214 = icmp eq i32 %213, 0
  %215 = or i1 %214, %212
  br i1 %215, label %216, label %222

; <label>:216:                                    ; preds = %208
  %217 = add nsw i32 %210, 48
  %218 = trunc i32 %217 to i8
  %219 = getelementptr inbounds i8, i8* %1, i64 646
  store i8 %218, i8* %219, align 1
  %220 = sub i64 0, %17
  %221 = getelementptr inbounds i8, i8* %219, i64 %220
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %221, i8* %18, i64 %17, i32 1, i1 false)
  br label %222

; <label>:222:                                    ; preds = %208, %155, %206, %216, %190, %149
  %223 = phi i32 [ 0, %216 ], [ 0, %206 ], [ %185, %190 ], [ %150, %155 ], [ %150, %149 ], [ %211, %208 ]
  %224 = phi i8* [ %221, %216 ], [ %26, %206 ], [ %26, %190 ], [ %26, %155 ], [ %26, %149 ], [ %26, %208 ]
  %225 = phi i32 [ %186, %216 ], [ %186, %206 ], [ %186, %190 ], [ 0, %155 ], [ -1, %149 ], [ %186, %208 ]
  %226 = phi i32 [ 0, %216 ], [ 0, %206 ], [ %174, %190 ], [ %151, %155 ], [ %151, %149 ], [ 0, %208 ]
  %227 = phi i64 [ %209, %216 ], [ 10, %206 ], [ %173, %190 ], [ %152, %155 ], [ %152, %149 ], [ %209, %208 ]
  %228 = trunc i32 %2 to i2
  switch i2 %228, label %255 [
    i2 1, label %229
    i2 0, label %237
  ]

; <label>:229:                                    ; preds = %222
  %230 = sext i32 %223 to i64
  %231 = and i64 %227, 1
  %232 = sub nsw i64 0, %231
  %233 = icmp ne i64 %230, %232
  %234 = zext i1 %233 to i32
  %235 = add nsw i32 %234, %226
  %236 = icmp sgt i32 %235, 5
  br i1 %236, label %240, label %255

; <label>:237:                                    ; preds = %222
  %238 = add nsw i32 %226, %223
  %239 = icmp sgt i32 %238, 0
  br i1 %239, label %240, label %255

; <label>:240:                                    ; preds = %237, %229
  %241 = add i64 %227, 1
  %242 = zext i32 %10 to i64
  %243 = icmp eq i64 %241, %242
  %244 = and i1 %154, %243
  %245 = icmp slt i32 %225, 8
  %246 = and i1 %245, %244
  br i1 %246, label %247, label %255

; <label>:247:                                    ; preds = %240
  %248 = add nsw i32 %225, 1
  %249 = and i32 %2, 8
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %255

; <label>:251:                                    ; preds = %247
  %252 = getelementptr inbounds i8, i8* %224, i64 -1
  store i8 48, i8* %252, align 1
  %253 = sub i64 0, %17
  %254 = getelementptr inbounds i8, i8* %252, i64 %253
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %254, i8* %18, i64 %17, i32 1, i1 false)
  br label %255

; <label>:255:                                    ; preds = %251, %247, %222, %240, %237, %229
  %256 = phi i8* [ %224, %240 ], [ %224, %229 ], [ %224, %237 ], [ %224, %222 ], [ %224, %247 ], [ %254, %251 ]
  %257 = phi i32 [ %225, %240 ], [ %225, %229 ], [ %225, %237 ], [ %225, %222 ], [ %248, %247 ], [ %248, %251 ]
  %258 = phi i64 [ %241, %240 ], [ %227, %229 ], [ %227, %237 ], [ %227, %222 ], [ 1, %247 ], [ 1, %251 ]
  br label %259

; <label>:259:                                    ; preds = %259, %255
  %260 = phi i8* [ %256, %255 ], [ %265, %259 ]
  %261 = phi i64 [ %258, %255 ], [ %266, %259 ]
  %262 = urem i64 %261, 10
  %263 = trunc i64 %262 to i8
  %264 = or i8 %263, 48
  %265 = getelementptr inbounds i8, i8* %260, i64 -1
  store i8 %264, i8* %265, align 1
  %266 = udiv i64 %261, 10
  %267 = icmp ugt i64 %261, 9
  br i1 %267, label %259, label %268

; <label>:268:                                    ; preds = %259
  br label %269

; <label>:269:                                    ; preds = %268, %140
  %270 = phi i8* [ %148, %140 ], [ %256, %268 ]
  %271 = phi i8* [ %145, %140 ], [ %265, %268 ]
  %272 = phi i32 [ %143, %140 ], [ %257, %268 ]
  %273 = and i32 %2, 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %307, label %275

; <label>:275:                                    ; preds = %269
  %276 = ptrtoint i8* %270 to i64
  %277 = ptrtoint i8* %271 to i64
  %278 = sub i64 %276, %277
  %279 = tail call i64 @strlen(i8* %25) #16
  %280 = getelementptr inbounds [41 x i8], [41 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start(i64 41, i8* nonnull %280) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %280, i8* %271, i64 %278, i32 1, i1 false) #13
  %281 = sub i64 0, %279
  br label %282

; <label>:282:                                    ; preds = %304, %275
  %283 = phi i8* [ %270, %275 ], [ %305, %304 ]
  %284 = phi i64 [ -1, %275 ], [ %298, %304 ]
  %285 = phi i8* [ %20, %275 ], [ %296, %304 ]
  %286 = phi i64 [ %278, %275 ], [ %301, %304 ]
  %287 = load i8, i8* %285, align 1
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %294, label %289

; <label>:289:                                    ; preds = %282
  %290 = icmp ult i8 %287, 127
  %291 = zext i8 %287 to i64
  %292 = select i1 %290, i64 %291, i64 %286
  %293 = getelementptr inbounds i8, i8* %285, i64 1
  br label %294

; <label>:294:                                    ; preds = %289, %282
  %295 = phi i64 [ %292, %289 ], [ %284, %282 ]
  %296 = phi i8* [ %293, %289 ], [ %285, %282 ]
  %297 = icmp ult i64 %286, %295
  %298 = select i1 %297, i64 %286, i64 %295
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8, i8* %283, i64 %299
  %301 = sub i64 %286, %298
  %302 = getelementptr inbounds [41 x i8], [41 x i8]* %6, i64 0, i64 %301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %300, i8* %302, i64 %298, i32 1, i1 false) #13
  %303 = icmp eq i64 %301, 0
  br i1 %303, label %306, label %304

; <label>:304:                                    ; preds = %294
  %305 = getelementptr inbounds i8, i8* %300, i64 %281
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %305, i8* %25, i64 %279, i32 1, i1 false) #13
  br label %282

; <label>:306:                                    ; preds = %294
  call void @llvm.lifetime.end(i64 41, i8* nonnull %280) #13
  br label %307

; <label>:307:                                    ; preds = %269, %306
  %308 = phi i8* [ %300, %306 ], [ %271, %269 ]
  %309 = trunc i32 %2 to i8
  %310 = icmp slt i8 %309, 0
  br i1 %310, label %311, label %356

; <label>:311:                                    ; preds = %307
  %312 = icmp slt i32 %272, 0
  br i1 %312, label %313, label %322

; <label>:313:                                    ; preds = %311
  %314 = icmp ugt i64 %4, 1
  br i1 %314, label %315, label %322

; <label>:315:                                    ; preds = %313
  %316 = zext i32 %10 to i64
  br label %317

; <label>:317:                                    ; preds = %315
  br i1 false, label %320, label %318

; <label>:318:                                    ; preds = %317
  %319 = icmp ult i64 %316, %4
  br i1 %319, label %358, label %320

; <label>:320:                                    ; preds = %383, %382, %379, %378, %375, %374, %371, %370, %367, %366, %363, %362, %359, %358, %318, %317
  %321 = phi i32 [ 8, %317 ], [ 1, %318 ], [ 8, %358 ], [ 2, %359 ], [ 8, %362 ], [ 3, %363 ], [ 8, %366 ], [ 4, %367 ], [ 8, %370 ], [ 5, %371 ], [ 8, %374 ], [ 6, %375 ], [ 8, %378 ], [ 7, %379 ], [ 8, %382 ], [ 8, %383 ]
  br label %322

; <label>:322:                                    ; preds = %320, %313, %311
  %323 = phi i32 [ %272, %311 ], [ 0, %313 ], [ %321, %320 ]
  %324 = and i32 %2, 256
  %325 = or i32 %323, %324
  %326 = icmp eq i32 %325, 0
  %327 = and i32 %2, 64
  %328 = icmp eq i32 %327, 0
  %329 = or i1 %328, %326
  br i1 %329, label %332, label %330

; <label>:330:                                    ; preds = %322
  %331 = getelementptr inbounds i8, i8* %1, i64 648
  store i8 32, i8* %26, align 1
  br label %332

; <label>:332:                                    ; preds = %322, %330
  %333 = phi i8* [ %331, %330 ], [ %26, %322 ]
  %334 = icmp ne i32 %323, 0
  br i1 %334, label %335, label %346

; <label>:335:                                    ; preds = %332
  %336 = icmp eq i32 %8, 0
  %337 = icmp eq i32 %323, 1
  %338 = and i1 %336, %337
  br i1 %338, label %343, label %339

; <label>:339:                                    ; preds = %335
  %340 = sext i32 %323 to i64
  %341 = getelementptr inbounds [9 x i8], [9 x i8]* @power_letter, i64 0, i64 %340
  %342 = load i8, i8* %341, align 1
  br label %343

; <label>:343:                                    ; preds = %335, %339
  %344 = phi i8 [ %342, %339 ], [ 107, %335 ]
  %345 = getelementptr inbounds i8, i8* %333, i64 1
  store i8 %344, i8* %333, align 1
  br label %346

; <label>:346:                                    ; preds = %343, %332
  %347 = phi i8* [ %345, %343 ], [ %333, %332 ]
  %348 = icmp eq i32 %324, 0
  br i1 %348, label %356, label %349

; <label>:349:                                    ; preds = %346
  %350 = and i1 %9, %334
  br i1 %350, label %351, label %353

; <label>:351:                                    ; preds = %349
  %352 = getelementptr inbounds i8, i8* %347, i64 1
  store i8 105, i8* %347, align 1
  br label %353

; <label>:353:                                    ; preds = %351, %349
  %354 = phi i8* [ %352, %351 ], [ %347, %349 ]
  %355 = getelementptr inbounds i8, i8* %354, i64 1
  store i8 66, i8* %354, align 1
  br label %356

; <label>:356:                                    ; preds = %346, %353, %307
  %357 = phi i8* [ %355, %353 ], [ %347, %346 ], [ %26, %307 ]
  store i8 0, i8* %357, align 1
  ret i8* %308

; <label>:358:                                    ; preds = %318
  br i1 false, label %320, label %359

; <label>:359:                                    ; preds = %358
  %360 = mul nuw nsw i64 %316, %316
  %361 = icmp ult i64 %360, %4
  br i1 %361, label %362, label %320

; <label>:362:                                    ; preds = %359
  br i1 false, label %320, label %363

; <label>:363:                                    ; preds = %362
  %364 = mul nuw nsw i64 %360, %316
  %365 = icmp ult i64 %364, %4
  br i1 %365, label %366, label %320

; <label>:366:                                    ; preds = %363
  br i1 false, label %320, label %367

; <label>:367:                                    ; preds = %366
  %368 = mul nuw nsw i64 %364, %316
  %369 = icmp ult i64 %368, %4
  br i1 %369, label %370, label %320

; <label>:370:                                    ; preds = %367
  br i1 false, label %320, label %371

; <label>:371:                                    ; preds = %370
  %372 = mul nuw nsw i64 %368, %316
  %373 = icmp ult i64 %372, %4
  br i1 %373, label %374, label %320

; <label>:374:                                    ; preds = %371
  br i1 false, label %320, label %375

; <label>:375:                                    ; preds = %374
  %376 = mul i64 %372, %316
  %377 = icmp ult i64 %376, %4
  br i1 %377, label %378, label %320

; <label>:378:                                    ; preds = %375
  br i1 false, label %320, label %379

; <label>:379:                                    ; preds = %378
  %380 = mul i64 %376, %316
  %381 = icmp ult i64 %380, %4
  br i1 %381, label %382, label %320

; <label>:382:                                    ; preds = %379
  br i1 true, label %320, label %383

; <label>:383:                                    ; preds = %382
  br label %320

; <label>:384:                                    ; preds = %84
  %385 = fmul x86_fp80 %65, %65
  %386 = fmul x86_fp80 %65, %385
  %387 = fcmp ugt x86_fp80 %386, %61
  br i1 %387, label %87, label %388

; <label>:388:                                    ; preds = %384
  %389 = fmul x86_fp80 %65, %385
  %390 = fmul x86_fp80 %65, %389
  %391 = fcmp ugt x86_fp80 %390, %61
  br i1 %391, label %87, label %392

; <label>:392:                                    ; preds = %388
  %393 = fmul x86_fp80 %65, %389
  %394 = fmul x86_fp80 %65, %393
  %395 = fcmp ugt x86_fp80 %394, %61
  br i1 %395, label %87, label %396

; <label>:396:                                    ; preds = %392
  %397 = fmul x86_fp80 %65, %393
  %398 = fmul x86_fp80 %65, %397
  %399 = fcmp ugt x86_fp80 %398, %61
  br i1 %399, label %87, label %400

; <label>:400:                                    ; preds = %396
  %401 = fmul x86_fp80 %65, %397
  %402 = fmul x86_fp80 %65, %401
  %403 = fcmp ugt x86_fp80 %402, %61
  br i1 %403, label %87, label %404

; <label>:404:                                    ; preds = %400
  %405 = fmul x86_fp80 %65, %401
  %406 = fmul x86_fp80 %65, %405
  %407 = fcmp ugt x86_fp80 %406, %61
  br i1 %407, label %87, label %408

; <label>:408:                                    ; preds = %404
  %409 = fmul x86_fp80 %65, %405
  br label %87
}

; Function Attrs: nounwind
declare %struct.lconv* @localeconv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: nounwind sspstrong uwtable
define i32 @human_options(i8*, i32* nocapture, i64*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = icmp eq i8* %0, null
  br i1 %5, label %6, label %16

; <label>:6:                                      ; preds = %3
  %7 = tail call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.285, i64 0, i64 0)) #13
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %16

; <label>:9:                                      ; preds = %6
  %10 = tail call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.286, i64 0, i64 0)) #13
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %9
  %13 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.287, i64 0, i64 0)) #13
  %14 = icmp ne i8* %13, null
  %15 = select i1 %14, i64 512, i64 1024
  br label %67

; <label>:16:                                     ; preds = %9, %6, %3
  %17 = phi i8* [ %0, %3 ], [ %7, %6 ], [ %10, %9 ]
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 39
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  %21 = select i1 %19, i8* %20, i8* %17
  %22 = select i1 %19, i32 4, i32 0
  %23 = tail call i64 @argmatch(i8* %21, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @block_size_args, i64 0, i64 0), i8* bitcast ([2 x i32]* @block_size_opts to i8*), i64 4) #16
  %24 = trunc i64 %23 to i32
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %16
  %27 = shl i64 %23, 32
  %28 = ashr exact i64 %27, 32
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* @block_size_opts, i64 0, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = or i32 %30, %22
  br label %67

; <label>:32:                                     ; preds = %16
  %33 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %33) #13
  %34 = call i32 @xstrtoumax(i8* %21, i8** nonnull %4, i32 0, i64* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6.288, i64 0, i64 0)) #13
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %66

; <label>:36:                                     ; preds = %32
  %37 = load i8, i8* %21, align 1
  %38 = add i8 %37, -48
  %39 = icmp ult i8 %38, 10
  br i1 %39, label %64, label %40

; <label>:40:                                     ; preds = %36
  %41 = load i8*, i8** %4, align 8
  br label %46

; <label>:42:                                     ; preds = %46
  %43 = load i8, i8* %49, align 1
  %44 = add i8 %43, -48
  %45 = icmp ult i8 %44, 10
  br i1 %45, label %63, label %46

; <label>:46:                                     ; preds = %42, %40
  %47 = phi i8* [ %21, %40 ], [ %49, %42 ]
  %48 = icmp eq i8* %47, %41
  %49 = getelementptr inbounds i8, i8* %47, i64 1
  br i1 %48, label %50, label %42

; <label>:50:                                     ; preds = %46
  %51 = or i32 %22, 128
  %52 = getelementptr inbounds i8, i8* %41, i64 -1
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 66
  %55 = or i32 %22, 384
  %56 = select i1 %54, i32 %55, i32 %51
  br i1 %54, label %57, label %61

; <label>:57:                                     ; preds = %50
  %58 = getelementptr inbounds i8, i8* %41, i64 -2
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 105
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %57, %50
  %62 = or i32 %56, 32
  br label %64

; <label>:63:                                     ; preds = %42
  br label %64

; <label>:64:                                     ; preds = %63, %61, %57, %36
  %65 = phi i32 [ %55, %57 ], [ %62, %61 ], [ %22, %36 ], [ %22, %63 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33) #13
  br label %70

; <label>:66:                                     ; preds = %32
  store i32 0, i32* %1, align 4
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33) #13
  br label %72

; <label>:67:                                     ; preds = %26, %12
  %68 = phi i64 [ 1, %26 ], [ %15, %12 ]
  %69 = phi i32 [ %31, %26 ], [ 0, %12 ]
  store i64 %68, i64* %2, align 8
  br label %70

; <label>:70:                                     ; preds = %67, %64
  %71 = phi i32 [ %69, %67 ], [ %65, %64 ]
  store i32 %71, i32* %1, align 4
  br label %72

; <label>:72:                                     ; preds = %66, %70
  %73 = phi i32 [ 0, %70 ], [ %34, %66 ]
  %74 = load i64, i64* %2, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %80

; <label>:76:                                     ; preds = %72
  %77 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.287, i64 0, i64 0)) #13
  %78 = icmp ne i8* %77, null
  %79 = select i1 %78, i64 512, i64 1024
  store i64 %79, i64* %2, align 8
  br label %80

; <label>:80:                                     ; preds = %76, %72
  %81 = phi i32 [ 4, %76 ], [ %73, %72 ]
  ret i32 %81
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @getuser(i32) local_unnamed_addr #0 {
  %2 = load %struct.userid*, %struct.userid** @user_alist, align 8
  %3 = icmp eq %struct.userid* %2, null
  br i1 %3, label %15, label %4

; <label>:4:                                      ; preds = %1
  br label %5

; <label>:5:                                      ; preds = %4, %10
  %6 = phi %struct.userid* [ %12, %10 ], [ %2, %4 ]
  %7 = getelementptr inbounds %struct.userid, %struct.userid* %6, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %35, label %10

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.userid, %struct.userid* %6, i64 0, i32 1
  %12 = load %struct.userid*, %struct.userid** %11, align 8
  %13 = icmp eq %struct.userid* %12, null
  br i1 %13, label %14, label %5

; <label>:14:                                     ; preds = %10
  br label %15

; <label>:15:                                     ; preds = %14, %1
  %16 = tail call %struct.passwd* @getpwuid(i32 %0) #13
  %17 = icmp eq %struct.passwd* %16, null
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %15
  %19 = getelementptr inbounds %struct.passwd, %struct.passwd* %16, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %21

; <label>:21:                                     ; preds = %15, %18
  %22 = phi i8* [ %20, %18 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.293, i64 0, i64 0), %15 ]
  %23 = tail call i64 @strlen(i8* %22) #16
  %24 = add i64 %23, 24
  %25 = and i64 %24, -8
  %26 = tail call noalias i8* @xmalloc(i64 %25) #13
  %27 = bitcast i8* %26 to %struct.userid*
  %28 = bitcast i8* %26 to i32*
  store i32 %0, i32* %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 16
  %30 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %29, i1 false) #13
  %31 = tail call i8* @__strcpy_chk(i8* nonnull %29, i8* nonnull %22, i64 %30) #13
  %32 = load i64, i64* bitcast (%struct.userid** @user_alist to i64*), align 8
  %33 = getelementptr inbounds i8, i8* %26, i64 8
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  store i8* %26, i8** bitcast (%struct.userid** @user_alist to i8**), align 8
  br label %36

; <label>:35:                                     ; preds = %5
  br label %36

; <label>:36:                                     ; preds = %35, %21
  %37 = phi %struct.userid* [ %27, %21 ], [ %6, %35 ]
  %38 = getelementptr inbounds %struct.userid, %struct.userid* %37, i64 0, i32 2, i64 0
  %39 = load i8, i8* %38, align 8
  %40 = icmp ne i8 %39, 0
  %41 = select i1 %40, i8* %38, i8* null
  ret i8* %41
}

declare %struct.passwd* @getpwuid(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32* @getuidbyname(i8*) local_unnamed_addr #0 {
  %2 = load %struct.userid*, %struct.userid** @user_alist, align 8
  %3 = icmp eq %struct.userid* %2, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* %0, align 1
  br label %12

; <label>:6:                                      ; preds = %22
  br label %7

; <label>:7:                                      ; preds = %6, %1
  %8 = load %struct.userid*, %struct.userid** @nouser_alist, align 8
  %9 = icmp eq %struct.userid* %8, null
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %7
  %11 = load i8, i8* %0, align 1
  br label %26

; <label>:12:                                     ; preds = %4, %22
  %13 = phi %struct.userid* [ %2, %4 ], [ %24, %22 ]
  %14 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 2, i64 0
  %15 = load i8, i8* %14, align 8
  %16 = icmp eq i8 %15, %5
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %12
  %18 = tail call i32 @strcmp(i8* %14, i8* nonnull %0) #13
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  %21 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 0, i32 0
  br label %61

; <label>:22:                                     ; preds = %17, %12
  %23 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 1
  %24 = load %struct.userid*, %struct.userid** %23, align 8
  %25 = icmp eq %struct.userid* %24, null
  br i1 %25, label %6, label %12

; <label>:26:                                     ; preds = %10, %34
  %27 = phi %struct.userid* [ %8, %10 ], [ %36, %34 ]
  %28 = getelementptr inbounds %struct.userid, %struct.userid* %27, i64 0, i32 2, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = icmp eq i8 %29, %11
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %26
  %32 = tail call i32 @strcmp(i8* %28, i8* nonnull %0) #13
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %60, label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = getelementptr inbounds %struct.userid, %struct.userid* %27, i64 0, i32 1
  %36 = load %struct.userid*, %struct.userid** %35, align 8
  %37 = icmp eq %struct.userid* %36, null
  br i1 %37, label %38, label %26

; <label>:38:                                     ; preds = %34
  br label %39

; <label>:39:                                     ; preds = %38, %7
  %40 = tail call %struct.passwd* @getpwnam(i8* %0)
  %41 = tail call i64 @strlen(i8* %0) #16
  %42 = add i64 %41, 24
  %43 = and i64 %42, -8
  %44 = tail call noalias i8* @xmalloc(i64 %43) #13
  %45 = getelementptr inbounds i8, i8* %44, i64 16
  %46 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %45, i1 false) #13
  %47 = tail call i8* @__strcpy_chk(i8* nonnull %45, i8* nonnull %0, i64 %46) #13
  %48 = icmp eq %struct.passwd* %40, null
  br i1 %48, label %56, label %49

; <label>:49:                                     ; preds = %39
  %50 = getelementptr inbounds %struct.passwd, %struct.passwd* %40, i64 0, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = bitcast i8* %44 to i32*
  store i32 %51, i32* %52, align 8
  %53 = load i64, i64* bitcast (%struct.userid** @user_alist to i64*), align 8
  %54 = getelementptr inbounds i8, i8* %44, i64 8
  %55 = bitcast i8* %54 to i64*
  store i64 %53, i64* %55, align 8
  store i8* %44, i8** bitcast (%struct.userid** @user_alist to i8**), align 8
  br label %61

; <label>:56:                                     ; preds = %39
  %57 = load i64, i64* bitcast (%struct.userid** @nouser_alist to i64*), align 8
  %58 = getelementptr inbounds i8, i8* %44, i64 8
  %59 = bitcast i8* %58 to i64*
  store i64 %57, i64* %59, align 8
  store i8* %44, i8** bitcast (%struct.userid** @nouser_alist to i8**), align 8
  br label %61

; <label>:60:                                     ; preds = %31
  br label %61

; <label>:61:                                     ; preds = %60, %56, %49, %20
  %62 = phi i32* [ %21, %20 ], [ %52, %49 ], [ null, %56 ], [ null, %60 ]
  ret i32* %62
}

; Function Attrs: nounwind
declare %struct.passwd* @getpwnam(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i8* @getgroup(i32) local_unnamed_addr #0 {
  %2 = load %struct.userid*, %struct.userid** @group_alist, align 8
  %3 = icmp eq %struct.userid* %2, null
  br i1 %3, label %15, label %4

; <label>:4:                                      ; preds = %1
  br label %5

; <label>:5:                                      ; preds = %4, %10
  %6 = phi %struct.userid* [ %12, %10 ], [ %2, %4 ]
  %7 = getelementptr inbounds %struct.userid, %struct.userid* %6, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %35, label %10

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.userid, %struct.userid* %6, i64 0, i32 1
  %12 = load %struct.userid*, %struct.userid** %11, align 8
  %13 = icmp eq %struct.userid* %12, null
  br i1 %13, label %14, label %5

; <label>:14:                                     ; preds = %10
  br label %15

; <label>:15:                                     ; preds = %14, %1
  %16 = tail call %struct.group* @getgrgid(i32 %0) #13
  %17 = icmp eq %struct.group* %16, null
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %15
  %19 = getelementptr inbounds %struct.group, %struct.group* %16, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %21

; <label>:21:                                     ; preds = %15, %18
  %22 = phi i8* [ %20, %18 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.293, i64 0, i64 0), %15 ]
  %23 = tail call i64 @strlen(i8* %22) #16
  %24 = add i64 %23, 24
  %25 = and i64 %24, -8
  %26 = tail call noalias i8* @xmalloc(i64 %25) #13
  %27 = bitcast i8* %26 to %struct.userid*
  %28 = bitcast i8* %26 to i32*
  store i32 %0, i32* %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 16
  %30 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %29, i1 false) #13
  %31 = tail call i8* @__strcpy_chk(i8* nonnull %29, i8* nonnull %22, i64 %30) #13
  %32 = load i64, i64* bitcast (%struct.userid** @group_alist to i64*), align 8
  %33 = getelementptr inbounds i8, i8* %26, i64 8
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  store i8* %26, i8** bitcast (%struct.userid** @group_alist to i8**), align 8
  br label %36

; <label>:35:                                     ; preds = %5
  br label %36

; <label>:36:                                     ; preds = %35, %21
  %37 = phi %struct.userid* [ %27, %21 ], [ %6, %35 ]
  %38 = getelementptr inbounds %struct.userid, %struct.userid* %37, i64 0, i32 2, i64 0
  %39 = load i8, i8* %38, align 8
  %40 = icmp ne i8 %39, 0
  %41 = select i1 %40, i8* %38, i8* null
  ret i8* %41
}

declare %struct.group* @getgrgid(i32) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define i32* @getgidbyname(i8*) local_unnamed_addr #0 {
  %2 = load %struct.userid*, %struct.userid** @group_alist, align 8
  %3 = icmp eq %struct.userid* %2, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* %0, align 1
  br label %12

; <label>:6:                                      ; preds = %22
  br label %7

; <label>:7:                                      ; preds = %6, %1
  %8 = load %struct.userid*, %struct.userid** @nogroup_alist, align 8
  %9 = icmp eq %struct.userid* %8, null
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %7
  %11 = load i8, i8* %0, align 1
  br label %26

; <label>:12:                                     ; preds = %4, %22
  %13 = phi %struct.userid* [ %2, %4 ], [ %24, %22 ]
  %14 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 2, i64 0
  %15 = load i8, i8* %14, align 8
  %16 = icmp eq i8 %15, %5
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %12
  %18 = tail call i32 @strcmp(i8* %14, i8* nonnull %0) #13
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  %21 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 0, i32 0
  br label %61

; <label>:22:                                     ; preds = %17, %12
  %23 = getelementptr inbounds %struct.userid, %struct.userid* %13, i64 0, i32 1
  %24 = load %struct.userid*, %struct.userid** %23, align 8
  %25 = icmp eq %struct.userid* %24, null
  br i1 %25, label %6, label %12

; <label>:26:                                     ; preds = %10, %34
  %27 = phi %struct.userid* [ %8, %10 ], [ %36, %34 ]
  %28 = getelementptr inbounds %struct.userid, %struct.userid* %27, i64 0, i32 2, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = icmp eq i8 %29, %11
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %26
  %32 = tail call i32 @strcmp(i8* %28, i8* nonnull %0) #13
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %60, label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = getelementptr inbounds %struct.userid, %struct.userid* %27, i64 0, i32 1
  %36 = load %struct.userid*, %struct.userid** %35, align 8
  %37 = icmp eq %struct.userid* %36, null
  br i1 %37, label %38, label %26

; <label>:38:                                     ; preds = %34
  br label %39

; <label>:39:                                     ; preds = %38, %7
  %40 = tail call %struct.group* @getgrnam(i8* %0) #13
  %41 = tail call i64 @strlen(i8* %0) #16
  %42 = add i64 %41, 24
  %43 = and i64 %42, -8
  %44 = tail call noalias i8* @xmalloc(i64 %43) #13
  %45 = getelementptr inbounds i8, i8* %44, i64 16
  %46 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %45, i1 false) #13
  %47 = tail call i8* @__strcpy_chk(i8* nonnull %45, i8* nonnull %0, i64 %46) #13
  %48 = icmp eq %struct.group* %40, null
  br i1 %48, label %56, label %49

; <label>:49:                                     ; preds = %39
  %50 = getelementptr inbounds %struct.group, %struct.group* %40, i64 0, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = bitcast i8* %44 to i32*
  store i32 %51, i32* %52, align 8
  %53 = load i64, i64* bitcast (%struct.userid** @group_alist to i64*), align 8
  %54 = getelementptr inbounds i8, i8* %44, i64 8
  %55 = bitcast i8* %54 to i64*
  store i64 %53, i64* %55, align 8
  store i8* %44, i8** bitcast (%struct.userid** @group_alist to i8**), align 8
  br label %61

; <label>:56:                                     ; preds = %39
  %57 = load i64, i64* bitcast (%struct.userid** @nogroup_alist to i64*), align 8
  %58 = getelementptr inbounds i8, i8* %44, i64 8
  %59 = bitcast i8* %58 to i64*
  store i64 %57, i64* %59, align 8
  store i8* %44, i8** bitcast (%struct.userid** @nogroup_alist to i8**), align 8
  br label %61

; <label>:60:                                     ; preds = %31
  br label %61

; <label>:61:                                     ; preds = %60, %56, %49, %20
  %62 = phi i32* [ %21, %20 ], [ %52, %49 ], [ null, %56 ], [ null, %60 ]
  ret i32* %62
}

declare %struct.group* @getgrnam(i8*) local_unnamed_addr #5

; Function Attrs: nounwind sspstrong uwtable
define i8* @imaxtostr(i64, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 20
  store i8 0, i8* %3, align 1
  %4 = icmp slt i64 %0, 0
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %2
  br label %19

; <label>:6:                                      ; preds = %2
  br label %7

; <label>:7:                                      ; preds = %6, %7
  %8 = phi i64 [ %14, %7 ], [ %0, %6 ]
  %9 = phi i8* [ %13, %7 ], [ %3, %6 ]
  %10 = srem i64 %8, 10
  %11 = sub nsw i64 48, %10
  %12 = trunc i64 %11 to i8
  %13 = getelementptr inbounds i8, i8* %9, i64 -1
  store i8 %12, i8* %13, align 1
  %14 = sdiv i64 %8, 10
  %15 = add i64 %8, 9
  %16 = icmp ugt i64 %15, 18
  br i1 %16, label %7, label %17

; <label>:17:                                     ; preds = %7
  %18 = getelementptr inbounds i8, i8* %9, i64 -2
  store i8 45, i8* %18, align 1
  br label %30

; <label>:19:                                     ; preds = %5, %19
  %20 = phi i64 [ %26, %19 ], [ %0, %5 ]
  %21 = phi i8* [ %25, %19 ], [ %3, %5 ]
  %22 = srem i64 %20, 10
  %23 = add nsw i64 %22, 48
  %24 = trunc i64 %23 to i8
  %25 = getelementptr inbounds i8, i8* %21, i64 -1
  store i8 %24, i8* %25, align 1
  %26 = sdiv i64 %20, 10
  %27 = add i64 %20, 9
  %28 = icmp ugt i64 %27, 18
  br i1 %28, label %19, label %29

; <label>:29:                                     ; preds = %19
  br label %30

; <label>:30:                                     ; preds = %29, %17
  %31 = phi i8* [ %18, %17 ], [ %25, %29 ]
  ret i8* %31
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @umaxtostr(i64, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 20
  store i8 0, i8* %3, align 1
  br label %4

; <label>:4:                                      ; preds = %2, %4
  %5 = phi i64 [ %0, %2 ], [ %11, %4 ]
  %6 = phi i8* [ %3, %2 ], [ %10, %4 ]
  %7 = urem i64 %5, 10
  %8 = trunc i64 %7 to i8
  %9 = or i8 %8, 48
  %10 = getelementptr inbounds i8, i8* %6, i64 -1
  store i8 %9, i8* %10, align 1
  %11 = udiv i64 %5, 10
  %12 = icmp ugt i64 %5, 9
  br i1 %12, label %4, label %13

; <label>:13:                                     ; preds = %4
  ret i8* %10
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @mbsalign(i8*, i8*, i64, i64* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = ptrtoint i8* %1 to i64
  %8 = tail call i64 @strlen(i8* %0) #16
  %9 = and i32 %5, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %94

; <label>:11:                                     ; preds = %6
  %12 = tail call i64 @__ctype_get_mb_cur_max() #13
  %13 = icmp ugt i64 %12, 1
  br i1 %13, label %14, label %94

; <label>:14:                                     ; preds = %11
  %15 = tail call i64 @mbstowcs(i32* null, i8* %0, i64 0) #13
  %16 = icmp eq i64 %15, -1
  br i1 %16, label %43, label %17

; <label>:17:                                     ; preds = %14
  %18 = add i64 %15, 1
  %19 = shl i64 %18, 2
  %20 = tail call noalias i8* @malloc(i64 %19) #13
  %21 = bitcast i8* %20 to i32*
  %22 = icmp eq i8* %20, null
  br i1 %22, label %43, label %23

; <label>:23:                                     ; preds = %17
  %24 = tail call i64 @mbstowcs(i32* %21, i8* %0, i64 %18) #13
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %94, label %26

; <label>:26:                                     ; preds = %23
  %27 = getelementptr inbounds i32, i32* %21, i64 %15
  store i32 0, i32* %27, align 4
  %28 = load i32, i32* %21, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %47, label %30

; <label>:30:                                     ; preds = %26
  br label %31

; <label>:31:                                     ; preds = %30, %38
  %32 = phi i32 [ %41, %38 ], [ %28, %30 ]
  %33 = phi i32* [ %40, %38 ], [ %21, %30 ]
  %34 = phi i8 [ %39, %38 ], [ 0, %30 ]
  %35 = tail call i32 @iswprint(i32 %32) #13
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %31
  store i32 65533, i32* %33, align 4
  br label %38

; <label>:38:                                     ; preds = %37, %31
  %39 = phi i8 [ %34, %31 ], [ 1, %37 ]
  %40 = getelementptr inbounds i32, i32* %33, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %46, label %31

; <label>:43:                                     ; preds = %14, %17
  %44 = and i32 %5, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %173, label %94

; <label>:46:                                     ; preds = %38
  br label %47

; <label>:47:                                     ; preds = %46, %26
  %48 = phi i8 [ 0, %26 ], [ %39, %46 ]
  %49 = tail call i32 @wcswidth(i32* %21, i64 %18) #13
  %50 = sext i32 %49 to i64
  %51 = and i8 %48, 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %56

; <label>:53:                                     ; preds = %47
  %54 = load i64, i64* %3, align 8
  %55 = icmp ugt i64 %50, %54
  br i1 %55, label %58, label %94

; <label>:56:                                     ; preds = %47
  %57 = tail call i64 @wcstombs(i8* null, i32* %21, i64 0) #13
  br label %58

; <label>:58:                                     ; preds = %53, %56
  %59 = phi i64 [ %57, %56 ], [ %8, %53 ]
  %60 = add i64 %59, 1
  %61 = tail call noalias i8* @malloc(i64 %60) #13
  %62 = icmp eq i8* %61, null
  br i1 %62, label %63, label %66

; <label>:63:                                     ; preds = %58
  %64 = and i32 %5, 1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %173, label %94

; <label>:66:                                     ; preds = %58
  %67 = load i64, i64* %3, align 8
  %68 = load i32, i32* %21, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %90, label %70

; <label>:70:                                     ; preds = %66
  br label %71

; <label>:71:                                     ; preds = %70, %83
  %72 = phi i32 [ %85, %83 ], [ %68, %70 ]
  %73 = phi i64 [ %81, %83 ], [ 0, %70 ]
  %74 = phi i32* [ %84, %83 ], [ %21, %70 ]
  %75 = tail call i32 @wcwidth(i32 %72) #13
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %77, label %78

; <label>:77:                                     ; preds = %71
  store i32 65533, i32* %74, align 4
  br label %78

; <label>:78:                                     ; preds = %77, %71
  %79 = phi i32 [ 1, %77 ], [ %75, %71 ]
  %80 = sext i32 %79 to i64
  %81 = add i64 %80, %73
  %82 = icmp ugt i64 %81, %67
  br i1 %82, label %87, label %83

; <label>:83:                                     ; preds = %78
  %84 = getelementptr inbounds i32, i32* %74, i64 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %71

; <label>:87:                                     ; preds = %83, %78
  %88 = phi i32* [ %74, %78 ], [ %84, %83 ]
  %89 = phi i64 [ %73, %78 ], [ %81, %83 ]
  br label %90

; <label>:90:                                     ; preds = %87, %66
  %91 = phi i32* [ %21, %66 ], [ %88, %87 ]
  %92 = phi i64 [ 0, %66 ], [ %89, %87 ]
  store i32 0, i32* %91, align 4
  %93 = tail call i64 @wcstombs(i8* nonnull %61, i32* %21, i64 %60) #13
  br label %94

; <label>:94:                                     ; preds = %43, %11, %6, %23, %63, %53, %90
  %95 = phi i8* [ null, %63 ], [ %61, %90 ], [ null, %53 ], [ null, %23 ], [ null, %6 ], [ null, %43 ], [ null, %11 ]
  %96 = phi i8* [ %20, %63 ], [ %20, %90 ], [ %20, %53 ], [ %20, %23 ], [ null, %6 ], [ null, %43 ], [ null, %11 ]
  %97 = phi i8* [ %0, %63 ], [ %61, %90 ], [ %0, %53 ], [ %0, %23 ], [ %0, %6 ], [ %0, %43 ], [ %0, %11 ]
  %98 = phi i64 [ %50, %63 ], [ %92, %90 ], [ %50, %53 ], [ %8, %23 ], [ %8, %6 ], [ %8, %43 ], [ %8, %11 ]
  %99 = phi i64 [ %8, %63 ], [ %93, %90 ], [ %8, %53 ], [ %8, %23 ], [ %8, %6 ], [ %8, %43 ], [ %8, %11 ]
  %100 = load i64, i64* %3, align 8
  %101 = icmp ugt i64 %98, %100
  %102 = select i1 %101, i64 %100, i64 %98
  %103 = select i1 %101, i64 %100, i64 %99
  %104 = icmp ugt i64 %100, %98
  %105 = sub i64 %100, %102
  %106 = select i1 %104, i64 %105, i64 0
  store i64 %102, i64* %3, align 8
  switch i32 %4, label %108 [
    i32 0, label %112
    i32 1, label %107
  ]

; <label>:107:                                    ; preds = %94
  br label %112

; <label>:108:                                    ; preds = %94
  %109 = lshr i64 %106, 1
  %110 = and i64 %106, 1
  %111 = add nuw i64 %109, %110
  br label %112

; <label>:112:                                    ; preds = %94, %108, %107
  %113 = phi i64 [ %111, %108 ], [ %106, %107 ], [ 0, %94 ]
  %114 = phi i64 [ %109, %108 ], [ 0, %107 ], [ %106, %94 ]
  %115 = and i32 %5, 4
  %116 = icmp eq i32 %115, 0
  %117 = select i1 %116, i64 %113, i64 0
  %118 = and i32 %5, 8
  %119 = icmp eq i32 %118, 0
  %120 = select i1 %119, i64 %114, i64 0
  %121 = icmp eq i64 %2, 0
  br i1 %121, label %170, label %122

; <label>:122:                                    ; preds = %112
  %123 = getelementptr inbounds i8, i8* %1, i64 %2
  %124 = getelementptr inbounds i8, i8* %123, i64 -1
  %125 = icmp ugt i8* %124, %1
  %126 = icmp ne i64 %117, 0
  %127 = and i1 %125, %126
  %128 = ptrtoint i8* %124 to i64
  br i1 %127, label %129, label %141

; <label>:129:                                    ; preds = %122
  %130 = sub i64 0, %117
  %131 = sub i64 %7, %128
  %132 = icmp ult i64 %131, %130
  %133 = select i1 %132, i64 %130, i64 %131
  %134 = sub i64 0, %133
  tail call void @llvm.memset.p0i8.i64(i8* %1, i8 32, i64 %134, i32 1, i1 false) #13
  %135 = sub i64 0, %113
  %136 = sub i64 1, %2
  %137 = icmp ult i64 %136, %135
  %138 = select i1 %137, i64 %135, i64 %136
  %139 = sub i64 0, %138
  %140 = getelementptr i8, i8* %1, i64 %139
  br label %141

; <label>:141:                                    ; preds = %122, %129
  %142 = phi i8* [ %140, %129 ], [ %1, %122 ]
  store i8 0, i8* %142, align 1
  %143 = ptrtoint i8* %142 to i64
  %144 = sub i64 %128, %143
  %145 = icmp ult i64 %103, %144
  %146 = select i1 %145, i64 %103, i64 %144
  %147 = tail call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %142, i1 false) #13
  %148 = tail call i8* @__mempcpy_chk(i8* nonnull %142, i8* nonnull %97, i64 %146, i64 %147) #13
  %149 = icmp ult i8* %148, %124
  %150 = icmp ne i64 %120, 0
  %151 = and i1 %150, %149
  br i1 %151, label %152, label %168

; <label>:152:                                    ; preds = %141
  %153 = sub i64 0, %120
  %154 = ptrtoint i8* %148 to i64
  %155 = sub i64 %154, %128
  %156 = icmp ult i64 %155, %153
  %157 = select i1 %156, i64 %153, i64 %155
  %158 = sub i64 0, %157
  tail call void @llvm.memset.p0i8.i64(i8* %148, i8 32, i64 %158, i32 1, i1 false) #13
  %159 = sub i64 0, %114
  %160 = sub i64 1, %7
  %161 = sub i64 %160, %2
  %162 = getelementptr i8, i8* %148, i64 %161
  %163 = ptrtoint i8* %162 to i64
  %164 = icmp ult i64 %163, %159
  %165 = select i1 %164, i64 %159, i64 %163
  %166 = sub i64 0, %165
  %167 = getelementptr i8, i8* %148, i64 %166
  br label %168

; <label>:168:                                    ; preds = %152, %141
  %169 = phi i8* [ %148, %141 ], [ %167, %152 ]
  store i8 0, i8* %169, align 1
  br label %170

; <label>:170:                                    ; preds = %112, %168
  %171 = add i64 %117, %103
  %172 = add i64 %171, %120
  br label %173

; <label>:173:                                    ; preds = %43, %63, %170
  %174 = phi i64 [ %172, %170 ], [ -1, %63 ], [ -1, %43 ]
  %175 = phi i8* [ %95, %170 ], [ null, %63 ], [ null, %43 ]
  %176 = phi i8* [ %96, %170 ], [ %20, %63 ], [ null, %43 ]
  tail call void @free(i8* %176) #13
  tail call void @free(i8* %175) #13
  ret i64 %174
}

; Function Attrs: nounwind
declare i64 @mbstowcs(i32*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @iswprint(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @wcswidth(i32*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @wcstombs(i8*, i32*, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i8* @ambsalign(i8*, i64* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = load i64, i64* %1, align 8
  br label %6

; <label>:6:                                      ; preds = %16, %4
  %7 = phi i64 [ %5, %4 ], [ %17, %16 ]
  %8 = phi i8* [ null, %4 ], [ %13, %16 ]
  %9 = phi i64 [ %5, %4 ], [ %12, %16 ]
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %20, label %11

; <label>:11:                                     ; preds = %6
  %12 = add i64 %7, 1
  %13 = tail call i8* @realloc(i8* %8, i64 %12) #13
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %11
  tail call void @free(i8* %8) #13
  br label %21

; <label>:16:                                     ; preds = %11
  store i64 %5, i64* %1, align 8
  %17 = tail call i64 @mbsalign(i8* %0, i8* nonnull %13, i64 %12, i64* %1, i32 %2, i32 %3)
  %18 = icmp eq i64 %17, -1
  br i1 %18, label %19, label %6

; <label>:19:                                     ; preds = %16
  tail call void @free(i8* nonnull %13) #13
  br label %21

; <label>:20:                                     ; preds = %6
  br label %21

; <label>:21:                                     ; preds = %20, %19, %15
  %22 = phi i8* [ null, %15 ], [ null, %19 ], [ %8, %20 ]
  ret i8* %22
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @gnu_mbswidth(i8*, i32) local_unnamed_addr #0 {
  %3 = tail call i64 @strlen(i8* %0) #16
  %4 = tail call i32 @mbsnwidth(i8* %0, i64 %3, i32 %1)
  ret i32 %4
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @mbsnwidth(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %struct.__mbstate_t*
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = tail call i64 @__ctype_get_mb_cur_max() #13
  %9 = icmp ugt i64 %8, 1
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %3
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  br label %108

; <label>:13:                                     ; preds = %3
  %14 = icmp sgt i64 %1, 0
  br i1 %14, label %15, label %115

; <label>:15:                                     ; preds = %13
  %16 = bitcast i64* %4 to i8*
  %17 = bitcast i32* %6 to i8*
  %18 = ptrtoint i8* %7 to i64
  %19 = and i32 %2, 2
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %2, 1
  %22 = icmp eq i32 %21, 0
  %23 = xor i32 %21, 1
  %24 = shl nuw nsw i32 %21, 2
  %25 = xor i32 %24, 5
  br label %26

; <label>:26:                                     ; preds = %15, %83
  %27 = phi i8* [ %0, %15 ], [ %85, %83 ]
  %28 = phi i32 [ 0, %15 ], [ %84, %83 ]
  %29 = load i8, i8* %27, align 1
  %30 = sext i8 %29 to i32
  switch i32 %30, label %34 [
    i32 32, label %31
    i32 33, label %31
    i32 34, label %31
    i32 35, label %31
    i32 37, label %31
    i32 38, label %31
    i32 39, label %31
    i32 40, label %31
    i32 41, label %31
    i32 42, label %31
    i32 43, label %31
    i32 44, label %31
    i32 45, label %31
    i32 46, label %31
    i32 47, label %31
    i32 48, label %31
    i32 49, label %31
    i32 50, label %31
    i32 51, label %31
    i32 52, label %31
    i32 53, label %31
    i32 54, label %31
    i32 55, label %31
    i32 56, label %31
    i32 57, label %31
    i32 58, label %31
    i32 59, label %31
    i32 60, label %31
    i32 61, label %31
    i32 62, label %31
    i32 63, label %31
    i32 65, label %31
    i32 66, label %31
    i32 67, label %31
    i32 68, label %31
    i32 69, label %31
    i32 70, label %31
    i32 71, label %31
    i32 72, label %31
    i32 73, label %31
    i32 74, label %31
    i32 75, label %31
    i32 76, label %31
    i32 77, label %31
    i32 78, label %31
    i32 79, label %31
    i32 80, label %31
    i32 81, label %31
    i32 82, label %31
    i32 83, label %31
    i32 84, label %31
    i32 85, label %31
    i32 86, label %31
    i32 87, label %31
    i32 88, label %31
    i32 89, label %31
    i32 90, label %31
    i32 91, label %31
    i32 92, label %31
    i32 93, label %31
    i32 94, label %31
    i32 95, label %31
    i32 97, label %31
    i32 98, label %31
    i32 99, label %31
    i32 100, label %31
    i32 101, label %31
    i32 102, label %31
    i32 103, label %31
    i32 104, label %31
    i32 105, label %31
    i32 106, label %31
    i32 107, label %31
    i32 108, label %31
    i32 109, label %31
    i32 110, label %31
    i32 111, label %31
    i32 112, label %31
    i32 113, label %31
    i32 114, label %31
    i32 115, label %31
    i32 116, label %31
    i32 117, label %31
    i32 118, label %31
    i32 119, label %31
    i32 120, label %31
    i32 121, label %31
    i32 122, label %31
    i32 123, label %31
    i32 124, label %31
    i32 125, label %31
    i32 126, label %31
  ]

; <label>:31:                                     ; preds = %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26, %26
  %32 = getelementptr inbounds i8, i8* %27, i64 1
  %33 = add nsw i32 %28, 1
  br label %83

; <label>:34:                                     ; preds = %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16) #13
  store i64 0, i64* %4, align 8
  br label %35

; <label>:35:                                     ; preds = %76, %34
  %36 = phi i32 [ %28, %34 ], [ %72, %76 ]
  %37 = phi i8* [ %27, %34 ], [ %73, %76 ]
  call void @llvm.lifetime.start(i64 4, i8* nonnull %17) #13
  %38 = ptrtoint i8* %37 to i64
  %39 = sub i64 %18, %38
  %40 = call i64 @rpl_mbrtowc(i32* nonnull %6, i8* %37, i64 %39, %struct.__mbstate_t* nonnull %5) #13
  switch i64 %40, label %49 [
    i64 -1, label %41
    i64 -2, label %45
    i64 0, label %48
  ]

; <label>:41:                                     ; preds = %35
  br i1 %22, label %42, label %71

; <label>:42:                                     ; preds = %41
  %43 = getelementptr inbounds i8, i8* %37, i64 1
  %44 = add nsw i32 %36, 1
  br label %71

; <label>:45:                                     ; preds = %35
  %46 = add nsw i32 %36, %23
  %47 = select i1 %22, i8* %7, i8* %37
  br label %71

; <label>:48:                                     ; preds = %35
  br label %49

; <label>:49:                                     ; preds = %35, %48
  %50 = phi i64 [ 1, %48 ], [ %40, %35 ]
  %51 = load i32, i32* %6, align 4
  %52 = call i32 @wcwidth(i32 %51) #13
  %53 = icmp sgt i32 %52, -1
  br i1 %53, label %54, label %59

; <label>:54:                                     ; preds = %49
  %55 = sub nsw i32 2147483647, %36
  %56 = icmp sgt i32 %52, %55
  br i1 %56, label %71, label %57

; <label>:57:                                     ; preds = %54
  %58 = add nsw i32 %52, %36
  br label %68

; <label>:59:                                     ; preds = %49
  br i1 %20, label %60, label %71

; <label>:60:                                     ; preds = %59
  %61 = load i32, i32* %6, align 4
  %62 = call i32 @iswcntrl(i32 %61) #13
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %68

; <label>:64:                                     ; preds = %60
  %65 = icmp eq i32 %36, 2147483647
  br i1 %65, label %71, label %66

; <label>:66:                                     ; preds = %64
  %67 = add nsw i32 %36, 1
  br label %68

; <label>:68:                                     ; preds = %60, %66, %57
  %69 = phi i32 [ %58, %57 ], [ %36, %60 ], [ %67, %66 ]
  %70 = getelementptr inbounds i8, i8* %37, i64 %50
  br label %71

; <label>:71:                                     ; preds = %45, %59, %64, %54, %41, %68, %42
  %72 = phi i32 [ %44, %42 ], [ %69, %68 ], [ %36, %41 ], [ %36, %54 ], [ 2147483647, %64 ], [ %36, %59 ], [ %46, %45 ]
  %73 = phi i8* [ %43, %42 ], [ %70, %68 ], [ %37, %41 ], [ %37, %54 ], [ %37, %64 ], [ %37, %59 ], [ %47, %45 ]
  %74 = phi i32 [ 5, %42 ], [ 0, %68 ], [ 1, %41 ], [ 7, %54 ], [ 7, %64 ], [ 1, %59 ], [ %25, %45 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %17) #13
  %75 = trunc i32 %74 to i3
  switch i3 %75, label %80 [
    i3 0, label %76
    i3 -3, label %79
  ]

; <label>:76:                                     ; preds = %71
  %77 = call i32 @mbsinit(%struct.__mbstate_t* nonnull %5) #16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %35, label %79

; <label>:79:                                     ; preds = %71, %76
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #13
  br label %83

; <label>:80:                                     ; preds = %71
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #13
  %81 = icmp eq i3 %75, -1
  %82 = select i1 %81, i32 2147483647, i32 -1
  ret i32 %82

; <label>:83:                                     ; preds = %31, %79
  %84 = phi i32 [ %33, %31 ], [ %72, %79 ]
  %85 = phi i8* [ %32, %31 ], [ %73, %79 ]
  %86 = icmp ult i8* %85, %7
  br i1 %86, label %26, label %111

; <label>:87:                                     ; preds = %108, %102
  %88 = phi i8* [ %91, %102 ], [ %110, %108 ]
  %89 = icmp ult i8* %88, %7
  br i1 %89, label %90, label %112

; <label>:90:                                     ; preds = %87
  %91 = getelementptr inbounds i8, i8* %88, i64 1
  %92 = load i8, i8* %88, align 1
  %93 = tail call i16** @__ctype_b_loc() #1
  %94 = load i16*, i16** %93, align 8
  %95 = zext i8 %92 to i64
  %96 = getelementptr inbounds i16, i16* %94, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = and i32 %98, 16384
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %105

; <label>:101:                                    ; preds = %90
  br i1 %12, label %102, label %112

; <label>:102:                                    ; preds = %101
  %103 = and i32 %98, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %87

; <label>:105:                                    ; preds = %90, %102
  %106 = icmp eq i32 %109, 2147483647
  %107 = add nsw i32 %109, 1
  br i1 %106, label %114, label %108

; <label>:108:                                    ; preds = %10, %105
  %109 = phi i32 [ 0, %10 ], [ %107, %105 ]
  %110 = phi i8* [ %0, %10 ], [ %91, %105 ]
  br label %87

; <label>:111:                                    ; preds = %83
  br label %115

; <label>:112:                                    ; preds = %87, %101
  %113 = phi i32 [ -1, %101 ], [ %109, %87 ]
  br label %115

; <label>:114:                                    ; preds = %105
  br label %115

; <label>:115:                                    ; preds = %114, %112, %111, %13
  %116 = phi i32 [ 0, %13 ], [ %84, %111 ], [ %113, %112 ], [ 2147483647, %114 ]
  ret i32 %116
}

; Function Attrs: nounwind
declare i32 @iswcntrl(i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define void @mpsort(i8**, i64, i32 (i8*, i8*)*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i8*, i8** %0, i64 %1
  tail call fastcc void @mpsort_with_tmp(i8** %0, i64 %1, i8** %4, i32 (i8*, i8*)* %2)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mpsort_with_tmp(i8** noalias, i64, i8** noalias, i32 (i8*, i8*)*) unnamed_addr #0 {
  %5 = icmp ult i64 %1, 3
  br i1 %5, label %6, label %15

; <label>:6:                                      ; preds = %4
  %7 = icmp eq i64 %1, 2
  br i1 %7, label %8, label %118

; <label>:8:                                      ; preds = %6
  %9 = load i8*, i8** %0, align 8
  %10 = getelementptr inbounds i8*, i8** %0, i64 1
  %11 = load i8*, i8** %10, align 8
  %12 = tail call i32 %3(i8* %9, i8* %11) #13
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %118, label %14

; <label>:14:                                     ; preds = %8
  store i8* %11, i8** %0, align 8
  store i8* %9, i8** %10, align 8
  br label %118

; <label>:15:                                     ; preds = %4
  %16 = lshr i64 %1, 1
  %17 = sub i64 %1, %16
  %18 = getelementptr inbounds i8*, i8** %0, i64 %16
  tail call fastcc void @mpsort_with_tmp(i8** %18, i64 %17, i8** %2, i32 (i8*, i8*)* %3)
  %19 = icmp eq i64 %1, 3
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %15
  %21 = bitcast i8** %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast i8** %2 to i64*
  store i64 %22, i64* %23, align 8
  br label %74

; <label>:24:                                     ; preds = %15
  %25 = lshr i64 %1, 2
  %26 = sub nsw i64 %16, %25
  %27 = getelementptr inbounds i8*, i8** %0, i64 %25
  tail call fastcc void @mpsort_with_tmp(i8** %27, i64 %26, i8** %2, i32 (i8*, i8*)* %3) #13
  tail call fastcc void @mpsort_with_tmp(i8** %0, i64 %25, i8** %2, i32 (i8*, i8*)* %3) #13
  %28 = load i8*, i8** %27, align 8
  br label %29

; <label>:29:                                     ; preds = %48, %24
  %30 = phi i64 [ %46, %48 ], [ 0, %24 ]
  %31 = phi i64 [ %42, %48 ], [ %25, %24 ]
  %32 = phi i8** [ %45, %48 ], [ %2, %24 ]
  %33 = phi i8** [ %49, %48 ], [ %0, %24 ]
  %34 = phi i8* [ %44, %48 ], [ %28, %24 ]
  %35 = load i8*, i8** %33, align 8
  %36 = tail call i32 %3(i8* %35, i8* %34) #13
  %37 = icmp slt i32 %36, 1
  %38 = getelementptr inbounds i8*, i8** %32, i64 1
  br i1 %37, label %41, label %39

; <label>:39:                                     ; preds = %29
  br label %50

; <label>:40:                                     ; preds = %57
  br label %41

; <label>:41:                                     ; preds = %40, %29
  %42 = phi i64 [ %31, %29 ], [ %55, %40 ]
  %43 = phi i8** [ %32, %29 ], [ %51, %40 ]
  %44 = phi i8* [ %34, %29 ], [ %59, %40 ]
  %45 = phi i8** [ %38, %29 ], [ %62, %40 ]
  store i8* %35, i8** %43, align 8
  %46 = add i64 %30, 1
  %47 = icmp eq i64 %46, %25
  br i1 %47, label %64, label %48

; <label>:48:                                     ; preds = %41
  %49 = getelementptr inbounds i8*, i8** %0, i64 %46
  br label %29

; <label>:50:                                     ; preds = %39, %57
  %51 = phi i8** [ %62, %57 ], [ %38, %39 ]
  %52 = phi i8* [ %59, %57 ], [ %34, %39 ]
  %53 = phi i8** [ %51, %57 ], [ %32, %39 ]
  %54 = phi i64 [ %55, %57 ], [ %31, %39 ]
  store i8* %52, i8** %53, align 8
  %55 = add i64 %54, 1
  %56 = icmp eq i64 %55, %16
  br i1 %56, label %63, label %57

; <label>:57:                                     ; preds = %50
  %58 = getelementptr inbounds i8*, i8** %0, i64 %55
  %59 = load i8*, i8** %58, align 8
  %60 = tail call i32 %3(i8* %35, i8* %59) #13
  %61 = icmp slt i32 %60, 1
  %62 = getelementptr inbounds i8*, i8** %51, i64 1
  br i1 %61, label %40, label %50

; <label>:63:                                     ; preds = %50
  br label %65

; <label>:64:                                     ; preds = %41
  br label %65

; <label>:65:                                     ; preds = %64, %63
  %66 = phi i8** [ %51, %63 ], [ %45, %64 ]
  %67 = phi i64 [ %30, %63 ], [ %42, %64 ]
  %68 = phi i64 [ %25, %63 ], [ %16, %64 ]
  %69 = bitcast i8** %66 to i8*
  %70 = getelementptr inbounds i8*, i8** %0, i64 %67
  %71 = bitcast i8** %70 to i8*
  %72 = sub i64 %68, %67
  %73 = shl i64 %72, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %71, i64 %73, i32 8, i1 false) #13
  br label %74

; <label>:74:                                     ; preds = %65, %20
  %75 = load i8*, i8** %18, align 8
  br label %76

; <label>:76:                                     ; preds = %94, %74
  %77 = phi i64 [ %92, %94 ], [ 0, %74 ]
  %78 = phi i64 [ %88, %94 ], [ %16, %74 ]
  %79 = phi i64 [ %95, %94 ], [ 0, %74 ]
  %80 = phi i8* [ %90, %94 ], [ %75, %74 ]
  %81 = phi i8** [ %96, %94 ], [ %2, %74 ]
  %82 = load i8*, i8** %81, align 8
  %83 = tail call i32 %3(i8* %82, i8* %80) #13
  %84 = icmp slt i32 %83, 1
  br i1 %84, label %87, label %85

; <label>:85:                                     ; preds = %76
  br label %97

; <label>:86:                                     ; preds = %112
  br label %87

; <label>:87:                                     ; preds = %86, %76
  %88 = phi i64 [ %78, %76 ], [ %103, %86 ]
  %89 = phi i64 [ %79, %76 ], [ %101, %86 ]
  %90 = phi i8* [ %80, %76 ], [ %114, %86 ]
  %91 = getelementptr inbounds i8*, i8** %0, i64 %89
  store i8* %82, i8** %91, align 8
  %92 = add i64 %77, 1
  %93 = icmp eq i64 %92, %16
  br i1 %93, label %117, label %94

; <label>:94:                                     ; preds = %87
  %95 = add i64 %89, 1
  %96 = getelementptr inbounds i8*, i8** %2, i64 %92
  br label %76

; <label>:97:                                     ; preds = %85, %112
  %98 = phi i8* [ %114, %112 ], [ %80, %85 ]
  %99 = phi i64 [ %101, %112 ], [ %79, %85 ]
  %100 = phi i64 [ %103, %112 ], [ %78, %85 ]
  %101 = add i64 %99, 1
  %102 = getelementptr inbounds i8*, i8** %0, i64 %99
  store i8* %98, i8** %102, align 8
  %103 = add i64 %100, 1
  %104 = icmp eq i64 %103, %1
  br i1 %104, label %105, label %112

; <label>:105:                                    ; preds = %97
  %106 = getelementptr inbounds i8*, i8** %0, i64 %101
  %107 = bitcast i8** %106 to i8*
  %108 = getelementptr inbounds i8*, i8** %2, i64 %77
  %109 = bitcast i8** %108 to i8*
  %110 = sub i64 %16, %77
  %111 = shl i64 %110, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %109, i64 %111, i32 8, i1 false)
  br label %118

; <label>:112:                                    ; preds = %97
  %113 = getelementptr inbounds i8*, i8** %0, i64 %103
  %114 = load i8*, i8** %113, align 8
  %115 = tail call i32 %3(i8* %82, i8* %114) #13
  %116 = icmp slt i32 %115, 1
  br i1 %116, label %86, label %97

; <label>:117:                                    ; preds = %87
  br label %118

; <label>:118:                                    ; preds = %117, %105, %8, %14, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_program_name(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = tail call i64 @fwrite(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.312, i64 0, i64 0), i64 55, i64 1, %struct._IO_FILE* %4) #18
  tail call void @abort() #15
  unreachable

; <label>:6:                                      ; preds = %1
  %7 = tail call i8* @strrchr(i8* nonnull %0, i32 47) #16
  %8 = icmp ne i8* %7, null
  %9 = getelementptr inbounds i8, i8* %7, i64 1
  %10 = select i1 %8, i8* %9, i8* %0
  %11 = ptrtoint i8* %10 to i64
  %12 = ptrtoint i8* %0 to i64
  %13 = sub i64 %11, %12
  %14 = icmp sgt i64 %13, 6
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %6
  %16 = getelementptr inbounds i8, i8* %10, i64 -7
  %17 = tail call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.313, i64 0, i64 0), i64 7) #16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %15
  %20 = tail call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.314, i64 0, i64 0), i64 3) #16
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds i8, i8* %10, i64 3
  store i8* %23, i8** @program_invocation_short_name, align 8
  br label %24

; <label>:24:                                     ; preds = %19, %22, %15, %6
  %25 = phi i8* [ %23, %22 ], [ %10, %19 ], [ %0, %15 ], [ %0, %6 ]
  store i8* %25, i8** @program_name, align 8
  store i8* %25, i8** @program_invocation_name, align 8
  ret void
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #13

; Function Attrs: nounwind sspstrong uwtable
define %struct.quoting_options* @clone_quoting_options(%struct.quoting_options*) local_unnamed_addr #0 {
  %2 = tail call i32* @__errno_location() #1
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne %struct.quoting_options* %0, null
  %5 = bitcast %struct.quoting_options* %0 to i8*
  %6 = select i1 %4, i8* %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*)
  %7 = tail call i8* @xmemdup(i8* %6, i64 56) #13
  %8 = bitcast i8* %7 to %struct.quoting_options*
  store i32 %3, i32* %2, align 4
  ret %struct.quoting_options* %8
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i32 @get_quoting_style(%struct.quoting_options* readonly) local_unnamed_addr #8 {
  %2 = icmp ne %struct.quoting_options* %0, null
  %3 = select i1 %2, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  ret i32 %5
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_quoting_style(%struct.quoting_options*, i32) local_unnamed_addr #0 {
  %3 = icmp ne %struct.quoting_options* %0, null
  %4 = select i1 %3, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) local_unnamed_addr #0 {
  %4 = icmp ne %struct.quoting_options* %0, null
  %5 = select i1 %4, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %6 = lshr i8 %1, 5
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 %7
  %9 = and i8 %1, 31
  %10 = zext i8 %9 to i32
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, %10
  %13 = and i32 %12, 1
  %14 = and i32 %2, 1
  %15 = xor i32 %13, %14
  %16 = shl i32 %15, %10
  %17 = xor i32 %16, %11
  store i32 %17, i32* %8, align 4
  ret i32 %13
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @set_quoting_flags(%struct.quoting_options*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.quoting_options* %0, null
  %4 = select i1 %3, %struct.quoting_options* @default_quoting_options, %struct.quoting_options* %0
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  store i32 %1, i32* %5, align 4
  ret i32 %6
}

; Function Attrs: nounwind sspstrong uwtable
define void @set_custom_quoting(%struct.quoting_options*, i8*, i8*) local_unnamed_addr #0 {
  %4 = icmp eq %struct.quoting_options* %0, null
  %5 = select i1 %4, %struct.quoting_options* @default_quoting_options, %struct.quoting_options* %0
  %6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %6, align 8
  %7 = icmp ne i8* %1, null
  %8 = icmp ne i8* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %1, i8** %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %2, i8** %13, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @quotearg_buffer(i8*, i64, i8*, i64, %struct.quoting_options* readonly) local_unnamed_addr #0 {
  %6 = icmp ne %struct.quoting_options* %4, null
  %7 = select i1 %6, %struct.quoting_options* %4, %struct.quoting_options* @default_quoting_options
  %8 = tail call i32* @__errno_location() #1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 2, i64 0
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i64 0, i32 4
  %18 = load i8*, i8** %17, align 8
  %19 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %1, i8* %2, i64 %3, i32 %11, i32 %13, i32* %14, i8* %16, i8* %18)
  store i32 %9, i32* %8, align 4
  ret i64 %19
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32* readonly, i8* readonly, i8* readonly) unnamed_addr #0 {
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.__mbstate_t*
  %12 = alloca i32, align 4
  %13 = tail call i64 @__ctype_get_mb_cur_max() #13
  %14 = icmp eq i64 %13, 1
  %15 = lshr i32 %5, 1
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = bitcast i64* %10 to i8*
  %19 = bitcast i32* %12 to i8*
  %20 = icmp eq i32* %6, null
  %21 = icmp ne i32* %6, null
  %22 = and i32 %5, 1
  %23 = icmp eq i32 %22, 0
  %24 = and i32 %5, 4
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds i8, i8* %2, i64 1
  br label %27

; <label>:27:                                     ; preds = %614, %9
  %28 = phi i32 [ %4, %9 ], [ %96, %614 ]
  %29 = phi i8* [ %7, %9 ], [ %97, %614 ]
  %30 = phi i8* [ %8, %9 ], [ %98, %614 ]
  %31 = phi i64 [ 0, %9 ], [ %126, %614 ]
  %32 = phi i8* [ null, %9 ], [ %100, %614 ]
  %33 = phi i64 [ 0, %9 ], [ %101, %614 ]
  %34 = phi i8 [ 0, %9 ], [ %102, %614 ]
  %35 = phi i64 [ %3, %9 ], [ %598, %614 ]
  %36 = phi i8 [ %17, %9 ], [ %103, %614 ]
  %37 = phi i8 [ 0, %9 ], [ %128, %614 ]
  %38 = phi i8 [ 0, %9 ], [ %129, %614 ]
  %39 = phi i8 [ 1, %9 ], [ %130, %614 ]
  %40 = phi i64 [ %1, %9 ], [ %126, %614 ]
  switch i32 %28, label %94 [
    i32 6, label %41
    i32 5, label %42
    i32 7, label %95
    i32 0, label %93
    i32 2, label %85
    i32 4, label %79
    i32 3, label %76
    i32 1, label %77
    i32 10, label %51
    i32 8, label %48
    i32 9, label %48
  ]

; <label>:41:                                     ; preds = %27
  br label %95

; <label>:42:                                     ; preds = %27
  %43 = and i8 %36, 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %95

; <label>:45:                                     ; preds = %42
  %46 = icmp eq i64 %40, 0
  br i1 %46, label %95, label %47

; <label>:47:                                     ; preds = %45
  store i8 34, i8* %0, align 1
  br label %95

; <label>:48:                                     ; preds = %27, %27
  %49 = call fastcc i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.339, i64 0, i64 0), i32 %28)
  %50 = call fastcc i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.340, i64 0, i64 0), i32 %28)
  br label %51

; <label>:51:                                     ; preds = %27, %48
  %52 = phi i8* [ %49, %48 ], [ %29, %27 ]
  %53 = phi i8* [ %50, %48 ], [ %30, %27 ]
  %54 = and i8 %36, 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %73

; <label>:56:                                     ; preds = %51
  %57 = load i8, i8* %52, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %73, label %59

; <label>:59:                                     ; preds = %56
  br label %60

; <label>:60:                                     ; preds = %59, %67
  %61 = phi i8 [ %70, %67 ], [ %57, %59 ]
  %62 = phi i8* [ %69, %67 ], [ %52, %59 ]
  %63 = phi i64 [ %68, %67 ], [ 0, %59 ]
  %64 = icmp ult i64 %63, %40
  br i1 %64, label %65, label %67

; <label>:65:                                     ; preds = %60
  %66 = getelementptr inbounds i8, i8* %0, i64 %63
  store i8 %61, i8* %66, align 1
  br label %67

; <label>:67:                                     ; preds = %65, %60
  %68 = add i64 %63, 1
  %69 = getelementptr inbounds i8, i8* %62, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %60

; <label>:72:                                     ; preds = %67
  br label %73

; <label>:73:                                     ; preds = %72, %56, %51
  %74 = phi i64 [ 0, %51 ], [ 0, %56 ], [ %68, %72 ]
  %75 = call i64 @strlen(i8* %53) #16
  br label %95

; <label>:76:                                     ; preds = %27
  br label %77

; <label>:77:                                     ; preds = %27, %76
  %78 = phi i8 [ %34, %27 ], [ 1, %76 ]
  br label %79

; <label>:79:                                     ; preds = %27, %77
  %80 = phi i8 [ %34, %27 ], [ %78, %77 ]
  %81 = phi i8 [ %36, %27 ], [ 1, %77 ]
  %82 = and i8 %81, 1
  %83 = icmp eq i8 %82, 0
  %84 = select i1 %83, i8 1, i8 %80
  br label %85

; <label>:85:                                     ; preds = %79, %27
  %86 = phi i8 [ %34, %27 ], [ %84, %79 ]
  %87 = phi i8 [ %36, %27 ], [ %81, %79 ]
  %88 = and i8 %87, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %90, label %95

; <label>:90:                                     ; preds = %85
  %91 = icmp eq i64 %40, 0
  br i1 %91, label %95, label %92

; <label>:92:                                     ; preds = %90
  store i8 39, i8* %0, align 1
  br label %95

; <label>:93:                                     ; preds = %27
  br label %95

; <label>:94:                                     ; preds = %27
  call void @abort() #15
  unreachable

; <label>:95:                                     ; preds = %41, %85, %90, %92, %27, %42, %45, %47, %93, %73
  %96 = phi i32 [ 0, %93 ], [ %28, %73 ], [ 5, %47 ], [ 5, %45 ], [ 5, %42 ], [ 7, %27 ], [ 2, %92 ], [ 2, %90 ], [ 2, %85 ], [ 5, %41 ]
  %97 = phi i8* [ %29, %93 ], [ %52, %73 ], [ %29, %47 ], [ %29, %45 ], [ %29, %42 ], [ %29, %27 ], [ %29, %92 ], [ %29, %90 ], [ %29, %85 ], [ %29, %41 ]
  %98 = phi i8* [ %30, %93 ], [ %53, %73 ], [ %30, %47 ], [ %30, %45 ], [ %30, %42 ], [ %30, %27 ], [ %30, %92 ], [ %30, %90 ], [ %30, %85 ], [ %30, %41 ]
  %99 = phi i64 [ 0, %93 ], [ %74, %73 ], [ 1, %47 ], [ 1, %45 ], [ 0, %42 ], [ 0, %27 ], [ 1, %92 ], [ 1, %90 ], [ 0, %85 ], [ 0, %41 ]
  %100 = phi i8* [ %32, %93 ], [ %53, %73 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.341, i64 0, i64 0), %47 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.341, i64 0, i64 0), %45 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.341, i64 0, i64 0), %42 ], [ %32, %27 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.340, i64 0, i64 0), %92 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.340, i64 0, i64 0), %90 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.340, i64 0, i64 0), %85 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.341, i64 0, i64 0), %41 ]
  %101 = phi i64 [ %33, %93 ], [ %75, %73 ], [ 1, %47 ], [ 1, %45 ], [ 1, %42 ], [ %33, %27 ], [ 1, %92 ], [ 1, %90 ], [ 1, %85 ], [ 1, %41 ]
  %102 = phi i8 [ %34, %93 ], [ 1, %73 ], [ 1, %47 ], [ 1, %45 ], [ 1, %42 ], [ 1, %27 ], [ %86, %92 ], [ %86, %90 ], [ %86, %85 ], [ 1, %41 ]
  %103 = phi i8 [ 0, %93 ], [ %36, %73 ], [ %36, %47 ], [ %36, %45 ], [ %36, %42 ], [ 0, %27 ], [ %87, %92 ], [ %87, %90 ], [ %87, %85 ], [ 1, %41 ]
  %104 = and i8 %102, 1
  %105 = icmp ne i8 %104, 0
  %106 = icmp ne i32 %96, 2
  %107 = and i1 %106, %105
  %108 = icmp ne i64 %101, 0
  %109 = and i1 %108, %107
  %110 = icmp ugt i64 %101, 1
  %111 = and i8 %103, 1
  %112 = icmp eq i8 %111, 0
  %113 = xor i1 %105, true
  %114 = icmp eq i32 %96, 2
  %115 = icmp ne i8 %111, 0
  %116 = and i1 %114, %115
  %117 = and i1 %21, %115
  %118 = or i1 %106, %112
  %119 = and i8 %102, %103
  %120 = and i8 %119, 1
  %121 = icmp ne i8 %120, 0
  %122 = and i1 %121, %108
  br label %123

; <label>:123:                                    ; preds = %587, %95
  %124 = phi i64 [ 0, %95 ], [ %596, %587 ]
  %125 = phi i64 [ %99, %95 ], [ %589, %587 ]
  %126 = phi i64 [ %31, %95 ], [ %590, %587 ]
  %127 = phi i64 [ %35, %95 ], [ %591, %587 ]
  %128 = phi i8 [ %37, %95 ], [ %592, %587 ]
  %129 = phi i8 [ %38, %95 ], [ %593, %587 ]
  %130 = phi i8 [ %39, %95 ], [ %594, %587 ]
  %131 = phi i64 [ %40, %95 ], [ %595, %587 ]
  %132 = icmp eq i64 %127, -1
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %123
  %134 = icmp eq i64 %124, %127
  br i1 %134, label %597, label %139

; <label>:135:                                    ; preds = %123
  %136 = getelementptr inbounds i8, i8* %2, i64 %124
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %597, label %139

; <label>:139:                                    ; preds = %133, %135
  br i1 %109, label %140, label %155

; <label>:140:                                    ; preds = %139
  %141 = add i64 %124, %101
  %142 = and i1 %110, %132
  br i1 %142, label %143, label %145

; <label>:143:                                    ; preds = %140
  %144 = call i64 @strlen(i8* %2) #16
  br label %145

; <label>:145:                                    ; preds = %140, %143
  %146 = phi i64 [ %144, %143 ], [ %127, %140 ]
  %147 = icmp ugt i64 %141, %146
  br i1 %147, label %155, label %148

; <label>:148:                                    ; preds = %145
  %149 = getelementptr inbounds i8, i8* %2, i64 %124
  %150 = call i32 @memcmp(i8* %149, i8* %100, i64 %101) #16
  %151 = icmp ne i32 %150, 0
  %152 = or i1 %151, %112
  %153 = xor i1 %151, true
  %154 = zext i1 %153 to i8
  br i1 %152, label %155, label %644

; <label>:155:                                    ; preds = %148, %145, %139
  %156 = phi i64 [ %146, %148 ], [ %146, %145 ], [ %127, %139 ]
  %157 = phi i8 [ %154, %148 ], [ 0, %145 ], [ 0, %139 ]
  %158 = getelementptr inbounds i8, i8* %2, i64 %124
  %159 = load i8, i8* %158, align 1
  switch i8 %159, label %298 [
    i8 0, label %160
    i8 63, label %210
    i8 7, label %257
    i8 8, label %247
    i8 12, label %248
    i8 10, label %255
    i8 13, label %249
    i8 9, label %250
    i8 11, label %251
    i8 92, label %252
    i8 123, label %259
    i8 125, label %259
    i8 35, label %270
    i8 126, label %270
    i8 32, label %272
    i8 33, label %273
    i8 34, label %273
    i8 36, label %273
    i8 38, label %273
    i8 40, label %273
    i8 41, label %273
    i8 42, label %273
    i8 59, label %273
    i8 60, label %273
    i8 61, label %273
    i8 62, label %273
    i8 91, label %273
    i8 94, label %273
    i8 96, label %273
    i8 124, label %273
    i8 39, label %275
    i8 37, label %476
    i8 43, label %476
    i8 44, label %476
    i8 45, label %476
    i8 46, label %476
    i8 47, label %476
    i8 48, label %476
    i8 49, label %476
    i8 50, label %476
    i8 51, label %476
    i8 52, label %476
    i8 53, label %476
    i8 54, label %476
    i8 55, label %476
    i8 56, label %476
    i8 57, label %476
    i8 58, label %476
    i8 65, label %476
    i8 66, label %476
    i8 67, label %476
    i8 68, label %476
    i8 69, label %476
    i8 70, label %476
    i8 71, label %476
    i8 72, label %476
    i8 73, label %476
    i8 74, label %476
    i8 75, label %476
    i8 76, label %476
    i8 77, label %476
    i8 78, label %476
    i8 79, label %476
    i8 80, label %476
    i8 81, label %476
    i8 82, label %476
    i8 83, label %476
    i8 84, label %476
    i8 85, label %476
    i8 86, label %476
    i8 87, label %476
    i8 88, label %476
    i8 89, label %476
    i8 90, label %476
    i8 93, label %476
    i8 95, label %476
    i8 97, label %476
    i8 98, label %476
    i8 99, label %476
    i8 100, label %476
    i8 101, label %476
    i8 102, label %476
    i8 103, label %476
    i8 104, label %476
    i8 105, label %476
    i8 106, label %476
    i8 107, label %476
    i8 108, label %476
    i8 109, label %476
    i8 110, label %476
    i8 111, label %476
    i8 112, label %476
    i8 113, label %476
    i8 114, label %476
    i8 115, label %476
    i8 116, label %476
    i8 117, label %476
    i8 118, label %476
    i8 119, label %476
    i8 120, label %476
    i8 121, label %476
    i8 122, label %476
  ]

; <label>:160:                                    ; preds = %155
  br i1 %105, label %161, label %209

; <label>:161:                                    ; preds = %160
  br i1 %112, label %162, label %644

; <label>:162:                                    ; preds = %161
  %163 = and i8 %128, 1
  %164 = icmp eq i8 %163, 0
  %165 = and i1 %114, %164
  br i1 %165, label %166, label %182

; <label>:166:                                    ; preds = %162
  %167 = icmp ult i64 %125, %131
  br i1 %167, label %168, label %170

; <label>:168:                                    ; preds = %166
  %169 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 39, i8* %169, align 1
  br label %170

; <label>:170:                                    ; preds = %168, %166
  %171 = add i64 %125, 1
  %172 = icmp ult i64 %171, %131
  br i1 %172, label %173, label %175

; <label>:173:                                    ; preds = %170
  %174 = getelementptr inbounds i8, i8* %0, i64 %171
  store i8 36, i8* %174, align 1
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = add i64 %125, 2
  %177 = icmp ult i64 %176, %131
  br i1 %177, label %178, label %180

; <label>:178:                                    ; preds = %175
  %179 = getelementptr inbounds i8, i8* %0, i64 %176
  store i8 39, i8* %179, align 1
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = add i64 %125, 3
  br label %182

; <label>:182:                                    ; preds = %162, %180
  %183 = phi i64 [ %181, %180 ], [ %125, %162 ]
  %184 = phi i8 [ 1, %180 ], [ %128, %162 ]
  %185 = icmp ult i64 %183, %131
  br i1 %185, label %186, label %188

; <label>:186:                                    ; preds = %182
  %187 = getelementptr inbounds i8, i8* %0, i64 %183
  store i8 92, i8* %187, align 1
  br label %188

; <label>:188:                                    ; preds = %186, %182
  %189 = add i64 %183, 1
  br i1 %106, label %190, label %476

; <label>:190:                                    ; preds = %188
  %191 = add i64 %124, 1
  %192 = icmp ult i64 %191, %156
  br i1 %192, label %193, label %476

; <label>:193:                                    ; preds = %190
  %194 = getelementptr inbounds i8, i8* %2, i64 %191
  %195 = load i8, i8* %194, align 1
  %196 = add i8 %195, -48
  %197 = icmp ult i8 %196, 10
  br i1 %197, label %198, label %476

; <label>:198:                                    ; preds = %193
  %199 = icmp ult i64 %189, %131
  br i1 %199, label %200, label %202

; <label>:200:                                    ; preds = %198
  %201 = getelementptr inbounds i8, i8* %0, i64 %189
  store i8 48, i8* %201, align 1
  br label %202

; <label>:202:                                    ; preds = %200, %198
  %203 = add i64 %183, 2
  %204 = icmp ult i64 %203, %131
  br i1 %204, label %205, label %207

; <label>:205:                                    ; preds = %202
  %206 = getelementptr inbounds i8, i8* %0, i64 %203
  store i8 48, i8* %206, align 1
  br label %207

; <label>:207:                                    ; preds = %205, %202
  %208 = add i64 %183, 3
  br label %476

; <label>:209:                                    ; preds = %160
  br i1 %23, label %476, label %587

; <label>:210:                                    ; preds = %155
  switch i32 %96, label %476 [
    i32 2, label %211
    i32 5, label %212
  ]

; <label>:211:                                    ; preds = %210
  br i1 %112, label %476, label %644

; <label>:212:                                    ; preds = %210
  br i1 %25, label %476, label %213

; <label>:213:                                    ; preds = %212
  %214 = add i64 %124, 2
  %215 = icmp ult i64 %214, %156
  br i1 %215, label %216, label %476

; <label>:216:                                    ; preds = %213
  %217 = add i64 %124, 1
  %218 = getelementptr inbounds i8, i8* %2, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 63
  br i1 %220, label %221, label %476

; <label>:221:                                    ; preds = %216
  %222 = getelementptr inbounds i8, i8* %2, i64 %214
  %223 = load i8, i8* %222, align 1
  %224 = sext i8 %223 to i32
  switch i32 %224, label %476 [
    i32 33, label %225
    i32 39, label %225
    i32 40, label %225
    i32 41, label %225
    i32 45, label %225
    i32 47, label %225
    i32 60, label %225
    i32 61, label %225
    i32 62, label %225
  ]

; <label>:225:                                    ; preds = %221, %221, %221, %221, %221, %221, %221, %221, %221
  br i1 %112, label %226, label %644

; <label>:226:                                    ; preds = %225
  %227 = icmp ult i64 %125, %131
  br i1 %227, label %228, label %230

; <label>:228:                                    ; preds = %226
  %229 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 63, i8* %229, align 1
  br label %230

; <label>:230:                                    ; preds = %228, %226
  %231 = add i64 %125, 1
  %232 = icmp ult i64 %231, %131
  br i1 %232, label %233, label %235

; <label>:233:                                    ; preds = %230
  %234 = getelementptr inbounds i8, i8* %0, i64 %231
  store i8 34, i8* %234, align 1
  br label %235

; <label>:235:                                    ; preds = %233, %230
  %236 = add i64 %125, 2
  %237 = icmp ult i64 %236, %131
  br i1 %237, label %238, label %240

; <label>:238:                                    ; preds = %235
  %239 = getelementptr inbounds i8, i8* %0, i64 %236
  store i8 34, i8* %239, align 1
  br label %240

; <label>:240:                                    ; preds = %238, %235
  %241 = add i64 %125, 3
  %242 = icmp ult i64 %241, %131
  br i1 %242, label %243, label %245

; <label>:243:                                    ; preds = %240
  %244 = getelementptr inbounds i8, i8* %0, i64 %241
  store i8 63, i8* %244, align 1
  br label %245

; <label>:245:                                    ; preds = %243, %240
  %246 = add i64 %125, 4
  br label %476

; <label>:247:                                    ; preds = %155
  br label %257

; <label>:248:                                    ; preds = %155
  br label %257

; <label>:249:                                    ; preds = %155
  br label %255

; <label>:250:                                    ; preds = %155
  br label %255

; <label>:251:                                    ; preds = %155
  br label %257

; <label>:252:                                    ; preds = %155
  br i1 %114, label %253, label %254

; <label>:253:                                    ; preds = %252
  br i1 %112, label %542, label %644

; <label>:254:                                    ; preds = %252
  br i1 %122, label %542, label %255

; <label>:255:                                    ; preds = %254, %155, %250, %249
  %256 = phi i8 [ 92, %254 ], [ 116, %250 ], [ 114, %249 ], [ 110, %155 ]
  br i1 %118, label %257, label %644

; <label>:257:                                    ; preds = %255, %155, %251, %248, %247
  %258 = phi i8 [ %256, %255 ], [ 118, %251 ], [ 102, %248 ], [ 98, %247 ], [ 97, %155 ]
  br i1 %105, label %503, label %476

; <label>:259:                                    ; preds = %155, %155
  %260 = icmp eq i64 %156, -1
  br i1 %260, label %261, label %266

; <label>:261:                                    ; preds = %259
  %262 = load i8, i8* %26, align 1
  %263 = icmp ne i8 %262, 0
  %264 = icmp ne i64 %124, 0
  %265 = or i1 %264, %263
  br i1 %265, label %476, label %272

; <label>:266:                                    ; preds = %259
  %267 = icmp ne i64 %156, 1
  %268 = icmp ne i64 %124, 0
  %269 = or i1 %268, %267
  br i1 %269, label %476, label %272

; <label>:270:                                    ; preds = %155, %155
  %271 = icmp eq i64 %124, 0
  br i1 %271, label %272, label %476

; <label>:272:                                    ; preds = %270, %266, %261, %155
  br label %273

; <label>:273:                                    ; preds = %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %155, %272
  %274 = phi i8 [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 1, %272 ]
  br i1 %118, label %476, label %644

; <label>:275:                                    ; preds = %155
  br i1 %114, label %276, label %476

; <label>:276:                                    ; preds = %275
  br i1 %112, label %277, label %644

; <label>:277:                                    ; preds = %276
  %278 = icmp eq i64 %131, 0
  %279 = icmp ne i64 %126, 0
  %280 = or i1 %279, %278
  %281 = select i1 %280, i64 %126, i64 %131
  %282 = select i1 %280, i64 %131, i64 0
  %283 = icmp ult i64 %125, %282
  br i1 %283, label %284, label %286

; <label>:284:                                    ; preds = %277
  %285 = getelementptr inbounds i8, i8* %0, i64 %125
  store i8 39, i8* %285, align 1
  br label %286

; <label>:286:                                    ; preds = %284, %277
  %287 = add i64 %125, 1
  %288 = icmp ult i64 %287, %282
  br i1 %288, label %289, label %291

; <label>:289:                                    ; preds = %286
  %290 = getelementptr inbounds i8, i8* %0, i64 %287
  store i8 92, i8* %290, align 1
  br label %291

; <label>:291:                                    ; preds = %289, %286
  %292 = add i64 %125, 2
  %293 = icmp ult i64 %292, %282
  br i1 %293, label %294, label %296

; <label>:294:                                    ; preds = %291
  %295 = getelementptr inbounds i8, i8* %0, i64 %292
  store i8 39, i8* %295, align 1
  br label %296

; <label>:296:                                    ; preds = %294, %291
  %297 = add i64 %125, 3
  br label %476

; <label>:298:                                    ; preds = %155
  br i1 %14, label %299, label %308

; <label>:299:                                    ; preds = %298
  %300 = tail call i16** @__ctype_b_loc() #1
  %301 = load i16*, i16** %300, align 8
  %302 = zext i8 %159 to i64
  %303 = getelementptr inbounds i16, i16* %301, i64 %302
  %304 = load i16, i16* %303, align 2
  %305 = lshr i16 %304, 14
  %306 = trunc i16 %305 to i8
  %307 = and i8 %306, 1
  br label %368

; <label>:308:                                    ; preds = %298
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18) #13
  store i64 0, i64* %10, align 8
  %309 = icmp eq i64 %156, -1
  br i1 %309, label %310, label %312

; <label>:310:                                    ; preds = %308
  %311 = call i64 @strlen(i8* nonnull %2) #16
  br label %312

; <label>:312:                                    ; preds = %310, %308
  %313 = phi i64 [ %156, %308 ], [ %311, %310 ]
  br label %314

; <label>:314:                                    ; preds = %312, %355
  %315 = phi i64 [ %360, %355 ], [ 0, %312 ]
  %316 = phi i8 [ %359, %355 ], [ 1, %312 ]
  call void @llvm.lifetime.start(i64 4, i8* nonnull %19) #13
  %317 = add i64 %315, %124
  %318 = getelementptr inbounds i8, i8* %2, i64 %317
  %319 = sub i64 %313, %317
  %320 = call i64 @rpl_mbrtowc(i32* nonnull %12, i8* %318, i64 %319, %struct.__mbstate_t* nonnull %11) #13
  switch i64 %320, label %334 [
    i64 0, label %350
    i64 -1, label %347
    i64 -2, label %321
  ]

; <label>:321:                                    ; preds = %314
  %322 = icmp ugt i64 %313, %317
  br i1 %322, label %323, label %351

; <label>:323:                                    ; preds = %321
  br label %324

; <label>:324:                                    ; preds = %323, %330
  %325 = phi i64 [ %332, %330 ], [ %317, %323 ]
  %326 = phi i64 [ %331, %330 ], [ %315, %323 ]
  %327 = getelementptr inbounds i8, i8* %2, i64 %325
  %328 = load i8, i8* %327, align 1
  %329 = icmp eq i8 %328, 0
  br i1 %329, label %348, label %330

; <label>:330:                                    ; preds = %324
  %331 = add i64 %326, 1
  %332 = add i64 %331, %124
  %333 = icmp ult i64 %332, %313
  br i1 %333, label %324, label %348

; <label>:334:                                    ; preds = %314
  %335 = icmp ugt i64 %320, 1
  %336 = and i1 %116, %335
  br i1 %336, label %337, label %355

; <label>:337:                                    ; preds = %334
  br label %338

; <label>:338:                                    ; preds = %337, %344
  %339 = phi i64 [ %345, %344 ], [ 1, %337 ]
  %340 = add i64 %339, %317
  %341 = getelementptr inbounds i8, i8* %2, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = sext i8 %342 to i32
  switch i32 %343, label %344 [
    i32 91, label %367
    i32 92, label %367
    i32 94, label %367
    i32 96, label %367
    i32 124, label %367
  ]

; <label>:344:                                    ; preds = %338
  %345 = add nuw i64 %339, 1
  %346 = icmp ult i64 %345, %320
  br i1 %346, label %338, label %354

; <label>:347:                                    ; preds = %314
  br label %351

; <label>:348:                                    ; preds = %324, %330
  %349 = phi i64 [ %331, %330 ], [ %326, %324 ]
  br label %351

; <label>:350:                                    ; preds = %314
  br label %351

; <label>:351:                                    ; preds = %350, %348, %347, %321
  %352 = phi i64 [ %315, %321 ], [ %315, %347 ], [ %349, %348 ], [ %315, %350 ]
  %353 = phi i8 [ 0, %321 ], [ 0, %347 ], [ 0, %348 ], [ %316, %350 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #13
  br label %364

; <label>:354:                                    ; preds = %344
  br label %355

; <label>:355:                                    ; preds = %354, %334
  %356 = load i32, i32* %12, align 4
  %357 = call i32 @iswprint(i32 %356) #13
  %358 = icmp eq i32 %357, 0
  %359 = select i1 %358, i8 0, i8 %316
  %360 = add i64 %320, %315
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #13
  %361 = call i32 @mbsinit(%struct.__mbstate_t* nonnull %11) #16
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %314, label %363

; <label>:363:                                    ; preds = %355
  br label %364

; <label>:364:                                    ; preds = %363, %351
  %365 = phi i8 [ %353, %351 ], [ %359, %363 ]
  %366 = phi i64 [ %352, %351 ], [ %360, %363 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #13
  br label %368

; <label>:367:                                    ; preds = %338, %338, %338, %338, %338
  call void @llvm.lifetime.end(i64 4, i8* nonnull %19) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #13
  br label %649

; <label>:368:                                    ; preds = %364, %299
  %369 = phi i64 [ %156, %299 ], [ %313, %364 ]
  %370 = phi i64 [ 1, %299 ], [ %366, %364 ]
  %371 = phi i8 [ %307, %299 ], [ %365, %364 ]
  %372 = and i8 %371, 1
  %373 = icmp ne i8 %372, 0
  %374 = icmp ult i64 %370, 2
  %375 = or i1 %373, %113
  %376 = and i1 %374, %375
  br i1 %376, label %476, label %377

; <label>:377:                                    ; preds = %368
  %378 = add i64 %370, %124
  br label %379

; <label>:379:                                    ; preds = %472, %377
  %380 = phi i64 [ %124, %377 ], [ %447, %472 ]
  %381 = phi i64 [ %125, %377 ], [ %473, %472 ]
  %382 = phi i8 [ %128, %377 ], [ %468, %472 ]
  %383 = phi i8 [ %159, %377 ], [ %475, %472 ]
  %384 = phi i8 [ %157, %377 ], [ %445, %472 ]
  %385 = phi i8 [ 0, %377 ], [ %446, %472 ]
  br i1 %375, label %432, label %386

; <label>:386:                                    ; preds = %379
  br i1 %112, label %387, label %643

; <label>:387:                                    ; preds = %386
  %388 = and i8 %382, 1
  %389 = icmp eq i8 %388, 0
  %390 = and i1 %114, %389
  br i1 %390, label %391, label %407

; <label>:391:                                    ; preds = %387
  %392 = icmp ult i64 %381, %131
  br i1 %392, label %393, label %395

; <label>:393:                                    ; preds = %391
  %394 = getelementptr inbounds i8, i8* %0, i64 %381
  store i8 39, i8* %394, align 1
  br label %395

; <label>:395:                                    ; preds = %393, %391
  %396 = add i64 %381, 1
  %397 = icmp ult i64 %396, %131
  br i1 %397, label %398, label %400

; <label>:398:                                    ; preds = %395
  %399 = getelementptr inbounds i8, i8* %0, i64 %396
  store i8 36, i8* %399, align 1
  br label %400

; <label>:400:                                    ; preds = %398, %395
  %401 = add i64 %381, 2
  %402 = icmp ult i64 %401, %131
  br i1 %402, label %403, label %405

; <label>:403:                                    ; preds = %400
  %404 = getelementptr inbounds i8, i8* %0, i64 %401
  store i8 39, i8* %404, align 1
  br label %405

; <label>:405:                                    ; preds = %403, %400
  %406 = add i64 %381, 3
  br label %407

; <label>:407:                                    ; preds = %387, %405
  %408 = phi i64 [ %406, %405 ], [ %381, %387 ]
  %409 = phi i8 [ 1, %405 ], [ %382, %387 ]
  %410 = icmp ult i64 %408, %131
  br i1 %410, label %411, label %413

; <label>:411:                                    ; preds = %407
  %412 = getelementptr inbounds i8, i8* %0, i64 %408
  store i8 92, i8* %412, align 1
  br label %413

; <label>:413:                                    ; preds = %411, %407
  %414 = add i64 %408, 1
  %415 = icmp ult i64 %414, %131
  br i1 %415, label %416, label %420

; <label>:416:                                    ; preds = %413
  %417 = lshr i8 %383, 6
  %418 = or i8 %417, 48
  %419 = getelementptr inbounds i8, i8* %0, i64 %414
  store i8 %418, i8* %419, align 1
  br label %420

; <label>:420:                                    ; preds = %416, %413
  %421 = add i64 %408, 2
  %422 = icmp ult i64 %421, %131
  br i1 %422, label %423, label %428

; <label>:423:                                    ; preds = %420
  %424 = lshr i8 %383, 3
  %425 = and i8 %424, 7
  %426 = or i8 %425, 48
  %427 = getelementptr inbounds i8, i8* %0, i64 %421
  store i8 %426, i8* %427, align 1
  br label %428

; <label>:428:                                    ; preds = %423, %420
  %429 = add i64 %408, 3
  %430 = and i8 %383, 7
  %431 = or i8 %430, 48
  br label %441

; <label>:432:                                    ; preds = %379
  %433 = and i8 %384, 1
  %434 = icmp eq i8 %433, 0
  br i1 %434, label %441, label %435

; <label>:435:                                    ; preds = %432
  %436 = icmp ult i64 %381, %131
  br i1 %436, label %437, label %439

; <label>:437:                                    ; preds = %435
  %438 = getelementptr inbounds i8, i8* %0, i64 %381
  store i8 92, i8* %438, align 1
  br label %439

; <label>:439:                                    ; preds = %437, %435
  %440 = add i64 %381, 1
  br label %441

; <label>:441:                                    ; preds = %432, %439, %428
  %442 = phi i64 [ %440, %439 ], [ %381, %432 ], [ %429, %428 ]
  %443 = phi i8 [ %382, %439 ], [ %382, %432 ], [ %409, %428 ]
  %444 = phi i8 [ %383, %439 ], [ %383, %432 ], [ %431, %428 ]
  %445 = phi i8 [ 0, %439 ], [ %384, %432 ], [ %384, %428 ]
  %446 = phi i8 [ %385, %439 ], [ %385, %432 ], [ 1, %428 ]
  %447 = add i64 %380, 1
  %448 = icmp ugt i64 %378, %447
  br i1 %448, label %449, label %541

; <label>:449:                                    ; preds = %441
  %450 = and i8 %443, 1
  %451 = icmp ne i8 %450, 0
  %452 = and i8 %446, 1
  %453 = icmp eq i8 %452, 0
  %454 = and i1 %451, %453
  br i1 %454, label %455, label %466

; <label>:455:                                    ; preds = %449
  %456 = icmp ult i64 %442, %131
  br i1 %456, label %457, label %459

; <label>:457:                                    ; preds = %455
  %458 = getelementptr inbounds i8, i8* %0, i64 %442
  store i8 39, i8* %458, align 1
  br label %459

; <label>:459:                                    ; preds = %457, %455
  %460 = add i64 %442, 1
  %461 = icmp ult i64 %460, %131
  br i1 %461, label %462, label %464

; <label>:462:                                    ; preds = %459
  %463 = getelementptr inbounds i8, i8* %0, i64 %460
  store i8 39, i8* %463, align 1
  br label %464

; <label>:464:                                    ; preds = %462, %459
  %465 = add i64 %442, 2
  br label %466

; <label>:466:                                    ; preds = %449, %464
  %467 = phi i64 [ %465, %464 ], [ %442, %449 ]
  %468 = phi i8 [ 0, %464 ], [ %443, %449 ]
  %469 = icmp ult i64 %467, %131
  br i1 %469, label %470, label %472

; <label>:470:                                    ; preds = %466
  %471 = getelementptr inbounds i8, i8* %0, i64 %467
  store i8 %444, i8* %471, align 1
  br label %472

; <label>:472:                                    ; preds = %470, %466
  %473 = add i64 %467, 1
  %474 = getelementptr inbounds i8, i8* %2, i64 %447
  %475 = load i8, i8* %474, align 1
  br label %379

; <label>:476:                                    ; preds
  %477 = phi i64 [ %124, %296 ], [ %124, %275 ], [ %124, %273 ], [ %124, %270 ], [ %124, %261 ], [ %124, %266 ], [ %124, %257 ], [ %124, %210 ], [ %124, %221 ], [ %214, %245 ], [ %124, %216 ], [ %124, %213 ], [ %124, %212 ], [ %124, %211 ], [ %124, %209 ], [ %124, %207 ], [ %124, %193 ], [ %124, %190 ], [ %124, %188 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %155 ], [ %124, %368 ]
  %478 = phi i64 [ %297, %296 ], [ %125, %275 ], [ %125, %273 ], [ %125, %270 ], [ %125, %261 ], [ %125, %266 ], [ %125, %257 ], [ %125, %210 ], [ %125, %221 ], [ %246, %245 ], [ %125, %216 ], [ %125, %213 ], [ %125, %212 ], [ %125, %211 ], [ %125, %209 ], [ %208, %207 ], [ %189, %193 ], [ %189, %190 ], [ %189, %188 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %155 ], [ %125, %368 ]
  %479 = phi i64 [ %281, %296 ], [ %126, %275 ], [ %126, %273 ], [ %126, %270 ], [ %126, %261 ], [ %126, %266 ], [ %126, %257 ], [ %126, %210 ], [ %126, %221 ], [ %126, %245 ], [ %126, %216 ], [ %126, %213 ], [ %126, %212 ], [ %126, %211 ], [ %126, %209 ], [ %126, %207 ], [ %126, %193 ], [ %126, %190 ], [ %126, %188 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %155 ], [ %126, %368 ]
  %480 = phi i64 [ %156, %296 ], [ %156, %275 ], [ %156, %273 ], [ %156, %270 ], [ -1, %261 ], [ %156, %266 ], [ %156, %257 ], [ %156, %210 ], [ %156, %221 ], [ %156, %245 ], [ %156, %216 ], [ %156, %213 ], [ %156, %212 ], [ %156, %211 ], [ %156, %209 ], [ %156, %207 ], [ %156, %193 ], [ %156, %190 ], [ %156, %188 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %156, %155 ], [ %369, %368 ]
  %481 = phi i8 [ 0, %296 ], [ %128, %275 ], [ %128, %273 ], [ %128, %270 ], [ %128, %261 ], [ %128, %266 ], [ %128, %257 ], [ %128, %210 ], [ %128, %221 ], [ %128, %245 ], [ %128, %216 ], [ %128, %213 ], [ %128, %212 ], [ %128, %211 ], [ %128, %209 ], [ %184, %207 ], [ %184, %193 ], [ %184, %190 ], [ %184, %188 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %155 ], [ %128, %368 ]
  %482 = phi i8 [ 1, %296 ], [ 1, %275 ], [ %129, %273 ], [ %129, %270 ], [ %129, %261 ], [ %129, %266 ], [ %129, %257 ], [ %129, %210 ], [ %129, %221 ], [ %129, %245 ], [ %129, %216 ], [ %129, %213 ], [ %129, %212 ], [ %129, %211 ], [ %129, %209 ], [ %129, %207 ], [ %129, %193 ], [ %129, %190 ], [ %129, %188 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %155 ], [ %129, %368 ]
  %483 = phi i8 [ 39, %296 ], [ 39, %275 ], [ %159, %273 ], [ %159, %270 ], [ %159, %261 ], [ %159, %266 ], [ %159, %257 ], [ 63, %210 ], [ 63, %221 ], [ %223, %245 ], [ 63, %216 ], [ 63, %213 ], [ 63, %212 ], [ 63, %211 ], [ 0, %209 ], [ 48, %207 ], [ 48, %193 ], [ 48, %190 ], [ 48, %188 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %155 ], [ %159, %368 ]
  %484 = phi i8 [ 0, %296 ], [ 0, %275 ], [ 0, %273 ], [ 0, %270 ], [ 0, %261 ], [ 0, %266 ], [ 0, %257 ], [ 0, %210 ], [ 0, %221 ], [ 0, %245 ], [ 0, %216 ], [ 0, %213 ], [ 0, %212 ], [ 0, %211 ], [ 0, %209 ], [ 1, %207 ], [ 1, %193 ], [ 1, %190 ], [ 1, %188 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %155 ], [ 0, %368 ]
  %485 = phi i8 [ 1, %296 ], [ 1, %275 ], [ %274, %273 ], [ 0, %270 ], [ 0, %261 ], [ 0, %266 ], [ 0, %257 ], [ 0, %210 ], [ 0, %221 ], [ 0, %245 ], [ 0, %216 ], [ 0, %213 ], [ 0, %212 ], [ 0, %211 ], [ 0, %209 ], [ 0, %207 ], [ 0, %193 ], [ 0, %190 ], [ 0, %188 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ 1, %155 ], [ %372, %368 ]
  %486 = phi i64 [ %282, %296 ], [ %131, %275 ], [ %131, %273 ], [ %131, %270 ], [ %131, %261 ], [ %131, %266 ], [ %131, %257 ], [ %131, %210 ], [ %131, %221 ], [ %131, %245 ], [ %131, %216 ], [ %131, %213 ], [ %131, %212 ], [ %131, %211 ], [ %131, %209 ], [ %131, %207 ], [ %131, %193 ], [ %131, %190 ], [ %131, %188 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %155 ], [ %131, %368 ]
  br i1 %107, label %488, label %487

; <label>:487:                                    ; preds = %476
  br i1 %117, label %489, label %501

; <label>:488:                                    ; preds = %476
  br i1 %20, label %501, label %489

; <label>:489:                                    ; preds = %488, %487
  %490 = lshr i8 %483, 5
  %491 = zext i8 %490 to i64
  %492 = getelementptr inbounds i32, i32* %6, i64 %491
  %493 = load i32, i32* %492, align 4
  %494 = and i8 %483, 31
  %495 = zext i8 %494 to i32
  %496 = shl i32 1, %495
  %497 = and i32 %493, %496
  %498 = icmp eq i32 %497, 0
  %499 = icmp eq i8 %157, 0
  %500 = and i1 %499, %498
  br i1 %500, label %542, label %503

; <label>:501:                                    ; preds = %488, %487
  %502 = icmp eq i8 %157, 0
  br i1 %502, label %542, label %503

; <label>:503:                                    ; preds = %257, %489, %501
  %504 = phi i64 [ %477, %489 ], [ %477, %501 ], [ %124, %257 ]
  %505 = phi i64 [ %478, %489 ], [ %478, %501 ], [ %125, %257 ]
  %506 = phi i64 [ %479, %489 ], [ %479, %501 ], [ %126, %257 ]
  %507 = phi i64 [ %480, %489 ], [ %480, %501 ], [ %156, %257 ]
  %508 = phi i8 [ %481, %489 ], [ %481, %501 ], [ %128, %257 ]
  %509 = phi i8 [ %482, %489 ], [ %482, %501 ], [ %129, %257 ]
  %510 = phi i8 [ %483, %489 ], [ %483, %501 ], [ %258, %257 ]
  %511 = phi i8 [ %485, %489 ], [ %485, %501 ], [ 0, %257 ]
  %512 = phi i64 [ %486, %489 ], [ %486, %501 ], [ %131, %257 ]
  br i1 %112, label %513, label %644

; <label>:513:                                    ; preds = %503
  %514 = and i8 %508, 1
  %515 = icmp eq i8 %514, 0
  %516 = and i1 %114, %515
  br i1 %516, label %517, label %533

; <label>:517:                                    ; preds = %513
  %518 = icmp ult i64 %505, %512
  br i1 %518, label %519, label %521

; <label>:519:                                    ; preds = %517
  %520 = getelementptr inbounds i8, i8* %0, i64 %505
  store i8 39, i8* %520, align 1
  br label %521

; <label>:521:                                    ; preds = %519, %517
  %522 = add i64 %505, 1
  %523 = icmp ult i64 %522, %512
  br i1 %523, label %524, label %526

; <label>:524:                                    ; preds = %521
  %525 = getelementptr inbounds i8, i8* %0, i64 %522
  store i8 36, i8* %525, align 1
  br label %526

; <label>:526:                                    ; preds = %524, %521
  %527 = add i64 %505, 2
  %528 = icmp ult i64 %527, %512
  br i1 %528, label %529, label %531

; <label>:529:                                    ; preds = %526
  %530 = getelementptr inbounds i8, i8* %0, i64 %527
  store i8 39, i8* %530, align 1
  br label %531

; <label>:531:                                    ; preds = %529, %526
  %532 = add i64 %505, 3
  br label %533

; <label>:533:                                    ; preds = %513, %531
  %534 = phi i64 [ %532, %531 ], [ %505, %513 ]
  %535 = phi i8 [ 1, %531 ], [ %508, %513 ]
  %536 = icmp ult i64 %534, %512
  br i1 %536, label %537, label %539

; <label>:537:                                    ; preds = %533
  %538 = getelementptr inbounds i8, i8* %0, i64 %534
  store i8 92, i8* %538, align 1
  br label %539

; <label>:539:                                    ; preds = %533, %537
  %540 = add i64 %534, 1
  br label %569

; <label>:541:                                    ; preds = %441
  br label %542

; <label>:542:                                    ; preds = %541, %254, %489, %253, %501
  %543 = phi i64 [ %477, %501 ], [ %124, %253 ], [ %477, %489 ], [ %124, %254 ], [ %380, %541 ]
  %544 = phi i64 [ %478, %501 ], [ %125, %253 ], [ %478, %489 ], [ %125, %254 ], [ %442, %541 ]
  %545 = phi i64 [ %479, %501 ], [ %126, %253 ], [ %479, %489 ], [ %126, %254 ], [ %126, %541 ]
  %546 = phi i64 [ %480, %501 ], [ %156, %253 ], [ %480, %489 ], [ %156, %254 ], [ %369, %541 ]
  %547 = phi i8 [ %481, %501 ], [ %128, %253 ], [ %481, %489 ], [ %128, %254 ], [ %443, %541 ]
  %548 = phi i8 [ %482, %501 ], [ %129, %253 ], [ %482, %489 ], [ %129, %254 ], [ %129, %541 ]
  %549 = phi i8 [ %483, %501 ], [ 92, %253 ], [ %483, %489 ], [ 92, %254 ], [ %444, %541 ]
  %550 = phi i8 [ %484, %501 ], [ 0, %253 ], [ %484, %489 ], [ 0, %254 ], [ %446, %541 ]
  %551 = phi i8 [ %485, %501 ], [ 0, %253 ], [ %485, %489 ], [ 0, %254 ], [ %372, %541 ]
  %552 = phi i64 [ %486, %501 ], [ %131, %253 ], [ %486, %489 ], [ %131, %254 ], [ %131, %541 ]
  %553 = and i8 %547, 1
  %554 = icmp ne i8 %553, 0
  %555 = and i8 %550, 1
  %556 = icmp eq i8 %555, 0
  %557 = and i1 %554, %556
  br i1 %557, label %558, label %569

; <label>:558:                                    ; preds = %542
  %559 = icmp ult i64 %544, %552
  br i1 %559, label %560, label %562

; <label>:560:                                    ; preds = %558
  %561 = getelementptr inbounds i8, i8* %0, i64 %544
  store i8 39, i8* %561, align 1
  br label %562

; <label>:562:                                    ; preds = %560, %558
  %563 = add i64 %544, 1
  %564 = icmp ult i64 %563, %552
  br i1 %564, label %565, label %567

; <label>:565:                                    ; preds = %562
  %566 = getelementptr inbounds i8, i8* %0, i64 %563
  store i8 39, i8* %566, align 1
  br label %567

; <label>:567:                                    ; preds = %565, %562
  %568 = add i64 %544, 2
  br label %569

; <label>:569:                                    ; preds = %539, %542, %567
  %570 = phi i64 [ %552, %567 ], [ %552, %542 ], [ %512, %539 ]
  %571 = phi i8 [ %551, %567 ], [ %551, %542 ], [ %511, %539 ]
  %572 = phi i8 [ %549, %567 ], [ %549, %542 ], [ %510, %539 ]
  %573 = phi i8 [ %548, %567 ], [ %548, %542 ], [ %509, %539 ]
  %574 = phi i64 [ %546, %567 ], [ %546, %542 ], [ %507, %539 ]
  %575 = phi i64 [ %545, %567 ], [ %545, %542 ], [ %506, %539 ]
  %576 = phi i64 [ %543, %567 ], [ %543, %542 ], [ %504, %539 ]
  %577 = phi i64 [ %568, %567 ], [ %544, %542 ], [ %540, %539 ]
  %578 = phi i8 [ 0, %567 ], [ %547, %542 ], [ %535, %539 ]
  %579 = icmp ult i64 %577, %570
  br i1 %579, label %580, label %582

; <label>:580:                                    ; preds = %569
  %581 = getelementptr inbounds i8, i8* %0, i64 %577
  store i8 %572, i8* %581, align 1
  br label %582

; <label>:582:                                    ; preds = %580, %569
  %583 = add i64 %577, 1
  %584 = and i8 %571, 1
  %585 = icmp eq i8 %584, 0
  %586 = select i1 %585, i8 0, i8 %130
  br label %587

; <label>:587:                                    ; preds = %582, %209
  %588 = phi i64 [ %124, %209 ], [ %576, %582 ]
  %589 = phi i64 [ %125, %209 ], [ %583, %582 ]
  %590 = phi i64 [ %126, %209 ], [ %575, %582 ]
  %591 = phi i64 [ %156, %209 ], [ %574, %582 ]
  %592 = phi i8 [ %128, %209 ], [ %578, %582 ]
  %593 = phi i8 [ %129, %209 ], [ %573, %582 ]
  %594 = phi i8 [ %130, %209 ], [ %586, %582 ]
  %595 = phi i64 [ %131, %209 ], [ %570, %582 ]
  %596 = add i64 %588, 1
  br label %123

; <label>:597:                                    ; preds = %133, %135
  %598 = phi i64 [ %124, %133 ], [ -1, %135 ]
  %599 = icmp eq i64 %125, 0
  %600 = and i1 %114, %599
  %601 = xor i1 %600, true
  %602 = or i1 %112, %601
  br i1 %602, label %603, label %648

; <label>:603:                                    ; preds = %597
  %604 = and i1 %114, %112
  %605 = xor i1 %604, true
  %606 = and i8 %129, 1
  %607 = icmp eq i8 %606, 0
  %608 = or i1 %607, %605
  br i1 %608, label %618, label %609

; <label>:609:                                    ; preds = %603
  %610 = and i8 %130, 1
  %611 = icmp eq i8 %610, 0
  br i1 %611, label %614, label %612

; <label>:612:                                    ; preds = %609
  %613 = call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %126, i8* %2, i64 %598, i32 5, i32 %5, i32* %6, i8* %97, i8* %98)
  br label %659

; <label>:614:                                    ; preds = %609
  %615 = icmp eq i64 %131, 0
  %616 = icmp ne i64 %126, 0
  %617 = and i1 %616, %615
  br i1 %617, label %27, label %618

; <label>:618:                                    ; preds = %603, %614
  %619 = icmp ne i8* %100, null
  %620 = and i1 %619, %112
  br i1 %620, label %621, label %638

; <label>:621:                                    ; preds = %618
  %622 = load i8, i8* %100, align 1
  %623 = icmp eq i8 %622, 0
  br i1 %623, label %638, label %624

; <label>:624:                                    ; preds = %621
  br label %625

; <label>:625:                                    ; preds = %624, %632
  %626 = phi i8 [ %635, %632 ], [ %622, %624 ]
  %627 = phi i8* [ %634, %632 ], [ %100, %624 ]
  %628 = phi i64 [ %633, %632 ], [ %125, %624 ]
  %629 = icmp ult i64 %628, %131
  br i1 %629, label %630, label %632

; <label>:630:                                    ; preds = %625
  %631 = getelementptr inbounds i8, i8* %0, i64 %628
  store i8 %626, i8* %631, align 1
  br label %632

; <label>:632:                                    ; preds = %630, %625
  %633 = add i64 %628, 1
  %634 = getelementptr inbounds i8, i8* %627, i64 1
  %635 = load i8, i8* %634, align 1
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %637, label %625

; <label>:637:                                    ; preds = %632
  br label %638

; <label>:638:                                    ; preds = %637, %621, %618
  %639 = phi i64 [ %125, %618 ], [ %125, %621 ], [ %633, %637 ]
  %640 = icmp ult i64 %639, %131
  br i1 %640, label %641, label %659

; <label>:641:                                    ; preds = %638
  %642 = getelementptr inbounds i8, i8* %0, i64 %639
  store i8 0, i8* %642, align 1
  br label %659

; <label>:643:                                    ; preds = %386
  br label %649

; <label>:644:                                    ; preds = %148, %161, %211, %225, %253, %255, %273, %276, %503
  %645 = phi i32 [ %96, %148 ], [ %96, %161 ], [ 2, %211 ], [ 5, %225 ], [ 2, %253 ], [ 2, %255 ], [ 2, %273 ], [ 2, %276 ], [ %96, %503 ]
  %646 = phi i64 [ %146, %148 ], [ %156, %161 ], [ %156, %211 ], [ %156, %225 ], [ %156, %253 ], [ %156, %255 ], [ %156, %273 ], [ %156, %276 ], [ %507, %503 ]
  %647 = phi i64 [ %131, %148 ], [ %131, %161 ], [ %131, %211 ], [ %131, %225 ], [ %131, %253 ], [ %131, %255 ], [ %131, %273 ], [ %131, %276 ], [ %512, %503 ]
  br label %649

; <label>:648:                                    ; preds = %597
  br label %649

; <label>:649:                                    ; preds = %648, %644, %643, %367
  %650 = phi i32 [ 2, %367 ], [ %96, %643 ], [ %645, %644 ], [ %96, %648 ]
  %651 = phi i64 [ %313, %367 ], [ %369, %643 ], [ %646, %644 ], [ %598, %648 ]
  %652 = phi i64 [ %131, %367 ], [ %131, %643 ], [ %647, %644 ], [ %131, %648 ]
  %653 = icmp ne i32 %650, 2
  %654 = icmp eq i8 %104, 0
  %655 = or i1 %653, %654
  %656 = select i1 %655, i32 %650, i32 4
  %657 = and i32 %5, -3
  %658 = call fastcc i64 @quotearg_buffer_restyled(i8* %0, i64 %652, i8* %2, i64 %651, i32 %656, i32 %657, i32* null, i8* %97, i8* %98)
  br label %659

; <label>:659:                                    ; preds = %638, %641, %649, %612
  %660 = phi i64 [ %658, %649 ], [ %613, %612 ], [ %639, %641 ], [ %639, %638 ]
  ret i64 %660
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i8* @gettext_quote(i8*, i32) unnamed_addr #0 {
  %3 = tail call i8* @dcgettext(i8* null, i8* %0, i32 5) #13
  %4 = icmp eq i8* %3, %0
  br i1 %4, label %5, label %75

; <label>:5:                                      ; preds = %2
  %6 = tail call i8* @locale_charset() #13
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = and i32 %8, -33
  switch i32 %9, label %72 [
    i32 85, label %10
    i32 71, label %38
  ]

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = and i32 %13, -33
  %15 = icmp eq i32 %14, 84
  br i1 %15, label %16, label %72

; <label>:16:                                     ; preds = %10
  %17 = getelementptr inbounds i8, i8* %6, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = and i32 %19, -33
  %21 = icmp eq i32 %20, 70
  br i1 %21, label %22, label %72

; <label>:22:                                     ; preds = %16
  %23 = getelementptr inbounds i8, i8* %6, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 45
  br i1 %25, label %26, label %72

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 56
  br i1 %29, label %30, label %72

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds i8, i8* %6, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %72

; <label>:34:                                     ; preds = %30
  %35 = load i8, i8* %0, align 1
  %36 = icmp eq i8 %35, 96
  %37 = select i1 %36, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.342, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.343, i64 0, i64 0)
  br label %75

; <label>:38:                                     ; preds = %5
  %39 = getelementptr inbounds i8, i8* %6, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = and i32 %41, -33
  %43 = icmp eq i32 %42, 66
  br i1 %43, label %44, label %72

; <label>:44:                                     ; preds = %38
  %45 = getelementptr inbounds i8, i8* %6, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 49
  br i1 %47, label %48, label %72

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds i8, i8* %6, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 56
  br i1 %51, label %52, label %72

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds i8, i8* %6, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 48
  br i1 %55, label %56, label %72

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds i8, i8* %6, i64 5
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 51
  br i1 %59, label %60, label %72

; <label>:60:                                     ; preds = %56
  %61 = getelementptr inbounds i8, i8* %6, i64 6
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 48
  br i1 %63, label %64, label %72

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds i8, i8* %6, i64 7
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %72

; <label>:68:                                     ; preds = %64
  %69 = load i8, i8* %0, align 1
  %70 = icmp eq i8 %69, 96
  %71 = select i1 %70, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.344, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.345, i64 0, i64 0)
  br label %75

; <label>:72:                                     ; preds = %5, %30, %26, %22, %16, %10, %64, %60, %56, %52, %48, %44, %38
  %73 = icmp eq i32 %1, 9
  %74 = select i1 %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.341, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.340, i64 0, i64 0)
  br label %75

; <label>:75:                                     ; preds = %2, %72, %68, %34
  %76 = phi i8* [ %37, %34 ], [ %71, %68 ], [ %74, %72 ], [ %3, %2 ]
  ret i8* %76
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_alloc(i8*, i64, %struct.quoting_options*) local_unnamed_addr #0 {
  %4 = icmp ne %struct.quoting_options* %2, null
  %5 = select i1 %4, %struct.quoting_options* %2, %struct.quoting_options* @default_quoting_options
  %6 = tail call i32* @__errno_location() #1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = or i32 %9, 1
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 0
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  %17 = load i8*, i8** %16, align 8
  %18 = tail call fastcc i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %0, i64 %1, i32 %12, i32 %10, i32* %13, i8* %15, i8* %17) #13
  %19 = add i64 %18, 1
  %20 = tail call noalias i8* @xmalloc(i64 %19) #13
  %21 = load i32, i32* %11, align 8
  %22 = load i8*, i8** %14, align 8
  %23 = load i8*, i8** %16, align 8
  %24 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %20, i64 %19, i8* %0, i64 %1, i32 %21, i32 %10, i32* %13, i8* %22, i8* %23) #13
  store i32 %7, i32* %6, align 4
  ret i8* %20
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_alloc_mem(i8*, i64, i64*, %struct.quoting_options*) local_unnamed_addr #0 {
  %5 = icmp ne %struct.quoting_options* %3, null
  %6 = select i1 %5, %struct.quoting_options* %3, %struct.quoting_options* @default_quoting_options
  %7 = tail call i32* @__errno_location() #1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i64* %2, null
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = or i32 %10, %13
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 2, i64 0
  %18 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 4
  %21 = load i8*, i8** %20, align 8
  %22 = tail call fastcc i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %0, i64 %1, i32 %16, i32 %14, i32* %17, i8* %19, i8* %21)
  %23 = add i64 %22, 1
  %24 = tail call noalias i8* @xmalloc(i64 %23) #13
  %25 = load i32, i32* %15, align 8
  %26 = load i8*, i8** %18, align 8
  %27 = load i8*, i8** %20, align 8
  %28 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %24, i64 %23, i8* %0, i64 %1, i32 %25, i32 %14, i32* %17, i8* %26, i8* %27)
  store i32 %8, i32* %7, align 4
  br i1 %11, label %29, label %30

; <label>:29:                                     ; preds = %4
  store i64 %22, i64* %2, align 8
  br label %30

; <label>:30:                                     ; preds = %29, %4
  ret i8* %24
}

; Function Attrs: nounwind sspstrong uwtable
define void @quotearg_free() local_unnamed_addr #0 {
  %1 = load %struct.bin_str*, %struct.bin_str** @slotvec, align 8
  %2 = load i32, i32* @nslots, align 4
  %3 = icmp sgt i32 %2, 1
  br i1 %3, label %4, label %14

; <label>:4:                                      ; preds = %0
  br label %5

; <label>:5:                                      ; preds = %4, %5
  %6 = phi i64 [ %9, %5 ], [ 1, %4 ]
  %7 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %1, i64 %6, i32 1
  %8 = load i8*, i8** %7, align 8
  tail call void @free(i8* %8) #13
  %9 = add nuw i64 %6, 1
  %10 = load i32, i32* @nslots, align 4
  %11 = sext i32 %10 to i64
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %5, label %13

; <label>:13:                                     ; preds = %5
  br label %14

; <label>:14:                                     ; preds = %13, %0
  %15 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %1, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %14
  tail call void @free(i8* %16) #13
  store i64 256, i64* getelementptr inbounds (%struct.bin_str, %struct.bin_str* @slotvec0, i64 0, i32 0), align 8
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), i8** getelementptr inbounds (%struct.bin_str, %struct.bin_str* @slotvec0, i64 0, i32 1), align 8
  br label %19

; <label>:19:                                     ; preds = %14, %18
  %20 = icmp eq %struct.bin_str* %1, @slotvec0
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %19
  %22 = bitcast %struct.bin_str* %1 to i8*
  tail call void @free(i8* %22) #13
  store %struct.bin_str* @slotvec0, %struct.bin_str** @slotvec, align 8
  br label %23

; <label>:23:                                     ; preds = %19, %21
  store i32 1, i32* @nslots, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n(i32, i8*) local_unnamed_addr #0 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* nonnull @default_quoting_options)
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) unnamed_addr #0 {
  %5 = tail call i32* @__errno_location() #1
  %6 = load i32, i32* %5, align 4
  %7 = load %struct.bin_str*, %struct.bin_str** @slotvec, align 8
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  tail call void @abort() #15
  unreachable

; <label>:10:                                     ; preds = %4
  %11 = load i32, i32* @nslots, align 4
  %12 = icmp sgt i32 %11, %0
  br i1 %12, label %34, label %13

; <label>:13:                                     ; preds = %10
  %14 = icmp eq %struct.bin_str* %7, @slotvec0
  %15 = icmp ugt i32 %0, 2147483646
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %13
  tail call void @xalloc_die() #15
  unreachable

; <label>:17:                                     ; preds = %13
  %18 = bitcast %struct.bin_str* %7 to i8*
  %19 = select i1 %14, i8* null, i8* %18
  %20 = add nsw i32 %0, 1
  %21 = sext i32 %20 to i64
  %22 = shl nsw i64 %21, 4
  %23 = tail call i8* @xrealloc(i8* %19, i64 %22) #13
  %24 = bitcast i8* %23 to %struct.bin_str*
  store i8* %23, i8** bitcast (%struct.bin_str** @slotvec to i8**), align 8
  br i1 %14, label %25, label %26

; <label>:25:                                     ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* bitcast (%struct.bin_str* @slotvec0 to i8*), i64 16, i32 8, i1 false)
  br label %26

; <label>:26:                                     ; preds = %25, %17
  %27 = load i32, i32* @nslots, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %24, i64 %28
  %30 = bitcast %struct.bin_str* %29 to i8*
  %31 = sub nsw i32 %20, %27
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 4
  tail call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 %33, i32 8, i1 false)
  store i32 %20, i32* @nslots, align 4
  br label %34

; <label>:34:                                     ; preds = %10, %26
  %35 = phi %struct.bin_str* [ %24, %26 ], [ %7, %10 ]
  %36 = sext i32 %0 to i64
  %37 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %35, i64 %36, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %35, i64 %36, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = or i32 %42, 1
  %44 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 0
  %47 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 3
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 4
  %50 = load i8*, i8** %49, align 8
  %51 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %40, i64 %38, i8* %1, i64 %2, i32 %45, i32 %43, i32* %46, i8* %48, i8* %50)
  %52 = icmp ugt i64 %38, %51
  br i1 %52, label %63, label %53

; <label>:53:                                     ; preds = %34
  %54 = add i64 %51, 1
  store i64 %54, i64* %37, align 8
  %55 = icmp eq i8* %40, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %55, label %57, label %56

; <label>:56:                                     ; preds = %53
  tail call void @free(i8* %40) #13
  br label %57

; <label>:57:                                     ; preds = %53, %56
  %58 = tail call noalias i8* @xmalloc(i64 %54) #13
  store i8* %58, i8** %39, align 8
  %59 = load i32, i32* %44, align 8
  %60 = load i8*, i8** %47, align 8
  %61 = load i8*, i8** %49, align 8
  %62 = tail call fastcc i64 @quotearg_buffer_restyled(i8* %58, i64 %54, i8* %1, i64 %2, i32 %59, i32 %43, i32* %46, i8* %60, i8* %61)
  br label %63

; <label>:63:                                     ; preds = %34, %57
  %64 = phi i8* [ %58, %57 ], [ %40, %34 ]
  store i32 %6, i32* %5, align 4
  ret i8* %64
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_mem(i32, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* nonnull @default_quoting_options)
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg(i8*) local_unnamed_addr #0 {
  %2 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull @default_quoting_options) #13
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_mem(i8*, i64) local_unnamed_addr #0 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull @default_quoting_options) #13
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style(i32, i32, i8*) local_unnamed_addr #0 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #13
  %7 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 52, i32 4, i1 false)
  %8 = icmp eq i32 %1, 10
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %1, i32* %11, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %13 = bitcast i32* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* nonnull %7, i64 52, i32 4, i1 false) #13
  call void @llvm.lifetime.end(i64 52, i8* nonnull %7)
  %14 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* nonnull %5)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #13
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style_mem(i32, i32, i8*, i64) local_unnamed_addr #0 {
  %5 = alloca [52 x i8], align 4
  %6 = alloca %struct.quoting_options, align 8
  %7 = bitcast %struct.quoting_options* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #13
  %8 = getelementptr inbounds [52 x i8], [52 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %8)
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 52, i32 4, i1 false)
  %9 = icmp eq i32 %1, 10
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %4
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %4
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  store i32 %1, i32* %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 1
  %14 = bitcast i32* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* nonnull %8, i64 52, i32 4, i1 false) #13
  call void @llvm.lifetime.end(i64 52, i8* nonnull %8)
  %15 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 %3, %struct.quoting_options* nonnull %6)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #13
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_style(i32, i8*) local_unnamed_addr #0 {
  %3 = alloca [52 x i8], align 4
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #13
  %6 = getelementptr inbounds [52 x i8], [52 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %6)
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 52, i32 4, i1 false)
  %7 = icmp eq i32 %0, 10
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  tail call void @abort() #15
  unreachable

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 %0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 1
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* nonnull %6, i64 52, i32 4, i1 false) #13
  call void @llvm.lifetime.end(i64 52, i8* nonnull %6)
  %13 = call fastcc i8* @quotearg_n_options(i32 0, i8* %1, i64 -1, %struct.quoting_options* nonnull %4) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #13
  ret i8* %13
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_style_mem(i32, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #13
  %7 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 52, i32 4, i1 false)
  %8 = icmp eq i32 %0, 10
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %0, i32* %11, align 8
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %13 = bitcast i32* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* nonnull %7, i64 52, i32 4, i1 false) #13
  call void @llvm.lifetime.end(i64 52, i8* nonnull %7)
  %14 = call fastcc i8* @quotearg_n_options(i32 0, i8* %1, i64 %2, %struct.quoting_options* nonnull %5) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #13
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_char_mem(i8*, i64, i8 signext) local_unnamed_addr #0 {
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false)
  %6 = lshr i8 %2, 5
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 2, i64 %7
  %9 = and i8 %2, 31
  %10 = zext i8 %9 to i32
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, %10
  %13 = and i32 %12, 1
  %14 = xor i32 %13, 1
  %15 = shl i32 %14, %10
  %16 = xor i32 %15, %11
  store i32 %16, i32* %8, align 4
  %17 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull %4)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #13
  ret i8* %17
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_char(i8*, i8 signext) local_unnamed_addr #0 {
  %3 = alloca %struct.quoting_options, align 8
  %4 = bitcast %struct.quoting_options* %3 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %4) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %4, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %5 = lshr i8 %1, 5
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 %6
  %8 = and i8 %1, 31
  %9 = zext i8 %8 to i32
  %10 = load i32, i32* %7, align 4
  %11 = lshr i32 %10, %9
  %12 = and i32 %11, 1
  %13 = xor i32 %12, 1
  %14 = shl i32 %13, %9
  %15 = xor i32 %14, %10
  store i32 %15, i32* %7, align 4
  %16 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull %3) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %4) #13
  ret i8* %16
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_colon(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.quoting_options, align 8
  %3 = bitcast %struct.quoting_options* %2 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %3) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %3, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %2, i64 0, i32 2, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 67108864
  store i32 %6, i32* %4, align 4
  %7 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull %2) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %3) #13
  ret i8* %7
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_colon_mem(i8*, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.quoting_options, align 8
  %4 = bitcast %struct.quoting_options* %3 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %4) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %4, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i64 0, i32 2, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 67108864
  store i32 %7, i32* %5, align 4
  %8 = call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull %3) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %4) #13
  ret i8* %8
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_style_colon(i32, i32, i8*) local_unnamed_addr #0 {
  %4 = alloca [52 x i8], align 4
  %5 = alloca %struct.quoting_options, align 8
  %6 = alloca [52 x i8], align 4
  %7 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #13
  %8 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start(i64 52, i8* nonnull %8)
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 52, i32 4, i1 false)
  %9 = icmp eq i32 %1, 10
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds [52 x i8], [52 x i8]* %6, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %12, i8* nonnull %8, i64 52, i32 4, i1 false)
  call void @llvm.lifetime.end(i64 52, i8* nonnull %8)
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 %1, i32* %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 1
  %15 = bitcast i32* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* nonnull %12, i64 52, i32 4, i1 false)
  %16 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 2, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = or i32 %17, 67108864
  store i32 %18, i32* %16, align 4
  %19 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* nonnull %5)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #13
  ret i8* %19
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_custom(i32, i8*, i8*, i8*) local_unnamed_addr #0 {
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %6, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %7, align 8
  %8 = icmp ne i8* %1, null
  %9 = icmp ne i8* %2, null
  %10 = and i1 %8, %9
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %4
  tail call void @abort() #15
  unreachable

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %1, i8** %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %2, i8** %14, align 8
  %15 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %3, i64 -1, %struct.quoting_options* nonnull %5) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #13
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_n_custom_mem(i32, i8*, i8*, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %struct.quoting_options, align 8
  %7 = bitcast %struct.quoting_options* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %7, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false)
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 0
  store i32 10, i32* %8, align 8
  %9 = icmp ne i8* %1, null
  %10 = icmp ne i8* %2, null
  %11 = and i1 %9, %10
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %5
  tail call void @abort() #15
  unreachable

; <label>:13:                                     ; preds = %5
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 3
  store i8* %1, i8** %14, align 8
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i64 0, i32 4
  store i8* %2, i8** %15, align 8
  %16 = call fastcc i8* @quotearg_n_options(i32 %0, i8* %3, i64 %4, %struct.quoting_options* nonnull %6)
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #13
  ret i8* %16
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_custom(i8*, i8*, i8*) local_unnamed_addr #0 {
  %4 = alloca %struct.quoting_options, align 8
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %5, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 0
  store i32 10, i32* %6, align 8
  %7 = icmp ne i8* %0, null
  %8 = icmp ne i8* %1, null
  %9 = and i1 %7, %8
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  tail call void @abort() #15
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 3
  store i8* %0, i8** %12, align 8
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i64 0, i32 4
  store i8* %1, i8** %13, align 8
  %14 = call fastcc i8* @quotearg_n_options(i32 0, i8* %2, i64 -1, %struct.quoting_options* nonnull %4) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5) #13
  ret i8* %14
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quotearg_custom_mem(i8*, i8*, i8*, i64) local_unnamed_addr #0 {
  %5 = alloca %struct.quoting_options, align 8
  %6 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %6) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %6, i8* bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i32 8, i1 false) #13
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 0
  store i32 10, i32* %7, align 8
  %8 = icmp ne i8* %0, null
  %9 = icmp ne i8* %1, null
  %10 = and i1 %8, %9
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %4
  tail call void @abort() #15
  unreachable

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 3
  store i8* %0, i8** %13, align 8
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i64 0, i32 4
  store i8* %1, i8** %14, align 8
  %15 = call fastcc i8* @quotearg_n_options(i32 0, i8* %2, i64 %3, %struct.quoting_options* nonnull %5) #13
  call void @llvm.lifetime.end(i64 56, i8* nonnull %6) #13
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_n_mem(i32, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* nonnull @quote_quoting_options)
  ret i8* %4
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_mem(i8*, i64) local_unnamed_addr #0 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* nonnull @quote_quoting_options) #13
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote_n(i32, i8*) local_unnamed_addr #0 {
  %3 = tail call fastcc i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* nonnull @quote_quoting_options) #13
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define i8* @quote(i8*) local_unnamed_addr #0 {
  %2 = tail call fastcc i8* @quotearg_n_options(i32 0, i8* %0, i64 -1, %struct.quoting_options* nonnull @quote_quoting_options) #13
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @nstrftime(i8*, i64, i8* readonly, %struct.tm*, %struct.tm_zone*, i32) local_unnamed_addr #0 {
  %7 = tail call fastcc i64 @__strftime_internal(i8* %0, i64 %1, i8* %2, %struct.tm* %3, i1 zeroext false, %struct.tm_zone* %4, i32 %5)
  ret i64 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @__strftime_internal(i8*, i64, i8* readonly, %struct.tm*, i1 zeroext, %struct.tm_zone*, i32) unnamed_addr #0 {
  %8 = alloca [23 x i8], align 16
  %9 = alloca [5 x i8], align 1
  %10 = alloca [1024 x i8], align 16
  %11 = alloca %struct.tm, align 8
  %12 = zext i1 %4 to i8
  %13 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 10
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  %18 = select i1 %17, i8* %16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.360, i64 0, i64 0)
  %19 = icmp sgt i32 %14, 12
  %20 = add nsw i32 %14, -12
  %21 = icmp eq i32 %14, 0
  %22 = select i1 %21, i32 12, i32 %14
  %23 = select i1 %19, i32 %20, i32 %22
  %24 = load i8, i8* %2, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %1395, label %26

; <label>:26:                                     ; preds = %7
  %27 = getelementptr inbounds [23 x i8], [23 x i8]* %8, i64 0, i64 0
  %28 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 0
  %29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %30 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 1
  %31 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 2
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 1
  %33 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 3
  %34 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 5
  %35 = getelementptr inbounds [23 x i8], [23 x i8]* %8, i64 0, i64 23
  %36 = ptrtoint i8* %35 to i64
  %37 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 3
  %38 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 7
  %39 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 1
  %40 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 4
  %41 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 0
  %42 = bitcast %struct.tm* %11 to i8*
  %43 = bitcast %struct.tm* %3 to i8*
  %44 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 6
  %45 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 8
  %46 = getelementptr inbounds %struct.tm, %struct.tm* %3, i64 0, i32 9
  %47 = add i64 %36, -1
  br label %48

; <label>:48:                                     ; preds = %26, %1385
  %49 = phi i8 [ %24, %26 ], [ %1392, %1385 ]
  %50 = phi i64 [ 0, %26 ], [ %1386, %1385 ]
  %51 = phi i8* [ %0, %26 ], [ %1387, %1385 ]
  %52 = phi i8* [ %2, %26 ], [ %1391, %1385 ]
  %53 = phi i32 [ undef, %26 ], [ %1389, %1385 ]
  %54 = phi i32 [ undef, %26 ], [ %1390, %1385 ]
  call void @llvm.lifetime.start(i64 23, i8* nonnull %27) #13
  %55 = icmp eq i8 %49, 37
  br i1 %55, label %56, label %57

; <label>:56:                                     ; preds = %48
  br label %86

; <label>:57:                                     ; preds = %48
  %58 = sub i64 %1, %50
  %59 = icmp ult i64 %58, 2
  br i1 %59, label %67, label %60

; <label>:60:                                     ; preds = %57
  %61 = icmp eq i8* %51, null
  br i1 %61, label %64, label %62

; <label>:62:                                     ; preds = %60
  store i8 %49, i8* %51, align 1
  %63 = getelementptr inbounds i8, i8* %51, i64 1
  br label %64

; <label>:64:                                     ; preds = %60, %62
  %65 = phi i8* [ %63, %62 ], [ null, %60 ]
  %66 = add i64 %50, 1
  br label %67

; <label>:67:                                     ; preds = %57, %64
  %68 = phi i32 [ 0, %64 ], [ 1, %57 ]
  %69 = phi i8* [ %65, %64 ], [ %51, %57 ]
  %70 = phi i64 [ %66, %64 ], [ %50, %57 ]
  %71 = icmp eq i32 %68, 0
  %72 = select i1 %71, i32 4, i32 %68
  br label %1378

; <label>:73:                                     ; preds = %79, %81
  %74 = phi i32 [ %83, %81 ], [ %78, %79 ]
  %75 = phi i8* [ %84, %81 ], [ %76, %79 ]
  %76 = getelementptr inbounds i8, i8* %75, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  switch i32 %78, label %91 [
    i32 95, label %79
    i32 45, label %79
    i32 48, label %79
    i32 94, label %80
    i32 35, label %85
  ]

; <label>:79:                                     ; preds = %73, %73, %73
  br label %73

; <label>:80:                                     ; preds = %73
  br label %81

; <label>:81:                                     ; preds = %80, %86
  %82 = phi i8 [ %88, %86 ], [ 1, %80 ]
  %83 = phi i32 [ %89, %86 ], [ %74, %80 ]
  %84 = phi i8* [ %90, %86 ], [ %76, %80 ]
  br label %73

; <label>:85:                                     ; preds = %73
  br label %86

; <label>:86:                                     ; preds = %56, %85
  %87 = phi i8 [ 1, %85 ], [ 0, %56 ]
  %88 = phi i8 [ %82, %85 ], [ %12, %56 ]
  %89 = phi i32 [ %74, %85 ], [ 0, %56 ]
  %90 = phi i8* [ %76, %85 ], [ %52, %56 ]
  br label %81

; <label>:91:                                     ; preds = %73
  %92 = add nsw i32 %78, -48
  %93 = icmp ult i32 %92, 10
  br i1 %93, label %94, label %118

; <label>:94:                                     ; preds = %91
  br label %95

; <label>:95:                                     ; preds = %94, %110
  %96 = phi i8 [ %113, %110 ], [ %77, %94 ]
  %97 = phi i32 [ %111, %110 ], [ 0, %94 ]
  %98 = phi i8* [ %112, %110 ], [ %76, %94 ]
  %99 = icmp sgt i32 %97, 214748364
  br i1 %99, label %110, label %100

; <label>:100:                                    ; preds = %95
  %101 = icmp eq i32 %97, 214748364
  %102 = sext i8 %96 to i32
  %103 = add nsw i32 %102, -48
  %104 = icmp sgt i32 %103, 7
  %105 = and i1 %101, %104
  br i1 %105, label %110, label %106

; <label>:106:                                    ; preds = %100
  %107 = mul nsw i32 %97, 10
  %108 = add i32 %107, -48
  %109 = add i32 %108, %102
  br label %110

; <label>:110:                                    ; preds = %100, %95, %106
  %111 = phi i32 [ %109, %106 ], [ 2147483647, %95 ], [ 2147483647, %100 ]
  %112 = getelementptr inbounds i8, i8* %98, i64 1
  %113 = load i8, i8* %112, align 1
  %114 = sext i8 %113 to i32
  %115 = add nsw i32 %114, -48
  %116 = icmp ult i32 %115, 10
  br i1 %116, label %95, label %117

; <label>:117:                                    ; preds = %110
  br label %118

; <label>:118:                                    ; preds = %117, %91
  %119 = phi i8 [ %77, %91 ], [ %113, %117 ]
  %120 = phi i32 [ -1, %91 ], [ %111, %117 ]
  %121 = phi i8* [ %76, %91 ], [ %112, %117 ]
  %122 = sext i8 %119 to i32
  switch i32 %122, label %126 [
    i32 69, label %123
    i32 79, label %123
  ]

; <label>:123:                                    ; preds = %118, %118
  %124 = getelementptr inbounds i8, i8* %121, i64 1
  %125 = load i8, i8* %124, align 1
  br label %126

; <label>:126:                                    ; preds = %118, %123
  %127 = phi i8 [ %125, %123 ], [ %119, %118 ]
  %128 = phi i32 [ %122, %123 ], [ 0, %118 ]
  %129 = phi i8* [ %124, %123 ], [ %121, %118 ]
  %130 = sext i8 %127 to i32
  switch i32 %130, label %1257 [
    i32 37, label %132
    i32 97, label %162
    i32 65, label %167
    i32 98, label %172
    i32 104, label %172
    i32 66, label %176
    i32 99, label %181
    i32 67, label %406
    i32 120, label %420
    i32 68, label %422
    i32 100, label %424
    i32 101, label %428
    i32 70, label %759
    i32 72, label %761
    i32 73, label %765
    i32 107, label %767
    i32 108, label %771
    i32 106, label %773
    i32 77, label %780
    i32 109, label %784
    i32 78, label %791
    i32 110, label %824
    i32 80, label %850
    i32 112, label %851
    i32 113, label %856
    i32 82, label %183
    i32 114, label %212
    i32 83, label %861
    i32 115, label %865
    i32 88, label %884
    i32 84, label %886
    i32 116, label %887
    i32 117, label %913
    i32 85, label %918
    i32 86, label %926
    i32 103, label %926
    i32 71, label %926
    i32 87, label %1006
    i32 119, label %1016
    i32 89, label %1020
    i32 121, label %1027
    i32 90, label %1038
    i32 58, label %131
    i32 122, label %1212
    i32 0, label %1254
  ]

; <label>:131:                                    ; preds = %126
  br label %1205

; <label>:132:                                    ; preds = %126
  %133 = icmp eq i32 %128, 0
  br i1 %133, label %134, label %1257

; <label>:134:                                    ; preds = %132
  %135 = icmp sgt i32 %120, 0
  %136 = select i1 %135, i32 %120, i32 0
  %137 = icmp ugt i32 %136, 1
  %138 = icmp ugt i32 %136, 1
  %139 = select i1 %138, i32 %136, i32 1
  %140 = zext i32 %139 to i64
  %141 = sub i64 %1, %50
  %142 = icmp ult i64 %140, %141
  br i1 %142, label %143, label %1370

; <label>:143:                                    ; preds = %134
  %144 = icmp eq i8* %51, null
  br i1 %144, label %159, label %145

; <label>:145:                                    ; preds = %143
  br i1 %137, label %146, label %155

; <label>:146:                                    ; preds = %145
  %147 = sext i32 %120 to i64
  %148 = add nsw i64 %147, -1
  %149 = icmp eq i32 %74, 48
  br i1 %149, label %150, label %151

; <label>:150:                                    ; preds = %146
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %148, i32 1, i1 false)
  br label %152

; <label>:151:                                    ; preds = %146
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %148, i32 1, i1 false)
  br label %152

; <label>:152:                                    ; preds = %151, %150
  %153 = getelementptr inbounds i8, i8* %51, i64 %148
  %154 = load i8, i8* %129, align 1
  br label %155

; <label>:155:                                    ; preds = %152, %145
  %156 = phi i8 [ %154, %152 ], [ %127, %145 ]
  %157 = phi i8* [ %153, %152 ], [ %51, %145 ]
  store i8 %156, i8* %157, align 1
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  br label %159

; <label>:159:                                    ; preds = %155, %143
  %160 = phi i8* [ %158, %155 ], [ null, %143 ]
  %161 = add i64 %140, %50
  br label %1372

; <label>:162:                                    ; preds = %126
  %163 = icmp eq i32 %128, 0
  br i1 %163, label %164, label %1257

; <label>:164:                                    ; preds = %162
  %165 = icmp eq i8 %87, 0
  %166 = select i1 %165, i8 %82, i8 1
  br label %212

; <label>:167:                                    ; preds = %126
  %168 = icmp eq i32 %128, 0
  br i1 %168, label %169, label %1257

; <label>:169:                                    ; preds = %167
  %170 = icmp eq i8 %87, 0
  %171 = select i1 %170, i8 %82, i8 1
  br label %212

; <label>:172:                                    ; preds = %126, %126
  %173 = icmp eq i8 %87, 0
  %174 = select i1 %173, i8 %82, i8 1
  %175 = icmp eq i32 %128, 0
  br i1 %175, label %212, label %1257

; <label>:176:                                    ; preds = %126
  %177 = icmp eq i32 %128, 0
  br i1 %177, label %178, label %1257

; <label>:178:                                    ; preds = %176
  %179 = icmp eq i8 %87, 0
  %180 = select i1 %179, i8 %82, i8 1
  br label %212

; <label>:181:                                    ; preds = %126
  %182 = icmp eq i32 %128, 79
  br i1 %182, label %1257, label %212

; <label>:183:                                    ; preds = %126, %759, %422, %886
  %184 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4.361, i64 0, i64 0), %886 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.362, i64 0, i64 0), %422 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.363, i64 0, i64 0), %759 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.364, i64 0, i64 0), %126 ]
  %185 = icmp ne i8 %82, 0
  %186 = call fastcc i64 @__strftime_internal(i8* null, i64 -1, i8* nonnull %184, %struct.tm* %3, i1 zeroext %185, %struct.tm_zone* %5, i32 %6)
  %187 = icmp sgt i32 %120, 0
  %188 = select i1 %187, i32 %120, i32 0
  %189 = zext i32 %188 to i64
  %190 = icmp ult i64 %186, %189
  %191 = select i1 %190, i64 %189, i64 %186
  %192 = sub i64 %1, %50
  %193 = icmp ult i64 %191, %192
  br i1 %193, label %194, label %1370

; <label>:194:                                    ; preds = %183
  %195 = icmp eq i8* %51, null
  br i1 %195, label %209, label %196

; <label>:196:                                    ; preds = %194
  br i1 %190, label %197, label %205

; <label>:197:                                    ; preds = %196
  %198 = sext i32 %120 to i64
  %199 = sub i64 %198, %186
  %200 = icmp eq i32 %74, 48
  br i1 %200, label %201, label %202

; <label>:201:                                    ; preds = %197
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %199, i32 1, i1 false)
  br label %203

; <label>:202:                                    ; preds = %197
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %199, i32 1, i1 false)
  br label %203

; <label>:203:                                    ; preds = %202, %201
  %204 = getelementptr inbounds i8, i8* %51, i64 %199
  br label %205

; <label>:205:                                    ; preds = %203, %196
  %206 = phi i8* [ %204, %203 ], [ %51, %196 ]
  %207 = call fastcc i64 @__strftime_internal(i8* %206, i64 %192, i8* %184, %struct.tm* %3, i1 zeroext %185, %struct.tm_zone* %5, i32 %6)
  %208 = getelementptr inbounds i8, i8* %206, i64 %186
  br label %209

; <label>:209:                                    ; preds = %205, %194
  %210 = phi i8* [ %208, %205 ], [ null, %194 ]
  %211 = add i64 %191, %50
  br label %1372

; <label>:212:                                    ; preds = %851, %178, %169, %164, %1020, %445, %172, %1027, %884, %126, %420, %406, %181
  %213 = phi i8 [ 121, %1027 ], [ 89, %1020 ], [ 88, %884 ], [ 114, %126 ], [ 120, %420 ], [ 67, %406 ], [ 99, %181 ], [ %127, %172 ], [ 97, %164 ], [ 65, %169 ], [ 66, %178 ], [ %127, %445 ], [ 112, %851 ]
  %214 = phi i8 [ %82, %1027 ], [ %82, %1020 ], [ %82, %884 ], [ %82, %126 ], [ %82, %420 ], [ %82, %406 ], [ %82, %181 ], [ %174, %172 ], [ %166, %164 ], [ %171, %169 ], [ %180, %178 ], [ %82, %445 ], [ %854, %851 ]
  %215 = phi i8 [ 0, %1027 ], [ 0, %1020 ], [ 0, %884 ], [ 0, %126 ], [ 0, %420 ], [ 0, %406 ], [ 0, %181 ], [ 0, %172 ], [ 0, %164 ], [ 0, %169 ], [ 0, %178 ], [ 0, %445 ], [ %855, %851 ]
  %216 = phi i32 [ %120, %1027 ], [ %120, %1020 ], [ %120, %884 ], [ %120, %126 ], [ %120, %420 ], [ %120, %406 ], [ %120, %181 ], [ %120, %172 ], [ %120, %164 ], [ %120, %169 ], [ %120, %178 ], [ %446, %445 ], [ %120, %851 ]
  %217 = phi i32 [ %54, %1027 ], [ %54, %1020 ], [ %54, %884 ], [ %54, %126 ], [ %54, %420 ], [ %54, %406 ], [ %54, %181 ], [ %54, %172 ], [ %54, %164 ], [ %54, %169 ], [ %54, %178 ], [ %447, %445 ], [ %54, %851 ]
  %218 = phi i32 [ %53, %1027 ], [ %53, %1020 ], [ %53, %884 ], [ %53, %126 ], [ %53, %420 ], [ %53, %406 ], [ %53, %181 ], [ %53, %172 ], [ %53, %164 ], [ %53, %169 ], [ %53, %178 ], [ %450, %445 ], [ %53, %851 ]
  %219 = phi i32 [ 0, %1027 ], [ 0, %1020 ], [ 0, %884 ], [ 0, %126 ], [ 0, %420 ], [ 0, %406 ], [ 0, %181 ], [ 0, %172 ], [ 0, %164 ], [ 0, %169 ], [ 0, %178 ], [ %451, %445 ], [ 0, %851 ]
  %220 = phi i32 [ %74, %1027 ], [ %74, %1020 ], [ %74, %884 ], [ %74, %126 ], [ %74, %420 ], [ %74, %406 ], [ %74, %181 ], [ %74, %172 ], [ %74, %164 ], [ %74, %169 ], [ %74, %178 ], [ %452, %445 ], [ %74, %851 ]
  %221 = phi i8* [ %129, %1027 ], [ %129, %1020 ], [ %129, %884 ], [ %129, %126 ], [ %129, %420 ], [ %129, %406 ], [ %129, %181 ], [ %129, %172 ], [ %129, %164 ], [ %129, %169 ], [ %129, %178 ], [ %453, %445 ], [ %129, %851 ]
  call void @llvm.lifetime.start(i64 5, i8* nonnull %28) #13
  call void @llvm.lifetime.start(i64 1024, i8* nonnull %29) #13
  store i8 32, i8* %28, align 1
  store i8 37, i8* %30, align 1
  %222 = icmp eq i32 %128, 0
  br i1 %222, label %225, label %223

; <label>:223:                                    ; preds = %212
  %224 = trunc i32 %128 to i8
  store i8 %224, i8* %31, align 1
  br label %225

; <label>:225:                                    ; preds = %212, %223
  %226 = phi i8* [ %33, %223 ], [ %31, %212 ]
  %227 = getelementptr inbounds i8, i8* %226, i64 1
  store i8 %213, i8* %226, align 1
  store i8 0, i8* %227, align 1
  %228 = call i64 @strftime(i8* nonnull %29, i64 1024, i8* nonnull %28, %struct.tm* %3) #13
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %402, label %230

; <label>:230:                                    ; preds = %225
  %231 = add i64 %228, -1
  %232 = icmp sgt i32 %216, 0
  %233 = select i1 %232, i32 %216, i32 0
  %234 = zext i32 %233 to i64
  %235 = icmp ult i64 %231, %234
  %236 = select i1 %235, i64 %234, i64 %231
  %237 = sub i64 %1, %50
  %238 = icmp ult i64 %236, %237
  br i1 %238, label %239, label %405

; <label>:239:                                    ; preds = %230
  %240 = icmp eq i8* %51, null
  br i1 %240, label %399, label %241

; <label>:241:                                    ; preds = %239
  %242 = icmp ne i32 %219, 0
  %243 = xor i1 %235, true
  %244 = or i1 %242, %243
  br i1 %244, label %253, label %245

; <label>:245:                                    ; preds = %241
  %246 = sext i32 %216 to i64
  %247 = sub i64 %246, %231
  %248 = icmp eq i32 %220, 48
  br i1 %248, label %249, label %250

; <label>:249:                                    ; preds = %245
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %247, i32 1, i1 false)
  br label %251

; <label>:250:                                    ; preds = %245
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %247, i32 1, i1 false)
  br label %251

; <label>:251:                                    ; preds = %250, %249
  %252 = getelementptr inbounds i8, i8* %51, i64 %247
  br label %253

; <label>:253:                                    ; preds = %241, %251
  %254 = phi i8* [ %252, %251 ], [ %51, %241 ]
  %255 = and i8 %215, 1
  %256 = icmp eq i8 %255, 0
  br i1 %256, label %323, label %257

; <label>:257:                                    ; preds = %253
  %258 = icmp eq i64 %231, 0
  br i1 %258, label %397, label %259

; <label>:259:                                    ; preds = %257
  %260 = tail call i32** @__ctype_tolower_loc() #1
  %261 = add i64 %228, -2
  %262 = and i64 %231, 3
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %280, label %264

; <label>:264:                                    ; preds = %259
  br label %265

; <label>:265:                                    ; preds = %265, %264
  %266 = phi i64 [ %231, %264 ], [ %268, %265 ]
  %267 = phi i64 [ %262, %264 ], [ %277, %265 ]
  %268 = add i64 %266, -1
  %269 = load i32*, i32** %260, align 8
  %270 = getelementptr inbounds i8, i8* %32, i64 %268
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i64
  %273 = getelementptr inbounds i32, i32* %269, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds i8, i8* %254, i64 %268
  store i8 %275, i8* %276, align 1
  %277 = add i64 %267, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %265

; <label>:279:                                    ; preds = %265
  br label %280

; <label>:280:                                    ; preds = %259, %279
  %281 = phi i64 [ %231, %259 ], [ %268, %279 ]
  %282 = icmp ult i64 %261, 3
  br i1 %282, label %396, label %283

; <label>:283:                                    ; preds = %280
  br label %284

; <label>:284:                                    ; preds = %284, %283
  %285 = phi i64 [ %281, %283 ], [ %313, %284 ]
  %286 = add i64 %285, -1
  %287 = load i32*, i32** %260, align 8
  %288 = getelementptr inbounds i8, i8* %32, i64 %286
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i64
  %291 = getelementptr inbounds i32, i32* %287, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds i8, i8* %254, i64 %286
  store i8 %293, i8* %294, align 1
  %295 = add i64 %285, -2
  %296 = load i32*, i32** %260, align 8
  %297 = getelementptr inbounds i8, i8* %32, i64 %295
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i64
  %300 = getelementptr inbounds i32, i32* %296, i64 %299
  %301 = load i32, i32* %300, align 4
  %302 = trunc i32 %301 to i8
  %303 = getelementptr inbounds i8, i8* %254, i64 %295
  store i8 %302, i8* %303, align 1
  %304 = add i64 %285, -3
  %305 = load i32*, i32** %260, align 8
  %306 = getelementptr inbounds i8, i8* %32, i64 %304
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds i32, i32* %305, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = trunc i32 %310 to i8
  %312 = getelementptr inbounds i8, i8* %254, i64 %304
  store i8 %311, i8* %312, align 1
  %313 = add i64 %285, -4
  %314 = load i32*, i32** %260, align 8
  %315 = getelementptr inbounds i8, i8* %32, i64 %313
  %316 = load i8, i8* %315, align 1
  %317 = zext i8 %316 to i64
  %318 = getelementptr inbounds i32, i32* %314, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds i8, i8* %254, i64 %313
  store i8 %320, i8* %321, align 1
  %322 = icmp eq i64 %313, 0
  br i1 %322, label %395, label %284

; <label>:323:                                    ; preds = %253
  %324 = and i8 %214, 1
  %325 = icmp eq i8 %324, 0
  br i1 %325, label %392, label %326

; <label>:326:                                    ; preds = %323
  %327 = icmp eq i64 %231, 0
  br i1 %327, label %397, label %328

; <label>:328:                                    ; preds = %326
  %329 = tail call i32** @__ctype_toupper_loc() #1
  %330 = add i64 %228, -2
  %331 = and i64 %231, 3
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %349, label %333

; <label>:333:                                    ; preds = %328
  br label %334

; <label>:334:                                    ; preds = %334, %333
  %335 = phi i64 [ %231, %333 ], [ %337, %334 ]
  %336 = phi i64 [ %331, %333 ], [ %346, %334 ]
  %337 = add i64 %335, -1
  %338 = load i32*, i32** %329, align 8
  %339 = getelementptr inbounds i8, i8* %32, i64 %337
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i64
  %342 = getelementptr inbounds i32, i32* %338, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = trunc i32 %343 to i8
  %345 = getelementptr inbounds i8, i8* %254, i64 %337
  store i8 %344, i8* %345, align 1
  %346 = add i64 %336, -1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %334

; <label>:348:                                    ; preds = %334
  br label %349

; <label>:349:                                    ; preds = %328, %348
  %350 = phi i64 [ %231, %328 ], [ %337, %348 ]
  %351 = icmp ult i64 %330, 3
  br i1 %351, label %394, label %352

; <label>:352:                                    ; preds = %349
  br label %353

; <label>:353:                                    ; preds = %353, %352
  %354 = phi i64 [ %350, %352 ], [ %382, %353 ]
  %355 = add i64 %354, -1
  %356 = load i32*, i32** %329, align 8
  %357 = getelementptr inbounds i8, i8* %32, i64 %355
  %358 = load i8, i8* %357, align 1
  %359 = zext i8 %358 to i64
  %360 = getelementptr inbounds i32, i32* %356, i64 %359
  %361 = load i32, i32* %360, align 4
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds i8, i8* %254, i64 %355
  store i8 %362, i8* %363, align 1
  %364 = add i64 %354, -2
  %365 = load i32*, i32** %329, align 8
  %366 = getelementptr inbounds i8, i8* %32, i64 %364
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i64
  %369 = getelementptr inbounds i32, i32* %365, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = trunc i32 %370 to i8
  %372 = getelementptr inbounds i8, i8* %254, i64 %364
  store i8 %371, i8* %372, align 1
  %373 = add i64 %354, -3
  %374 = load i32*, i32** %329, align 8
  %375 = getelementptr inbounds i8, i8* %32, i64 %373
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i64
  %378 = getelementptr inbounds i32, i32* %374, i64 %377
  %379 = load i32, i32* %378, align 4
  %380 = trunc i32 %379 to i8
  %381 = getelementptr inbounds i8, i8* %254, i64 %373
  store i8 %380, i8* %381, align 1
  %382 = add i64 %354, -4
  %383 = load i32*, i32** %329, align 8
  %384 = getelementptr inbounds i8, i8* %32, i64 %382
  %385 = load i8, i8* %384, align 1
  %386 = zext i8 %385 to i64
  %387 = getelementptr inbounds i32, i32* %383, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = trunc i32 %388 to i8
  %390 = getelementptr inbounds i8, i8* %254, i64 %382
  store i8 %389, i8* %390, align 1
  %391 = icmp eq i64 %382, 0
  br i1 %391, label %393, label %353

; <label>:392:                                    ; preds = %323
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %254, i8* %32, i64 %231, i32 1, i1 false)
  br label %397

; <label>:393:                                    ; preds = %353
  br label %394

; <label>:394:                                    ; preds = %349, %393
  br label %397

; <label>:395:                                    ; preds = %284
  br label %396

; <label>:396:                                    ; preds = %280, %395
  br label %397

; <label>:397:                                    ; preds = %396, %394, %326, %257, %392
  %398 = getelementptr inbounds i8, i8* %254, i64 %231
  br label %399

; <label>:399:                                    ; preds = %397, %239
  %400 = phi i8* [ %398, %397 ], [ null, %239 ]
  %401 = add i64 %236, %50
  br label %402

; <label>:402:                                    ; preds = %399, %225
  %403 = phi i8* [ %400, %399 ], [ %51, %225 ]
  %404 = phi i64 [ %401, %399 ], [ %50, %225 ]
  call void @llvm.lifetime.end(i64 1024, i8* nonnull %29) #13
  call void @llvm.lifetime.end(i64 5, i8* nonnull %28) #13
  br label %1372

; <label>:405:                                    ; preds = %230
  call void @llvm.lifetime.end(i64 1024, i8* nonnull %29) #13
  call void @llvm.lifetime.end(i64 5, i8* nonnull %28) #13
  br label %1371

; <label>:406:                                    ; preds = %126
  %407 = icmp eq i32 %128, 69
  br i1 %407, label %212, label %408

; <label>:408:                                    ; preds = %406
  %409 = load i32, i32* %34, align 4
  %410 = sdiv i32 %409, 100
  %411 = add nsw i32 %410, 19
  %412 = srem i32 %409, 100
  %413 = icmp slt i32 %412, 0
  %414 = icmp sgt i32 %409, -1900
  %415 = and i1 %414, %413
  %416 = sext i1 %415 to i32
  %417 = add nsw i32 %411, %416
  %418 = icmp slt i32 %409, -1900
  %419 = zext i1 %418 to i8
  br label %445

; <label>:420:                                    ; preds = %126
  %421 = icmp eq i32 %128, 79
  br i1 %421, label %1257, label %212

; <label>:422:                                    ; preds = %126
  %423 = icmp eq i32 %128, 0
  br i1 %423, label %183, label %1257

; <label>:424:                                    ; preds = %126
  %425 = icmp eq i32 %128, 69
  br i1 %425, label %1257, label %426

; <label>:426:                                    ; preds = %424
  %427 = load i32, i32* %37, align 4
  br label %438

; <label>:428:                                    ; preds = %126
  %429 = icmp eq i32 %128, 69
  br i1 %429, label %1257, label %430

; <label>:430:                                    ; preds = %428
  %431 = load i32, i32* %37, align 4
  br label %432

; <label>:432:                                    ; preds = %771, %769, %430
  %433 = phi i32 [ %770, %769 ], [ %431, %430 ], [ %23, %771 ]
  switch i32 %74, label %434 [
    i32 48, label %438
    i32 45, label %438
  ]

; <label>:434:                                    ; preds = %432
  br label %438

; <label>:435:                                    ; preds = %818
  br label %436

; <label>:436:                                    ; preds = %812, %435
  %437 = phi i32 [ %813, %812 ], [ %821, %435 ]
  br label %438

; <label>:438:                                    ; preds = %436, %795, %991, %986, %997, %1033, %1029, %793, %765, %432, %432, %434, %1018, %1008, %920, %913, %863, %782, %763, %426
  %439 = phi i32 [ %120, %1018 ], [ %120, %1008 ], [ %120, %920 ], [ %120, %913 ], [ %120, %863 ], [ %120, %782 ], [ %120, %434 ], [ %120, %432 ], [ %120, %763 ], [ %120, %426 ], [ %120, %432 ], [ %120, %765 ], [ 9, %793 ], [ %120, %1029 ], [ %120, %1033 ], [ %120, %997 ], [ %120, %986 ], [ %120, %991 ], [ %120, %795 ], [ %120, %436 ]
  %440 = phi i32 [ %1019, %1018 ], [ %1015, %1008 ], [ %925, %920 ], [ %917, %913 ], [ %864, %863 ], [ %783, %782 ], [ %433, %434 ], [ %433, %432 ], [ %764, %763 ], [ %427, %426 ], [ %433, %432 ], [ %23, %765 ], [ %6, %793 ], [ %1031, %1029 ], [ %1037, %1033 ], [ %999, %997 ], [ %989, %986 ], [ %996, %991 ], [ %6, %795 ], [ %437, %436 ]
  %441 = phi i32 [ 1, %1018 ], [ 2, %1008 ], [ 2, %920 ], [ 1, %913 ], [ 2, %863 ], [ 2, %782 ], [ 2, %434 ], [ 2, %432 ], [ 2, %763 ], [ 2, %426 ], [ 2, %432 ], [ 2, %765 ], [ 9, %793 ], [ 2, %1029 ], [ 2, %1033 ], [ 2, %997 ], [ 2, %986 ], [ 2, %991 ], [ %120, %795 ], [ %120, %436 ]
  %442 = phi i32 [ %74, %1018 ], [ %74, %1008 ], [ %74, %920 ], [ %74, %913 ], [ %74, %863 ], [ %74, %782 ], [ 95, %434 ], [ %74, %432 ], [ %74, %763 ], [ %74, %426 ], [ %74, %432 ], [ %74, %765 ], [ %74, %793 ], [ %74, %1029 ], [ %74, %1033 ], [ %74, %997 ], [ %74, %986 ], [ %74, %991 ], [ %74, %795 ], [ %74, %436 ]
  %443 = lshr i32 %440, 31
  %444 = trunc i32 %443 to i8
  br label %445

; <label>:445:                                    ; preds = %1000, %438, %775, %786, %856, %408, %1248
  %446 = phi i32 [ %120, %1248 ], [ %439, %438 ], [ %120, %1000 ], [ %120, %856 ], [ %120, %786 ], [ %120, %775 ], [ %120, %408 ]
  %447 = phi i32 [ %1250, %1248 ], [ 0, %438 ], [ 0, %1000 ], [ 0, %856 ], [ 0, %786 ], [ 0, %775 ], [ 0, %408 ]
  %448 = phi i8 [ 1, %1248 ], [ 0, %438 ], [ 0, %1000 ], [ 0, %856 ], [ 0, %786 ], [ 0, %775 ], [ 0, %408 ]
  %449 = phi i8 [ %1228, %1248 ], [ %444, %438 ], [ %1003, %1000 ], [ 0, %856 ], [ %789, %786 ], [ %778, %775 ], [ %419, %408 ]
  %450 = phi i32 [ %1251, %1248 ], [ %440, %438 ], [ %1005, %1000 ], [ %860, %856 ], [ %790, %786 ], [ %779, %775 ], [ %417, %408 ]
  %451 = phi i32 [ %1252, %1248 ], [ %441, %438 ], [ 4, %1000 ], [ 1, %856 ], [ 2, %786 ], [ 3, %775 ], [ 2, %408 ]
  %452 = phi i32 [ %74, %1248 ], [ %442, %438 ], [ %74, %1000 ], [ %74, %856 ], [ %74, %786 ], [ %74, %775 ], [ %74, %408 ]
  %453 = phi i8* [ %1214, %1248 ], [ %129, %438 ], [ %129, %1000 ], [ %129, %856 ], [ %129, %786 ], [ %129, %775 ], [ %129, %408 ]
  %454 = icmp eq i32 %128, 79
  %455 = and i8 %449, 1
  %456 = icmp eq i8 %455, 0
  %457 = and i1 %454, %456
  br i1 %457, label %212, label %458

; <label>:458:                                    ; preds = %1021, %445
  %459 = phi i1 [ %1026, %1021 ], [ %456, %445 ]
  %460 = phi i8* [ %129, %1021 ], [ %453, %445 ]
  %461 = phi i32 [ %74, %1021 ], [ %452, %445 ]
  %462 = phi i32 [ 4, %1021 ], [ %451, %445 ]
  %463 = phi i32 [ %1025, %1021 ], [ %450, %445 ]
  %464 = phi i8 [ %1024, %1021 ], [ %449, %445 ]
  %465 = phi i8 [ 0, %1021 ], [ %448, %445 ]
  %466 = phi i32 [ 0, %1021 ], [ %447, %445 ]
  %467 = phi i32 [ %120, %1021 ], [ %446, %445 ]
  %468 = sub i32 0, %463
  %469 = select i1 %459, i32 %463, i32 %468
  br label %470

; <label>:470:                                    ; preds = %458, %478
  %471 = phi i8* [ %484, %478 ], [ %35, %458 ]
  %472 = phi i32 [ %480, %478 ], [ %466, %458 ]
  %473 = phi i32 [ %485, %478 ], [ %469, %458 ]
  %474 = and i32 %472, 1
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %478, label %476

; <label>:476:                                    ; preds = %470
  %477 = getelementptr inbounds i8, i8* %471, i64 -1
  store i8 58, i8* %477, align 1
  br label %478

; <label>:478:                                    ; preds = %470, %476
  %479 = phi i8* [ %477, %476 ], [ %471, %470 ]
  %480 = ashr i32 %472, 1
  %481 = urem i32 %473, 10
  %482 = trunc i32 %481 to i8
  %483 = or i8 %482, 48
  %484 = getelementptr inbounds i8, i8* %479, i64 -1
  store i8 %483, i8* %484, align 1
  %485 = udiv i32 %473, 10
  %486 = icmp ugt i32 %473, 9
  %487 = icmp ne i32 %480, 0
  %488 = or i1 %486, %487
  br i1 %488, label %470, label %489

; <label>:489:                                    ; preds = %478
  br label %490

; <label>:490:                                    ; preds = %489, %882
  %491 = phi i32 [ %120, %882 ], [ %467, %489 ]
  %492 = phi i8* [ %879, %882 ], [ %484, %489 ]
  %493 = phi i32 [ %54, %882 ], [ 0, %489 ]
  %494 = phi i8 [ 0, %882 ], [ %465, %489 ]
  %495 = phi i8 [ %883, %882 ], [ %464, %489 ]
  %496 = phi i32 [ %53, %882 ], [ %485, %489 ]
  %497 = phi i32 [ 1, %882 ], [ %462, %489 ]
  %498 = phi i32 [ %74, %882 ], [ %461, %489 ]
  %499 = phi i8* [ %129, %882 ], [ %460, %489 ]
  %500 = icmp slt i32 %497, %491
  %501 = select i1 %500, i32 %491, i32 %497
  %502 = and i8 %495, 1
  %503 = icmp ne i8 %502, 0
  %504 = and i8 %494, 1
  %505 = icmp ne i8 %504, 0
  %506 = select i1 %505, i8 43, i8 0
  %507 = select i1 %503, i8 45, i8 %506
  %508 = icmp eq i32 %498, 45
  br i1 %508, label %509, label %535

; <label>:509:                                    ; preds = %490
  %510 = icmp eq i8 %507, 0
  br i1 %510, label %655, label %511

; <label>:511:                                    ; preds = %509
  %512 = icmp sgt i32 %491, 0
  %513 = select i1 %512, i32 %491, i32 0
  %514 = icmp ugt i32 %513, 1
  %515 = select i1 %514, i32 %513, i32 1
  %516 = zext i32 %515 to i64
  %517 = sub i64 %1, %50
  %518 = icmp ult i64 %516, %517
  br i1 %518, label %519, label %1370

; <label>:519:                                    ; preds = %511
  %520 = icmp eq i8* %51, null
  br i1 %520, label %532, label %521

; <label>:521:                                    ; preds = %519
  %522 = icmp ne i32 %501, 0
  %523 = icmp ult i32 %513, 2
  %524 = or i1 %523, %522
  br i1 %524, label %529, label %525

; <label>:525:                                    ; preds = %521
  %526 = sext i32 %491 to i64
  %527 = add nsw i64 %526, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %527, i32 1, i1 false)
  %528 = getelementptr inbounds i8, i8* %51, i64 %527
  br label %529

; <label>:529:                                    ; preds = %521, %525
  %530 = phi i8* [ %528, %525 ], [ %51, %521 ]
  store i8 %507, i8* %530, align 1
  %531 = getelementptr inbounds i8, i8* %530, i64 1
  br label %532

; <label>:532:                                    ; preds = %529, %519
  %533 = phi i8* [ %531, %529 ], [ null, %519 ]
  %534 = add i64 %516, %50
  br label %655

; <label>:535:                                    ; preds = %490
  %536 = sext i32 %501 to i64
  %537 = ptrtoint i8* %492 to i64
  %538 = sub i64 %537, %36
  %539 = icmp ne i8 %507, 0
  %540 = sext i1 %539 to i64
  %541 = add i64 %538, %540
  %542 = add i64 %541, %536
  %543 = trunc i64 %542 to i32
  %544 = icmp sgt i32 %543, 0
  br i1 %544, label %545, label %626

; <label>:545:                                    ; preds = %535
  %546 = icmp eq i32 %498, 95
  br i1 %546, label %547, label %584

; <label>:547:                                    ; preds = %545
  %548 = shl i64 %542, 32
  %549 = ashr exact i64 %548, 32
  %550 = sub i64 %1, %50
  %551 = icmp ult i64 %549, %550
  br i1 %551, label %552, label %1370

; <label>:552:                                    ; preds = %547
  %553 = icmp eq i8* %51, null
  br i1 %553, label %556, label %554

; <label>:554:                                    ; preds = %552
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %549, i32 1, i1 false)
  %555 = getelementptr inbounds i8, i8* %51, i64 %549
  br label %556

; <label>:556:                                    ; preds = %552, %554
  %557 = phi i8* [ %555, %554 ], [ null, %552 ]
  %558 = add i64 %549, %50
  %559 = icmp sgt i32 %491, %543
  %560 = sub nsw i32 %491, %543
  %561 = select i1 %559, i32 %560, i32 0
  br i1 %539, label %562, label %655

; <label>:562:                                    ; preds = %556
  %563 = icmp ugt i32 %561, 1
  %564 = select i1 %563, i32 %561, i32 1
  %565 = zext i32 %564 to i64
  %566 = sub i64 %1, %558
  %567 = icmp ult i64 %565, %566
  br i1 %567, label %568, label %1370

; <label>:568:                                    ; preds = %562
  %569 = icmp eq i8* %557, null
  br i1 %569, label %581, label %570

; <label>:570:                                    ; preds = %568
  %571 = icmp ne i32 %501, 0
  %572 = icmp ult i32 %561, 2
  %573 = or i1 %571, %572
  br i1 %573, label %578, label %574

; <label>:574:                                    ; preds = %570
  %575 = zext i32 %561 to i64
  %576 = add nsw i64 %575, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull %557, i8 32, i64 %576, i32 1, i1 false)
  %577 = getelementptr inbounds i8, i8* %557, i64 %576
  br label %578

; <label>:578:                                    ; preds = %570, %574
  %579 = phi i8* [ %577, %574 ], [ %557, %570 ]
  store i8 %507, i8* %579, align 1
  %580 = getelementptr inbounds i8, i8* %579, i64 1
  br label %581

; <label>:581:                                    ; preds = %578, %568
  %582 = phi i8* [ %580, %578 ], [ null, %568 ]
  %583 = add i64 %565, %558
  br label %655

; <label>:584:                                    ; preds = %545
  %585 = sub i64 %1, %50
  %586 = icmp ult i64 %536, %585
  br i1 %586, label %587, label %1370

; <label>:587:                                    ; preds = %584
  br i1 %539, label %588, label %615

; <label>:588:                                    ; preds = %587
  %589 = icmp sgt i32 %491, 0
  %590 = select i1 %589, i32 %491, i32 0
  %591 = icmp ugt i32 %590, 1
  %592 = select i1 %591, i32 %590, i32 1
  %593 = zext i32 %592 to i64
  %594 = icmp ult i64 %593, %585
  br i1 %594, label %595, label %1370

; <label>:595:                                    ; preds = %588
  %596 = icmp eq i8* %51, null
  br i1 %596, label %612, label %597

; <label>:597:                                    ; preds = %595
  %598 = icmp ne i32 %501, 0
  %599 = icmp ult i32 %590, 2
  %600 = or i1 %599, %598
  br i1 %600, label %609, label %601

; <label>:601:                                    ; preds = %597
  %602 = sext i32 %491 to i64
  %603 = add nsw i64 %602, -1
  %604 = icmp eq i32 %498, 48
  br i1 %604, label %605, label %606

; <label>:605:                                    ; preds = %601
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %603, i32 1, i1 false)
  br label %607

; <label>:606:                                    ; preds = %601
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %603, i32 1, i1 false)
  br label %607

; <label>:607:                                    ; preds = %606, %605
  %608 = getelementptr inbounds i8, i8* %51, i64 %603
  br label %609

; <label>:609:                                    ; preds = %597, %607
  %610 = phi i8* [ %608, %607 ], [ %51, %597 ]
  store i8 %507, i8* %610, align 1
  %611 = getelementptr inbounds i8, i8* %610, i64 1
  br label %612

; <label>:612:                                    ; preds = %609, %595
  %613 = phi i8* [ %611, %609 ], [ null, %595 ]
  %614 = add i64 %593, %50
  br label %615

; <label>:615:                                    ; preds = %612, %587
  %616 = phi i8* [ %51, %587 ], [ %613, %612 ]
  %617 = phi i64 [ %50, %587 ], [ %614, %612 ]
  %618 = icmp eq i8* %616, null
  %619 = shl i64 %542, 32
  %620 = ashr exact i64 %619, 32
  br i1 %618, label %623, label %621

; <label>:621:                                    ; preds = %615
  call void @llvm.memset.p0i8.i64(i8* nonnull %616, i8 48, i64 %620, i32 1, i1 false)
  %622 = getelementptr inbounds i8, i8* %616, i64 %620
  br label %623

; <label>:623:                                    ; preds = %615, %621
  %624 = phi i8* [ %622, %621 ], [ null, %615 ]
  %625 = add i64 %617, %620
  br label %655

; <label>:626:                                    ; preds = %535
  br i1 %539, label %627, label %655

; <label>:627:                                    ; preds = %626
  %628 = icmp sgt i32 %491, 0
  %629 = select i1 %628, i32 %491, i32 0
  %630 = icmp ugt i32 %629, 1
  %631 = select i1 %630, i32 %629, i32 1
  %632 = zext i32 %631 to i64
  %633 = sub i64 %1, %50
  %634 = icmp ult i64 %632, %633
  br i1 %634, label %635, label %1370

; <label>:635:                                    ; preds = %627
  %636 = icmp eq i8* %51, null
  br i1 %636, label %652, label %637

; <label>:637:                                    ; preds = %635
  %638 = icmp ne i32 %501, 0
  %639 = icmp ult i32 %629, 2
  %640 = or i1 %639, %638
  br i1 %640, label %649, label %641

; <label>:641:                                    ; preds = %637
  %642 = sext i32 %491 to i64
  %643 = add nsw i64 %642, -1
  %644 = icmp eq i32 %498, 48
  br i1 %644, label %645, label %646

; <label>:645:                                    ; preds = %641
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %643, i32 1, i1 false)
  br label %647

; <label>:646:                                    ; preds = %641
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %643, i32 1, i1 false)
  br label %647

; <label>:647:                                    ; preds = %646, %645
  %648 = getelementptr inbounds i8, i8* %51, i64 %643
  br label %649

; <label>:649:                                    ; preds = %637, %647
  %650 = phi i8* [ %648, %647 ], [ %51, %637 ]
  store i8 %507, i8* %650, align 1
  %651 = getelementptr inbounds i8, i8* %650, i64 1
  br label %652

; <label>:652:                                    ; preds = %649, %635
  %653 = phi i8* [ %651, %649 ], [ null, %635 ]
  %654 = add i64 %632, %50
  br label %655

; <label>:655:                                    ; preds = %556, %623, %626, %581, %652, %532, %509
  %656 = phi i32 [ %491, %509 ], [ %491, %532 ], [ %491, %652 ], [ %561, %581 ], [ %491, %626 ], [ 0, %623 ], [ %561, %556 ]
  %657 = phi i8* [ %51, %509 ], [ %533, %532 ], [ %653, %652 ], [ %582, %581 ], [ %51, %626 ], [ %624, %623 ], [ %557, %556 ]
  %658 = phi i64 [ %50, %509 ], [ %534, %532 ], [ %654, %652 ], [ %583, %581 ], [ %50, %626 ], [ %625, %623 ], [ %558, %556 ]
  %659 = ptrtoint i8* %492 to i64
  %660 = sub i64 %36, %659
  %661 = icmp sgt i32 %656, 0
  %662 = select i1 %661, i32 %656, i32 0
  %663 = zext i32 %662 to i64
  %664 = icmp ult i64 %660, %663
  %665 = select i1 %664, i64 %663, i64 %660
  %666 = sub i64 %1, %658
  %667 = icmp ult i64 %665, %666
  br i1 %667, label %668, label %1370

; <label>:668:                                    ; preds = %655
  %669 = icmp eq i8* %657, null
  br i1 %669, label %756, label %670

; <label>:670:                                    ; preds = %668
  %671 = icmp ne i32 %501, 0
  %672 = xor i1 %664, true
  %673 = or i1 %671, %672
  br i1 %673, label %682, label %674

; <label>:674:                                    ; preds = %670
  %675 = sext i32 %656 to i64
  %676 = sub i64 %675, %660
  %677 = icmp eq i32 %498, 48
  br i1 %677, label %678, label %679

; <label>:678:                                    ; preds = %674
  call void @llvm.memset.p0i8.i64(i8* nonnull %657, i8 48, i64 %676, i32 1, i1 false)
  br label %680

; <label>:679:                                    ; preds = %674
  call void @llvm.memset.p0i8.i64(i8* nonnull %657, i8 32, i64 %676, i32 1, i1 false)
  br label %680

; <label>:680:                                    ; preds = %679, %678
  %681 = getelementptr inbounds i8, i8* %657, i64 %676
  br label %682

; <label>:682:                                    ; preds = %680, %670
  %683 = phi i8* [ %681, %680 ], [ %657, %670 ]
  %684 = icmp eq i8 %82, 0
  br i1 %684, label %751, label %685

; <label>:685:                                    ; preds = %682
  %686 = icmp eq i64 %660, 0
  br i1 %686, label %754, label %687

; <label>:687:                                    ; preds = %685
  %688 = tail call i32** @__ctype_toupper_loc() #1
  %689 = sub i64 %47, %659
  %690 = and i64 %660, 3
  %691 = icmp eq i64 %690, 0
  br i1 %691, label %708, label %692

; <label>:692:                                    ; preds = %687
  br label %693

; <label>:693:                                    ; preds = %693, %692
  %694 = phi i64 [ %660, %692 ], [ %696, %693 ]
  %695 = phi i64 [ %690, %692 ], [ %705, %693 ]
  %696 = add i64 %694, -1
  %697 = load i32*, i32** %688, align 8
  %698 = getelementptr inbounds i8, i8* %492, i64 %696
  %699 = load i8, i8* %698, align 1
  %700 = zext i8 %699 to i64
  %701 = getelementptr inbounds i32, i32* %697, i64 %700
  %702 = load i32, i32* %701, align 4
  %703 = trunc i32 %702 to i8
  %704 = getelementptr inbounds i8, i8* %683, i64 %696
  store i8 %703, i8* %704, align 1
  %705 = add i64 %695, -1
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %693

; <label>:707:                                    ; preds = %693
  br label %708

; <label>:708:                                    ; preds = %687, %707
  %709 = phi i64 [ %660, %687 ], [ %696, %707 ]
  %710 = icmp ult i64 %689, 3
  br i1 %710, label %753, label %711

; <label>:711:                                    ; preds = %708
  br label %712

; <label>:712:                                    ; preds = %712, %711
  %713 = phi i64 [ %709, %711 ], [ %741, %712 ]
  %714 = add i64 %713, -1
  %715 = load i32*, i32** %688, align 8
  %716 = getelementptr inbounds i8, i8* %492, i64 %714
  %717 = load i8, i8* %716, align 1
  %718 = zext i8 %717 to i64
  %719 = getelementptr inbounds i32, i32* %715, i64 %718
  %720 = load i32, i32* %719, align 4
  %721 = trunc i32 %720 to i8
  %722 = getelementptr inbounds i8, i8* %683, i64 %714
  store i8 %721, i8* %722, align 1
  %723 = add i64 %713, -2
  %724 = load i32*, i32** %688, align 8
  %725 = getelementptr inbounds i8, i8* %492, i64 %723
  %726 = load i8, i8* %725, align 1
  %727 = zext i8 %726 to i64
  %728 = getelementptr inbounds i32, i32* %724, i64 %727
  %729 = load i32, i32* %728, align 4
  %730 = trunc i32 %729 to i8
  %731 = getelementptr inbounds i8, i8* %683, i64 %723
  store i8 %730, i8* %731, align 1
  %732 = add i64 %713, -3
  %733 = load i32*, i32** %688, align 8
  %734 = getelementptr inbounds i8, i8* %492, i64 %732
  %735 = load i8, i8* %734, align 1
  %736 = zext i8 %735 to i64
  %737 = getelementptr inbounds i32, i32* %733, i64 %736
  %738 = load i32, i32* %737, align 4
  %739 = trunc i32 %738 to i8
  %740 = getelementptr inbounds i8, i8* %683, i64 %732
  store i8 %739, i8* %740, align 1
  %741 = add i64 %713, -4
  %742 = load i32*, i32** %688, align 8
  %743 = getelementptr inbounds i8, i8* %492, i64 %741
  %744 = load i8, i8* %743, align 1
  %745 = zext i8 %744 to i64
  %746 = getelementptr inbounds i32, i32* %742, i64 %745
  %747 = load i32, i32* %746, align 4
  %748 = trunc i32 %747 to i8
  %749 = getelementptr inbounds i8, i8* %683, i64 %741
  store i8 %748, i8* %749, align 1
  %750 = icmp eq i64 %741, 0
  br i1 %750, label %752, label %712

; <label>:751:                                    ; preds = %682
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %683, i8* %492, i64 %660, i32 1, i1 false)
  br label %754

; <label>:752:                                    ; preds = %712
  br label %753

; <label>:753:                                    ; preds = %708, %752
  br label %754

; <label>:754:                                    ; preds = %753, %685, %751
  %755 = getelementptr inbounds i8, i8* %683, i64 %660
  br label %756

; <label>:756:                                    ; preds = %754, %668
  %757 = phi i8* [ %755, %754 ], [ null, %668 ]
  %758 = add i64 %665, %658
  br label %1372

; <label>:759:                                    ; preds = %126
  %760 = icmp eq i32 %128, 0
  br i1 %760, label %183, label %1257

; <label>:761:                                    ; preds = %126
  %762 = icmp eq i32 %128, 69
  br i1 %762, label %1257, label %763

; <label>:763:                                    ; preds = %761
  %764 = load i32, i32* %13, align 8
  br label %438

; <label>:765:                                    ; preds = %126
  %766 = icmp eq i32 %128, 69
  br i1 %766, label %1257, label %438

; <label>:767:                                    ; preds = %126
  %768 = icmp eq i32 %128, 69
  br i1 %768, label %1257, label %769

; <label>:769:                                    ; preds = %767
  %770 = load i32, i32* %13, align 8
  br label %432

; <label>:771:                                    ; preds = %126
  %772 = icmp eq i32 %128, 69
  br i1 %772, label %1257, label %432

; <label>:773:                                    ; preds = %126
  %774 = icmp eq i32 %128, 69
  br i1 %774, label %1257, label %775

; <label>:775:                                    ; preds = %773
  %776 = load i32, i32* %38, align 4
  %777 = icmp slt i32 %776, -1
  %778 = zext i1 %777 to i8
  %779 = add i32 %776, 1
  br label %445

; <label>:780:                                    ; preds = %126
  %781 = icmp eq i32 %128, 69
  br i1 %781, label %1257, label %782

; <label>:782:                                    ; preds = %780
  %783 = load i32, i32* %39, align 4
  br label %438

; <label>:784:                                    ; preds = %126
  %785 = icmp eq i32 %128, 69
  br i1 %785, label %1257, label %786

; <label>:786:                                    ; preds = %784
  %787 = load i32, i32* %40, align 8
  %788 = icmp slt i32 %787, -1
  %789 = zext i1 %788 to i8
  %790 = add i32 %787, 1
  br label %445

; <label>:791:                                    ; preds = %126
  %792 = icmp eq i32 %128, 69
  br i1 %792, label %1257, label %793

; <label>:793:                                    ; preds = %791
  %794 = icmp eq i32 %120, -1
  br i1 %794, label %438, label %795

; <label>:795:                                    ; preds = %793
  %796 = icmp slt i32 %120, 9
  br i1 %796, label %797, label %438

; <label>:797:                                    ; preds = %795
  %798 = sub i32 9, %120
  %799 = sub i32 8, %120
  %800 = and i32 %798, 3
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %812, label %802

; <label>:802:                                    ; preds = %797
  br label %803

; <label>:803:                                    ; preds = %803, %802
  %804 = phi i32 [ %807, %803 ], [ %6, %802 ]
  %805 = phi i32 [ %808, %803 ], [ %120, %802 ]
  %806 = phi i32 [ %809, %803 ], [ %800, %802 ]
  %807 = sdiv i32 %804, 10
  %808 = add nsw i32 %805, 1
  %809 = add i32 %806, -1
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %811, label %803

; <label>:811:                                    ; preds = %803
  br label %812

; <label>:812:                                    ; preds = %797, %811
  %813 = phi i32 [ undef, %797 ], [ %807, %811 ]
  %814 = phi i32 [ %6, %797 ], [ %807, %811 ]
  %815 = phi i32 [ %120, %797 ], [ %808, %811 ]
  %816 = icmp ult i32 %799, 3
  br i1 %816, label %436, label %817

; <label>:817:                                    ; preds = %812
  br label %818

; <label>:818:                                    ; preds = %818, %817
  %819 = phi i32 [ %814, %817 ], [ %821, %818 ]
  %820 = phi i32 [ %815, %817 ], [ %822, %818 ]
  %821 = sdiv i32 %819, 10000
  %822 = add nsw i32 %820, 4
  %823 = icmp eq i32 %822, 9
  br i1 %823, label %435, label %818

; <label>:824:                                    ; preds = %126
  %825 = icmp sgt i32 %120, 0
  %826 = select i1 %825, i32 %120, i32 0
  %827 = icmp ugt i32 %826, 1
  %828 = icmp ugt i32 %826, 1
  %829 = select i1 %828, i32 %826, i32 1
  %830 = zext i32 %829 to i64
  %831 = sub i64 %1, %50
  %832 = icmp ult i64 %830, %831
  br i1 %832, label %833, label %1370

; <label>:833:                                    ; preds = %824
  %834 = icmp eq i8* %51, null
  br i1 %834, label %847, label %835

; <label>:835:                                    ; preds = %833
  br i1 %827, label %836, label %844

; <label>:836:                                    ; preds = %835
  %837 = sext i32 %120 to i64
  %838 = add nsw i64 %837, -1
  %839 = icmp eq i32 %74, 48
  br i1 %839, label %840, label %841

; <label>:840:                                    ; preds = %836
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %838, i32 1, i1 false)
  br label %842

; <label>:841:                                    ; preds = %836
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %838, i32 1, i1 false)
  br label %842

; <label>:842:                                    ; preds = %841, %840
  %843 = getelementptr inbounds i8, i8* %51, i64 %838
  br label %844

; <label>:844:                                    ; preds = %842, %835
  %845 = phi i8* [ %843, %842 ], [ %51, %835 ]
  store i8 10, i8* %845, align 1
  %846 = getelementptr inbounds i8, i8* %845, i64 1
  br label %847

; <label>:847:                                    ; preds = %844, %833
  %848 = phi i8* [ %846, %844 ], [ null, %833 ]
  %849 = add i64 %830, %50
  br label %1372

; <label>:850:                                    ; preds = %126
  br label %851

; <label>:851:                                    ; preds = %126, %850
  %852 = phi i8 [ 0, %126 ], [ 1, %850 ]
  %853 = icmp eq i8 %87, 0
  %854 = select i1 %853, i8 %82, i8 0
  %855 = select i1 %853, i8 %852, i8 1
  br label %212

; <label>:856:                                    ; preds = %126
  %857 = load i32, i32* %40, align 8
  %858 = mul nsw i32 %857, 11
  %859 = ashr i32 %858, 5
  %860 = add nsw i32 %859, 1
  br label %445

; <label>:861:                                    ; preds = %126
  %862 = icmp eq i32 %128, 69
  br i1 %862, label %1257, label %863

; <label>:863:                                    ; preds = %861
  %864 = load i32, i32* %41, align 8
  br label %438

; <label>:865:                                    ; preds = %126
  call void @llvm.lifetime.start(i64 56, i8* nonnull %42) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %42, i8* %43, i64 56, i32 8, i1 false)
  %866 = call i64 @mktime_z(%struct.tm_zone* %5, %struct.tm* nonnull %11) #13
  %867 = icmp slt i64 %866, 0
  %868 = lshr i64 %866, 63
  br label %869

; <label>:869:                                    ; preds = %869, %865
  %870 = phi i64 [ %866, %865 ], [ %874, %869 ]
  %871 = phi i8* [ %35, %865 ], [ %879, %869 ]
  %872 = srem i64 %870, 10
  %873 = trunc i64 %872 to i32
  %874 = sdiv i64 %870, 10
  %875 = sub nsw i32 0, %873
  %876 = select i1 %867, i32 %875, i32 %873
  %877 = add nsw i32 %876, 48
  %878 = trunc i32 %877 to i8
  %879 = getelementptr inbounds i8, i8* %871, i64 -1
  store i8 %878, i8* %879, align 1
  %880 = add i64 %870, 9
  %881 = icmp ugt i64 %880, 18
  br i1 %881, label %869, label %882

; <label>:882:                                    ; preds = %869
  %883 = trunc i64 %868 to i8
  call void @llvm.lifetime.end(i64 56, i8* nonnull %42) #13
  br label %490

; <label>:884:                                    ; preds = %126
  %885 = icmp eq i32 %128, 79
  br i1 %885, label %1257, label %212

; <label>:886:                                    ; preds = %126
  br label %183

; <label>:887:                                    ; preds = %126
  %888 = icmp sgt i32 %120, 0
  %889 = select i1 %888, i32 %120, i32 0
  %890 = icmp ugt i32 %889, 1
  %891 = icmp ugt i32 %889, 1
  %892 = select i1 %891, i32 %889, i32 1
  %893 = zext i32 %892 to i64
  %894 = sub i64 %1, %50
  %895 = icmp ult i64 %893, %894
  br i1 %895, label %896, label %1370

; <label>:896:                                    ; preds = %887
  %897 = icmp eq i8* %51, null
  br i1 %897, label %910, label %898

; <label>:898:                                    ; preds = %896
  br i1 %890, label %899, label %907

; <label>:899:                                    ; preds = %898
  %900 = sext i32 %120 to i64
  %901 = add nsw i64 %900, -1
  %902 = icmp eq i32 %74, 48
  br i1 %902, label %903, label %904

; <label>:903:                                    ; preds = %899
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %901, i32 1, i1 false)
  br label %905

; <label>:904:                                    ; preds = %899
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %901, i32 1, i1 false)
  br label %905

; <label>:905:                                    ; preds = %904, %903
  %906 = getelementptr inbounds i8, i8* %51, i64 %901
  br label %907

; <label>:907:                                    ; preds = %905, %898
  %908 = phi i8* [ %906, %905 ], [ %51, %898 ]
  store i8 9, i8* %908, align 1
  %909 = getelementptr inbounds i8, i8* %908, i64 1
  br label %910

; <label>:910:                                    ; preds = %907, %896
  %911 = phi i8* [ %909, %907 ], [ null, %896 ]
  %912 = add i64 %893, %50
  br label %1372

; <label>:913:                                    ; preds = %126
  %914 = load i32, i32* %44, align 8
  %915 = add nsw i32 %914, 6
  %916 = srem i32 %915, 7
  %917 = add nsw i32 %916, 1
  br label %438

; <label>:918:                                    ; preds = %126
  %919 = icmp eq i32 %128, 69
  br i1 %919, label %1257, label %920

; <label>:920:                                    ; preds = %918
  %921 = load i32, i32* %38, align 4
  %922 = load i32, i32* %44, align 8
  %923 = add i32 %921, 7
  %924 = sub i32 %923, %922
  %925 = sdiv i32 %924, 7
  br label %438

; <label>:926:                                    ; preds = %126, %126, %126
  %927 = icmp eq i32 %128, 69
  br i1 %927, label %1257, label %928

; <label>:928:                                    ; preds = %926
  %929 = load i32, i32* %34, align 4
  %930 = ashr i32 %929, 31
  %931 = and i32 %930, 400
  %932 = add i32 %929, -100
  %933 = add i32 %932, %931
  %934 = load i32, i32* %38, align 4
  %935 = load i32, i32* %44, align 8
  %936 = add i32 %934, 382
  %937 = sub i32 %936, %935
  %938 = srem i32 %937, 7
  %939 = add i32 %934, 3
  %940 = sub i32 %939, %938
  %941 = icmp slt i32 %940, 0
  br i1 %941, label %942, label %961

; <label>:942:                                    ; preds = %928
  %943 = add nsw i32 %933, -1
  %944 = and i32 %943, 3
  %945 = icmp eq i32 %944, 0
  br i1 %945, label %946, label %953

; <label>:946:                                    ; preds = %942
  %947 = srem i32 %943, 100
  %948 = icmp ne i32 %947, 0
  %949 = srem i32 %943, 400
  %950 = icmp eq i32 %949, 0
  %951 = or i1 %948, %950
  %952 = select i1 %951, i32 366, i32 365
  br label %953

; <label>:953:                                    ; preds = %946, %942
  %954 = phi i32 [ 365, %942 ], [ %952, %946 ]
  %955 = add nsw i32 %954, %934
  %956 = add i32 %955, 382
  %957 = sub i32 %956, %935
  %958 = srem i32 %957, 7
  %959 = add i32 %955, 3
  %960 = sub i32 %959, %958
  br label %983

; <label>:961:                                    ; preds = %928
  %962 = and i32 %933, 3
  %963 = icmp eq i32 %962, 0
  br i1 %963, label %964, label %971

; <label>:964:                                    ; preds = %961
  %965 = srem i32 %933, 100
  %966 = icmp ne i32 %965, 0
  %967 = srem i32 %933, 400
  %968 = icmp eq i32 %967, 0
  %969 = or i1 %966, %968
  %970 = select i1 %969, i32 366, i32 365
  br label %971

; <label>:971:                                    ; preds = %964, %961
  %972 = phi i32 [ 365, %961 ], [ %970, %964 ]
  %973 = sub nsw i32 %934, %972
  %974 = add i32 %973, 382
  %975 = sub i32 %974, %935
  %976 = srem i32 %975, 7
  %977 = add i32 %973, 3
  %978 = sub i32 %977, %976
  %979 = icmp sgt i32 %978, -1
  %980 = lshr i32 %978, 31
  %981 = xor i32 %980, 1
  %982 = select i1 %979, i32 %978, i32 %940
  br label %983

; <label>:983:                                    ; preds = %971, %953
  %984 = phi i32 [ -1, %953 ], [ %981, %971 ]
  %985 = phi i32 [ %960, %953 ], [ %982, %971 ]
  switch i32 %130, label %997 [
    i32 103, label %986
    i32 71, label %1000
  ]

; <label>:986:                                    ; preds = %983
  %987 = srem i32 %929, 100
  %988 = add nsw i32 %987, %984
  %989 = srem i32 %988, 100
  %990 = icmp sgt i32 %989, -1
  br i1 %990, label %438, label %991

; <label>:991:                                    ; preds = %986
  %992 = sub nsw i32 -1900, %984
  %993 = icmp slt i32 %929, %992
  %994 = sub nsw i32 0, %989
  %995 = add nsw i32 %989, 100
  %996 = select i1 %993, i32 %994, i32 %995
  br label %438

; <label>:997:                                    ; preds = %983
  %998 = sdiv i32 %985, 7
  %999 = add nsw i32 %998, 1
  br label %438

; <label>:1000:                                   ; preds = %983
  %1001 = sub nsw i32 -1900, %984
  %1002 = icmp slt i32 %929, %1001
  %1003 = zext i1 %1002 to i8
  %1004 = add nsw i32 %984, 1900
  %1005 = add i32 %1004, %929
  br label %445

; <label>:1006:                                   ; preds = %126
  %1007 = icmp eq i32 %128, 69
  br i1 %1007, label %1257, label %1008

; <label>:1008:                                   ; preds = %1006
  %1009 = load i32, i32* %38, align 4
  %1010 = load i32, i32* %44, align 8
  %1011 = add nsw i32 %1010, 6
  %1012 = srem i32 %1011, 7
  %1013 = add i32 %1009, 7
  %1014 = sub i32 %1013, %1012
  %1015 = sdiv i32 %1014, 7
  br label %438

; <label>:1016:                                   ; preds = %126
  %1017 = icmp eq i32 %128, 69
  br i1 %1017, label %1257, label %1018

; <label>:1018:                                   ; preds = %1016
  %1019 = load i32, i32* %44, align 8
  br label %438

; <label>:1020:                                   ; preds = %126
  switch i32 %128, label %1021 [
    i32 69, label %212
    i32 79, label %1257
  ]

; <label>:1021:                                   ; preds = %1020
  %1022 = load i32, i32* %34, align 4
  %1023 = icmp slt i32 %1022, -1900
  %1024 = zext i1 %1023 to i8
  %1025 = add i32 %1022, 1900
  %1026 = xor i1 %1023, true
  br label %458

; <label>:1027:                                   ; preds = %126
  %1028 = icmp eq i32 %128, 69
  br i1 %1028, label %212, label %1029

; <label>:1029:                                   ; preds = %1027
  %1030 = load i32, i32* %34, align 4
  %1031 = srem i32 %1030, 100
  %1032 = icmp slt i32 %1031, 0
  br i1 %1032, label %1033, label %438

; <label>:1033:                                   ; preds = %1029
  %1034 = icmp slt i32 %1030, -1900
  %1035 = sub nsw i32 0, %1031
  %1036 = add nsw i32 %1031, 100
  %1037 = select i1 %1034, i32 %1035, i32 %1036
  br label %438

; <label>:1038:                                   ; preds = %126
  %1039 = icmp eq i8 %87, 0
  %1040 = call i64 @strlen(i8* %18) #16
  %1041 = icmp sgt i32 %120, 0
  %1042 = select i1 %1041, i32 %120, i32 0
  %1043 = zext i32 %1042 to i64
  %1044 = icmp ult i64 %1040, %1043
  %1045 = select i1 %1044, i64 %1043, i64 %1040
  %1046 = sub i64 %1, %50
  %1047 = icmp ult i64 %1045, %1046
  br i1 %1047, label %1048, label %1370

; <label>:1048:                                   ; preds = %1038
  %1049 = icmp eq i8* %51, null
  br i1 %1049, label %1202, label %1050

; <label>:1050:                                   ; preds = %1048
  br i1 %1044, label %1051, label %1059

; <label>:1051:                                   ; preds = %1050
  %1052 = sext i32 %120 to i64
  %1053 = sub i64 %1052, %1040
  %1054 = icmp eq i32 %74, 48
  br i1 %1054, label %1055, label %1056

; <label>:1055:                                   ; preds = %1051
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %1053, i32 1, i1 false)
  br label %1057

; <label>:1056:                                   ; preds = %1051
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %1053, i32 1, i1 false)
  br label %1057

; <label>:1057:                                   ; preds = %1056, %1055
  %1058 = getelementptr inbounds i8, i8* %51, i64 %1053
  br label %1059

; <label>:1059:                                   ; preds = %1057, %1050
  %1060 = phi i8* [ %1058, %1057 ], [ %51, %1050 ]
  br i1 %1039, label %1127, label %1061

; <label>:1061:                                   ; preds = %1059
  %1062 = icmp eq i64 %1040, 0
  br i1 %1062, label %1200, label %1063

; <label>:1063:                                   ; preds = %1061
  %1064 = tail call i32** @__ctype_tolower_loc() #1
  %1065 = add i64 %1040, -1
  %1066 = and i64 %1040, 3
  %1067 = icmp eq i64 %1066, 0
  br i1 %1067, label %1084, label %1068

; <label>:1068:                                   ; preds = %1063
  br label %1069

; <label>:1069:                                   ; preds = %1069, %1068
  %1070 = phi i64 [ %1040, %1068 ], [ %1072, %1069 ]
  %1071 = phi i64 [ %1066, %1068 ], [ %1081, %1069 ]
  %1072 = add i64 %1070, -1
  %1073 = load i32*, i32** %1064, align 8
  %1074 = getelementptr inbounds i8, i8* %18, i64 %1072
  %1075 = load i8, i8* %1074, align 1
  %1076 = zext i8 %1075 to i64
  %1077 = getelementptr inbounds i32, i32* %1073, i64 %1076
  %1078 = load i32, i32* %1077, align 4
  %1079 = trunc i32 %1078 to i8
  %1080 = getelementptr inbounds i8, i8* %1060, i64 %1072
  store i8 %1079, i8* %1080, align 1
  %1081 = add i64 %1071, -1
  %1082 = icmp eq i64 %1081, 0
  br i1 %1082, label %1083, label %1069

; <label>:1083:                                   ; preds = %1069
  br label %1084

; <label>:1084:                                   ; preds = %1063, %1083
  %1085 = phi i64 [ %1040, %1063 ], [ %1072, %1083 ]
  %1086 = icmp ult i64 %1065, 3
  br i1 %1086, label %1199, label %1087

; <label>:1087:                                   ; preds = %1084
  br label %1088

; <label>:1088:                                   ; preds = %1088, %1087
  %1089 = phi i64 [ %1085, %1087 ], [ %1117, %1088 ]
  %1090 = add i64 %1089, -1
  %1091 = load i32*, i32** %1064, align 8
  %1092 = getelementptr inbounds i8, i8* %18, i64 %1090
  %1093 = load i8, i8* %1092, align 1
  %1094 = zext i8 %1093 to i64
  %1095 = getelementptr inbounds i32, i32* %1091, i64 %1094
  %1096 = load i32, i32* %1095, align 4
  %1097 = trunc i32 %1096 to i8
  %1098 = getelementptr inbounds i8, i8* %1060, i64 %1090
  store i8 %1097, i8* %1098, align 1
  %1099 = add i64 %1089, -2
  %1100 = load i32*, i32** %1064, align 8
  %1101 = getelementptr inbounds i8, i8* %18, i64 %1099
  %1102 = load i8, i8* %1101, align 1
  %1103 = zext i8 %1102 to i64
  %1104 = getelementptr inbounds i32, i32* %1100, i64 %1103
  %1105 = load i32, i32* %1104, align 4
  %1106 = trunc i32 %1105 to i8
  %1107 = getelementptr inbounds i8, i8* %1060, i64 %1099
  store i8 %1106, i8* %1107, align 1
  %1108 = add i64 %1089, -3
  %1109 = load i32*, i32** %1064, align 8
  %1110 = getelementptr inbounds i8, i8* %18, i64 %1108
  %1111 = load i8, i8* %1110, align 1
  %1112 = zext i8 %1111 to i64
  %1113 = getelementptr inbounds i32, i32* %1109, i64 %1112
  %1114 = load i32, i32* %1113, align 4
  %1115 = trunc i32 %1114 to i8
  %1116 = getelementptr inbounds i8, i8* %1060, i64 %1108
  store i8 %1115, i8* %1116, align 1
  %1117 = add i64 %1089, -4
  %1118 = load i32*, i32** %1064, align 8
  %1119 = getelementptr inbounds i8, i8* %18, i64 %1117
  %1120 = load i8, i8* %1119, align 1
  %1121 = zext i8 %1120 to i64
  %1122 = getelementptr inbounds i32, i32* %1118, i64 %1121
  %1123 = load i32, i32* %1122, align 4
  %1124 = trunc i32 %1123 to i8
  %1125 = getelementptr inbounds i8, i8* %1060, i64 %1117
  store i8 %1124, i8* %1125, align 1
  %1126 = icmp eq i64 %1117, 0
  br i1 %1126, label %1198, label %1088

; <label>:1127:                                   ; preds = %1059
  %1128 = icmp eq i8 %82, 0
  br i1 %1128, label %1195, label %1129

; <label>:1129:                                   ; preds = %1127
  %1130 = icmp eq i64 %1040, 0
  br i1 %1130, label %1200, label %1131

; <label>:1131:                                   ; preds = %1129
  %1132 = tail call i32** @__ctype_toupper_loc() #1
  %1133 = add i64 %1040, -1
  %1134 = and i64 %1040, 3
  %1135 = icmp eq i64 %1134, 0
  br i1 %1135, label %1152, label %1136

; <label>:1136:                                   ; preds = %1131
  br label %1137

; <label>:1137:                                   ; preds = %1137, %1136
  %1138 = phi i64 [ %1040, %1136 ], [ %1140, %1137 ]
  %1139 = phi i64 [ %1134, %1136 ], [ %1149, %1137 ]
  %1140 = add i64 %1138, -1
  %1141 = load i32*, i32** %1132, align 8
  %1142 = getelementptr inbounds i8, i8* %18, i64 %1140
  %1143 = load i8, i8* %1142, align 1
  %1144 = zext i8 %1143 to i64
  %1145 = getelementptr inbounds i32, i32* %1141, i64 %1144
  %1146 = load i32, i32* %1145, align 4
  %1147 = trunc i32 %1146 to i8
  %1148 = getelementptr inbounds i8, i8* %1060, i64 %1140
  store i8 %1147, i8* %1148, align 1
  %1149 = add i64 %1139, -1
  %1150 = icmp eq i64 %1149, 0
  br i1 %1150, label %1151, label %1137

; <label>:1151:                                   ; preds = %1137
  br label %1152

; <label>:1152:                                   ; preds = %1131, %1151
  %1153 = phi i64 [ %1040, %1131 ], [ %1140, %1151 ]
  %1154 = icmp ult i64 %1133, 3
  br i1 %1154, label %1197, label %1155

; <label>:1155:                                   ; preds = %1152
  br label %1156

; <label>:1156:                                   ; preds = %1156, %1155
  %1157 = phi i64 [ %1153, %1155 ], [ %1185, %1156 ]
  %1158 = add i64 %1157, -1
  %1159 = load i32*, i32** %1132, align 8
  %1160 = getelementptr inbounds i8, i8* %18, i64 %1158
  %1161 = load i8, i8* %1160, align 1
  %1162 = zext i8 %1161 to i64
  %1163 = getelementptr inbounds i32, i32* %1159, i64 %1162
  %1164 = load i32, i32* %1163, align 4
  %1165 = trunc i32 %1164 to i8
  %1166 = getelementptr inbounds i8, i8* %1060, i64 %1158
  store i8 %1165, i8* %1166, align 1
  %1167 = add i64 %1157, -2
  %1168 = load i32*, i32** %1132, align 8
  %1169 = getelementptr inbounds i8, i8* %18, i64 %1167
  %1170 = load i8, i8* %1169, align 1
  %1171 = zext i8 %1170 to i64
  %1172 = getelementptr inbounds i32, i32* %1168, i64 %1171
  %1173 = load i32, i32* %1172, align 4
  %1174 = trunc i32 %1173 to i8
  %1175 = getelementptr inbounds i8, i8* %1060, i64 %1167
  store i8 %1174, i8* %1175, align 1
  %1176 = add i64 %1157, -3
  %1177 = load i32*, i32** %1132, align 8
  %1178 = getelementptr inbounds i8, i8* %18, i64 %1176
  %1179 = load i8, i8* %1178, align 1
  %1180 = zext i8 %1179 to i64
  %1181 = getelementptr inbounds i32, i32* %1177, i64 %1180
  %1182 = load i32, i32* %1181, align 4
  %1183 = trunc i32 %1182 to i8
  %1184 = getelementptr inbounds i8, i8* %1060, i64 %1176
  store i8 %1183, i8* %1184, align 1
  %1185 = add i64 %1157, -4
  %1186 = load i32*, i32** %1132, align 8
  %1187 = getelementptr inbounds i8, i8* %18, i64 %1185
  %1188 = load i8, i8* %1187, align 1
  %1189 = zext i8 %1188 to i64
  %1190 = getelementptr inbounds i32, i32* %1186, i64 %1189
  %1191 = load i32, i32* %1190, align 4
  %1192 = trunc i32 %1191 to i8
  %1193 = getelementptr inbounds i8, i8* %1060, i64 %1185
  store i8 %1192, i8* %1193, align 1
  %1194 = icmp eq i64 %1185, 0
  br i1 %1194, label %1196, label %1156

; <label>:1195:                                   ; preds = %1127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1060, i8* %18, i64 %1040, i32 1, i1 false)
  br label %1200

; <label>:1196:                                   ; preds = %1156
  br label %1197

; <label>:1197:                                   ; preds = %1152, %1196
  br label %1200

; <label>:1198:                                   ; preds = %1088
  br label %1199

; <label>:1199:                                   ; preds = %1084, %1198
  br label %1200

; <label>:1200:                                   ; preds = %1199, %1197, %1129, %1061, %1195
  %1201 = getelementptr inbounds i8, i8* %1060, i64 %1040
  br label %1202

; <label>:1202:                                   ; preds = %1200, %1048
  %1203 = phi i8* [ %1201, %1200 ], [ null, %1048 ]
  %1204 = add i64 %1045, %50
  br label %1372

; <label>:1205:                                   ; preds = %131, %1209
  %1206 = phi i64 [ %1210, %1209 ], [ 1, %131 ]
  %1207 = getelementptr inbounds i8, i8* %129, i64 %1206
  %1208 = load i8, i8* %1207, align 1
  switch i8 %1208, label %1256 [
    i8 58, label %1209
    i8 122, label %1211
  ]

; <label>:1209:                                   ; preds = %1205
  %1210 = add i64 %1206, 1
  br label %1205

; <label>:1211:                                   ; preds = %1205
  br label %1212

; <label>:1212:                                   ; preds = %1211, %126
  %1213 = phi i64 [ 0, %126 ], [ %1206, %1211 ]
  %1214 = phi i8* [ %129, %126 ], [ %1207, %1211 ]
  %1215 = load i32, i32* %45, align 8
  %1216 = icmp slt i32 %1215, 0
  br i1 %1216, label %1372, label %1217

; <label>:1217:                                   ; preds = %1212
  %1218 = load i64, i64* %46, align 8
  %1219 = trunc i64 %1218 to i32
  %1220 = icmp slt i32 %1219, 0
  br i1 %1220, label %1226, label %1221

; <label>:1221:                                   ; preds = %1217
  %1222 = icmp eq i32 %1219, 0
  br i1 %1222, label %1223, label %1226

; <label>:1223:                                   ; preds = %1221
  %1224 = load i8, i8* %18, align 1
  %1225 = icmp eq i8 %1224, 45
  br label %1226

; <label>:1226:                                   ; preds = %1221, %1223, %1217
  %1227 = phi i1 [ true, %1217 ], [ false, %1221 ], [ %1225, %1223 ]
  %1228 = zext i1 %1227 to i8
  %1229 = sdiv i32 %1219, 60
  %1230 = sdiv i32 %1219, 3600
  %1231 = srem i32 %1229, 60
  %1232 = srem i32 %1219, 60
  switch i64 %1213, label %1248 [
    i64 0, label %1233
    i64 1, label %1236
    i64 2, label %1239
    i64 3, label %1244
  ]

; <label>:1233:                                   ; preds = %1226
  %1234 = mul nsw i32 %1230, 100
  %1235 = add nsw i32 %1234, %1231
  br label %1248

; <label>:1236:                                   ; preds = %1246, %1226
  %1237 = mul nsw i32 %1230, 100
  %1238 = add nsw i32 %1237, %1231
  br label %1248

; <label>:1239:                                   ; preds = %1244, %1226
  %1240 = mul nsw i32 %1230, 10000
  %1241 = mul nsw i32 %1231, 100
  %1242 = add i32 %1240, %1232
  %1243 = add i32 %1242, %1241
  br label %1248

; <label>:1244:                                   ; preds = %1226
  %1245 = icmp eq i32 %1232, 0
  br i1 %1245, label %1246, label %1239

; <label>:1246:                                   ; preds = %1244
  %1247 = icmp eq i32 %1231, 0
  br i1 %1247, label %1248, label %1236

; <label>:1248:                                   ; preds = %1226, %1246, %1239, %1236, %1233
  %1249 = phi i32 [ 32, %1239 ], [ 32, %1236 ], [ 32, %1233 ], [ 32, %1246 ], [ 14, %1226 ]
  %1250 = phi i32 [ 20, %1239 ], [ 4, %1236 ], [ 0, %1233 ], [ 0, %1246 ], [ %54, %1226 ]
  %1251 = phi i32 [ %1243, %1239 ], [ %1238, %1236 ], [ %1235, %1233 ], [ %1230, %1246 ], [ %53, %1226 ]
  %1252 = phi i32 [ 9, %1239 ], [ 6, %1236 ], [ 5, %1233 ], [ 3, %1246 ], [ 0, %1226 ]
  %1253 = trunc i32 %1249 to i6
  switch i6 %1253, label %1378 [
    i6 -32, label %445
    i6 14, label %1257
  ]

; <label>:1254:                                   ; preds = %126
  %1255 = getelementptr inbounds i8, i8* %129, i64 -1
  br label %1257

; <label>:1256:                                   ; preds = %1205
  br label %1257

; <label>:1257:                                   ; preds = %1256, %1020, %132, %162, %167, %172, %176, %422, %759, %1254, %126, %1016, %1006, %926, %918, %884, %861, %791, %784, %780, %773, %771, %767, %765, %761, %428, %424, %420, %181, %1248
  %1258 = phi i8 [ %82, %126 ], [ %82, %1254 ], [ %82, %1248 ], [ %82, %1016 ], [ %82, %1006 ], [ %82, %926 ], [ %82, %918 ], [ %82, %884 ], [ %82, %861 ], [ %82, %791 ], [ %82, %784 ], [ %82, %780 ], [ %82, %773 ], [ %82, %771 ], [ %82, %767 ], [ %82, %765 ], [ %82, %761 ], [ %82, %759 ], [ %82, %428 ], [ %82, %424 ], [ %82, %422 ], [ %82, %420 ], [ %82, %181 ], [ %82, %176 ], [ %174, %172 ], [ %82, %167 ], [ %82, %162 ], [ %82, %132 ], [ %82, %1020 ], [ %82, %1256 ]
  %1259 = phi i32 [ %54, %126 ], [ %54, %1254 ], [ %1250, %1248 ], [ %54, %1016 ], [ %54, %1006 ], [ %54, %926 ], [ %54, %918 ], [ %54, %884 ], [ %54, %861 ], [ %54, %791 ], [ %54, %784 ], [ %54, %780 ], [ %54, %773 ], [ %54, %771 ], [ %54, %767 ], [ %54, %765 ], [ %54, %761 ], [ %54, %759 ], [ %54, %428 ], [ %54, %424 ], [ %54, %422 ], [ %54, %420 ], [ %54, %181 ], [ %54, %176 ], [ %54, %172 ], [ %54, %167 ], [ %54, %162 ], [ %54, %132 ], [ %54, %1020 ], [ %54, %1256 ]
  %1260 = phi i32 [ %53, %126 ], [ %53, %1254 ], [ %1251, %1248 ], [ %53, %1016 ], [ %53, %1006 ], [ %53, %926 ], [ %53, %918 ], [ %53, %884 ], [ %53, %861 ], [ %53, %791 ], [ %53, %784 ], [ %53, %780 ], [ %53, %773 ], [ %53, %771 ], [ %53, %767 ], [ %53, %765 ], [ %53, %761 ], [ %53, %759 ], [ %53, %428 ], [ %53, %424 ], [ %53, %422 ], [ %53, %420 ], [ %53, %181 ], [ %53, %176 ], [ %53, %172 ], [ %53, %167 ], [ %53, %162 ], [ %53, %132 ], [ %53, %1020 ], [ %53, %1256 ]
  %1261 = phi i32 [ 0, %126 ], [ 0, %1254 ], [ %1252, %1248 ], [ 0, %1016 ], [ 0, %1006 ], [ 0, %926 ], [ 0, %918 ], [ 0, %884 ], [ 0, %861 ], [ 0, %791 ], [ 0, %784 ], [ 0, %780 ], [ 0, %773 ], [ 0, %771 ], [ 0, %767 ], [ 0, %765 ], [ 0, %761 ], [ 0, %759 ], [ 0, %428 ], [ 0, %424 ], [ 0, %422 ], [ 0, %420 ], [ 0, %181 ], [ 0, %176 ], [ 0, %172 ], [ 0, %167 ], [ 0, %162 ], [ 0, %132 ], [ 0, %1020 ], [ 0, %1256 ]
  %1262 = phi i8* [ %129, %126 ], [ %1255, %1254 ], [ %1214, %1248 ], [ %129, %1016 ], [ %129, %1006 ], [ %129, %926 ], [ %129, %918 ], [ %129, %884 ], [ %129, %861 ], [ %129, %791 ], [ %129, %784 ], [ %129, %780 ], [ %129, %773 ], [ %129, %771 ], [ %129, %767 ], [ %129, %765 ], [ %129, %761 ], [ %129, %759 ], [ %129, %428 ], [ %129, %424 ], [ %129, %422 ], [ %129, %420 ], [ %129, %181 ], [ %129, %176 ], [ %129, %172 ], [ %129, %167 ], [ %129, %162 ], [ %129, %132 ], [ %129, %1020 ], [ %129, %1256 ]
  br label %1263

; <label>:1263:                                   ; preds = %1263, %1257
  %1264 = phi i64 [ %1269, %1263 ], [ 1, %1257 ]
  %1265 = sub nsw i64 1, %1264
  %1266 = getelementptr inbounds i8, i8* %1262, i64 %1265
  %1267 = load i8, i8* %1266, align 1
  %1268 = icmp eq i8 %1267, 37
  %1269 = add nuw i64 %1264, 1
  br i1 %1268, label %1270, label %1263

; <label>:1270:                                   ; preds = %1263
  %1271 = shl i64 %1264, 32
  %1272 = ashr exact i64 %1271, 32
  %1273 = icmp sgt i32 %120, 0
  %1274 = select i1 %1273, i32 %120, i32 0
  %1275 = zext i32 %1274 to i64
  %1276 = icmp ult i64 %1272, %1275
  %1277 = select i1 %1276, i64 %1275, i64 %1272
  %1278 = sub i64 %1, %50
  %1279 = icmp ult i64 %1277, %1278
  br i1 %1279, label %1280, label %1370

; <label>:1280:                                   ; preds = %1270
  %1281 = icmp eq i8* %51, null
  br i1 %1281, label %1367, label %1282

; <label>:1282:                                   ; preds = %1280
  %1283 = icmp ne i32 %1261, 0
  %1284 = xor i1 %1276, true
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %1294, label %1286

; <label>:1286:                                   ; preds = %1282
  %1287 = sext i32 %120 to i64
  %1288 = sub nsw i64 %1287, %1272
  %1289 = icmp eq i32 %74, 48
  br i1 %1289, label %1290, label %1291

; <label>:1290:                                   ; preds = %1286
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 48, i64 %1288, i32 1, i1 false)
  br label %1292

; <label>:1291:                                   ; preds = %1286
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 32, i64 %1288, i32 1, i1 false)
  br label %1292

; <label>:1292:                                   ; preds = %1291, %1290
  %1293 = getelementptr inbounds i8, i8* %51, i64 %1288
  br label %1294

; <label>:1294:                                   ; preds = %1292, %1282
  %1295 = phi i8* [ %1293, %1292 ], [ %51, %1282 ]
  %1296 = and i8 %1258, 1
  %1297 = icmp eq i8 %1296, 0
  br i1 %1297, label %1362, label %1298

; <label>:1298:                                   ; preds = %1294
  %1299 = tail call i32** @__ctype_toupper_loc() #1
  %1300 = add nsw i64 %1272, -1
  %1301 = and i64 %1272, 3
  %1302 = icmp eq i64 %1301, 0
  br i1 %1302, label %1319, label %1303

; <label>:1303:                                   ; preds = %1298
  br label %1304

; <label>:1304:                                   ; preds = %1304, %1303
  %1305 = phi i64 [ %1272, %1303 ], [ %1307, %1304 ]
  %1306 = phi i64 [ %1301, %1303 ], [ %1316, %1304 ]
  %1307 = add i64 %1305, -1
  %1308 = load i32*, i32** %1299, align 8
  %1309 = getelementptr inbounds i8, i8* %1266, i64 %1307
  %1310 = load i8, i8* %1309, align 1
  %1311 = zext i8 %1310 to i64
  %1312 = getelementptr inbounds i32, i32* %1308, i64 %1311
  %1313 = load i32, i32* %1312, align 4
  %1314 = trunc i32 %1313 to i8
  %1315 = getelementptr inbounds i8, i8* %1295, i64 %1307
  store i8 %1314, i8* %1315, align 1
  %1316 = add i64 %1306, -1
  %1317 = icmp eq i64 %1316, 0
  br i1 %1317, label %1318, label %1304

; <label>:1318:                                   ; preds = %1304
  br label %1319

; <label>:1319:                                   ; preds = %1298, %1318
  %1320 = phi i64 [ %1272, %1298 ], [ %1307, %1318 ]
  %1321 = icmp ult i64 %1300, 3
  br i1 %1321, label %1364, label %1322

; <label>:1322:                                   ; preds = %1319
  br label %1323

; <label>:1323:                                   ; preds = %1323, %1322
  %1324 = phi i64 [ %1320, %1322 ], [ %1352, %1323 ]
  %1325 = add i64 %1324, -1
  %1326 = load i32*, i32** %1299, align 8
  %1327 = getelementptr inbounds i8, i8* %1266, i64 %1325
  %1328 = load i8, i8* %1327, align 1
  %1329 = zext i8 %1328 to i64
  %1330 = getelementptr inbounds i32, i32* %1326, i64 %1329
  %1331 = load i32, i32* %1330, align 4
  %1332 = trunc i32 %1331 to i8
  %1333 = getelementptr inbounds i8, i8* %1295, i64 %1325
  store i8 %1332, i8* %1333, align 1
  %1334 = add i64 %1324, -2
  %1335 = load i32*, i32** %1299, align 8
  %1336 = getelementptr inbounds i8, i8* %1266, i64 %1334
  %1337 = load i8, i8* %1336, align 1
  %1338 = zext i8 %1337 to i64
  %1339 = getelementptr inbounds i32, i32* %1335, i64 %1338
  %1340 = load i32, i32* %1339, align 4
  %1341 = trunc i32 %1340 to i8
  %1342 = getelementptr inbounds i8, i8* %1295, i64 %1334
  store i8 %1341, i8* %1342, align 1
  %1343 = add i64 %1324, -3
  %1344 = load i32*, i32** %1299, align 8
  %1345 = getelementptr inbounds i8, i8* %1266, i64 %1343
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = getelementptr inbounds i32, i32* %1344, i64 %1347
  %1349 = load i32, i32* %1348, align 4
  %1350 = trunc i32 %1349 to i8
  %1351 = getelementptr inbounds i8, i8* %1295, i64 %1343
  store i8 %1350, i8* %1351, align 1
  %1352 = add i64 %1324, -4
  %1353 = load i32*, i32** %1299, align 8
  %1354 = getelementptr inbounds i8, i8* %1266, i64 %1352
  %1355 = load i8, i8* %1354, align 1
  %1356 = zext i8 %1355 to i64
  %1357 = getelementptr inbounds i32, i32* %1353, i64 %1356
  %1358 = load i32, i32* %1357, align 4
  %1359 = trunc i32 %1358 to i8
  %1360 = getelementptr inbounds i8, i8* %1295, i64 %1352
  store i8 %1359, i8* %1360, align 1
  %1361 = icmp eq i64 %1352, 0
  br i1 %1361, label %1363, label %1323

; <label>:1362:                                   ; preds = %1294
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1295, i8* %1266, i64 %1272, i32 1, i1 false)
  br label %1365

; <label>:1363:                                   ; preds = %1323
  br label %1364

; <label>:1364:                                   ; preds = %1319, %1363
  br label %1365

; <label>:1365:                                   ; preds = %1364, %1362
  %1366 = getelementptr inbounds i8, i8* %1295, i64 %1272
  br label %1367

; <label>:1367:                                   ; preds = %1365, %1280
  %1368 = phi i8* [ %1366, %1365 ], [ null, %1280 ]
  %1369 = add i64 %1277, %50
  br label %1372

; <label>:1370:                                   ; preds = %1270, %1038, %887, %824, %655, %627, %588, %562, %584, %547, %511, %183, %134
  br label %1371

; <label>:1371:                                   ; preds = %1370, %405
  call void @llvm.lifetime.end(i64 23, i8* nonnull %27) #13
  br label %1403

; <label>:1372:                                   ; preds = %1367, %1202, %910, %847, %756, %402, %209, %159, %1212
  %1373 = phi i32 [ %1259, %1367 ], [ %54, %1202 ], [ %54, %910 ], [ %54, %847 ], [ %493, %756 ], [ %217, %402 ], [ %54, %209 ], [ %54, %159 ], [ %54, %1212 ]
  %1374 = phi i32 [ %1260, %1367 ], [ %53, %1202 ], [ %53, %910 ], [ %53, %847 ], [ %496, %756 ], [ %218, %402 ], [ %53, %209 ], [ %53, %159 ], [ %53, %1212 ]
  %1375 = phi i8* [ %1262, %1367 ], [ %129, %1202 ], [ %129, %910 ], [ %129, %847 ], [ %499, %756 ], [ %221, %402 ], [ %129, %209 ], [ %129, %159 ], [ %1214, %1212 ]
  %1376 = phi i8* [ %1368, %1367 ], [ %1203, %1202 ], [ %911, %910 ], [ %848, %847 ], [ %757, %756 ], [ %403, %402 ], [ %210, %209 ], [ %160, %159 ], [ %51, %1212 ]
  %1377 = phi i64 [ %1369, %1367 ], [ %1204, %1202 ], [ %912, %910 ], [ %849, %847 ], [ %758, %756 ], [ %404, %402 ], [ %211, %209 ], [ %161, %159 ], [ %50, %1212 ]
  call void @llvm.lifetime.end(i64 23, i8* nonnull %27) #13
  br label %1385

; <label>:1378:                                   ; preds = %67, %1248
  %1379 = phi i32 [ %1249, %1248 ], [ %72, %67 ]
  %1380 = phi i32 [ %1250, %1248 ], [ %54, %67 ]
  %1381 = phi i32 [ %1251, %1248 ], [ %53, %67 ]
  %1382 = phi i8* [ %1214, %1248 ], [ %52, %67 ]
  %1383 = phi i8* [ %51, %1248 ], [ %69, %67 ]
  %1384 = phi i64 [ %50, %1248 ], [ %70, %67 ]
  call void @llvm.lifetime.end(i64 23, i8* nonnull %27) #13
  switch i32 %1379, label %1402 [
    i32 0, label %1385
    i32 4, label %1385
  ]

; <label>:1385:                                   ; preds = %1372, %1378, %1378
  %1386 = phi i64 [ %1377, %1372 ], [ %1384, %1378 ], [ %1384, %1378 ]
  %1387 = phi i8* [ %1376, %1372 ], [ %1383, %1378 ], [ %1383, %1378 ]
  %1388 = phi i8* [ %1375, %1372 ], [ %1382, %1378 ], [ %1382, %1378 ]
  %1389 = phi i32 [ %1374, %1372 ], [ %1381, %1378 ], [ %1381, %1378 ]
  %1390 = phi i32 [ %1373, %1372 ], [ %1380, %1378 ], [ %1380, %1378 ]
  %1391 = getelementptr inbounds i8, i8* %1388, i64 1
  %1392 = load i8, i8* %1391, align 1
  %1393 = icmp eq i8 %1392, 0
  br i1 %1393, label %1394, label %48

; <label>:1394:                                   ; preds = %1385
  br label %1395

; <label>:1395:                                   ; preds = %1394, %7
  %1396 = phi i8* [ %0, %7 ], [ %1387, %1394 ]
  %1397 = phi i64 [ 0, %7 ], [ %1386, %1394 ]
  %1398 = icmp ne i8* %1396, null
  %1399 = icmp ne i64 %1, 0
  %1400 = and i1 %1399, %1398
  br i1 %1400, label %1401, label %1403

; <label>:1401:                                   ; preds = %1395
  store i8 0, i8* %1396, align 1
  br label %1403

; <label>:1402:                                   ; preds = %1378
  br label %1403

; <label>:1403:                                   ; preds = %1402, %1371, %1395, %1401
  %1404 = phi i64 [ %1397, %1401 ], [ %1397, %1395 ], [ 0, %1371 ], [ 0, %1402 ]
  ret i64 %1404
}

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32** @__ctype_tolower_loc() local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare i32** @__ctype_toupper_loc() local_unnamed_addr #9

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8** readonly, i64) local_unnamed_addr #0 {
  %7 = icmp eq i8* %1, null
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %6
  %9 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.365, i64 0, i64 0), i8* nonnull %1, i8* %2, i8* %3) #13
  br label %12

; <label>:10:                                     ; preds = %6
  %11 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.366, i64 0, i64 0), i8* %2, i8* %3) #13
  br label %12

; <label>:12:                                     ; preds = %10, %8
  %13 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.367, i64 0, i64 0), i32 5) #13
  %14 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %13, i32 2017) #13
  %15 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.3.368, i64 0, i64 0), i32 5) #13
  %16 = tail call i32 @fputs_unlocked(i8* %15, %struct._IO_FILE* %0) #13
  switch i64 %5, label %126 [
    i64 0, label %17
    i64 1, label %18
    i64 2, label %22
    i64 3, label %28
    i64 4, label %36
    i64 5, label %46
    i64 6, label %58
    i64 7, label %72
    i64 8, label %88
    i64 9, label %106
  ]

; <label>:17:                                     ; preds = %12
  tail call void @abort() #15
  unreachable

; <label>:18:                                     ; preds = %12
  %19 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.369, i64 0, i64 0), i32 5) #13
  %20 = load i8*, i8** %4, align 8
  %21 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %19, i8* %20) #13
  br label %146

; <label>:22:                                     ; preds = %12
  %23 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5.370, i64 0, i64 0), i32 5) #13
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8*, i8** %4, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %23, i8* %24, i8* %26) #13
  br label %146

; <label>:28:                                     ; preds = %12
  %29 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.371, i64 0, i64 0), i32 5) #13
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8*, i8** %4, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8*, i8** %4, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %29, i8* %30, i8* %32, i8* %34) #13
  br label %146

; <label>:36:                                     ; preds = %12
  %37 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7.372, i64 0, i64 0), i32 5) #13
  %38 = load i8*, i8** %4, align 8
  %39 = getelementptr inbounds i8*, i8** %4, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8*, i8** %4, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8*, i8** %4, i64 3
  %44 = load i8*, i8** %43, align 8
  %45 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %37, i8* %38, i8* %40, i8* %42, i8* %44) #13
  br label %146

; <label>:46:                                     ; preds = %12
  %47 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.373, i64 0, i64 0), i32 5) #13
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8*, i8** %4, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8*, i8** %4, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8*, i8** %4, i64 3
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds i8*, i8** %4, i64 4
  %56 = load i8*, i8** %55, align 8
  %57 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %47, i8* %48, i8* %50, i8* %52, i8* %54, i8* %56) #13
  br label %146

; <label>:58:                                     ; preds = %12
  %59 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9.374, i64 0, i64 0), i32 5) #13
  %60 = load i8*, i8** %4, align 8
  %61 = getelementptr inbounds i8*, i8** %4, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8*, i8** %4, i64 2
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8*, i8** %4, i64 3
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8*, i8** %4, i64 4
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds i8*, i8** %4, i64 5
  %70 = load i8*, i8** %69, align 8
  %71 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %59, i8* %60, i8* %62, i8* %64, i8* %66, i8* %68, i8* %70) #13
  br label %146

; <label>:72:                                     ; preds = %12
  %73 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10.375, i64 0, i64 0), i32 5) #13
  %74 = load i8*, i8** %4, align 8
  %75 = getelementptr inbounds i8*, i8** %4, i64 1
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds i8*, i8** %4, i64 2
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8*, i8** %4, i64 3
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds i8*, i8** %4, i64 4
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8*, i8** %4, i64 5
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds i8*, i8** %4, i64 6
  %86 = load i8*, i8** %85, align 8
  %87 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %73, i8* %74, i8* %76, i8* %78, i8* %80, i8* %82, i8* %84, i8* %86) #13
  br label %146

; <label>:88:                                     ; preds = %12
  %89 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.376, i64 0, i64 0), i32 5) #13
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8*, i8** %4, i64 1
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds i8*, i8** %4, i64 2
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds i8*, i8** %4, i64 3
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds i8*, i8** %4, i64 4
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8*, i8** %4, i64 5
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8*, i8** %4, i64 6
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds i8*, i8** %4, i64 7
  %104 = load i8*, i8** %103, align 8
  %105 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %89, i8* %90, i8* %92, i8* %94, i8* %96, i8* %98, i8* %100, i8* %102, i8* %104) #13
  br label %146

; <label>:106:                                    ; preds = %12
  %107 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.12.377, i64 0, i64 0), i32 5) #13
  %108 = load i8*, i8** %4, align 8
  %109 = getelementptr inbounds i8*, i8** %4, i64 1
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds i8*, i8** %4, i64 2
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8*, i8** %4, i64 3
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds i8*, i8** %4, i64 4
  %116 = load i8*, i8** %115, align 8
  %117 = getelementptr inbounds i8*, i8** %4, i64 5
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8*, i8** %4, i64 6
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8*, i8** %4, i64 7
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds i8*, i8** %4, i64 8
  %124 = load i8*, i8** %123, align 8
  %125 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %107, i8* %108, i8* %110, i8* %112, i8* %114, i8* %116, i8* %118, i8* %120, i8* %122, i8* %124) #13
  br label %146

; <label>:126:                                    ; preds = %12
  %127 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.13.378, i64 0, i64 0), i32 5) #13
  %128 = load i8*, i8** %4, align 8
  %129 = getelementptr inbounds i8*, i8** %4, i64 1
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds i8*, i8** %4, i64 2
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8*, i8** %4, i64 3
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds i8*, i8** %4, i64 4
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds i8*, i8** %4, i64 5
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8*, i8** %4, i64 6
  %140 = load i8*, i8** %139, align 8
  %141 = getelementptr inbounds i8*, i8** %4, i64 7
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8*, i8** %4, i64 8
  %144 = load i8*, i8** %143, align 8
  %145 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %0, i32 1, i8* %127, i8* %128, i8* %130, i8* %132, i8* %134, i8* %136, i8* %138, i8* %140, i8* %142, i8* %144) #13
  br label %146

; <label>:146:                                    ; preds = %126, %106, %88, %72, %58, %46, %36, %28, %22, %18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_ar(%struct._IO_FILE*, i8*, i8*, i8*, i8** readonly) local_unnamed_addr #0 {
  br label %6

; <label>:6:                                      ; preds = %6, %5
  %7 = phi i64 [ 0, %5 ], [ %11, %6 ]
  %8 = getelementptr inbounds i8*, i8** %4, i64 %7
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  %11 = add i64 %7, 1
  br i1 %10, label %12, label %6

; <label>:12:                                     ; preds = %6
  tail call void @version_etc_arn(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, i8** nonnull %4, i64 %7)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag* nocapture) local_unnamed_addr #0 {
  %6 = alloca [10 x i8*], align 16
  %7 = bitcast [10 x i8*]* %6 to i8*
  call void @llvm.lifetime.start(i64 80, i8* nonnull %7) #13
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 3
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i64 0, i32 2
  %11 = load i32, i32* %8, align 8
  %12 = icmp ult i32 %11, 41
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %5
  %14 = load i8*, i8** %9, align 8
  %15 = sext i32 %11 to i64
  %16 = getelementptr i8, i8* %14, i64 %15
  %17 = add i32 %11, 8
  store i32 %17, i32* %8, align 8
  br label %21

; <label>:18:                                     ; preds = %5
  %19 = load i8*, i8** %10, align 8
  %20 = getelementptr i8, i8* %19, i64 8
  store i8* %20, i8** %10, align 8
  br label %21

; <label>:21:                                     ; preds = %18, %13
  %22 = phi i32 [ %17, %13 ], [ %11, %18 ]
  %23 = phi i8* [ %16, %13 ], [ %19, %18 ]
  %24 = bitcast i8* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 0
  store i8* %25, i8** %26, align 16
  %27 = icmp eq i8* %25, null
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %21
  %29 = icmp ult i32 %22, 41
  br i1 %29, label %35, label %32

; <label>:30:                                     ; preds = %135, %128, %121, %114, %108, %91, %74, %57, %40, %21
  %31 = phi i64 [ 0, %21 ], [ 1, %40 ], [ 2, %57 ], [ 3, %74 ], [ 4, %91 ], [ 5, %108 ], [ 6, %114 ], [ 7, %121 ], [ 8, %128 ], [ %142, %135 ]
  call void @version_etc_arn(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, i8** nonnull %26, i64 %31)
  call void @llvm.lifetime.end(i64 80, i8* nonnull %7) #13
  ret void

; <label>:32:                                     ; preds = %28
  %33 = load i8*, i8** %10, align 8
  %34 = getelementptr i8, i8* %33, i64 8
  store i8* %34, i8** %10, align 8
  br label %40

; <label>:35:                                     ; preds = %28
  %36 = load i8*, i8** %9, align 8
  %37 = sext i32 %22 to i64
  %38 = getelementptr i8, i8* %36, i64 %37
  %39 = add i32 %22, 8
  store i32 %39, i32* %8, align 8
  br label %40

; <label>:40:                                     ; preds = %35, %32
  %41 = phi i32 [ %39, %35 ], [ %22, %32 ]
  %42 = phi i8* [ %38, %35 ], [ %33, %32 ]
  %43 = bitcast i8* %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 1
  store i8* %44, i8** %45, align 8
  %46 = icmp eq i8* %44, null
  br i1 %46, label %30, label %47

; <label>:47:                                     ; preds = %40
  %48 = icmp ult i32 %41, 41
  br i1 %48, label %52, label %49

; <label>:49:                                     ; preds = %47
  %50 = load i8*, i8** %10, align 8
  %51 = getelementptr i8, i8* %50, i64 8
  store i8* %51, i8** %10, align 8
  br label %57

; <label>:52:                                     ; preds = %47
  %53 = load i8*, i8** %9, align 8
  %54 = sext i32 %41 to i64
  %55 = getelementptr i8, i8* %53, i64 %54
  %56 = add i32 %41, 8
  store i32 %56, i32* %8, align 8
  br label %57

; <label>:57:                                     ; preds = %52, %49
  %58 = phi i32 [ %56, %52 ], [ %41, %49 ]
  %59 = phi i8* [ %55, %52 ], [ %50, %49 ]
  %60 = bitcast i8* %59 to i8**
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 2
  store i8* %61, i8** %62, align 16
  %63 = icmp eq i8* %61, null
  br i1 %63, label %30, label %64

; <label>:64:                                     ; preds = %57
  %65 = icmp ult i32 %58, 41
  br i1 %65, label %69, label %66

; <label>:66:                                     ; preds = %64
  %67 = load i8*, i8** %10, align 8
  %68 = getelementptr i8, i8* %67, i64 8
  store i8* %68, i8** %10, align 8
  br label %74

; <label>:69:                                     ; preds = %64
  %70 = load i8*, i8** %9, align 8
  %71 = sext i32 %58 to i64
  %72 = getelementptr i8, i8* %70, i64 %71
  %73 = add i32 %58, 8
  store i32 %73, i32* %8, align 8
  br label %74

; <label>:74:                                     ; preds = %69, %66
  %75 = phi i32 [ %73, %69 ], [ %58, %66 ]
  %76 = phi i8* [ %72, %69 ], [ %67, %66 ]
  %77 = bitcast i8* %76 to i8**
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 3
  store i8* %78, i8** %79, align 8
  %80 = icmp eq i8* %78, null
  br i1 %80, label %30, label %81

; <label>:81:                                     ; preds = %74
  %82 = icmp ult i32 %75, 41
  br i1 %82, label %86, label %83

; <label>:83:                                     ; preds = %81
  %84 = load i8*, i8** %10, align 8
  %85 = getelementptr i8, i8* %84, i64 8
  store i8* %85, i8** %10, align 8
  br label %91

; <label>:86:                                     ; preds = %81
  %87 = load i8*, i8** %9, align 8
  %88 = sext i32 %75 to i64
  %89 = getelementptr i8, i8* %87, i64 %88
  %90 = add i32 %75, 8
  store i32 %90, i32* %8, align 8
  br label %91

; <label>:91:                                     ; preds = %86, %83
  %92 = phi i32 [ %90, %86 ], [ %75, %83 ]
  %93 = phi i8* [ %89, %86 ], [ %84, %83 ]
  %94 = bitcast i8* %93 to i8**
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 4
  store i8* %95, i8** %96, align 16
  %97 = icmp eq i8* %95, null
  br i1 %97, label %30, label %98

; <label>:98:                                     ; preds = %91
  %99 = icmp ult i32 %92, 41
  br i1 %99, label %103, label %100

; <label>:100:                                    ; preds = %98
  %101 = load i8*, i8** %10, align 8
  %102 = getelementptr i8, i8* %101, i64 8
  store i8* %102, i8** %10, align 8
  br label %108

; <label>:103:                                    ; preds = %98
  %104 = load i8*, i8** %9, align 8
  %105 = sext i32 %92 to i64
  %106 = getelementptr i8, i8* %104, i64 %105
  %107 = add i32 %92, 8
  store i32 %107, i32* %8, align 8
  br label %108

; <label>:108:                                    ; preds = %103, %100
  %109 = phi i8* [ %106, %103 ], [ %101, %100 ]
  %110 = bitcast i8* %109 to i8**
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 5
  store i8* %111, i8** %112, align 8
  %113 = icmp eq i8* %111, null
  br i1 %113, label %30, label %114

; <label>:114:                                    ; preds = %108
  %115 = load i8*, i8** %10, align 8
  %116 = getelementptr i8, i8* %115, i64 8
  store i8* %116, i8** %10, align 8
  %117 = bitcast i8* %115 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 6
  store i8* %118, i8** %119, align 16
  %120 = icmp eq i8* %118, null
  br i1 %120, label %30, label %121

; <label>:121:                                    ; preds = %114
  %122 = load i8*, i8** %10, align 8
  %123 = getelementptr i8, i8* %122, i64 8
  store i8* %123, i8** %10, align 8
  %124 = bitcast i8* %122 to i8**
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 7
  store i8* %125, i8** %126, align 8
  %127 = icmp eq i8* %125, null
  br i1 %127, label %30, label %128

; <label>:128:                                    ; preds = %121
  %129 = load i8*, i8** %10, align 8
  %130 = getelementptr i8, i8* %129, i64 8
  store i8* %130, i8** %10, align 8
  %131 = bitcast i8* %129 to i8**
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 8
  store i8* %132, i8** %133, align 16
  %134 = icmp eq i8* %132, null
  br i1 %134, label %30, label %135

; <label>:135:                                    ; preds = %128
  %136 = load i8*, i8** %10, align 8
  %137 = getelementptr i8, i8* %136, i64 8
  store i8* %137, i8** %10, align 8
  %138 = bitcast i8* %136 to i8**
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds [10 x i8*], [10 x i8*]* %6, i64 0, i64 9
  store i8* %139, i8** %140, align 8
  %141 = icmp eq i8* %139, null
  %142 = select i1 %141, i64 9, i64 10
  br label %30
}

; Function Attrs: nounwind sspstrong uwtable
define void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) local_unnamed_addr #0 {
  %5 = alloca [1 x %struct.__va_list_tag], align 16
  %6 = bitcast [1 x %struct.__va_list_tag]* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #13
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %6)
  call void @version_etc_va(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, %struct.__va_list_tag* nonnull %7)
  call void @llvm.va_end(i8* nonnull %6)
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #13
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #13

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #13

; Function Attrs: nounwind sspstrong uwtable
define void @emit_bug_reporting_address() local_unnamed_addr #0 {
  %1 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14.381, i64 0, i64 0), i32 5) #13
  %2 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15.382, i64 0, i64 0)) #13
  %3 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.383, i64 0, i64 0), i32 5) #13
  %4 = tail call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.384, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18.385, i64 0, i64 0)) #13
  %5 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.19.386, i64 0, i64 0), i32 5) #13
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %7 = tail call i32 @fputs_unlocked(i8* %5, %struct._IO_FILE* %6) #13
  ret void
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xnmalloc(i64, i64) local_unnamed_addr #14 {
  %3 = udiv i64 9223372036854775807, %1
  %4 = icmp ult i64 %3, %0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %2
  tail call void @xalloc_die() #15
  unreachable

; <label>:6:                                      ; preds = %2
  %7 = mul i64 %1, %0
  %8 = tail call noalias i8* @malloc(i64 %7) #13
  %9 = icmp eq i8* %8, null
  %10 = icmp ne i64 %7, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %6
  tail call void @xalloc_die() #15
  unreachable

; <label>:13:                                     ; preds = %6
  ret i8* %8
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xmalloc(i64) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @malloc(i64 %0) #13
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #15
  unreachable

; <label>:7:                                      ; preds = %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xnrealloc(i8*, i64, i64) local_unnamed_addr #14 {
  %4 = udiv i64 9223372036854775807, %2
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %3
  tail call void @xalloc_die() #15
  unreachable

; <label>:7:                                      ; preds = %3
  %8 = mul i64 %2, %1
  %9 = icmp eq i64 %8, 0
  %10 = icmp ne i8* %0, null
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %7
  tail call void @free(i8* nonnull %0) #13
  br label %19

; <label>:13:                                     ; preds = %7
  %14 = tail call i8* @realloc(i8* %0, i64 %8) #13
  %15 = icmp eq i8* %14, null
  %16 = icmp ne i64 %8, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %13
  tail call void @xalloc_die() #15
  unreachable

; <label>:19:                                     ; preds = %12, %13
  %20 = phi i8* [ null, %12 ], [ %14, %13 ]
  ret i8* %20
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xrealloc(i8*, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  %4 = icmp ne i8* %0, null
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @free(i8* nonnull %0) #13
  br label %13

; <label>:7:                                      ; preds = %2
  %8 = tail call i8* @realloc(i8* %0, i64 %1) #13
  %9 = icmp eq i8* %8, null
  %10 = icmp ne i64 %1, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %7
  tail call void @xalloc_die() #15
  unreachable

; <label>:13:                                     ; preds = %7, %6
  %14 = phi i8* [ null, %6 ], [ %8, %7 ]
  ret i8* %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @x2nrealloc(i8*, i64* nocapture, i64) local_unnamed_addr #14 {
  %4 = load i64, i64* %1, align 8
  %5 = icmp eq i8* %0, null
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %3
  %7 = icmp eq i64 %4, 0
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %6
  %9 = udiv i64 128, %2
  %10 = icmp ugt i64 %2, 128
  %11 = zext i1 %10 to i64
  %12 = add nuw nsw i64 %9, %11
  br label %17

; <label>:13:                                     ; preds = %3
  %14 = udiv i64 6148914691236517204, %2
  %15 = icmp ugt i64 %14, %4
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %13
  tail call void @xalloc_die() #15
  unreachable

; <label>:17:                                     ; preds = %6, %8
  %18 = phi i64 [ %12, %8 ], [ %4, %6 ]
  store i64 %18, i64* %1, align 8
  %19 = mul i64 %18, %2
  br label %27

; <label>:20:                                     ; preds = %13
  %21 = lshr i64 %4, 1
  %22 = add i64 %4, 1
  %23 = add i64 %22, %21
  store i64 %23, i64* %1, align 8
  %24 = mul i64 %23, %2
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %20
  tail call void @free(i8* nonnull %0) #13
  br label %34

; <label>:27:                                     ; preds = %17, %20
  %28 = phi i64 [ %19, %17 ], [ %24, %20 ]
  %29 = tail call i8* @realloc(i8* %0, i64 %28) #13
  %30 = icmp eq i8* %29, null
  %31 = icmp ne i64 %28, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %27
  tail call void @xalloc_die() #15
  unreachable

; <label>:34:                                     ; preds = %26, %27
  %35 = phi i8* [ null, %26 ], [ %29, %27 ]
  ret i8* %35
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define noalias i8* @xcharalloc(i64) local_unnamed_addr #14 {
  %2 = tail call noalias i8* @malloc(i64 %0) #13
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #15
  unreachable

; <label>:7:                                      ; preds = %1
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @x2realloc(i8*, i64* nocapture) local_unnamed_addr #0 {
  %3 = load i64, i64* %1, align 8
  %4 = icmp eq i8* %0, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %2
  %6 = icmp eq i64 %3, 0
  %7 = select i1 %6, i64 128, i64 %3
  store i64 %7, i64* %1, align 8
  br label %17

; <label>:8:                                      ; preds = %2
  %9 = icmp ult i64 %3, 6148914691236517204
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %8
  tail call void @xalloc_die() #15
  unreachable

; <label>:11:                                     ; preds = %8
  %12 = lshr i64 %3, 1
  %13 = add i64 %3, 1
  %14 = add i64 %13, %12
  store i64 %14, i64* %1, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  tail call void @free(i8* nonnull %0) #13
  br label %24

; <label>:17:                                     ; preds = %11, %5
  %18 = phi i64 [ %7, %5 ], [ %14, %11 ]
  %19 = tail call i8* @realloc(i8* %0, i64 %18) #13
  %20 = icmp eq i8* %19, null
  %21 = icmp ne i64 %18, 0
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %17
  tail call void @xalloc_die() #15
  unreachable

; <label>:24:                                     ; preds = %16, %17
  %25 = phi i8* [ null, %16 ], [ %19, %17 ]
  ret i8* %25
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xzalloc(i64) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @malloc(i64 %0) #13
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @xalloc_die() #15
  unreachable

; <label>:7:                                      ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 %0, i32 1, i1 false)
  ret i8* %2
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xcalloc(i64, i64) local_unnamed_addr #0 {
  %3 = udiv i64 9223372036854775807, %1
  %4 = icmp ult i64 %3, %0
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %2
  %6 = tail call i8* @rpl_calloc(i64 %0, i64 %1) #13
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5, %2
  tail call void @xalloc_die() #15
  unreachable

; <label>:9:                                      ; preds = %5
  ret i8* %6
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xmemdup(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = tail call noalias i8* @malloc(i64 %1) #13
  %4 = icmp eq i8* %3, null
  %5 = icmp ne i64 %1, 0
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %2
  tail call void @xalloc_die() #15
  unreachable

; <label>:8:                                      ; preds = %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %0, i64 %1, i32 1, i1 false)
  ret i8* %3
}

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @xstrdup(i8* nocapture readonly) local_unnamed_addr #0 {
  %2 = tail call i64 @strlen(i8* %0) #16
  %3 = add i64 %2, 1
  %4 = tail call noalias i8* @malloc(i64 %3) #13
  %5 = icmp eq i8* %4, null
  %6 = icmp ne i64 %3, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %1
  tail call void @xalloc_die() #15
  unreachable

; <label>:9:                                      ; preds = %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %0, i64 %3, i32 1, i1 false) #13
  ret i8* %4
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define void @xalloc_die() local_unnamed_addr #7 {
  %1 = load volatile i32, i32* @exit_failure, align 4
  %2 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.399, i64 0, i64 0), i32 5) #13
  tail call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.400, i64 0, i64 0), i8* %2) #13
  tail call void @abort() #15
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @xnumtoumax(i8*, i32, i64, i64, i8*, i8*, i32) local_unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #13
  %10 = call i32 @xstrtoumax(i8* %0, i8** null, i32 %1, i64* nonnull %8, i8* %4) #13
  switch i32 %10, label %11 [
    i32 0, label %13
    i32 1, label %22
    i32 3, label %24
  ]

; <label>:11:                                     ; preds = %7
  %12 = tail call i32* @__errno_location() #1
  br label %26

; <label>:13:                                     ; preds = %7
  %14 = load i64, i64* %8, align 8
  %15 = icmp ult i64 %14, %2
  %16 = icmp ugt i64 %14, %3
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %35

; <label>:18:                                     ; preds = %13
  %19 = icmp ugt i64 %14, 1073741823
  %20 = tail call i32* @__errno_location() #1
  %21 = select i1 %19, i32 75, i32 34
  store i32 %21, i32* %20, align 4
  br label %26

; <label>:22:                                     ; preds = %7
  %23 = tail call i32* @__errno_location() #1
  store i32 75, i32* %23, align 4
  br label %26

; <label>:24:                                     ; preds = %7
  %25 = tail call i32* @__errno_location() #1
  store i32 0, i32* %25, align 4
  br label %26

; <label>:26:                                     ; preds = %11, %18, %22, %24
  %27 = phi i32* [ %12, %11 ], [ %20, %18 ], [ %23, %22 ], [ %25, %24 ]
  %28 = icmp ne i32 %6, 0
  %29 = select i1 %28, i32 %6, i32 1
  %30 = load i32, i32* %27, align 4
  %31 = icmp eq i32 %30, 22
  %32 = select i1 %31, i32 0, i32 %30
  %33 = call i8* @quote(i8* %0) #13
  call void (i32, i32, i8*, ...) @error(i32 %29, i32 %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.403, i64 0, i64 0), i8* %5, i8* %33) #13
  %34 = load i64, i64* %8, align 8
  br label %35

; <label>:35:                                     ; preds = %13, %26
  %36 = phi i64 [ %14, %13 ], [ %34, %26 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #13
  ret i64 %36
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @xdectoumax(i8*, i64, i64, i8*, i8*, i32) local_unnamed_addr #0 {
  %7 = tail call i64 @xnumtoumax(i8* %0, i32 10, i64 %1, i64 %2, i8* %3, i8* %4, i32 %5)
  ret i64 %7
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @xstrtoul(i8*, i8**, i32, i64* nocapture, i8* readonly) local_unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7) #13
  %8 = icmp ult i32 %2, 37
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %5
  tail call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.406, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.407, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #15
  unreachable

; <label>:10:                                     ; preds = %5
  %11 = icmp ne i8** %1, null
  %12 = tail call i32* @__errno_location() #1
  store i32 0, i32* %12, align 4
  %13 = tail call i16** @__ctype_b_loc() #1
  %14 = load i16*, i16** %13, align 8
  br label %15

; <label>:15:                                     ; preds = %15, %10
  %16 = phi i8* [ %0, %10 ], [ %23, %15 ]
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds i16, i16* %14, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = and i16 %20, 8192
  %22 = icmp eq i16 %21, 0
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  br i1 %22, label %24, label %15

; <label>:24:                                     ; preds = %15
  %25 = select i1 %11, i8** %1, i8** %6
  %26 = icmp eq i8 %17, 45
  br i1 %26, label %265, label %27

; <label>:27:                                     ; preds = %24
  %28 = call i64 @strtoul(i8* %0, i8** %25, i32 %2) #13
  %29 = load i8*, i8** %25, align 8
  %30 = icmp eq i8* %29, %0
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %27
  %32 = icmp eq i8* %4, null
  br i1 %32, label %265, label %33

; <label>:33:                                     ; preds = %31
  %34 = load i8, i8* %0, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %265, label %36

; <label>:36:                                     ; preds = %33
  %37 = sext i8 %34 to i32
  %38 = tail call i8* @strchr(i8* nonnull %4, i32 %37) #13
  %39 = icmp eq i8* %38, null
  br i1 %39, label %265, label %47

; <label>:40:                                     ; preds = %27
  %41 = load i32, i32* %12, align 4
  switch i32 %41, label %265 [
    i32 0, label %43
    i32 34, label %42
  ]

; <label>:42:                                     ; preds = %40
  br label %43

; <label>:43:                                     ; preds = %40, %42
  %44 = phi i32 [ 1, %42 ], [ 0, %40 ]
  %45 = icmp eq i8* %4, null
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %43
  store i64 %28, i64* %3, align 8
  br label %265

; <label>:47:                                     ; preds = %36, %43
  %48 = phi i32 [ %44, %43 ], [ 0, %36 ]
  %49 = phi i64 [ %28, %43 ], [ 1, %36 ]
  %50 = load i8, i8* %29, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %262, label %52

; <label>:52:                                     ; preds = %47
  %53 = sext i8 %50 to i32
  %54 = tail call i8* @strchr(i8* nonnull %4, i32 %53) #13
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %52
  store i64 %49, i64* %3, align 8
  %57 = or i32 %48, 2
  br label %265

; <label>:58:                                     ; preds = %52
  switch i32 %53, label %72 [
    i32 69, label %59
    i32 71, label %59
    i32 103, label %59
    i32 107, label %59
    i32 75, label %59
    i32 77, label %59
    i32 109, label %59
    i32 80, label %59
    i32 84, label %59
    i32 116, label %59
    i32 89, label %59
    i32 90, label %59
  ]

; <label>:59:                                     ; preds = %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58
  %60 = tail call i8* @strchr(i8* nonnull %4, i32 48) #13
  %61 = icmp eq i8* %60, null
  br i1 %61, label %72, label %62

; <label>:62:                                     ; preds = %59
  %63 = getelementptr inbounds i8, i8* %29, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  switch i32 %65, label %72 [
    i32 105, label %66
    i32 66, label %71
    i32 68, label %71
  ]

; <label>:66:                                     ; preds = %62
  %67 = getelementptr inbounds i8, i8* %29, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 66
  %70 = select i1 %69, i64 3, i64 1
  br label %72

; <label>:71:                                     ; preds = %62, %62
  br label %72

; <label>:72:                                     ; preds = %66, %59, %62, %71, %58
  %73 = phi i64 [ 1024, %58 ], [ 1024, %62 ], [ 1000, %71 ], [ 1024, %59 ], [ 1024, %66 ]
  %74 = phi i64 [ 1, %58 ], [ 1, %62 ], [ 2, %71 ], [ 1, %59 ], [ %70, %66 ]
  switch i32 %53, label %251 [
    i32 98, label %75
    i32 66, label %80
    i32 99, label %253
    i32 69, label %85
    i32 71, label %111
    i32 103, label %111
    i32 107, label %125
    i32 75, label %125
    i32 77, label %131
    i32 109, label %131
    i32 80, label %141
    i32 84, label %163
    i32 116, label %163
    i32 119, label %181
    i32 89, label %187
    i32 90, label %221
  ]

; <label>:75:                                     ; preds = %72
  %76 = icmp ugt i64 %49, 36028797018963967
  %77 = shl i64 %49, 9
  %78 = select i1 %76, i64 -1, i64 %77
  %79 = zext i1 %76 to i32
  br label %253

; <label>:80:                                     ; preds = %72
  %81 = icmp ugt i64 %49, 18014398509481983
  %82 = shl i64 %49, 10
  %83 = select i1 %81, i64 -1, i64 %82
  %84 = zext i1 %81 to i32
  br label %253

; <label>:85:                                     ; preds = %72
  %86 = udiv i64 -1, %73
  %87 = icmp ult i64 %86, %49
  %88 = mul i64 %49, %73
  %89 = select i1 %87, i64 -1, i64 %88
  %90 = icmp ult i64 %86, %89
  %91 = mul i64 %89, %73
  %92 = select i1 %90, i64 -1, i64 %91
  %93 = or i1 %90, %87
  %94 = icmp ult i64 %86, %92
  %95 = mul i64 %92, %73
  %96 = select i1 %94, i64 -1, i64 %95
  %97 = or i1 %94, %93
  %98 = icmp ult i64 %86, %96
  %99 = mul i64 %96, %73
  %100 = select i1 %98, i64 -1, i64 %99
  %101 = or i1 %98, %97
  %102 = icmp ult i64 %86, %100
  %103 = mul i64 %100, %73
  %104 = select i1 %102, i64 -1, i64 %103
  %105 = or i1 %102, %101
  %106 = icmp ult i64 %86, %104
  %107 = mul i64 %104, %73
  %108 = select i1 %106, i64 -1, i64 %107
  %109 = or i1 %106, %105
  %110 = zext i1 %109 to i32
  br label %253

; <label>:111:                                    ; preds = %72, %72
  %112 = udiv i64 -1, %73
  %113 = icmp ult i64 %112, %49
  %114 = mul i64 %49, %73
  %115 = select i1 %113, i64 -1, i64 %114
  %116 = icmp ult i64 %112, %115
  %117 = mul i64 %115, %73
  %118 = select i1 %116, i64 -1, i64 %117
  %119 = or i1 %116, %113
  %120 = icmp ult i64 %112, %118
  %121 = mul i64 %118, %73
  %122 = select i1 %120, i64 -1, i64 %121
  %123 = or i1 %120, %119
  %124 = zext i1 %123 to i32
  br label %253

; <label>:125:                                    ; preds = %72, %72
  %126 = udiv i64 -1, %73
  %127 = icmp ult i64 %126, %49
  %128 = mul i64 %49, %73
  %129 = select i1 %127, i64 -1, i64 %128
  %130 = zext i1 %127 to i32
  br label %253

; <label>:131:                                    ; preds = %72, %72
  %132 = udiv i64 -1, %73
  %133 = icmp ult i64 %132, %49
  %134 = mul i64 %49, %73
  %135 = select i1 %133, i64 -1, i64 %134
  %136 = icmp ult i64 %132, %135
  %137 = mul i64 %135, %73
  %138 = select i1 %136, i64 -1, i64 %137
  %139 = or i1 %136, %133
  %140 = zext i1 %139 to i32
  br label %253

; <label>:141:                                    ; preds = %72
  %142 = udiv i64 -1, %73
  %143 = icmp ult i64 %142, %49
  %144 = mul i64 %49, %73
  %145 = select i1 %143, i64 -1, i64 %144
  %146 = icmp ult i64 %142, %145
  %147 = mul i64 %145, %73
  %148 = select i1 %146, i64 -1, i64 %147
  %149 = or i1 %146, %143
  %150 = icmp ult i64 %142, %148
  %151 = mul i64 %148, %73
  %152 = select i1 %150, i64 -1, i64 %151
  %153 = or i1 %150, %149
  %154 = icmp ult i64 %142, %152
  %155 = mul i64 %152, %73
  %156 = select i1 %154, i64 -1, i64 %155
  %157 = or i1 %154, %153
  %158 = icmp ult i64 %142, %156
  %159 = mul i64 %156, %73
  %160 = select i1 %158, i64 -1, i64 %159
  %161 = or i1 %158, %157
  %162 = zext i1 %161 to i32
  br label %253

; <label>:163:                                    ; preds = %72, %72
  %164 = udiv i64 -1, %73
  %165 = icmp ult i64 %164, %49
  %166 = mul i64 %49, %73
  %167 = select i1 %165, i64 -1, i64 %166
  %168 = icmp ult i64 %164, %167
  %169 = mul i64 %167, %73
  %170 = select i1 %168, i64 -1, i64 %169
  %171 = or i1 %168, %165
  %172 = icmp ult i64 %164, %170
  %173 = mul i64 %170, %73
  %174 = select i1 %172, i64 -1, i64 %173
  %175 = or i1 %172, %171
  %176 = icmp ult i64 %164, %174
  %177 = mul i64 %174, %73
  %178 = select i1 %176, i64 -1, i64 %177
  %179 = or i1 %176, %175
  %180 = zext i1 %179 to i32
  br label %253

; <label>:181:                                    ; preds = %72
  %182 = icmp slt i64 %49, 0
  %183 = shl i64 %49, 1
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = lshr i64 %49, 63
  %186 = trunc i64 %185 to i32
  br label %253

; <label>:187:                                    ; preds = %72
  %188 = udiv i64 -1, %73
  %189 = icmp ult i64 %188, %49
  %190 = mul i64 %49, %73
  %191 = select i1 %189, i64 -1, i64 %190
  %192 = icmp ult i64 %188, %191
  %193 = mul i64 %191, %73
  %194 = select i1 %192, i64 -1, i64 %193
  %195 = or i1 %192, %189
  %196 = icmp ult i64 %188, %194
  %197 = mul i64 %194, %73
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = or i1 %196, %195
  %200 = icmp ult i64 %188, %198
  %201 = mul i64 %198, %73
  %202 = select i1 %200, i64 -1, i64 %201
  %203 = or i1 %200, %199
  %204 = icmp ult i64 %188, %202
  %205 = mul i64 %202, %73
  %206 = select i1 %204, i64 -1, i64 %205
  %207 = or i1 %204, %203
  %208 = icmp ult i64 %188, %206
  %209 = mul i64 %206, %73
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = or i1 %208, %207
  %212 = icmp ult i64 %188, %210
  %213 = mul i64 %210, %73
  %214 = select i1 %212, i64 -1, i64 %213
  %215 = or i1 %212, %211
  %216 = icmp ult i64 %188, %214
  %217 = mul i64 %214, %73
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = or i1 %216, %215
  %220 = zext i1 %219 to i32
  br label %253

; <label>:221:                                    ; preds = %72
  %222 = udiv i64 -1, %73
  %223 = icmp ult i64 %222, %49
  %224 = mul i64 %49, %73
  %225 = select i1 %223, i64 -1, i64 %224
  %226 = icmp ult i64 %222, %225
  %227 = mul i64 %225, %73
  %228 = select i1 %226, i64 -1, i64 %227
  %229 = or i1 %226, %223
  %230 = icmp ult i64 %222, %228
  %231 = mul i64 %228, %73
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = or i1 %230, %229
  %234 = icmp ult i64 %222, %232
  %235 = mul i64 %232, %73
  %236 = select i1 %234, i64 -1, i64 %235
  %237 = or i1 %234, %233
  %238 = icmp ult i64 %222, %236
  %239 = mul i64 %236, %73
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = or i1 %238, %237
  %242 = icmp ult i64 %222, %240
  %243 = mul i64 %240, %73
  %244 = select i1 %242, i64 -1, i64 %243
  %245 = or i1 %242, %241
  %246 = icmp ult i64 %222, %244
  %247 = mul i64 %244, %73
  %248 = select i1 %246, i64 -1, i64 %247
  %249 = or i1 %246, %245
  %250 = zext i1 %249 to i32
  br label %253

; <label>:251:                                    ; preds = %72
  store i64 %49, i64* %3, align 8
  %252 = or i32 %48, 2
  br label %265

; <label>:253:                                    ; preds = %221, %187, %163, %141, %131, %125, %111, %85, %75, %80, %181, %72
  %254 = phi i64 [ %184, %181 ], [ %49, %72 ], [ %83, %80 ], [ %78, %75 ], [ %108, %85 ], [ %122, %111 ], [ %129, %125 ], [ %138, %131 ], [ %160, %141 ], [ %178, %163 ], [ %218, %187 ], [ %248, %221 ]
  %255 = phi i32 [ %186, %181 ], [ 0, %72 ], [ %84, %80 ], [ %79, %75 ], [ %110, %85 ], [ %124, %111 ], [ %130, %125 ], [ %140, %131 ], [ %162, %141 ], [ %180, %163 ], [ %220, %187 ], [ %250, %221 ]
  %256 = or i32 %255, %48
  %257 = getelementptr inbounds i8, i8* %29, i64 %74
  store i8* %257, i8** %25, align 8
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 0
  %260 = or i32 %256, 2
  %261 = select i1 %259, i32 %256, i32 %260
  br label %262

; <label>:262:                                    ; preds = %253, %47
  %263 = phi i64 [ %49, %47 ], [ %254, %253 ]
  %264 = phi i32 [ %48, %47 ], [ %261, %253 ]
  store i64 %263, i64* %3, align 8
  br label %265

; <label>:265:                                    ; preds = %24, %56, %251, %40, %31, %33, %36, %262, %46
  %266 = phi i32 [ %264, %262 ], [ %44, %46 ], [ 4, %24 ], [ 4, %36 ], [ 4, %33 ], [ 4, %31 ], [ 4, %40 ], [ %57, %56 ], [ %252, %251 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7) #13
  ret i32 %266
}

; Function Attrs: nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define void @xstrtol_fatal(i32, i32, i8 signext, %struct.option* nocapture readonly, i8*) local_unnamed_addr #7 {
  %6 = alloca [2 x i8], align 1
  %7 = load volatile i32, i32* @exit_failure, align 4
  %8 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start(i64 2, i8* nonnull %8) #13
  %9 = add i32 %0, -1
  %10 = icmp ult i32 %9, 4
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %5
  tail call void @abort() #15
  unreachable

; <label>:12:                                     ; preds = %5
  %13 = sext i32 %9 to i64
  %14 = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.410, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8
  %16 = icmp slt i32 %1, 0
  %17 = sext i32 %1 to i64
  br i1 %16, label %18, label %22

; <label>:18:                                     ; preds = %12
  %19 = sub nsw i64 0, %17
  %20 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.411, i64 0, i64 %19
  store i8 %2, i8* %8, align 1
  %21 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %21, align 1
  br label %25

; <label>:22:                                     ; preds = %12
  %23 = getelementptr inbounds %struct.option, %struct.option* %3, i64 %17, i32 0
  %24 = load i8*, i8** %23, align 8
  br label %25

; <label>:25:                                     ; preds = %18, %22
  %26 = phi i8* [ %20, %18 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.411, i64 0, i64 0), %22 ]
  %27 = phi i8* [ %8, %18 ], [ %24, %22 ]
  %28 = tail call i8* @dcgettext(i8* null, i8* %15, i32 5) #13
  call void (i32, i32, i8*, ...) @error(i32 %7, i32 0, i8* %28, i8* %26, i8* %27, i8* %4) #13
  call void @llvm.lifetime.end(i64 2, i8* nonnull %8) #13
  call void @abort() #15
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @xstrtoumax(i8*, i8**, i32, i64* nocapture, i8* readonly) local_unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7) #13
  %8 = icmp ult i32 %2, 37
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %5
  tail call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.417, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.418, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.xstrtoumax, i64 0, i64 0)) #15
  unreachable

; <label>:10:                                     ; preds = %5
  %11 = icmp ne i8** %1, null
  %12 = tail call i32* @__errno_location() #1
  store i32 0, i32* %12, align 4
  %13 = tail call i16** @__ctype_b_loc() #1
  %14 = load i16*, i16** %13, align 8
  br label %15

; <label>:15:                                     ; preds = %15, %10
  %16 = phi i8* [ %0, %10 ], [ %23, %15 ]
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds i16, i16* %14, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = and i16 %20, 8192
  %22 = icmp eq i16 %21, 0
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  br i1 %22, label %24, label %15

; <label>:24:                                     ; preds = %15
  %25 = select i1 %11, i8** %1, i8** %6
  %26 = icmp eq i8 %17, 45
  br i1 %26, label %265, label %27

; <label>:27:                                     ; preds = %24
  %28 = call i64 @__strtoul_internal(i8* %0, i8** %25, i32 %2, i32 0) #13
  %29 = load i8*, i8** %25, align 8
  %30 = icmp eq i8* %29, %0
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %27
  %32 = icmp eq i8* %4, null
  br i1 %32, label %265, label %33

; <label>:33:                                     ; preds = %31
  %34 = load i8, i8* %0, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %265, label %36

; <label>:36:                                     ; preds = %33
  %37 = sext i8 %34 to i32
  %38 = call i8* @strchr(i8* nonnull %4, i32 %37) #13
  %39 = icmp eq i8* %38, null
  br i1 %39, label %265, label %47

; <label>:40:                                     ; preds = %27
  %41 = load i32, i32* %12, align 4
  switch i32 %41, label %265 [
    i32 0, label %43
    i32 34, label %42
  ]

; <label>:42:                                     ; preds = %40
  br label %43

; <label>:43:                                     ; preds = %40, %42
  %44 = phi i32 [ 1, %42 ], [ 0, %40 ]
  %45 = icmp eq i8* %4, null
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %43
  store i64 %28, i64* %3, align 8
  br label %265

; <label>:47:                                     ; preds = %36, %43
  %48 = phi i32 [ %44, %43 ], [ 0, %36 ]
  %49 = phi i64 [ %28, %43 ], [ 1, %36 ]
  %50 = load i8, i8* %29, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %262, label %52

; <label>:52:                                     ; preds = %47
  %53 = sext i8 %50 to i32
  %54 = call i8* @strchr(i8* nonnull %4, i32 %53) #13
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %52
  store i64 %49, i64* %3, align 8
  %57 = or i32 %48, 2
  br label %265

; <label>:58:                                     ; preds = %52
  switch i32 %53, label %72 [
    i32 69, label %59
    i32 71, label %59
    i32 103, label %59
    i32 107, label %59
    i32 75, label %59
    i32 77, label %59
    i32 109, label %59
    i32 80, label %59
    i32 84, label %59
    i32 116, label %59
    i32 89, label %59
    i32 90, label %59
  ]

; <label>:59:                                     ; preds = %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58
  %60 = call i8* @strchr(i8* nonnull %4, i32 48) #13
  %61 = icmp eq i8* %60, null
  br i1 %61, label %72, label %62

; <label>:62:                                     ; preds = %59
  %63 = getelementptr inbounds i8, i8* %29, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  switch i32 %65, label %72 [
    i32 105, label %66
    i32 66, label %71
    i32 68, label %71
  ]

; <label>:66:                                     ; preds = %62
  %67 = getelementptr inbounds i8, i8* %29, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 66
  %70 = select i1 %69, i64 3, i64 1
  br label %72

; <label>:71:                                     ; preds = %62, %62
  br label %72

; <label>:72:                                     ; preds = %66, %59, %62, %71, %58
  %73 = phi i64 [ 1024, %58 ], [ 1024, %62 ], [ 1000, %71 ], [ 1024, %59 ], [ 1024, %66 ]
  %74 = phi i64 [ 1, %58 ], [ 1, %62 ], [ 2, %71 ], [ 1, %59 ], [ %70, %66 ]
  switch i32 %53, label %251 [
    i32 98, label %75
    i32 66, label %80
    i32 99, label %253
    i32 69, label %85
    i32 71, label %111
    i32 103, label %111
    i32 107, label %125
    i32 75, label %125
    i32 77, label %131
    i32 109, label %131
    i32 80, label %141
    i32 84, label %163
    i32 116, label %163
    i32 119, label %181
    i32 89, label %187
    i32 90, label %221
  ]

; <label>:75:                                     ; preds = %72
  %76 = icmp ugt i64 %49, 36028797018963967
  %77 = shl i64 %49, 9
  %78 = select i1 %76, i64 -1, i64 %77
  %79 = zext i1 %76 to i32
  br label %253

; <label>:80:                                     ; preds = %72
  %81 = icmp ugt i64 %49, 18014398509481983
  %82 = shl i64 %49, 10
  %83 = select i1 %81, i64 -1, i64 %82
  %84 = zext i1 %81 to i32
  br label %253

; <label>:85:                                     ; preds = %72
  %86 = udiv i64 -1, %73
  %87 = icmp ult i64 %86, %49
  %88 = mul i64 %49, %73
  %89 = select i1 %87, i64 -1, i64 %88
  %90 = icmp ult i64 %86, %89
  %91 = mul i64 %89, %73
  %92 = select i1 %90, i64 -1, i64 %91
  %93 = or i1 %90, %87
  %94 = icmp ult i64 %86, %92
  %95 = mul i64 %92, %73
  %96 = select i1 %94, i64 -1, i64 %95
  %97 = or i1 %94, %93
  %98 = icmp ult i64 %86, %96
  %99 = mul i64 %96, %73
  %100 = select i1 %98, i64 -1, i64 %99
  %101 = or i1 %98, %97
  %102 = icmp ult i64 %86, %100
  %103 = mul i64 %100, %73
  %104 = select i1 %102, i64 -1, i64 %103
  %105 = or i1 %102, %101
  %106 = icmp ult i64 %86, %104
  %107 = mul i64 %104, %73
  %108 = select i1 %106, i64 -1, i64 %107
  %109 = or i1 %106, %105
  %110 = zext i1 %109 to i32
  br label %253

; <label>:111:                                    ; preds = %72, %72
  %112 = udiv i64 -1, %73
  %113 = icmp ult i64 %112, %49
  %114 = mul i64 %49, %73
  %115 = select i1 %113, i64 -1, i64 %114
  %116 = icmp ult i64 %112, %115
  %117 = mul i64 %115, %73
  %118 = select i1 %116, i64 -1, i64 %117
  %119 = or i1 %116, %113
  %120 = icmp ult i64 %112, %118
  %121 = mul i64 %118, %73
  %122 = select i1 %120, i64 -1, i64 %121
  %123 = or i1 %120, %119
  %124 = zext i1 %123 to i32
  br label %253

; <label>:125:                                    ; preds = %72, %72
  %126 = udiv i64 -1, %73
  %127 = icmp ult i64 %126, %49
  %128 = mul i64 %49, %73
  %129 = select i1 %127, i64 -1, i64 %128
  %130 = zext i1 %127 to i32
  br label %253

; <label>:131:                                    ; preds = %72, %72
  %132 = udiv i64 -1, %73
  %133 = icmp ult i64 %132, %49
  %134 = mul i64 %49, %73
  %135 = select i1 %133, i64 -1, i64 %134
  %136 = icmp ult i64 %132, %135
  %137 = mul i64 %135, %73
  %138 = select i1 %136, i64 -1, i64 %137
  %139 = or i1 %136, %133
  %140 = zext i1 %139 to i32
  br label %253

; <label>:141:                                    ; preds = %72
  %142 = udiv i64 -1, %73
  %143 = icmp ult i64 %142, %49
  %144 = mul i64 %49, %73
  %145 = select i1 %143, i64 -1, i64 %144
  %146 = icmp ult i64 %142, %145
  %147 = mul i64 %145, %73
  %148 = select i1 %146, i64 -1, i64 %147
  %149 = or i1 %146, %143
  %150 = icmp ult i64 %142, %148
  %151 = mul i64 %148, %73
  %152 = select i1 %150, i64 -1, i64 %151
  %153 = or i1 %150, %149
  %154 = icmp ult i64 %142, %152
  %155 = mul i64 %152, %73
  %156 = select i1 %154, i64 -1, i64 %155
  %157 = or i1 %154, %153
  %158 = icmp ult i64 %142, %156
  %159 = mul i64 %156, %73
  %160 = select i1 %158, i64 -1, i64 %159
  %161 = or i1 %158, %157
  %162 = zext i1 %161 to i32
  br label %253

; <label>:163:                                    ; preds = %72, %72
  %164 = udiv i64 -1, %73
  %165 = icmp ult i64 %164, %49
  %166 = mul i64 %49, %73
  %167 = select i1 %165, i64 -1, i64 %166
  %168 = icmp ult i64 %164, %167
  %169 = mul i64 %167, %73
  %170 = select i1 %168, i64 -1, i64 %169
  %171 = or i1 %168, %165
  %172 = icmp ult i64 %164, %170
  %173 = mul i64 %170, %73
  %174 = select i1 %172, i64 -1, i64 %173
  %175 = or i1 %172, %171
  %176 = icmp ult i64 %164, %174
  %177 = mul i64 %174, %73
  %178 = select i1 %176, i64 -1, i64 %177
  %179 = or i1 %176, %175
  %180 = zext i1 %179 to i32
  br label %253

; <label>:181:                                    ; preds = %72
  %182 = icmp slt i64 %49, 0
  %183 = shl i64 %49, 1
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = lshr i64 %49, 63
  %186 = trunc i64 %185 to i32
  br label %253

; <label>:187:                                    ; preds = %72
  %188 = udiv i64 -1, %73
  %189 = icmp ult i64 %188, %49
  %190 = mul i64 %49, %73
  %191 = select i1 %189, i64 -1, i64 %190
  %192 = icmp ult i64 %188, %191
  %193 = mul i64 %191, %73
  %194 = select i1 %192, i64 -1, i64 %193
  %195 = or i1 %192, %189
  %196 = icmp ult i64 %188, %194
  %197 = mul i64 %194, %73
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = or i1 %196, %195
  %200 = icmp ult i64 %188, %198
  %201 = mul i64 %198, %73
  %202 = select i1 %200, i64 -1, i64 %201
  %203 = or i1 %200, %199
  %204 = icmp ult i64 %188, %202
  %205 = mul i64 %202, %73
  %206 = select i1 %204, i64 -1, i64 %205
  %207 = or i1 %204, %203
  %208 = icmp ult i64 %188, %206
  %209 = mul i64 %206, %73
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = or i1 %208, %207
  %212 = icmp ult i64 %188, %210
  %213 = mul i64 %210, %73
  %214 = select i1 %212, i64 -1, i64 %213
  %215 = or i1 %212, %211
  %216 = icmp ult i64 %188, %214
  %217 = mul i64 %214, %73
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = or i1 %216, %215
  %220 = zext i1 %219 to i32
  br label %253

; <label>:221:                                    ; preds = %72
  %222 = udiv i64 -1, %73
  %223 = icmp ult i64 %222, %49
  %224 = mul i64 %49, %73
  %225 = select i1 %223, i64 -1, i64 %224
  %226 = icmp ult i64 %222, %225
  %227 = mul i64 %225, %73
  %228 = select i1 %226, i64 -1, i64 %227
  %229 = or i1 %226, %223
  %230 = icmp ult i64 %222, %228
  %231 = mul i64 %228, %73
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = or i1 %230, %229
  %234 = icmp ult i64 %222, %232
  %235 = mul i64 %232, %73
  %236 = select i1 %234, i64 -1, i64 %235
  %237 = or i1 %234, %233
  %238 = icmp ult i64 %222, %236
  %239 = mul i64 %236, %73
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = or i1 %238, %237
  %242 = icmp ult i64 %222, %240
  %243 = mul i64 %240, %73
  %244 = select i1 %242, i64 -1, i64 %243
  %245 = or i1 %242, %241
  %246 = icmp ult i64 %222, %244
  %247 = mul i64 %244, %73
  %248 = select i1 %246, i64 -1, i64 %247
  %249 = or i1 %246, %245
  %250 = zext i1 %249 to i32
  br label %253

; <label>:251:                                    ; preds = %72
  store i64 %49, i64* %3, align 8
  %252 = or i32 %48, 2
  br label %265

; <label>:253:                                    ; preds = %221, %187, %163, %141, %131, %125, %111, %85, %75, %80, %181, %72
  %254 = phi i64 [ %184, %181 ], [ %49, %72 ], [ %83, %80 ], [ %78, %75 ], [ %108, %85 ], [ %122, %111 ], [ %129, %125 ], [ %138, %131 ], [ %160, %141 ], [ %178, %163 ], [ %218, %187 ], [ %248, %221 ]
  %255 = phi i32 [ %186, %181 ], [ 0, %72 ], [ %84, %80 ], [ %79, %75 ], [ %110, %85 ], [ %124, %111 ], [ %130, %125 ], [ %140, %131 ], [ %162, %141 ], [ %180, %163 ], [ %220, %187 ], [ %250, %221 ]
  %256 = or i32 %255, %48
  %257 = getelementptr inbounds i8, i8* %29, i64 %74
  store i8* %257, i8** %25, align 8
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 0
  %260 = or i32 %256, 2
  %261 = select i1 %259, i32 %256, i32 %260
  br label %262

; <label>:262:                                    ; preds = %253, %47
  %263 = phi i64 [ %49, %47 ], [ %254, %253 ]
  %264 = phi i32 [ %48, %47 ], [ %261, %253 ]
  store i64 %263, i64* %3, align 8
  br label %265

; <label>:265:                                    ; preds = %24, %56, %251, %40, %31, %33, %36, %262, %46
  %266 = phi i32 [ %264, %262 ], [ %44, %46 ], [ 4, %24 ], [ 4, %36 ], [ 4, %33 ], [ 4, %31 ], [ 4, %40 ], [ %57, %56 ], [ %252, %251 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7) #13
  ret i32 %266
}

; Function Attrs: nounwind
declare i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define noalias i8* @rpl_calloc(i64, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  %4 = icmp eq i64 %1, 0
  %5 = or i1 %3, %4
  br i1 %5, label %12, label %6

; <label>:6:                                      ; preds = %2
  %7 = mul i64 %1, %0
  %8 = udiv i64 %7, %1
  %9 = icmp eq i64 %8, %0
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %6
  %11 = tail call i32* @__errno_location() #1
  store i32 12, i32* %11, align 4
  br label %16

; <label>:12:                                     ; preds = %6, %2
  %13 = phi i64 [ 1, %2 ], [ %1, %6 ]
  %14 = phi i64 [ 1, %2 ], [ %0, %6 ]
  %15 = tail call noalias i8* @calloc(i64 %14, i64 %13) #13
  br label %16

; <label>:16:                                     ; preds = %10, %12
  %17 = phi i8* [ %15, %12 ], [ null, %10 ]
  ret i8* %17
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %6) #13
  %7 = icmp eq i32* %0, null
  %8 = select i1 %7, i32* %5, i32* %0
  %9 = call i64 @mbrtowc(i32* %8, i8* %1, i64 %2, %struct.__mbstate_t* %3) #13
  %10 = icmp ugt i64 %9, -3
  %11 = icmp ne i64 %2, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %4
  %14 = call zeroext i1 @hard_locale(i32 0) #13
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %13
  %16 = load i8, i8* %1, align 1
  %17 = zext i8 %16 to i32
  store i32 %17, i32* %8, align 4
  br label %18

; <label>:18:                                     ; preds = %4, %13, %15
  %19 = phi i64 [ 1, %15 ], [ %9, %13 ], [ %9, %4 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %6) #13
  ret i64 %19
}

; Function Attrs: nounwind
declare i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define internal void @print_and_abort() #7 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = tail call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.423, i64 0, i64 0), i32 5) #13
  %3 = tail call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %1, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.424, i64 0, i64 0), i8* %2) #13
  %4 = load volatile i32, i32* @exit_failure, align 4
  tail call void @exit(i32 %4) #15
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @_obstack_begin(%struct.obstack* nocapture, i64, i64, i8* (i64)*, void (i8*)*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 7, i32 0
  store i8* (i64)* %3, i8* (i64)** %6, align 8
  %7 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 8, i32 0
  store void (i8*)* %4, void (i8*)** %7, align 8
  %8 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 10
  %9 = load i8, i8* %8, align 8
  %10 = and i8 %9, -2
  store i8 %10, i8* %8, align 8
  %11 = icmp eq i64 %2, 0
  %12 = select i1 %11, i64 16, i64 %2
  %13 = icmp eq i64 %1, 0
  %14 = select i1 %13, i64 4064, i64 %1
  %15 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 0
  store i64 %14, i64* %15, align 8
  %16 = add i64 %12, -1
  %17 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 6
  store i64 %16, i64* %17, align 8
  %18 = tail call i8* %3(i64 %14) #13
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %20 = bitcast %struct._obstack_chunk** %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = icmp eq i8* %18, null
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %5
  %23 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8
  tail call void %23() #15
  unreachable

; <label>:24:                                     ; preds = %5
  %25 = getelementptr inbounds i8, i8* %18, i64 16
  %26 = ptrtoint i8* %25 to i64
  %27 = add i64 %26, %16
  %28 = sub i64 0, %12
  %29 = and i64 %27, %28
  %30 = getelementptr inbounds i8, i8* null, i64 %29
  %31 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 2
  store i8* %30, i8** %31, align 8
  %32 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 3
  store i8* %30, i8** %32, align 8
  %33 = load i64, i64* %15, align 8
  %34 = getelementptr inbounds i8, i8* %18, i64 %33
  %35 = bitcast i8* %18 to i8**
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 4
  store i8* %34, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %18, i64 8
  %38 = bitcast i8* %37 to %struct._obstack_chunk**
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %38, align 8
  %39 = load i8, i8* %8, align 8
  %40 = and i8 %39, -7
  store i8 %40, i8* %8, align 8
  ret i32 1
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @_obstack_begin_1(%struct.obstack* nocapture, i64, i64, i8* (i8*, i64)*, void (i8*, i8*)*, i8*) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 7
  %8 = bitcast %union.anon.0* %7 to i8* (i8*, i64)**
  store i8* (i8*, i64)* %3, i8* (i8*, i64)** %8, align 8
  %9 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 8
  %10 = bitcast %union.anon.1* %9 to void (i8*, i8*)**
  store void (i8*, i8*)* %4, void (i8*, i8*)** %10, align 8
  %11 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 9
  store i8* %5, i8** %11, align 8
  %12 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 10
  %13 = load i8, i8* %12, align 8
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 8
  %15 = icmp eq i64 %2, 0
  %16 = select i1 %15, i64 16, i64 %2
  %17 = icmp eq i64 %1, 0
  %18 = select i1 %17, i64 4064, i64 %1
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 0
  store i64 %18, i64* %19, align 8
  %20 = add i64 %16, -1
  %21 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 6
  store i64 %20, i64* %21, align 8
  %22 = tail call i8* %3(i8* %5, i64 %18) #13
  %23 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %24 = bitcast %struct._obstack_chunk** %23 to i8**
  store i8* %22, i8** %24, align 8
  %25 = icmp eq i8* %22, null
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %6
  %27 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8
  tail call void %27() #15
  unreachable

; <label>:28:                                     ; preds = %6
  %29 = getelementptr inbounds i8, i8* %22, i64 16
  %30 = ptrtoint i8* %29 to i64
  %31 = add i64 %30, %20
  %32 = sub i64 0, %16
  %33 = and i64 %31, %32
  %34 = getelementptr inbounds i8, i8* null, i64 %33
  %35 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 2
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 3
  store i8* %34, i8** %36, align 8
  %37 = load i64, i64* %19, align 8
  %38 = getelementptr inbounds i8, i8* %22, i64 %37
  %39 = bitcast i8* %22 to i8**
  store i8* %38, i8** %39, align 8
  %40 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 4
  store i8* %38, i8** %40, align 8
  %41 = getelementptr inbounds i8, i8* %22, i64 8
  %42 = bitcast i8* %41 to %struct._obstack_chunk**
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %42, align 8
  %43 = load i8, i8* %12, align 8
  %44 = and i8 %43, -7
  store i8 %44, i8* %12, align 8
  ret i32 1
}

; Function Attrs: nounwind sspstrong uwtable
define void @_obstack_newchunk(%struct.obstack* nocapture, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %5 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 3
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 2
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = add i64 %11, %1
  %13 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 6
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %12, %14
  %16 = lshr i64 %11, 3
  %17 = add nuw nsw i64 %16, 100
  %18 = add i64 %17, %15
  %19 = icmp ult i64 %18, %15
  %20 = select i1 %19, i64 %15, i64 %18
  %21 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %20, %22
  %24 = select i1 %23, i64 %22, i64 %20
  %25 = icmp ugt i64 %11, %12
  %26 = icmp ugt i64 %12, %15
  %27 = or i1 %25, %26
  br i1 %27, label %47, label %28

; <label>:28:                                     ; preds = %2
  %29 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 10
  %30 = load i8, i8* %29, align 8
  %31 = and i8 %30, 1
  %32 = icmp eq i8 %31, 0
  %33 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 7
  br i1 %32, label %40, label %34

; <label>:34:                                     ; preds = %28
  %35 = bitcast %union.anon.0* %33 to i8* (i8*, i64)**
  %36 = load i8* (i8*, i64)*, i8* (i8*, i64)** %35, align 8
  %37 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 9
  %38 = load i8*, i8** %37, align 8
  %39 = tail call i8* %36(i8* %38, i64 %24) #13
  br label %44

; <label>:40:                                     ; preds = %28
  %41 = getelementptr inbounds %union.anon.0, %union.anon.0* %33, i64 0, i32 0
  %42 = load i8* (i64)*, i8* (i64)** %41, align 8
  %43 = tail call i8* %42(i64 %24) #13
  br label %44

; <label>:44:                                     ; preds = %40, %34
  %45 = phi i8* [ %39, %34 ], [ %43, %40 ]
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %49

; <label>:47:                                     ; preds = %2, %44
  %48 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8
  tail call void %48() #15
  unreachable

; <label>:49:                                     ; preds = %44
  %50 = bitcast %struct._obstack_chunk** %3 to i8**
  store i8* %45, i8** %50, align 8
  %51 = getelementptr inbounds i8, i8* %45, i64 8
  %52 = bitcast i8* %51 to %struct._obstack_chunk**
  store %struct._obstack_chunk* %4, %struct._obstack_chunk** %52, align 8
  %53 = getelementptr inbounds i8, i8* %45, i64 %24
  %54 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 4
  store i8* %53, i8** %54, align 8
  %55 = bitcast i8* %45 to i8**
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %45, i64 16
  %57 = ptrtoint i8* %56 to i64
  %58 = load i64, i64* %13, align 8
  %59 = add i64 %58, %57
  %60 = xor i64 %58, -1
  %61 = and i64 %59, %60
  %62 = getelementptr inbounds i8, i8* null, i64 %61
  %63 = load i8*, i8** %8, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 %11, i32 1, i1 false)
  %64 = load i8, i8* %29, align 8
  %65 = and i8 %64, 2
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %92

; <label>:67:                                     ; preds = %49
  %68 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %4, i64 0, i32 2, i64 0
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %58, %69
  %71 = and i64 %70, %60
  %72 = getelementptr inbounds i8, i8* null, i64 %71
  %73 = icmp eq i8* %63, %72
  br i1 %73, label %74, label %92

; <label>:74:                                     ; preds = %67
  %75 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %4, i64 0, i32 1
  %76 = bitcast %struct._obstack_chunk** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast i8* %51 to i64*
  store i64 %77, i64* %78, align 8
  %79 = bitcast %struct._obstack_chunk* %4 to i8*
  %80 = load i8, i8* %29, align 8
  %81 = and i8 %80, 1
  %82 = icmp eq i8 %81, 0
  %83 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 8
  br i1 %82, label %89, label %84

; <label>:84:                                     ; preds = %74
  %85 = bitcast %union.anon.1* %83 to void (i8*, i8*)**
  %86 = load void (i8*, i8*)*, void (i8*, i8*)** %85, align 8
  %87 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 9
  %88 = load i8*, i8** %87, align 8
  tail call void %86(i8* %88, i8* %79) #13
  br label %92

; <label>:89:                                     ; preds = %74
  %90 = getelementptr inbounds %union.anon.1, %union.anon.1* %83, i64 0, i32 0
  %91 = load void (i8*)*, void (i8*)** %90, align 8
  tail call void %91(i8* %79) #13
  br label %92

; <label>:92:                                     ; preds = %89, %84, %49, %67
  store i8* %62, i8** %8, align 8
  %93 = getelementptr inbounds i8, i8* %62, i64 %11
  store i8* %93, i8** %5, align 8
  %94 = load i8, i8* %29, align 8
  %95 = and i8 %94, -3
  store i8 %95, i8* %29, align 8
  ret void
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i32 @_obstack_allocated_p(%struct.obstack* nocapture readonly, i8* readnone) local_unnamed_addr #8 {
  %3 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %5 = icmp eq %struct._obstack_chunk* %4, null
  br i1 %5, label %21, label %6

; <label>:6:                                      ; preds = %2
  br label %7

; <label>:7:                                      ; preds = %6, %15
  %8 = phi %struct._obstack_chunk* [ %17, %15 ], [ %4, %6 ]
  %9 = bitcast %struct._obstack_chunk* %8 to i8*
  %10 = icmp ult i8* %9, %1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ult i8* %13, %1
  br i1 %14, label %15, label %19

; <label>:15:                                     ; preds = %7, %11
  %16 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i64 0, i32 1
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** %16, align 8
  %18 = icmp eq %struct._obstack_chunk* %17, null
  br i1 %18, label %19, label %7

; <label>:19:                                     ; preds = %15, %11
  %20 = phi i32 [ 0, %15 ], [ 1, %11 ]
  br label %21

; <label>:21:                                     ; preds = %19, %2
  %22 = phi i32 [ 0, %2 ], [ %20, %19 ]
  ret i32 %22
}

; Function Attrs: nounwind sspstrong uwtable
define void @_obstack_free(%struct.obstack* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %5 = icmp eq %struct._obstack_chunk* %4, null
  br i1 %5, label %43, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 10
  %8 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 8
  %9 = getelementptr inbounds %union.anon.1, %union.anon.1* %8, i64 0, i32 0
  %10 = bitcast %union.anon.1* %8 to void (i8*, i8*)**
  %11 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 9
  br label %12

; <label>:12:                                     ; preds = %6, %31
  %13 = phi %struct._obstack_chunk* [ %4, %6 ], [ %22, %31 ]
  %14 = bitcast %struct._obstack_chunk* %13 to i8*
  %15 = icmp ult i8* %14, %1
  br i1 %15, label %16, label %20

; <label>:16:                                     ; preds = %12
  %17 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %13, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ult i8* %18, %1
  br i1 %19, label %20, label %35

; <label>:20:                                     ; preds = %12, %16
  %21 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %13, i64 0, i32 1
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %21, align 8
  %23 = load i8, i8* %7, align 8
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %29, label %26

; <label>:26:                                     ; preds = %20
  %27 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %28 = load i8*, i8** %11, align 8
  tail call void %27(i8* %28, i8* nonnull %14) #13
  br label %31

; <label>:29:                                     ; preds = %20
  %30 = load void (i8*)*, void (i8*)** %9, align 8
  tail call void %30(i8* nonnull %14) #13
  br label %31

; <label>:31:                                     ; preds = %26, %29
  %32 = load i8, i8* %7, align 8
  %33 = or i8 %32, 2
  store i8 %33, i8* %7, align 8
  %34 = icmp eq %struct._obstack_chunk* %22, null
  br i1 %34, label %42, label %12

; <label>:35:                                     ; preds = %16
  %36 = bitcast %struct._obstack_chunk* %13 to i64*
  %37 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 3
  store i8* %1, i8** %37, align 8
  %38 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 2
  store i8* %1, i8** %38, align 8
  %39 = load i64, i64* %36, align 8
  %40 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 4
  %41 = bitcast i8** %40 to i64*
  store i64 %39, i64* %41, align 8
  store %struct._obstack_chunk* %13, %struct._obstack_chunk** %3, align 8
  br label %46

; <label>:42:                                     ; preds = %31
  br label %43

; <label>:43:                                     ; preds = %42, %2
  %44 = icmp eq i8* %1, null
  br i1 %44, label %46, label %45

; <label>:45:                                     ; preds = %43
  tail call void @abort() #15
  unreachable

; <label>:46:                                     ; preds = %43, %35
  ret void
}

; Function Attrs: nounwind readonly sspstrong uwtable
define i64 @_obstack_memory_used(%struct.obstack* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i64 0, i32 1
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %2, align 8
  %4 = icmp eq %struct._obstack_chunk* %3, null
  br i1 %4, label %18, label %5

; <label>:5:                                      ; preds = %1
  br label %6

; <label>:6:                                      ; preds = %5, %6
  %7 = phi %struct._obstack_chunk* [ %15, %6 ], [ %3, %5 ]
  %8 = phi i64 [ %13, %6 ], [ 0, %5 ]
  %9 = bitcast %struct._obstack_chunk* %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = ptrtoint %struct._obstack_chunk* %7 to i64
  %12 = sub i64 %8, %11
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %7, i64 0, i32 1
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** %14, align 8
  %16 = icmp eq %struct._obstack_chunk* %15, null
  br i1 %16, label %17, label %6

; <label>:17:                                     ; preds = %6
  br label %18

; <label>:18:                                     ; preds = %17, %1
  %19 = phi i64 [ 0, %1 ], [ %13, %17 ]
  ret i64 %19
}

; Function Attrs: nounwind sspstrong uwtable
define noalias %struct.tm_zone* @tzalloc(i8* readonly) local_unnamed_addr #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = tail call i64 @strlen(i8* nonnull %0) #16
  %5 = add i64 %4, 1
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i64 [ %5, %3 ], [ 0, %1 ]
  %8 = icmp ult i64 %7, 119
  %9 = add i64 %7, 17
  %10 = and i64 %9, -8
  %11 = select i1 %8, i64 128, i64 %10
  %12 = tail call noalias i8* @malloc(i64 %11) #13
  %13 = bitcast i8* %12 to %struct.tm_zone*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %22, label %15

; <label>:15:                                     ; preds = %6
  %16 = bitcast i8* %12 to %struct.tm_zone**
  store %struct.tm_zone* null, %struct.tm_zone** %16, align 8
  %17 = zext i1 %2 to i8
  %18 = getelementptr inbounds i8, i8* %12, i64 8
  store i8 %17, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %12, i64 9
  store i8 0, i8* %19, align 1
  br i1 %2, label %20, label %22

; <label>:20:                                     ; preds = %15
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* nonnull %0, i64 %7, i32 1, i1 false) #13
  %21 = getelementptr inbounds i8, i8* %19, i64 %7
  store i8 0, i8* %21, align 1
  br label %22

; <label>:22:                                     ; preds = %6, %15, %20
  ret %struct.tm_zone* %13
}

; Function Attrs: nounwind sspstrong uwtable
define void @tzfree(%struct.tm_zone*) local_unnamed_addr #0 {
  %2 = icmp ult %struct.tm_zone* %0, inttoptr (i64 2 to %struct.tm_zone*)
  br i1 %2, label %11, label %3

; <label>:3:                                      ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %3, %4
  %5 = phi %struct.tm_zone* [ %7, %4 ], [ %0, %3 ]
  %6 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %5, i64 0, i32 0
  %7 = load %struct.tm_zone*, %struct.tm_zone** %6, align 8
  %8 = bitcast %struct.tm_zone* %5 to i8*
  tail call void @free(i8* %8) #13
  %9 = icmp eq %struct.tm_zone* %7, null
  br i1 %9, label %10, label %4

; <label>:10:                                     ; preds = %4
  br label %11

; <label>:11:                                     ; preds = %10, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define %struct.tm* @localtime_rz(%struct.tm_zone*, i64* nonnull, %struct.tm* nonnull) local_unnamed_addr #0 {
  %4 = icmp eq %struct.tm_zone* %0, null
  br i1 %4, label %5, label %7

; <label>:5:                                      ; preds = %3
  %6 = tail call %struct.tm* @gmtime_r(i64* nonnull %1, %struct.tm* nonnull %2) #13
  br label %54

; <label>:7:                                      ; preds = %3
  %8 = tail call fastcc %struct.tm_zone* @set_tz(%struct.tm_zone* nonnull %0)
  %9 = icmp eq %struct.tm_zone* %8, null
  br i1 %9, label %54, label %10

; <label>:10:                                     ; preds = %7
  %11 = tail call %struct.tm* @localtime_r(i64* nonnull %1, %struct.tm* nonnull %2) #13
  %12 = icmp eq %struct.tm* %11, null
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %10
  %14 = tail call fastcc zeroext i1 @save_abbr(%struct.tm_zone* nonnull %0, %struct.tm* nonnull %2)
  %15 = xor i1 %14, true
  br label %16

; <label>:16:                                     ; preds = %10, %13
  %17 = phi i1 [ true, %10 ], [ %15, %13 ]
  %18 = icmp eq %struct.tm_zone* %8, inttoptr (i64 1 to %struct.tm_zone*)
  br i1 %18, label %49, label %19

; <label>:19:                                     ; preds = %16
  %20 = tail call i32* @__errno_location() #1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %8, i64 0, i32 1
  %23 = load i8, i8* %22, align 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %28, label %25

; <label>:25:                                     ; preds = %19
  %26 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %8, i64 0, i32 2, i64 0
  %27 = tail call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0), i8* nonnull %26, i32 1) #13
  br label %30

; <label>:28:                                     ; preds = %19
  %29 = tail call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0)) #13
  br label %30

; <label>:30:                                     ; preds = %28, %25
  %31 = phi i32 [ %27, %25 ], [ %29, %28 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %30
  tail call void @tzset() #13
  br label %36

; <label>:34:                                     ; preds = %30
  %35 = load i32, i32* %20, align 4
  br label %36

; <label>:36:                                     ; preds = %34, %33
  %37 = phi i1 [ false, %34 ], [ true, %33 ]
  %38 = phi i32 [ %35, %34 ], [ %21, %33 ]
  %39 = icmp ult %struct.tm_zone* %8, inttoptr (i64 2 to %struct.tm_zone*)
  br i1 %39, label %48, label %40

; <label>:40:                                     ; preds = %36
  br label %41

; <label>:41:                                     ; preds = %40, %41
  %42 = phi %struct.tm_zone* [ %44, %41 ], [ %8, %40 ]
  %43 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %42, i64 0, i32 0
  %44 = load %struct.tm_zone*, %struct.tm_zone** %43, align 8
  %45 = bitcast %struct.tm_zone* %42 to i8*
  tail call void @free(i8* %45) #13
  %46 = icmp eq %struct.tm_zone* %44, null
  br i1 %46, label %47, label %41

; <label>:47:                                     ; preds = %41
  br label %48

; <label>:48:                                     ; preds = %47, %36
  store i32 %38, i32* %20, align 4
  br label %49

; <label>:49:                                     ; preds = %16, %48
  %50 = phi i1 [ %37, %48 ], [ true, %16 ]
  %51 = xor i1 %50, true
  %52 = or i1 %17, %51
  %53 = select i1 %52, %struct.tm* null, %struct.tm* %2
  ret %struct.tm* %53

; <label>:54:                                     ; preds = %7, %5
  %55 = phi %struct.tm* [ %6, %5 ], [ null, %7 ]
  ret %struct.tm* %55
}

; Function Attrs: nounwind
declare %struct.tm* @gmtime_r(i64*, %struct.tm*) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc %struct.tm_zone* @set_tz(%struct.tm_zone*) unnamed_addr #0 {
  %2 = tail call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0)) #13
  %3 = icmp eq i8* %2, null
  %4 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %3, label %12, label %7

; <label>:7:                                      ; preds = %1
  br i1 %6, label %13, label %8

; <label>:8:                                      ; preds = %7
  %9 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %0, i64 0, i32 2, i64 0
  %10 = tail call i32 @strcmp(i8* %9, i8* nonnull %2) #13
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %56, label %13

; <label>:12:                                     ; preds = %1
  br i1 %6, label %56, label %16

; <label>:13:                                     ; preds = %7, %8
  %14 = tail call i64 @strlen(i8* nonnull %2) #16
  %15 = add i64 %14, 1
  br label %16

; <label>:16:                                     ; preds = %12, %13
  %17 = phi i1 [ true, %13 ], [ false, %12 ]
  %18 = phi i64 [ %15, %13 ], [ 0, %12 ]
  %19 = icmp ult i64 %18, 119
  %20 = add i64 %18, 17
  %21 = and i64 %20, -8
  %22 = select i1 %19, i64 128, i64 %21
  %23 = tail call noalias i8* @malloc(i64 %22) #13
  %24 = bitcast i8* %23 to %struct.tm_zone*
  %25 = icmp eq i8* %23, null
  br i1 %25, label %56, label %26

; <label>:26:                                     ; preds = %16
  %27 = bitcast i8* %23 to %struct.tm_zone**
  store %struct.tm_zone* null, %struct.tm_zone** %27, align 8
  %28 = zext i1 %17 to i8
  %29 = getelementptr inbounds i8, i8* %23, i64 8
  store i8 %28, i8* %29, align 8
  %30 = getelementptr inbounds i8, i8* %23, i64 9
  store i8 0, i8* %30, align 1
  br i1 %17, label %31, label %33

; <label>:31:                                     ; preds = %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* nonnull %2, i64 %18, i32 1, i1 false) #13
  %32 = getelementptr inbounds i8, i8* %30, i64 %18
  store i8 0, i8* %32, align 1
  br label %33

; <label>:33:                                     ; preds = %31, %26
  br i1 %6, label %37, label %34

; <label>:34:                                     ; preds = %33
  %35 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %0, i64 0, i32 2, i64 0
  %36 = tail call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0), i8* nonnull %35, i32 1) #13
  br label %39

; <label>:37:                                     ; preds = %33
  %38 = tail call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0)) #13
  br label %39

; <label>:39:                                     ; preds = %37, %34
  %40 = phi i32 [ %36, %34 ], [ %38, %37 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %39
  tail call void @tzset() #13
  br label %56

; <label>:43:                                     ; preds = %39
  %44 = tail call i32* @__errno_location() #1
  %45 = load i32, i32* %44, align 4
  %46 = icmp ult i8* %23, inttoptr (i64 2 to i8*)
  br i1 %46, label %55, label %47

; <label>:47:                                     ; preds = %43
  br label %48

; <label>:48:                                     ; preds = %47, %48
  %49 = phi %struct.tm_zone* [ %51, %48 ], [ %24, %47 ]
  %50 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %49, i64 0, i32 0
  %51 = load %struct.tm_zone*, %struct.tm_zone** %50, align 8
  %52 = bitcast %struct.tm_zone* %49 to i8*
  tail call void @free(i8* %52) #13
  %53 = icmp eq %struct.tm_zone* %51, null
  br i1 %53, label %54, label %48

; <label>:54:                                     ; preds = %48
  br label %55

; <label>:55:                                     ; preds = %54, %43
  store i32 %45, i32* %44, align 4
  br label %56

; <label>:56:                                     ; preds = %16, %42, %55, %8, %12
  %57 = phi %struct.tm_zone* [ inttoptr (i64 1 to %struct.tm_zone*), %12 ], [ inttoptr (i64 1 to %struct.tm_zone*), %8 ], [ null, %55 ], [ %24, %42 ], [ null, %16 ]
  ret %struct.tm_zone* %57
}

; Function Attrs: nounwind
declare %struct.tm* @localtime_r(i64*, %struct.tm*) #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @save_abbr(%struct.tm_zone*, %struct.tm*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 10
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %77, label %6

; <label>:6:                                      ; preds = %2
  %7 = bitcast %struct.tm* %1 to i8*
  %8 = icmp ugt i8* %7, %4
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 1
  %11 = bitcast %struct.tm* %10 to i8*
  %12 = icmp ult i8* %4, %11
  br i1 %12, label %77, label %13

; <label>:13:                                     ; preds = %6, %9
  %14 = load i8, i8* %4, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %75, label %16

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %0, i64 0, i32 2, i64 0
  br label %18

; <label>:18:                                     ; preds = %67, %16
  %19 = phi i8* [ %72, %67 ], [ %17, %16 ]
  %20 = phi %struct.tm_zone* [ %73, %67 ], [ %0, %16 ]
  %21 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %20, i64 0, i32 2, i64 0
  %22 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %20, i64 0, i32 1
  br label %23

; <label>:23:                                     ; preds = %18, %61
  %24 = phi i8* [ %64, %61 ], [ %19, %18 ]
  %25 = tail call i32 @strcmp(i8* %24, i8* nonnull %4) #13
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %74, label %27

; <label>:27:                                     ; preds = %23
  %28 = load i8, i8* %24, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %61

; <label>:30:                                     ; preds = %27
  %31 = icmp eq i8* %24, %21
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %30
  %33 = load i8, i8* %22, align 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %61

; <label>:35:                                     ; preds = %32, %30
  %36 = phi i8* [ %21, %32 ], [ %24, %30 ]
  %37 = tail call i64 @strlen(i8* nonnull %4) #16
  %38 = add i64 %37, 1
  %39 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %20, i64 0, i32 2, i64 119
  %40 = ptrtoint i8* %39 to i64
  %41 = ptrtoint i8* %36 to i64
  %42 = sub i64 %40, %41
  %43 = icmp ult i64 %38, %42
  br i1 %43, label %44, label %46

; <label>:44:                                     ; preds = %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %36, i8* nonnull %4, i64 %38, i32 1, i1 false) #13
  %45 = getelementptr inbounds i8, i8* %36, i64 %38
  store i8 0, i8* %45, align 1
  br label %75

; <label>:46:                                     ; preds = %35
  %47 = icmp ult i64 %38, 119
  %48 = add i64 %37, 18
  %49 = and i64 %48, -8
  %50 = select i1 %47, i64 128, i64 %49
  %51 = tail call noalias i8* @malloc(i64 %50) #13
  %52 = icmp eq i8* %51, null
  br i1 %52, label %59, label %53

; <label>:53:                                     ; preds = %46
  %54 = bitcast i8* %51 to %struct.tm_zone**
  store %struct.tm_zone* null, %struct.tm_zone** %54, align 8
  %55 = getelementptr inbounds i8, i8* %51, i64 8
  store i8 1, i8* %55, align 8
  %56 = getelementptr inbounds i8, i8* %51, i64 9
  store i8 0, i8* %56, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* nonnull %4, i64 %38, i32 1, i1 false) #13
  %57 = getelementptr inbounds i8, i8* %56, i64 %38
  store i8 0, i8* %57, align 1
  %58 = bitcast %struct.tm_zone* %20 to i8**
  store i8* %51, i8** %58, align 8
  store i8 0, i8* %55, align 8
  br label %75

; <label>:59:                                     ; preds = %46
  %60 = bitcast %struct.tm_zone* %20 to i8**
  store i8* null, i8** %60, align 8
  br label %77

; <label>:61:                                     ; preds = %32, %27
  %62 = tail call i64 @strlen(i8* nonnull %24) #16
  %63 = add i64 %62, 1
  %64 = getelementptr inbounds i8, i8* %24, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %23

; <label>:67:                                     ; preds = %61
  %68 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %20, i64 0, i32 0
  %69 = load %struct.tm_zone*, %struct.tm_zone** %68, align 8
  %70 = icmp eq %struct.tm_zone* %69, null
  %71 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %69, i64 0, i32 2, i64 0
  %72 = select i1 %70, i8* %64, i8* %71
  %73 = select i1 %70, %struct.tm_zone* %20, %struct.tm_zone* %69
  br label %18

; <label>:74:                                     ; preds = %23
  br label %75

; <label>:75:                                     ; preds = %74, %44, %53, %13
  %76 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.434, i64 0, i64 0), %13 ], [ %56, %53 ], [ %36, %44 ], [ %24, %74 ]
  store i8* %76, i8** %3, align 8
  br label %77

; <label>:77:                                     ; preds = %59, %9, %2, %75
  %78 = phi i1 [ true, %75 ], [ true, %2 ], [ true, %9 ], [ false, %59 ]
  ret i1 %78
}

; Function Attrs: nounwind
declare i32 @setenv(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @unsetenv(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @tzset() local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i64 @mktime_z(%struct.tm_zone*, %struct.tm* nonnull) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.tm, align 8
  %5 = icmp eq %struct.tm_zone* %0, null
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %2
  %7 = tail call i64 @timegm(%struct.tm* nonnull %1) #13
  br label %106

; <label>:8:                                      ; preds = %2
  %9 = tail call fastcc %struct.tm_zone* @set_tz(%struct.tm_zone* nonnull %0)
  %10 = icmp eq %struct.tm_zone* %9, null
  br i1 %10, label %106, label %11

; <label>:11:                                     ; preds = %8
  %12 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #13
  %13 = tail call i64 @rpl_mktime(%struct.tm* nonnull %1) #13
  store i64 %13, i64* %3, align 8
  %14 = bitcast %struct.tm* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %14) #13
  %15 = icmp eq i64 %13, -1
  br i1 %15, label %16, label %68

; <label>:16:                                     ; preds = %11
  %17 = call %struct.tm* @localtime_r(i64* nonnull %3, %struct.tm* nonnull %4) #13
  %18 = icmp eq %struct.tm* %17, null
  br i1 %18, label %71, label %19

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = xor i32 %23, %21
  %25 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = xor i32 %28, %26
  %30 = or i32 %29, %24
  %31 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = xor i32 %34, %32
  %36 = or i32 %30, %35
  %37 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = xor i32 %40, %38
  %42 = or i32 %36, %41
  %43 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 4
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 4
  %46 = load i32, i32* %45, align 8
  %47 = xor i32 %46, %44
  %48 = or i32 %42, %47
  %49 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 5
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 5
  %52 = load i32, i32* %51, align 4
  %53 = xor i32 %52, %50
  %54 = or i32 %48, %53
  %55 = getelementptr inbounds %struct.tm, %struct.tm* %1, i64 0, i32 8
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.tm, %struct.tm* %4, i64 0, i32 8
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %56, 0
  %60 = icmp eq i32 %58, 0
  %61 = xor i1 %59, %60
  %62 = or i32 %58, %56
  %63 = icmp sgt i32 %62, -1
  %64 = and i1 %63, %61
  %65 = zext i1 %64 to i32
  %66 = or i32 %54, %65
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

; <label>:68:                                     ; preds = %19, %11
  %69 = call fastcc zeroext i1 @save_abbr(%struct.tm_zone* nonnull %0, %struct.tm* nonnull %1)
  br i1 %69, label %71, label %70

; <label>:70:                                     ; preds = %68
  store i64 -1, i64* %3, align 8
  br label %71

; <label>:71:                                     ; preds = %19, %16, %70, %68
  %72 = icmp eq %struct.tm_zone* %9, inttoptr (i64 1 to %struct.tm_zone*)
  br i1 %72, label %104, label %73

; <label>:73:                                     ; preds = %71
  %74 = tail call i32* @__errno_location() #1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %9, i64 0, i32 1
  %77 = load i8, i8* %76, align 8
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %82, label %79

; <label>:79:                                     ; preds = %73
  %80 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %9, i64 0, i32 2, i64 0
  %81 = call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0), i8* nonnull %80, i32 1) #13
  br label %84

; <label>:82:                                     ; preds = %73
  %83 = call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i64 0, i64 0)) #13
  br label %84

; <label>:84:                                     ; preds = %82, %79
  %85 = phi i32 [ %81, %79 ], [ %83, %82 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

; <label>:87:                                     ; preds = %84
  call void @tzset() #13
  br label %90

; <label>:88:                                     ; preds = %84
  %89 = load i32, i32* %74, align 4
  br label %90

; <label>:90:                                     ; preds = %88, %87
  %91 = phi i1 [ false, %88 ], [ true, %87 ]
  %92 = phi i32 [ %89, %88 ], [ %75, %87 ]
  %93 = icmp ult %struct.tm_zone* %9, inttoptr (i64 2 to %struct.tm_zone*)
  br i1 %93, label %102, label %94

; <label>:94:                                     ; preds = %90
  br label %95

; <label>:95:                                     ; preds = %94, %95
  %96 = phi %struct.tm_zone* [ %98, %95 ], [ %9, %94 ]
  %97 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %96, i64 0, i32 0
  %98 = load %struct.tm_zone*, %struct.tm_zone** %97, align 8
  %99 = bitcast %struct.tm_zone* %96 to i8*
  call void @free(i8* %99) #13
  %100 = icmp eq %struct.tm_zone* %98, null
  br i1 %100, label %101, label %95

; <label>:101:                                    ; preds = %95
  br label %102

; <label>:102:                                    ; preds = %101, %90
  store i32 %92, i32* %74, align 4
  br i1 %91, label %104, label %103

; <label>:103:                                    ; preds = %102
  call void @llvm.lifetime.end(i64 56, i8* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #13
  br label %106

; <label>:104:                                    ; preds = %71, %102
  %105 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end(i64 56, i8* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #13
  br label %106

; <label>:106:                                    ; preds = %8, %103, %104, %6
  %107 = phi i64 [ %7, %6 ], [ %105, %104 ], [ -1, %103 ], [ -1, %8 ]
  ret i64 %107
}

; Function Attrs: nounwind
declare i64 @timegm(%struct.tm*) local_unnamed_addr #2

; Function Attrs: nounwind readnone sspstrong uwtable
define zeroext i1 @acl_errno_valid(i32) local_unnamed_addr #12 {
  switch i32 %0, label %2 [
    i32 16, label %3
    i32 22, label %3
    i32 38, label %3
    i32 95, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %2
  %4 = phi i1 [ true, %2 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ false, %1 ]
  ret i1 %4
}

; Function Attrs: nounwind sspstrong uwtable
define i32 @close_stream(%struct._IO_FILE*) local_unnamed_addr #0 {
  %2 = tail call i64 @__fpending(%struct._IO_FILE* %0) #13
  %3 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 32
  %6 = icmp eq i32 %5, 0
  %7 = tail call i32 @rpl_fclose(%struct._IO_FILE* %0) #13
  %8 = icmp ne i32 %7, 0
  br i1 %6, label %9, label %19

; <label>:9:                                      ; preds = %1
  %10 = xor i1 %8, true
  %11 = icmp ne i64 %2, 0
  %12 = or i1 %11, %10
  %13 = sext i1 %8 to i32
  br i1 %12, label %22, label %14

; <label>:14:                                     ; preds = %9
  %15 = tail call i32* @__errno_location() #1
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, 9
  %18 = sext i1 %17 to i32
  br label %22

; <label>:19:                                     ; preds = %1
  br i1 %8, label %22, label %20

; <label>:20:                                     ; preds = %19
  %21 = tail call i32* @__errno_location() #1
  store i32 0, i32* %21, align 4
  br label %22

; <label>:22:                                     ; preds = %9, %14, %19, %20
  %23 = phi i32 [ -1, %20 ], [ -1, %19 ], [ %18, %14 ], [ %13, %9 ]
  ret i32 %23
}

; Function Attrs: nounwind
declare i64 @__fpending(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i8* @locale_charset() local_unnamed_addr #0 {
  %1 = alloca [51 x i8], align 16
  %2 = alloca [51 x i8], align 16
  %3 = tail call i8* @nl_langinfo(i32 14) #13
  %4 = icmp eq i8* %3, null
  %5 = select i1 %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.443, i64 0, i64 0), i8* %3
  %6 = load volatile i8*, i8** @charset_aliases, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %127

; <label>:8:                                      ; preds = %0
  %9 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3.444, i64 0, i64 0)) #13
  %10 = icmp eq i8* %9, null
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %8
  %12 = load i8, i8* %9, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11, %8
  br label %15

; <label>:15:                                     ; preds = %14, %11
  %16 = phi i8* [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.445, i64 0, i64 0), %14 ], [ %9, %11 ]
  %17 = tail call i64 @strlen(i8* nonnull %16) #16
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

; <label>:19:                                     ; preds = %15
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 47
  br label %24

; <label>:24:                                     ; preds = %19, %15
  %25 = phi i1 [ false, %15 ], [ %23, %19 ]
  %26 = zext i1 %25 to i64
  %27 = add i64 %17, 14
  %28 = add i64 %27, %26
  %29 = tail call noalias i8* @malloc(i64 %28) #13
  %30 = icmp eq i8* %29, null
  br i1 %30, label %125, label %31

; <label>:31:                                     ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %29, i8* %16, i64 %17, i32 1, i1 false) #13
  %32 = getelementptr inbounds i8, i8* %29, i64 %17
  br i1 %25, label %33, label %35

; <label>:33:                                     ; preds = %31
  store i8 47, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.446, i64 0, i64 0), i64 14, i32 1, i1 false) #13
  br label %37

; <label>:35:                                     ; preds = %31
  %36 = getelementptr inbounds i8, i8* %32, i64 %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.446, i64 0, i64 0), i64 14, i32 1, i1 false) #13
  br label %37

; <label>:37:                                     ; preds = %35, %33
  %38 = tail call i32 (i8*, i32, ...) @open(i8* nonnull %29, i32 131072) #13
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %123, label %40

; <label>:40:                                     ; preds = %37
  %41 = tail call %struct._IO_FILE* @fdopen(i32 %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.447, i64 0, i64 0)) #13
  %42 = icmp eq %struct._IO_FILE* %41, null
  br i1 %42, label %48, label %43

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds [51 x i8], [51 x i8]* %1, i64 0, i64 0
  %45 = getelementptr inbounds [51 x i8], [51 x i8]* %2, i64 0, i64 0
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i64 0, i32 1
  %47 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i64 0, i32 2
  br label %50

; <label>:48:                                     ; preds = %40
  %49 = tail call i32 @close(i32 %38) #13
  br label %123

; <label>:50:                                     ; preds = %111, %43
  %51 = phi i64 [ %112, %111 ], [ 0, %43 ]
  %52 = phi i8* [ %113, %111 ], [ null, %43 ]
  call void @llvm.lifetime.start(i64 51, i8* nonnull %44) #13
  call void @llvm.lifetime.start(i64 51, i8* nonnull %45) #13
  %53 = load i8*, i8** %46, align 8
  %54 = load i8*, i8** %47, align 8
  %55 = icmp ult i8* %53, %54
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %50
  %57 = call i32 @__uflow(%struct._IO_FILE* nonnull %41) #13
  br label %62

; <label>:58:                                     ; preds = %50
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %59, i8** %46, align 8
  %60 = load i8, i8* %53, align 1
  %61 = zext i8 %60 to i32
  br label %62

; <label>:62:                                     ; preds = %58, %56
  %63 = phi i32 [ %57, %56 ], [ %61, %58 ]
  switch i32 %63, label %77 [
    i32 -1, label %115
    i32 32, label %111
    i32 10, label %111
    i32 9, label %111
    i32 35, label %64
  ]

; <label>:64:                                     ; preds = %62
  br label %65

; <label>:65:                                     ; preds = %64, %75
  %66 = load i8*, i8** %46, align 8
  %67 = load i8*, i8** %47, align 8
  %68 = icmp ult i8* %66, %67
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %65
  %70 = call i32 @__uflow(%struct._IO_FILE* nonnull %41) #13
  br label %75

; <label>:71:                                     ; preds = %65
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %72, i8** %46, align 8
  %73 = load i8, i8* %66, align 1
  %74 = zext i8 %73 to i32
  br label %75

; <label>:75:                                     ; preds = %71, %69
  %76 = phi i32 [ %70, %69 ], [ %74, %71 ]
  switch i32 %76, label %65 [
    i32 -1, label %114
    i32 10, label %110
  ]

; <label>:77:                                     ; preds = %62
  %78 = call i32 @ungetc(i32 %63, %struct._IO_FILE* nonnull %41) #13
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* nonnull %41, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.448, i64 0, i64 0), i8* nonnull %44, i8* nonnull %45) #13
  %80 = icmp slt i32 %79, 2
  br i1 %80, label %115, label %81

; <label>:81:                                     ; preds = %77
  %82 = call i64 @strlen(i8* nonnull %44) #16
  %83 = call i64 @strlen(i8* nonnull %45) #16
  %84 = icmp eq i64 %51, 0
  %85 = add i64 %82, 1
  %86 = add i64 %85, %83
  %87 = add i64 %86, 1
  br i1 %84, label %88, label %91

; <label>:88:                                     ; preds = %81
  %89 = add i64 %86, 2
  %90 = call noalias i8* @malloc(i64 %89) #13
  br label %95

; <label>:91:                                     ; preds = %81
  %92 = add i64 %87, %51
  %93 = add i64 %92, 1
  %94 = call i8* @realloc(i8* %52, i64 %93) #13
  br label %95

; <label>:95:                                     ; preds = %91, %88
  %96 = phi i64 [ %87, %88 ], [ %92, %91 ]
  %97 = phi i8* [ %90, %88 ], [ %94, %91 ]
  %98 = icmp eq i8* %97, null
  br i1 %98, label %99, label %100

; <label>:99:                                     ; preds = %95
  call void @free(i8* %52) #13
  br label %116

; <label>:100:                                    ; preds = %95
  %101 = getelementptr inbounds i8, i8* %97, i64 %96
  %102 = xor i64 %83, -1
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = xor i64 %82, -1
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %105, i1 false) #13
  %107 = call i8* @__strcpy_chk(i8* nonnull %105, i8* nonnull %44, i64 %106) #13
  %108 = call i64 @llvm.objectsize.i64.p0i8(i8* nonnull %103, i1 false) #13
  %109 = call i8* @__strcpy_chk(i8* nonnull %103, i8* nonnull %45, i64 %108) #13
  br label %111

; <label>:110:                                    ; preds = %75
  br label %111

; <label>:111:                                    ; preds = %110, %100, %62, %62, %62
  %112 = phi i64 [ %96, %100 ], [ %51, %62 ], [ %51, %62 ], [ %51, %62 ], [ %51, %110 ]
  %113 = phi i8* [ %97, %100 ], [ %52, %62 ], [ %52, %62 ], [ %52, %62 ], [ %52, %110 ]
  call void @llvm.lifetime.end(i64 51, i8* nonnull %45) #13
  call void @llvm.lifetime.end(i64 51, i8* nonnull %44) #13
  br label %50

; <label>:114:                                    ; preds = %75
  br label %116

; <label>:115:                                    ; preds = %62, %77
  br label %116

; <label>:116:                                    ; preds = %115, %114, %99
  %117 = phi i64 [ 0, %99 ], [ %51, %114 ], [ %51, %115 ]
  %118 = phi i8* [ null, %99 ], [ %52, %114 ], [ %52, %115 ]
  call void @llvm.lifetime.end(i64 51, i8* nonnull %45) #13
  call void @llvm.lifetime.end(i64 51, i8* nonnull %44) #13
  %119 = call i32 @rpl_fclose(%struct._IO_FILE* nonnull %41) #13
  %120 = icmp eq i64 %117, 0
  br i1 %120, label %123, label %121

; <label>:121:                                    ; preds = %116
  %122 = getelementptr inbounds i8, i8* %118, i64 %117
  store i8 0, i8* %122, align 1
  br label %123

; <label>:123:                                    ; preds = %121, %116, %48, %37
  %124 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.443, i64 0, i64 0), %37 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.443, i64 0, i64 0), %48 ], [ %118, %121 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.443, i64 0, i64 0), %116 ]
  call void @free(i8* %29) #13
  br label %125

; <label>:125:                                    ; preds = %123, %24
  %126 = phi i8* [ %124, %123 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.443, i64 0, i64 0), %24 ]
  store volatile i8* %126, i8** @charset_aliases, align 8
  br label %127

; <label>:127:                                    ; preds = %0, %125
  %128 = phi i8* [ %6, %0 ], [ %126, %125 ]
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %157, label %131

; <label>:131:                                    ; preds = %127
  br label %132

; <label>:132:                                    ; preds = %131, %147
  %133 = phi i8 [ %154, %147 ], [ %129, %131 ]
  %134 = phi i8* [ %153, %147 ], [ %128, %131 ]
  %135 = call i32 @strcmp(i8* %5, i8* %134) #13
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %143, label %137

; <label>:137:                                    ; preds = %132
  %138 = icmp eq i8 %133, 42
  br i1 %138, label %139, label %147

; <label>:139:                                    ; preds = %137
  %140 = getelementptr inbounds i8, i8* %134, i64 1
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %147

; <label>:143:                                    ; preds = %139, %132
  %144 = call i64 @strlen(i8* %134) #16
  %145 = getelementptr inbounds i8, i8* %134, i64 %144
  %146 = getelementptr inbounds i8, i8* %145, i64 1
  br label %157

; <label>:147:                                    ; preds = %137, %139
  %148 = call i64 @strlen(i8* %134) #16
  %149 = add i64 %148, 1
  %150 = getelementptr inbounds i8, i8* %134, i64 %149
  %151 = call i64 @strlen(i8* %150) #16
  %152 = add i64 %151, 1
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %132

; <label>:156:                                    ; preds = %147
  br label %157

; <label>:157:                                    ; preds = %156, %127, %143
  %158 = phi i8* [ %146, %143 ], [ %5, %127 ], [ %5, %156 ]
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 0
  %161 = select i1 %160, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.449, i64 0, i64 0), i8* %158
  ret i8* %161
}

declare i32 @open(i8* nocapture readonly, i32, ...) local_unnamed_addr #5

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #2

declare i32 @close(i32) local_unnamed_addr #5

declare i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @ungetc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @fscanf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fclose(%struct._IO_FILE* nonnull) local_unnamed_addr #0 {
  %2 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #13
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %1
  %5 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  br label %24

; <label>:6:                                      ; preds = %1
  %7 = tail call i32 @__freading(%struct._IO_FILE* nonnull %0) #13
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %6
  %10 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #13
  %11 = tail call i64 @lseek(i32 %10, i64 0, i32 1) #13
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %9, %6
  %14 = tail call i32 @rpl_fflush(%struct._IO_FILE* nonnull %0) #13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %13, %9
  %17 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  br label %24

; <label>:18:                                     ; preds = %13
  %19 = tail call i32* @__errno_location() #1
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @fclose(%struct._IO_FILE* nonnull %0)
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %18
  store i32 %20, i32* %19, align 4
  br label %24

; <label>:24:                                     ; preds = %16, %23, %18, %4
  %25 = phi i32 [ %5, %4 ], [ -1, %23 ], [ %21, %18 ], [ %17, %16 ]
  ret i32 %25
}

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__freading(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @lseek(i32, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fflush(%struct._IO_FILE*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._IO_FILE* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = tail call i32 @__freading(%struct._IO_FILE* nonnull %0) #13
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %3, %1
  %7 = tail call i32 @fflush(%struct._IO_FILE* %0)
  br label %17

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 256
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %8
  %14 = tail call i32 @rpl_fseeko(%struct._IO_FILE* nonnull %0, i64 0, i32 1) #13
  br label %15

; <label>:15:                                     ; preds = %8, %13
  %16 = tail call i32 @fflush(%struct._IO_FILE* nonnull %0)
  br label %17

; <label>:17:                                     ; preds = %15, %6
  %18 = phi i32 [ %7, %6 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i32 @rpl_fseeko(%struct._IO_FILE* nocapture nonnull, i64, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  br i1 %8, label %9, label %28

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 4
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %11, %13
  br i1 %14, label %15, label %28

; <label>:15:                                     ; preds = %9
  %16 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 9
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %15
  %20 = tail call i32 @fileno(%struct._IO_FILE* nonnull %0) #13
  %21 = tail call i64 @lseek(i32 %20, i64 %1, i32 %2) #13
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, -17
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 21
  store i64 %21, i64* %27, align 8
  br label %30

; <label>:28:                                     ; preds = %15, %9, %3
  %29 = tail call i32 @fseeko(%struct._IO_FILE* nonnull %0, i64 %1, i32 %2)
  br label %30

; <label>:30:                                     ; preds = %23, %19, %28
  %31 = phi i32 [ %29, %28 ], [ 0, %23 ], [ -1, %19 ]
  ret i32 %31
}

; Function Attrs: nounwind
declare i32 @fseeko(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define i64 @mktime_internal(%struct.tm* nocapture, %struct.tm* (i64*, %struct.tm*)* nocapture, i64* nocapture) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %struct.tm, align 8
  %15 = alloca %struct.tm, align 8
  %16 = bitcast %struct.tm* %14 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %16) #13
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 8
  %30 = load i32, i32* %29, align 8
  %31 = srem i32 %26, 12
  %32 = lshr i32 %31, 31
  %33 = sdiv i32 %26, 12
  %34 = sub nsw i32 %33, %32
  %35 = sext i32 %28 to i64
  %36 = sext i32 %34 to i64
  %37 = add nsw i64 %36, %35
  %38 = and i64 %37, 3
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %3
  %41 = srem i64 %37, 100
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %47

; <label>:43:                                     ; preds = %40
  %44 = sdiv i64 %37, 100
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 1
  br label %47

; <label>:47:                                     ; preds = %3, %40, %43
  %48 = phi i1 [ false, %3 ], [ true, %40 ], [ %46, %43 ]
  %49 = zext i1 %48 to i64
  %50 = ashr i32 %31, 31
  %51 = and i32 %50, 12
  %52 = add nsw i32 %51, %31
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [2 x [13 x i16]], [2 x [13 x i16]]* @__mon_yday, i64 0, i64 %49, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i64
  %57 = sext i32 %24 to i64
  %58 = add nsw i64 %57, -1
  %59 = add nsw i64 %58, %56
  %60 = icmp sgt i32 %18, 0
  %61 = select i1 %60, i32 %18, i32 0
  %62 = icmp slt i32 %61, 59
  %63 = select i1 %62, i32 %61, i32 59
  %64 = load i64, i64* %2, align 8
  %65 = sub i64 0, %64
  %66 = lshr i64 %37, 2
  %67 = add nuw nsw i64 %66, 475
  %68 = sext i1 %39 to i64
  %69 = add i64 %67, %68
  %70 = trunc i64 %69 to i32
  %71 = sdiv i32 %70, 25
  %72 = srem i32 %70, 25
  %73 = lshr i32 %72, 31
  %74 = sub nsw i32 %71, %73
  %75 = ashr i32 %74, 2
  %76 = sub i32 %70, %74
  %77 = add i32 %76, %75
  %78 = add i32 %77, -477
  %79 = mul nsw i64 %37, 365
  %80 = add i64 %79, -25550
  %81 = sext i32 %78 to i64
  %82 = add i64 %80, %81
  %83 = add i64 %82, %59
  %84 = mul nsw i64 %83, 24
  %85 = sext i32 %22 to i64
  %86 = add i64 %84, %85
  %87 = mul nsw i64 %86, 60
  %88 = sext i32 %20 to i64
  %89 = add i64 %87, %88
  %90 = mul nsw i64 %89, 60
  %91 = zext i32 %63 to i64
  %92 = shl i64 %65, 32
  %93 = ashr exact i64 %92, 32
  %94 = sub nsw i64 %91, %93
  %95 = add i64 %94, %90
  %96 = bitcast i64* %9 to i8*
  %97 = bitcast i64* %7 to i8*
  %98 = bitcast i64* %8 to i8*
  %99 = getelementptr inbounds %struct.tm, %struct.tm* %14, i64 0, i32 8
  %100 = icmp slt i32 %30, 0
  %101 = icmp ne i32 %30, 0
  br label %102

; <label>:102:                                    ; preds = %231, %47
  %103 = phi i64 [ %95, %47 ], [ %212, %231 ]
  %104 = phi i32 [ 0, %47 ], [ %234, %231 ]
  %105 = phi i32 [ 6, %47 ], [ %229, %231 ]
  %106 = phi i64 [ %95, %47 ], [ %103, %231 ]
  %107 = phi i64 [ %95, %47 ], [ %106, %231 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %96) #13
  store i64 %103, i64* %9, align 8
  %108 = call %struct.tm* %1(i64* nonnull %9, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %96) #13
  %109 = icmp eq %struct.tm* %108, null
  br i1 %109, label %110, label %145

; <label>:110:                                    ; preds = %102
  %111 = icmp eq i64 %103, 0
  br i1 %111, label %207, label %112

; <label>:112:                                    ; preds = %110
  %113 = ashr i64 %103, 1
  %114 = and i64 %103, 1
  %115 = add nsw i64 %113, %114
  %116 = icmp eq i64 %115, 0
  %117 = icmp eq i64 %115, %103
  %118 = or i1 %116, %117
  br i1 %118, label %119, label %201

; <label>:119:                                    ; preds = %112
  br label %120

; <label>:120:                                    ; preds = %119, %120
  %121 = phi i64 [ %133, %120 ], [ %115, %119 ]
  %122 = phi i64 [ %127, %120 ], [ 0, %119 ]
  %123 = phi i64 [ %126, %120 ], [ %103, %119 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %97) #13
  store i64 %121, i64* %7, align 8
  %124 = call %struct.tm* %1(i64* nonnull %7, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %97) #13
  %125 = icmp eq %struct.tm* %124, null
  %126 = select i1 %125, i64 %121, i64 %123
  %127 = select i1 %125, i64 %122, i64 %121
  %128 = ashr i64 %127, 1
  %129 = ashr i64 %126, 1
  %130 = add nsw i64 %128, %129
  %131 = or i64 %127, %126
  %132 = and i64 %131, 1
  %133 = add nsw i64 %130, %132
  %134 = icmp eq i64 %133, %127
  %135 = icmp eq i64 %133, %126
  %136 = or i1 %134, %135
  br i1 %136, label %120, label %137

; <label>:137:                                    ; preds = %120
  %138 = icmp ne i64 %127, 0
  %139 = and i1 %125, %138
  br i1 %139, label %140, label %142

; <label>:140:                                    ; preds = %137
  call void @llvm.lifetime.start(i64 8, i8* nonnull %98) #13
  store i64 %127, i64* %8, align 8
  %141 = call %struct.tm* %1(i64* nonnull %8, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %98) #13
  br label %142

; <label>:142:                                    ; preds = %137, %140
  %143 = phi %struct.tm* [ %141, %140 ], [ %124, %137 ]
  %144 = icmp eq %struct.tm* %143, null
  br i1 %144, label %201, label %145

; <label>:145:                                    ; preds = %102, %142
  %146 = phi %struct.tm* [ %143, %142 ], [ %108, %102 ]
  %147 = getelementptr inbounds %struct.tm, %struct.tm* %146, i64 0, i32 5
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %struct.tm, %struct.tm* %146, i64 0, i32 7
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds %struct.tm, %struct.tm* %146, i64 0, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.tm, %struct.tm* %146, i64 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %struct.tm, %struct.tm* %146, i64 0, i32 0
  %156 = load i32, i32* %155, align 8
  %157 = sext i32 %148 to i64
  %158 = lshr i64 %157, 2
  %159 = add nuw nsw i64 %158, 475
  %160 = and i32 %148, 3
  %161 = icmp eq i32 %160, 0
  %162 = sext i1 %161 to i64
  %163 = add i64 %159, %162
  %164 = trunc i64 %163 to i32
  %165 = sdiv i32 %164, 25
  %166 = srem i32 %164, 25
  %167 = lshr i32 %166, 31
  %168 = sub nsw i32 %165, %167
  %169 = ashr i32 %168, 2
  %170 = sub i32 %77, %164
  %171 = add i32 %170, %168
  %172 = sub i32 %171, %169
  %173 = sub nsw i64 %37, %157
  %174 = mul nsw i64 %173, 365
  %175 = sext i32 %150 to i64
  %176 = sext i32 %172 to i64
  %177 = sub nsw i64 %59, %175
  %178 = add i64 %177, %174
  %179 = add i64 %178, %176
  %180 = mul nsw i64 %179, 24
  %181 = sext i32 %152 to i64
  %182 = sub nsw i64 %85, %181
  %183 = add i64 %182, %180
  %184 = mul nsw i64 %183, 60
  %185 = sext i32 %154 to i64
  %186 = sub nsw i64 %88, %185
  %187 = add i64 %186, %184
  %188 = mul nsw i64 %187, 60
  %189 = sext i32 %156 to i64
  %190 = sub nsw i64 %91, %189
  %191 = add i64 %188, %190
  %192 = icmp slt i64 %191, 0
  br i1 %192, label %193, label %196

; <label>:193:                                    ; preds = %145
  %194 = sub nsw i64 -9223372036854775808, %191
  %195 = icmp sgt i64 %194, %103
  br i1 %195, label %201, label %199

; <label>:196:                                    ; preds = %145
  %197 = sub nsw i64 9223372036854775807, %191
  %198 = icmp slt i64 %197, %103
  br i1 %198, label %201, label %199

; <label>:199:                                    ; preds = %196, %193
  %200 = add i64 %191, %103
  br label %211

; <label>:201:                                    ; preds = %112, %196, %193, %142
  %202 = icmp slt i64 %103, 0
  br i1 %202, label %203, label %207

; <label>:203:                                    ; preds = %201
  %204 = icmp slt i64 %103, -9223372036854775806
  %205 = add nsw i64 %103, 1
  %206 = select i1 %204, i64 %205, i64 -9223372036854775808
  br label %211

; <label>:207:                                    ; preds = %110, %201
  %208 = icmp sgt i64 %103, 9223372036854775805
  %209 = add nsw i64 %103, -1
  %210 = select i1 %208, i64 %209, i64 9223372036854775807
  br label %211

; <label>:211:                                    ; preds = %199, %203, %207
  %212 = phi i64 [ %200, %199 ], [ %206, %203 ], [ %210, %207 ]
  %213 = icmp eq i64 %103, %212
  br i1 %213, label %235, label %214

; <label>:214:                                    ; preds = %211
  %215 = icmp ne i64 %103, %107
  %216 = icmp eq i64 %103, %106
  %217 = or i1 %216, %215
  br i1 %217, label %228, label %218

; <label>:218:                                    ; preds = %214
  %219 = load i32, i32* %99, align 8
  %220 = icmp slt i32 %219, 0
  br i1 %220, label %404, label %221

; <label>:221:                                    ; preds = %218
  %222 = icmp ne i32 %219, 0
  br i1 %100, label %223, label %226

; <label>:223:                                    ; preds = %221
  %224 = zext i1 %222 to i32
  %225 = icmp ugt i32 %104, %224
  br i1 %225, label %228, label %404

; <label>:226:                                    ; preds = %221
  %227 = xor i1 %101, %222
  br i1 %227, label %404, label %228

; <label>:228:                                    ; preds = %214, %223, %226
  %229 = add nsw i32 %105, -1
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %435, label %231

; <label>:231:                                    ; preds = %228
  %232 = load i32, i32* %99, align 8
  %233 = icmp ne i32 %232, 0
  %234 = zext i1 %233 to i32
  br label %102

; <label>:235:                                    ; preds = %211
  %236 = load i32, i32* %99, align 8
  %237 = icmp eq i32 %30, 0
  %238 = icmp eq i32 %236, 0
  %239 = xor i1 %237, %238
  %240 = or i32 %236, %30
  %241 = icmp sgt i32 %240, -1
  %242 = and i1 %241, %239
  br i1 %242, label %243, label %405

; <label>:243:                                    ; preds = %235
  %244 = bitcast %struct.tm* %15 to i8*
  %245 = bitcast i64* %6 to i8*
  %246 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 8
  %247 = bitcast i64* %4 to i8*
  %248 = bitcast i64* %5 to i8*
  br label %249

; <label>:249:                                    ; preds = %485, %243
  %250 = phi i64 [ 601200, %243 ], [ %486, %485 ]
  %251 = xor i64 %250, -9223372036854775808
  %252 = icmp slt i64 %103, %251
  br i1 %252, label %438, label %253

; <label>:253:                                    ; preds = %249
  %254 = sub i64 %103, %250
  call void @llvm.lifetime.start(i64 56, i8* nonnull %244) #13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %245) #13
  store i64 %254, i64* %6, align 8
  %255 = call %struct.tm* %1(i64* nonnull %6, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %245) #13
  %256 = icmp ne %struct.tm* %255, null
  %257 = icmp eq i64 %254, 0
  %258 = or i1 %257, %256
  br i1 %258, label %289, label %259

; <label>:259:                                    ; preds = %253
  %260 = ashr i64 %254, 1
  %261 = and i64 %254, 1
  %262 = add nsw i64 %260, %261
  %263 = icmp eq i64 %262, 0
  %264 = icmp eq i64 %262, %254
  %265 = or i1 %263, %264
  br i1 %265, label %266, label %289

; <label>:266:                                    ; preds = %259
  br label %267

; <label>:267:                                    ; preds = %266, %267
  %268 = phi i64 [ %280, %267 ], [ %262, %266 ]
  %269 = phi i64 [ %274, %267 ], [ 0, %266 ]
  %270 = phi i64 [ %273, %267 ], [ %254, %266 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %247) #13
  store i64 %268, i64* %4, align 8
  %271 = call %struct.tm* %1(i64* nonnull %4, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %247) #13
  %272 = icmp eq %struct.tm* %271, null
  %273 = select i1 %272, i64 %268, i64 %270
  %274 = select i1 %272, i64 %269, i64 %268
  %275 = ashr i64 %274, 1
  %276 = ashr i64 %273, 1
  %277 = add nsw i64 %275, %276
  %278 = or i64 %274, %273
  %279 = and i64 %278, 1
  %280 = add nsw i64 %277, %279
  %281 = icmp eq i64 %280, %274
  %282 = icmp eq i64 %280, %273
  %283 = or i1 %281, %282
  br i1 %283, label %267, label %284

; <label>:284:                                    ; preds = %267
  %285 = icmp ne i64 %274, 0
  %286 = and i1 %272, %285
  br i1 %286, label %287, label %289

; <label>:287:                                    ; preds = %284
  call void @llvm.lifetime.start(i64 8, i8* nonnull %248) #13
  store i64 %274, i64* %5, align 8
  %288 = call %struct.tm* %1(i64* nonnull %5, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %248) #13
  br label %289

; <label>:289:                                    ; preds = %253, %259, %284, %287
  %290 = load i32, i32* %246, align 8
  %291 = icmp eq i32 %290, 0
  %292 = xor i1 %237, %291
  %293 = or i32 %290, %30
  %294 = icmp sgt i32 %293, -1
  %295 = and i1 %294, %292
  br i1 %295, label %401, label %296

; <label>:296:                                    ; preds = %477, %289
  %297 = phi i64 [ %254, %289 ], [ %442, %477 ]
  %298 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 5
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 7
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 2
  %303 = load i32, i32* %302, align 8
  %304 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 1
  %305 = load i32, i32* %304, align 4
  %306 = getelementptr inbounds %struct.tm, %struct.tm* %15, i64 0, i32 0
  %307 = load i32, i32* %306, align 8
  %308 = sext i32 %299 to i64
  %309 = lshr i64 %308, 2
  %310 = add nuw nsw i64 %309, 475
  %311 = and i32 %299, 3
  %312 = icmp eq i32 %311, 0
  %313 = sext i1 %312 to i64
  %314 = add i64 %310, %313
  %315 = trunc i64 %314 to i32
  %316 = sdiv i32 %315, 25
  %317 = srem i32 %315, 25
  %318 = lshr i32 %317, 31
  %319 = sub nsw i32 %316, %318
  %320 = ashr i32 %319, 2
  %321 = sub i32 %77, %315
  %322 = add i32 %321, %319
  %323 = sub i32 %322, %320
  %324 = sub nsw i64 %37, %308
  %325 = mul nsw i64 %324, 365
  %326 = sext i32 %301 to i64
  %327 = sext i32 %323 to i64
  %328 = sub nsw i64 %59, %326
  %329 = add i64 %328, %325
  %330 = add i64 %329, %327
  %331 = mul nsw i64 %330, 24
  %332 = sext i32 %303 to i64
  %333 = sub nsw i64 %85, %332
  %334 = add i64 %333, %331
  %335 = mul nsw i64 %334, 60
  %336 = sext i32 %305 to i64
  %337 = sub nsw i64 %88, %336
  %338 = add i64 %337, %335
  %339 = mul nsw i64 %338, 60
  %340 = sext i32 %307 to i64
  %341 = sub nsw i64 %91, %340
  %342 = add i64 %339, %341
  %343 = icmp slt i64 %342, 0
  br i1 %343, label %344, label %347

; <label>:344:                                    ; preds = %296
  %345 = sub nsw i64 -9223372036854775808, %342
  %346 = icmp sgt i64 %345, %297
  br i1 %346, label %352, label %350

; <label>:347:                                    ; preds = %296
  %348 = sub nsw i64 9223372036854775807, %342
  %349 = icmp slt i64 %348, %297
  br i1 %349, label %352, label %350

; <label>:350:                                    ; preds = %347, %344
  %351 = add i64 %342, %297
  br label %362

; <label>:352:                                    ; preds = %347, %344
  %353 = icmp slt i64 %297, 0
  br i1 %353, label %354, label %358

; <label>:354:                                    ; preds = %352
  %355 = icmp slt i64 %297, -9223372036854775806
  %356 = add nsw i64 %297, 1
  %357 = select i1 %355, i64 %356, i64 -9223372036854775808
  br label %362

; <label>:358:                                    ; preds = %352
  %359 = icmp sgt i64 %297, 9223372036854775805
  %360 = add nsw i64 %297, -1
  %361 = select i1 %359, i64 %360, i64 9223372036854775807
  br label %362

; <label>:362:                                    ; preds = %350, %354, %358
  %363 = phi i64 [ %351, %350 ], [ %357, %354 ], [ %361, %358 ]
  %364 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %364) #13
  store i64 %363, i64* %12, align 8
  %365 = call %struct.tm* %1(i64* nonnull %12, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %364) #13
  %366 = icmp ne %struct.tm* %365, null
  %367 = icmp eq i64 %363, 0
  %368 = or i1 %367, %366
  br i1 %368, label %402, label %369

; <label>:369:                                    ; preds = %362
  %370 = ashr i64 %363, 1
  %371 = and i64 %363, 1
  %372 = add nsw i64 %370, %371
  %373 = icmp eq i64 %372, 0
  %374 = icmp eq i64 %372, %363
  %375 = or i1 %373, %374
  br i1 %375, label %376, label %402

; <label>:376:                                    ; preds = %369
  %377 = bitcast i64* %10 to i8*
  br label %378

; <label>:378:                                    ; preds = %378, %376
  %379 = phi i64 [ %372, %376 ], [ %391, %378 ]
  %380 = phi i64 [ 0, %376 ], [ %385, %378 ]
  %381 = phi i64 [ %363, %376 ], [ %384, %378 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %377) #13
  store i64 %379, i64* %10, align 8
  %382 = call %struct.tm* %1(i64* nonnull %10, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %377) #13
  %383 = icmp eq %struct.tm* %382, null
  %384 = select i1 %383, i64 %379, i64 %381
  %385 = select i1 %383, i64 %380, i64 %379
  %386 = ashr i64 %385, 1
  %387 = ashr i64 %384, 1
  %388 = add nsw i64 %386, %387
  %389 = or i64 %385, %384
  %390 = and i64 %389, 1
  %391 = add nsw i64 %388, %390
  %392 = icmp eq i64 %391, %385
  %393 = icmp eq i64 %391, %384
  %394 = or i1 %392, %393
  br i1 %394, label %378, label %395

; <label>:395:                                    ; preds = %378
  %396 = icmp ne i64 %385, 0
  %397 = and i1 %383, %396
  br i1 %397, label %398, label %402

; <label>:398:                                    ; preds = %395
  %399 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %399) #13
  store i64 %385, i64* %11, align 8
  %400 = call %struct.tm* %1(i64* nonnull %11, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %399) #13
  br label %402

; <label>:401:                                    ; preds = %289
  call void @llvm.lifetime.end(i64 56, i8* nonnull %244) #13
  br label %438

; <label>:402:                                    ; preds = %362, %369, %395, %398
  call void @llvm.lifetime.end(i64 56, i8* nonnull %244) #13
  br label %405

; <label>:403:                                    ; preds = %485
  br label %405

; <label>:404:                                    ; preds = %223, %218, %226
  br label %405

; <label>:405:                                    ; preds = %404, %403, %402, %235
  %406 = phi i64 [ %103, %235 ], [ %363, %402 ], [ %103, %403 ], [ %103, %404 ]
  %407 = add i64 %91, %90
  %408 = sub i64 %406, %407
  store i64 %408, i64* %2, align 8
  %409 = getelementptr inbounds %struct.tm, %struct.tm* %14, i64 0, i32 0
  %410 = load i32, i32* %409, align 8
  %411 = icmp eq i32 %18, %410
  br i1 %411, label %432, label %412

; <label>:412:                                    ; preds = %405
  %413 = icmp eq i32 %63, 0
  %414 = icmp eq i32 %410, 60
  %415 = and i1 %413, %414
  %416 = zext i1 %415 to i64
  %417 = sub nsw i64 %416, %91
  %418 = sext i32 %18 to i64
  %419 = add nsw i64 %417, %418
  %420 = icmp slt i64 %419, 0
  br i1 %420, label %421, label %424

; <label>:421:                                    ; preds = %412
  %422 = sub nsw i64 -9223372036854775808, %419
  %423 = icmp slt i64 %406, %422
  br i1 %423, label %436, label %427

; <label>:424:                                    ; preds = %412
  %425 = sub nsw i64 9223372036854775807, %419
  %426 = icmp slt i64 %425, %406
  br i1 %426, label %436, label %427

; <label>:427:                                    ; preds = %424, %421
  %428 = add i64 %419, %406
  %429 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %429) #13
  store i64 %428, i64* %13, align 8
  %430 = call %struct.tm* %1(i64* nonnull %13, %struct.tm* nonnull %14) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %429) #13
  %431 = icmp eq %struct.tm* %430, null
  br i1 %431, label %436, label %432

; <label>:432:                                    ; preds = %427, %405
  %433 = phi i64 [ %406, %405 ], [ %428, %427 ]
  %434 = bitcast %struct.tm* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %434, i8* nonnull %16, i64 56, i32 8, i1 false)
  br label %436

; <label>:435:                                    ; preds = %228
  br label %436

; <label>:436:                                    ; preds = %435, %421, %424, %427, %432
  %437 = phi i64 [ %433, %432 ], [ -1, %427 ], [ -1, %424 ], [ -1, %421 ], [ -1, %435 ]
  call void @llvm.lifetime.end(i64 56, i8* nonnull %16) #13
  ret i64 %437

; <label>:438:                                    ; preds = %401, %249
  %439 = sub nuw nsw i64 9223372036854775807, %250
  %440 = icmp slt i64 %439, %103
  br i1 %440, label %485, label %441

; <label>:441:                                    ; preds = %438
  %442 = add i64 %250, %103
  call void @llvm.lifetime.start(i64 56, i8* nonnull %244) #13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %245) #13
  store i64 %442, i64* %6, align 8
  %443 = call %struct.tm* %1(i64* nonnull %6, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %245) #13
  %444 = icmp ne %struct.tm* %443, null
  %445 = icmp eq i64 %442, 0
  %446 = or i1 %445, %444
  br i1 %446, label %477, label %447

; <label>:447:                                    ; preds = %441
  %448 = ashr i64 %442, 1
  %449 = and i64 %442, 1
  %450 = add nsw i64 %448, %449
  %451 = icmp eq i64 %450, 0
  %452 = icmp eq i64 %450, %442
  %453 = or i1 %451, %452
  br i1 %453, label %454, label %477

; <label>:454:                                    ; preds = %447
  br label %455

; <label>:455:                                    ; preds = %454, %455
  %456 = phi i64 [ %468, %455 ], [ %450, %454 ]
  %457 = phi i64 [ %462, %455 ], [ 0, %454 ]
  %458 = phi i64 [ %461, %455 ], [ %442, %454 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %247) #13
  store i64 %456, i64* %4, align 8
  %459 = call %struct.tm* %1(i64* nonnull %4, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %247) #13
  %460 = icmp eq %struct.tm* %459, null
  %461 = select i1 %460, i64 %456, i64 %458
  %462 = select i1 %460, i64 %457, i64 %456
  %463 = ashr i64 %462, 1
  %464 = ashr i64 %461, 1
  %465 = add nsw i64 %463, %464
  %466 = or i64 %462, %461
  %467 = and i64 %466, 1
  %468 = add nsw i64 %465, %467
  %469 = icmp eq i64 %468, %462
  %470 = icmp eq i64 %468, %461
  %471 = or i1 %469, %470
  br i1 %471, label %455, label %472

; <label>:472:                                    ; preds = %455
  %473 = icmp ne i64 %462, 0
  %474 = and i1 %460, %473
  br i1 %474, label %475, label %477

; <label>:475:                                    ; preds = %472
  call void @llvm.lifetime.start(i64 8, i8* nonnull %248) #13
  store i64 %462, i64* %5, align 8
  %476 = call %struct.tm* %1(i64* nonnull %5, %struct.tm* nonnull %15) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %248) #13
  br label %477

; <label>:477:                                    ; preds = %475, %472, %447, %441
  %478 = load i32, i32* %246, align 8
  %479 = icmp eq i32 %478, 0
  %480 = xor i1 %237, %479
  %481 = or i32 %478, %30
  %482 = icmp sgt i32 %481, -1
  %483 = and i1 %482, %480
  br i1 %483, label %484, label %296

; <label>:484:                                    ; preds = %477
  call void @llvm.lifetime.end(i64 56, i8* nonnull %244) #13
  br label %485

; <label>:485:                                    ; preds = %484, %438
  %486 = add nuw nsw i64 %250, 601200
  %487 = icmp slt i64 %486, 268828200
  br i1 %487, label %249, label %403
}

; Function Attrs: nounwind sspstrong uwtable
define i64 @rpl_mktime(%struct.tm* nocapture nonnull) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.tm, align 8
  %13 = alloca %struct.tm, align 8
  tail call void @tzset() #13
  %14 = bitcast %struct.tm* %12 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %14) #13
  %15 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 8
  %28 = load i32, i32* %27, align 8
  %29 = srem i32 %24, 12
  %30 = lshr i32 %29, 31
  %31 = sdiv i32 %24, 12
  %32 = sub nsw i32 %31, %30
  %33 = sext i32 %26 to i64
  %34 = sext i32 %32 to i64
  %35 = add nsw i64 %34, %33
  %36 = and i64 %35, 3
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %1
  %39 = srem i64 %35, 100
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %38
  %42 = sdiv i64 %35, 100
  %43 = and i64 %42, 3
  %44 = icmp eq i64 %43, 1
  br label %45

; <label>:45:                                     ; preds = %41, %38, %1
  %46 = phi i1 [ false, %1 ], [ true, %38 ], [ %44, %41 ]
  %47 = zext i1 %46 to i64
  %48 = ashr i32 %29, 31
  %49 = and i32 %48, 12
  %50 = add nsw i32 %49, %29
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [2 x [13 x i16]], [2 x [13 x i16]]* @__mon_yday, i64 0, i64 %47, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i64
  %55 = sext i32 %22 to i64
  %56 = add nsw i64 %55, -1
  %57 = add nsw i64 %56, %54
  %58 = icmp sgt i32 %16, 0
  %59 = select i1 %58, i32 %16, i32 0
  %60 = icmp slt i32 %59, 59
  %61 = select i1 %60, i32 %59, i32 59
  %62 = load i64, i64* @localtime_offset, align 8
  %63 = sub i64 0, %62
  %64 = lshr i64 %35, 2
  %65 = add nuw nsw i64 %64, 475
  %66 = sext i1 %37 to i64
  %67 = add i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = sdiv i32 %68, 25
  %70 = srem i32 %68, 25
  %71 = lshr i32 %70, 31
  %72 = sub nsw i32 %69, %71
  %73 = ashr i32 %72, 2
  %74 = sub i32 %68, %72
  %75 = add i32 %74, %73
  %76 = add i32 %75, -477
  %77 = mul nsw i64 %35, 365
  %78 = add i64 %77, -25550
  %79 = sext i32 %76 to i64
  %80 = add i64 %78, %79
  %81 = add i64 %80, %57
  %82 = mul nsw i64 %81, 24
  %83 = sext i32 %20 to i64
  %84 = add i64 %82, %83
  %85 = mul nsw i64 %84, 60
  %86 = sext i32 %18 to i64
  %87 = add i64 %85, %86
  %88 = mul nsw i64 %87, 60
  %89 = zext i32 %61 to i64
  %90 = shl i64 %63, 32
  %91 = ashr exact i64 %90, 32
  %92 = sub nsw i64 %89, %91
  %93 = add i64 %88, %92
  %94 = bitcast i64* %7 to i8*
  %95 = bitcast i64* %5 to i8*
  %96 = bitcast i64* %6 to i8*
  %97 = getelementptr inbounds %struct.tm, %struct.tm* %12, i64 0, i32 8
  %98 = icmp slt i32 %28, 0
  %99 = icmp ne i32 %28, 0
  br label %100

; <label>:100:                                    ; preds = %229, %45
  %101 = phi i64 [ %93, %45 ], [ %210, %229 ]
  %102 = phi i32 [ 0, %45 ], [ %232, %229 ]
  %103 = phi i32 [ 6, %45 ], [ %227, %229 ]
  %104 = phi i64 [ %93, %45 ], [ %101, %229 ]
  %105 = phi i64 [ %93, %45 ], [ %104, %229 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %94) #13
  store i64 %101, i64* %7, align 8
  %106 = call %struct.tm* @localtime_r(i64* nonnull %7, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %94) #13
  %107 = icmp eq %struct.tm* %106, null
  br i1 %107, label %108, label %143

; <label>:108:                                    ; preds = %100
  %109 = icmp eq i64 %101, 0
  br i1 %109, label %205, label %110

; <label>:110:                                    ; preds = %108
  %111 = ashr i64 %101, 1
  %112 = and i64 %101, 1
  %113 = add nsw i64 %111, %112
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %113, %101
  %116 = or i1 %114, %115
  br i1 %116, label %117, label %199

; <label>:117:                                    ; preds = %110
  br label %118

; <label>:118:                                    ; preds = %117, %118
  %119 = phi i64 [ %131, %118 ], [ %113, %117 ]
  %120 = phi i64 [ %125, %118 ], [ 0, %117 ]
  %121 = phi i64 [ %124, %118 ], [ %101, %117 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %95) #13
  store i64 %119, i64* %5, align 8
  %122 = call %struct.tm* @localtime_r(i64* nonnull %5, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %95) #13
  %123 = icmp eq %struct.tm* %122, null
  %124 = select i1 %123, i64 %119, i64 %121
  %125 = select i1 %123, i64 %120, i64 %119
  %126 = ashr i64 %125, 1
  %127 = ashr i64 %124, 1
  %128 = add nsw i64 %126, %127
  %129 = or i64 %125, %124
  %130 = and i64 %129, 1
  %131 = add nsw i64 %128, %130
  %132 = icmp eq i64 %131, %125
  %133 = icmp eq i64 %131, %124
  %134 = or i1 %132, %133
  br i1 %134, label %118, label %135

; <label>:135:                                    ; preds = %118
  %136 = icmp ne i64 %125, 0
  %137 = and i1 %123, %136
  br i1 %137, label %138, label %140

; <label>:138:                                    ; preds = %135
  call void @llvm.lifetime.start(i64 8, i8* nonnull %96) #13
  store i64 %125, i64* %6, align 8
  %139 = call %struct.tm* @localtime_r(i64* nonnull %6, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %96) #13
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi %struct.tm* [ %139, %138 ], [ %122, %135 ]
  %142 = icmp eq %struct.tm* %141, null
  br i1 %142, label %199, label %143

; <label>:143:                                    ; preds = %140, %100
  %144 = phi %struct.tm* [ %141, %140 ], [ %106, %100 ]
  %145 = getelementptr inbounds %struct.tm, %struct.tm* %144, i64 0, i32 5
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %struct.tm, %struct.tm* %144, i64 0, i32 7
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %struct.tm, %struct.tm* %144, i64 0, i32 2
  %150 = load i32, i32* %149, align 8
  %151 = getelementptr inbounds %struct.tm, %struct.tm* %144, i64 0, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %struct.tm, %struct.tm* %144, i64 0, i32 0
  %154 = load i32, i32* %153, align 8
  %155 = sext i32 %146 to i64
  %156 = lshr i64 %155, 2
  %157 = add nuw nsw i64 %156, 475
  %158 = and i32 %146, 3
  %159 = icmp eq i32 %158, 0
  %160 = sext i1 %159 to i64
  %161 = add i64 %157, %160
  %162 = trunc i64 %161 to i32
  %163 = sdiv i32 %162, 25
  %164 = srem i32 %162, 25
  %165 = lshr i32 %164, 31
  %166 = sub nsw i32 %163, %165
  %167 = ashr i32 %166, 2
  %168 = sub i32 %75, %162
  %169 = add i32 %168, %166
  %170 = sub i32 %169, %167
  %171 = sub nsw i64 %35, %155
  %172 = mul nsw i64 %171, 365
  %173 = sext i32 %148 to i64
  %174 = sext i32 %170 to i64
  %175 = sub nsw i64 %57, %173
  %176 = add i64 %175, %172
  %177 = add i64 %176, %174
  %178 = mul nsw i64 %177, 24
  %179 = sext i32 %150 to i64
  %180 = sub nsw i64 %83, %179
  %181 = add i64 %180, %178
  %182 = mul nsw i64 %181, 60
  %183 = sext i32 %152 to i64
  %184 = sub nsw i64 %86, %183
  %185 = add i64 %184, %182
  %186 = mul nsw i64 %185, 60
  %187 = sext i32 %154 to i64
  %188 = sub nsw i64 %89, %187
  %189 = add i64 %186, %188
  %190 = icmp slt i64 %189, 0
  br i1 %190, label %191, label %194

; <label>:191:                                    ; preds = %143
  %192 = sub nsw i64 -9223372036854775808, %189
  %193 = icmp sgt i64 %192, %101
  br i1 %193, label %199, label %197

; <label>:194:                                    ; preds = %143
  %195 = sub nsw i64 9223372036854775807, %189
  %196 = icmp slt i64 %195, %101
  br i1 %196, label %199, label %197

; <label>:197:                                    ; preds = %194, %191
  %198 = add i64 %189, %101
  br label %209

; <label>:199:                                    ; preds = %194, %191, %140, %110
  %200 = icmp slt i64 %101, 0
  br i1 %200, label %201, label %205

; <label>:201:                                    ; preds = %199
  %202 = icmp slt i64 %101, -9223372036854775806
  %203 = add nsw i64 %101, 1
  %204 = select i1 %202, i64 %203, i64 -9223372036854775808
  br label %209

; <label>:205:                                    ; preds = %199, %108
  %206 = icmp sgt i64 %101, 9223372036854775805
  %207 = add nsw i64 %101, -1
  %208 = select i1 %206, i64 %207, i64 9223372036854775807
  br label %209

; <label>:209:                                    ; preds = %205, %201, %197
  %210 = phi i64 [ %198, %197 ], [ %204, %201 ], [ %208, %205 ]
  %211 = icmp eq i64 %101, %210
  br i1 %211, label %233, label %212

; <label>:212:                                    ; preds = %209
  %213 = icmp ne i64 %101, %105
  %214 = icmp eq i64 %101, %104
  %215 = or i1 %214, %213
  br i1 %215, label %226, label %216

; <label>:216:                                    ; preds = %212
  %217 = load i32, i32* %97, align 8
  %218 = icmp slt i32 %217, 0
  br i1 %218, label %402, label %219

; <label>:219:                                    ; preds = %216
  %220 = icmp ne i32 %217, 0
  br i1 %98, label %221, label %224

; <label>:221:                                    ; preds = %219
  %222 = zext i1 %220 to i32
  %223 = icmp ugt i32 %102, %222
  br i1 %223, label %226, label %402

; <label>:224:                                    ; preds = %219
  %225 = xor i1 %99, %220
  br i1 %225, label %402, label %226

; <label>:226:                                    ; preds = %224, %221, %212
  %227 = add nsw i32 %103, -1
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %483, label %229

; <label>:229:                                    ; preds = %226
  %230 = load i32, i32* %97, align 8
  %231 = icmp ne i32 %230, 0
  %232 = zext i1 %231 to i32
  br label %100

; <label>:233:                                    ; preds = %209
  %234 = load i32, i32* %97, align 8
  %235 = icmp eq i32 %28, 0
  %236 = icmp eq i32 %234, 0
  %237 = xor i1 %235, %236
  %238 = or i32 %234, %28
  %239 = icmp sgt i32 %238, -1
  %240 = and i1 %239, %237
  br i1 %240, label %241, label %403

; <label>:241:                                    ; preds = %233
  %242 = bitcast %struct.tm* %13 to i8*
  %243 = bitcast i64* %4 to i8*
  %244 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 8
  %245 = bitcast i64* %2 to i8*
  %246 = bitcast i64* %3 to i8*
  br label %247

; <label>:247:                                    ; preds = %480, %241
  %248 = phi i64 [ 601200, %241 ], [ %481, %480 ]
  %249 = xor i64 %248, -9223372036854775808
  %250 = icmp slt i64 %101, %249
  br i1 %250, label %433, label %251

; <label>:251:                                    ; preds = %247
  %252 = sub i64 %101, %248
  call void @llvm.lifetime.start(i64 56, i8* nonnull %242) #13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %243) #13
  store i64 %252, i64* %4, align 8
  %253 = call %struct.tm* @localtime_r(i64* nonnull %4, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %243) #13
  %254 = icmp ne %struct.tm* %253, null
  %255 = icmp eq i64 %252, 0
  %256 = or i1 %255, %254
  br i1 %256, label %287, label %257

; <label>:257:                                    ; preds = %251
  %258 = ashr i64 %252, 1
  %259 = and i64 %252, 1
  %260 = add nsw i64 %258, %259
  %261 = icmp eq i64 %260, 0
  %262 = icmp eq i64 %260, %252
  %263 = or i1 %261, %262
  br i1 %263, label %264, label %287

; <label>:264:                                    ; preds = %257
  br label %265

; <label>:265:                                    ; preds = %264, %265
  %266 = phi i64 [ %278, %265 ], [ %260, %264 ]
  %267 = phi i64 [ %272, %265 ], [ 0, %264 ]
  %268 = phi i64 [ %271, %265 ], [ %252, %264 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %245) #13
  store i64 %266, i64* %2, align 8
  %269 = call %struct.tm* @localtime_r(i64* nonnull %2, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %245) #13
  %270 = icmp eq %struct.tm* %269, null
  %271 = select i1 %270, i64 %266, i64 %268
  %272 = select i1 %270, i64 %267, i64 %266
  %273 = ashr i64 %272, 1
  %274 = ashr i64 %271, 1
  %275 = add nsw i64 %273, %274
  %276 = or i64 %272, %271
  %277 = and i64 %276, 1
  %278 = add nsw i64 %275, %277
  %279 = icmp eq i64 %278, %272
  %280 = icmp eq i64 %278, %271
  %281 = or i1 %279, %280
  br i1 %281, label %265, label %282

; <label>:282:                                    ; preds = %265
  %283 = icmp ne i64 %272, 0
  %284 = and i1 %270, %283
  br i1 %284, label %285, label %287

; <label>:285:                                    ; preds = %282
  call void @llvm.lifetime.start(i64 8, i8* nonnull %246) #13
  store i64 %272, i64* %3, align 8
  %286 = call %struct.tm* @localtime_r(i64* nonnull %3, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %246) #13
  br label %287

; <label>:287:                                    ; preds = %285, %282, %257, %251
  %288 = load i32, i32* %244, align 8
  %289 = icmp eq i32 %288, 0
  %290 = xor i1 %235, %289
  %291 = or i32 %288, %28
  %292 = icmp sgt i32 %291, -1
  %293 = and i1 %292, %290
  br i1 %293, label %399, label %294

; <label>:294:                                    ; preds = %472, %287
  %295 = phi i64 [ %252, %287 ], [ %437, %472 ]
  %296 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 5
  %297 = load i32, i32* %296, align 4
  %298 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 7
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 2
  %301 = load i32, i32* %300, align 8
  %302 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 1
  %303 = load i32, i32* %302, align 4
  %304 = getelementptr inbounds %struct.tm, %struct.tm* %13, i64 0, i32 0
  %305 = load i32, i32* %304, align 8
  %306 = sext i32 %297 to i64
  %307 = lshr i64 %306, 2
  %308 = add nuw nsw i64 %307, 475
  %309 = and i32 %297, 3
  %310 = icmp eq i32 %309, 0
  %311 = sext i1 %310 to i64
  %312 = add i64 %308, %311
  %313 = trunc i64 %312 to i32
  %314 = sdiv i32 %313, 25
  %315 = srem i32 %313, 25
  %316 = lshr i32 %315, 31
  %317 = sub nsw i32 %314, %316
  %318 = ashr i32 %317, 2
  %319 = sub i32 %75, %313
  %320 = add i32 %319, %317
  %321 = sub i32 %320, %318
  %322 = sub nsw i64 %35, %306
  %323 = mul nsw i64 %322, 365
  %324 = sext i32 %299 to i64
  %325 = sext i32 %321 to i64
  %326 = sub nsw i64 %57, %324
  %327 = add i64 %326, %323
  %328 = add i64 %327, %325
  %329 = mul nsw i64 %328, 24
  %330 = sext i32 %301 to i64
  %331 = sub nsw i64 %83, %330
  %332 = add i64 %331, %329
  %333 = mul nsw i64 %332, 60
  %334 = sext i32 %303 to i64
  %335 = sub nsw i64 %86, %334
  %336 = add i64 %335, %333
  %337 = mul nsw i64 %336, 60
  %338 = sext i32 %305 to i64
  %339 = sub nsw i64 %89, %338
  %340 = add i64 %337, %339
  %341 = icmp slt i64 %340, 0
  br i1 %341, label %342, label %345

; <label>:342:                                    ; preds = %294
  %343 = sub nsw i64 -9223372036854775808, %340
  %344 = icmp sgt i64 %343, %295
  br i1 %344, label %350, label %348

; <label>:345:                                    ; preds = %294
  %346 = sub nsw i64 9223372036854775807, %340
  %347 = icmp slt i64 %346, %295
  br i1 %347, label %350, label %348

; <label>:348:                                    ; preds = %345, %342
  %349 = add i64 %340, %295
  br label %360

; <label>:350:                                    ; preds = %345, %342
  %351 = icmp slt i64 %295, 0
  br i1 %351, label %352, label %356

; <label>:352:                                    ; preds = %350
  %353 = icmp slt i64 %295, -9223372036854775806
  %354 = add nsw i64 %295, 1
  %355 = select i1 %353, i64 %354, i64 -9223372036854775808
  br label %360

; <label>:356:                                    ; preds = %350
  %357 = icmp sgt i64 %295, 9223372036854775805
  %358 = add nsw i64 %295, -1
  %359 = select i1 %357, i64 %358, i64 9223372036854775807
  br label %360

; <label>:360:                                    ; preds = %356, %352, %348
  %361 = phi i64 [ %349, %348 ], [ %355, %352 ], [ %359, %356 ]
  %362 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %362) #13
  store i64 %361, i64* %10, align 8
  %363 = call %struct.tm* @localtime_r(i64* nonnull %10, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %362) #13
  %364 = icmp ne %struct.tm* %363, null
  %365 = icmp eq i64 %361, 0
  %366 = or i1 %365, %364
  br i1 %366, label %400, label %367

; <label>:367:                                    ; preds = %360
  %368 = ashr i64 %361, 1
  %369 = and i64 %361, 1
  %370 = add nsw i64 %368, %369
  %371 = icmp eq i64 %370, 0
  %372 = icmp eq i64 %370, %361
  %373 = or i1 %371, %372
  br i1 %373, label %374, label %400

; <label>:374:                                    ; preds = %367
  %375 = bitcast i64* %8 to i8*
  br label %376

; <label>:376:                                    ; preds = %376, %374
  %377 = phi i64 [ %370, %374 ], [ %389, %376 ]
  %378 = phi i64 [ 0, %374 ], [ %383, %376 ]
  %379 = phi i64 [ %361, %374 ], [ %382, %376 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %375) #13
  store i64 %377, i64* %8, align 8
  %380 = call %struct.tm* @localtime_r(i64* nonnull %8, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %375) #13
  %381 = icmp eq %struct.tm* %380, null
  %382 = select i1 %381, i64 %377, i64 %379
  %383 = select i1 %381, i64 %378, i64 %377
  %384 = ashr i64 %383, 1
  %385 = ashr i64 %382, 1
  %386 = add nsw i64 %384, %385
  %387 = or i64 %383, %382
  %388 = and i64 %387, 1
  %389 = add nsw i64 %386, %388
  %390 = icmp eq i64 %389, %383
  %391 = icmp eq i64 %389, %382
  %392 = or i1 %390, %391
  br i1 %392, label %376, label %393

; <label>:393:                                    ; preds = %376
  %394 = icmp ne i64 %383, 0
  %395 = and i1 %381, %394
  br i1 %395, label %396, label %400

; <label>:396:                                    ; preds = %393
  %397 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %397) #13
  store i64 %383, i64* %9, align 8
  %398 = call %struct.tm* @localtime_r(i64* nonnull %9, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %397) #13
  br label %400

; <label>:399:                                    ; preds = %287
  call void @llvm.lifetime.end(i64 56, i8* nonnull %242) #13
  br label %433

; <label>:400:                                    ; preds = %396, %393, %367, %360
  call void @llvm.lifetime.end(i64 56, i8* nonnull %242) #13
  br label %403

; <label>:401:                                    ; preds = %480
  br label %403

; <label>:402:                                    ; preds = %216, %221, %224
  br label %403

; <label>:403:                                    ; preds = %402, %401, %400, %233
  %404 = phi i64 [ %101, %233 ], [ %361, %400 ], [ %101, %401 ], [ %101, %402 ]
  %405 = add i64 %88, %89
  %406 = sub i64 %404, %405
  store i64 %406, i64* @localtime_offset, align 8
  %407 = getelementptr inbounds %struct.tm, %struct.tm* %12, i64 0, i32 0
  %408 = load i32, i32* %407, align 8
  %409 = icmp eq i32 %16, %408
  br i1 %409, label %430, label %410

; <label>:410:                                    ; preds = %403
  %411 = icmp eq i32 %61, 0
  %412 = icmp eq i32 %408, 60
  %413 = and i1 %411, %412
  %414 = zext i1 %413 to i64
  %415 = sub nsw i64 %414, %89
  %416 = sext i32 %16 to i64
  %417 = add nsw i64 %415, %416
  %418 = icmp slt i64 %417, 0
  br i1 %418, label %419, label %422

; <label>:419:                                    ; preds = %410
  %420 = sub nsw i64 -9223372036854775808, %417
  %421 = icmp slt i64 %404, %420
  br i1 %421, label %484, label %425

; <label>:422:                                    ; preds = %410
  %423 = sub nsw i64 9223372036854775807, %417
  %424 = icmp slt i64 %423, %404
  br i1 %424, label %484, label %425

; <label>:425:                                    ; preds = %422, %419
  %426 = add i64 %417, %404
  %427 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %427) #13
  store i64 %426, i64* %11, align 8
  %428 = call %struct.tm* @localtime_r(i64* nonnull %11, %struct.tm* nonnull %12) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %427) #13
  %429 = icmp eq %struct.tm* %428, null
  br i1 %429, label %484, label %430

; <label>:430:                                    ; preds = %425, %403
  %431 = phi i64 [ %404, %403 ], [ %426, %425 ]
  %432 = bitcast %struct.tm* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %432, i8* nonnull %14, i64 56, i32 8, i1 false) #13
  br label %484

; <label>:433:                                    ; preds = %399, %247
  %434 = sub nuw nsw i64 9223372036854775807, %248
  %435 = icmp slt i64 %434, %101
  br i1 %435, label %480, label %436

; <label>:436:                                    ; preds = %433
  %437 = add i64 %248, %101
  call void @llvm.lifetime.start(i64 56, i8* nonnull %242) #13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %243) #13
  store i64 %437, i64* %4, align 8
  %438 = call %struct.tm* @localtime_r(i64* nonnull %4, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %243) #13
  %439 = icmp ne %struct.tm* %438, null
  %440 = icmp eq i64 %437, 0
  %441 = or i1 %440, %439
  br i1 %441, label %472, label %442

; <label>:442:                                    ; preds = %436
  %443 = ashr i64 %437, 1
  %444 = and i64 %437, 1
  %445 = add nsw i64 %443, %444
  %446 = icmp eq i64 %445, 0
  %447 = icmp eq i64 %445, %437
  %448 = or i1 %446, %447
  br i1 %448, label %449, label %472

; <label>:449:                                    ; preds = %442
  br label %450

; <label>:450:                                    ; preds = %449, %450
  %451 = phi i64 [ %463, %450 ], [ %445, %449 ]
  %452 = phi i64 [ %457, %450 ], [ 0, %449 ]
  %453 = phi i64 [ %456, %450 ], [ %437, %449 ]
  call void @llvm.lifetime.start(i64 8, i8* nonnull %245) #13
  store i64 %451, i64* %2, align 8
  %454 = call %struct.tm* @localtime_r(i64* nonnull %2, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %245) #13
  %455 = icmp eq %struct.tm* %454, null
  %456 = select i1 %455, i64 %451, i64 %453
  %457 = select i1 %455, i64 %452, i64 %451
  %458 = ashr i64 %457, 1
  %459 = ashr i64 %456, 1
  %460 = add nsw i64 %458, %459
  %461 = or i64 %457, %456
  %462 = and i64 %461, 1
  %463 = add nsw i64 %460, %462
  %464 = icmp eq i64 %463, %457
  %465 = icmp eq i64 %463, %456
  %466 = or i1 %464, %465
  br i1 %466, label %450, label %467

; <label>:467:                                    ; preds = %450
  %468 = icmp ne i64 %457, 0
  %469 = and i1 %455, %468
  br i1 %469, label %470, label %472

; <label>:470:                                    ; preds = %467
  call void @llvm.lifetime.start(i64 8, i8* nonnull %246) #13
  store i64 %457, i64* %3, align 8
  %471 = call %struct.tm* @localtime_r(i64* nonnull %3, %struct.tm* nonnull %13) #13
  call void @llvm.lifetime.end(i64 8, i8* nonnull %246) #13
  br label %472

; <label>:472:                                    ; preds = %470, %467, %442, %436
  %473 = load i32, i32* %244, align 8
  %474 = icmp eq i32 %473, 0
  %475 = xor i1 %235, %474
  %476 = or i32 %473, %28
  %477 = icmp sgt i32 %476, -1
  %478 = and i1 %477, %475
  br i1 %478, label %479, label %294

; <label>:479:                                    ; preds = %472
  call void @llvm.lifetime.end(i64 56, i8* nonnull %242) #13
  br label %480

; <label>:480:                                    ; preds = %479, %433
  %481 = add nuw nsw i64 %248, 601200
  %482 = icmp slt i64 %481, 268828200
  br i1 %482, label %247, label %401

; <label>:483:                                    ; preds = %226
  br label %484

; <label>:484:                                    ; preds = %483, %419, %422, %425, %430
  %485 = phi i64 [ %431, %430 ], [ -1, %425 ], [ -1, %422 ], [ -1, %419 ], [ -1, %483 ]
  call void @llvm.lifetime.end(i64 56, i8* nonnull %14) #13
  ret i64 %485
}

attributes #0 = { nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { inlinehint nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readonly }
attributes #17 = { nounwind returns_twice }
attributes #18 = { cold }
